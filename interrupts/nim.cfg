# for RISC-V RV32 standalone

# nim c --nimcache=nimcache --embedsrc:on src.nim

# clang produced smaller binary than gcc
# comment out to use gcc
cc = clang

# Note
# The riscv64-unknown-elf-gcc in gcc-riscv64-unknown-elf package should work but it will fail to find some include files.
# To avoid such bothering, I recommend to install gnu-toolchain from sources.
# Ref. https://github.com/riscv-collab/riscv-gnu-toolchain

# install ld.lld to compile by using clang as followed
# sudo apt install lld

cpu:riscv32
os:standalone
define:release
gc:none
noMain:on

# default is speed
# opt:speed
# opt:size
# opt:none

# riscv32.standalone.gcc.exe = "riscv64-unknown-elf-gcc"
# riscv32.standalone.gcc.linkerexe = "riscv64-unknown-elf-ld"
riscv32.standalone.gcc.exe = "riscv32-unknown-elf-gcc"
riscv32.standalone.gcc.linkerexe = "riscv32-unknown-elf-ld"

# remove unused functions
gcc.options.always = "-march=rv32imc -mabi=ilp32 -ffunction-sections -fdata-sections"
# -lgcc not worked for me
# gcc.options.linker = "-m elf32lriscv -T src/linker.ld --gc-sections $(riscv64-unknown-elf-gcc -print-libgcc-file-name)"
gcc.options.linker = "-T src/linker.ld --gc-sections $(riscv32-unknown-elf-gcc -print-libgcc-file-name)"

riscv32.standalone.clang.exe = "clang"
riscv32.standalone.clang.linkerexe = "clang"
# clang.options.always = "-target riscv32 -march=rv32imac -mabi=ilp32 --sysroot=$(riscv64-unknown-elf-gcc -print-sysroot) -flto"
# clang.options.linker = "-T src/linker.ld -target riscv32 -march=rv32imac -mabi=ilp32 --sysroot=$(riscv64-unknown-elf-gcc -print-sysroot) -L$(dirname $(riscv64-unknown-elf-gcc -print-libgcc-file-name)) -flto"
clang.options.always = "-target riscv32 -march=rv32imac -mabi=ilp32 --sysroot=$(riscv32-unknown-elf-gcc -print-sysroot) -flto"
clang.options.linker = "-T src/linker.ld -target riscv32 -march=rv32imac -mabi=ilp32 --sysroot=$(riscv32-unknown-elf-gcc -print-sysroot) -L$(dirname $(riscv32-unknown-elf-gcc -print-libgcc-file-name)) -flto"
