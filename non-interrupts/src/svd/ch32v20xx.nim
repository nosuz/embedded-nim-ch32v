# Peripheral access API for CH32V20XX microcontrollers (generated using svd2nim)

import std/volatile
import std/bitops
import uncheckedenums

export volatile
export uncheckedenums

{.hint[name]: off.}

when NimMajor < 2:
  {.experimental: "overloadableEnums".}

# Some information about this device.
const DEVICE* = "CH32V20xx"
const QINGKEV4_REV* = 0x0000
const MPU_PRESENT* = false
const FPU_PRESENT* = false
const VTOR_PRESENT* = true
const NVIC_PRIO_BITS* = 2
const Vendor_SysTickConfig* = false

################################################################################
# Interrupt Number Definition
################################################################################
type IRQn* = enum
# #### CPU Core Exception Numbers ##############################################
# Unknown CPU, svd2nim could not generate CPU exception numbers

# #### Device Peripheral Interrupts ############################################
  irqWWDG              =   16 # Window Watchdog interrupt
  irqPVD               =   17 # PVD through EXTI line detection interrupt
  irqTAMPER            =   18 # Tamper interrupt
  irqRTC               =   19 # RTC global interrupt
  irqFLASH             =   20 # Flash global interrupt
  irqRCC               =   21 # RCC global interrupt
  irqEXTI0             =   22 # EXTI Line0 interrupt
  irqEXTI1             =   23 # EXTI Line1 interrupt
  irqEXTI2             =   24 # EXTI Line2 interrupt
  irqEXTI3             =   25 # EXTI Line3 interrupt
  irqEXTI4             =   26 # EXTI Line4 interrupt
  irqDMA1_CH1          =   27 # DMA1 Channel1 global interrupt
  irqDMA1_CH2          =   28 # DMA1 Channel2 global interrupt
  irqDMA1_CH3          =   29 # DMA1 Channel3 global interrupt
  irqDMA1_CH4          =   30 # DMA1 Channel4 global interrupt
  irqDMA1_CH5          =   31 # DMA1 Channel5 global interrupt
  irqDMA1_CH6          =   32 # DMA1 Channel6 global interrupt
  irqDMA1_CH7          =   33 # DMA1 Channel7 global interrupt
  irqADC1_2            =   34 # ADC global interrupt
  irqUSB_HP_CAN1_TX    =   35 # CAN1 TX interrupts
  irqUSB_LP_CAN1_RX0   =   36 # CAN1 RX0 interrupts
  irqCAN1_RX1          =   37 # CAN1 RX1 interrupt
  irqCAN1_SCE          =   38 # CAN1 SCE interrupt
  irqEXTI9_5           =   39 # EXTI Line[9:5] interrupts
  irqTIM1_BRK          =   40 # TIM1 Break interrupt
  irqTIM1_UP           =   41 # TIM1 Update interrupt
  irqTIM1_TRG_COM      =   42 # TIM1 Trigger and Commutation interrupts
  irqTIM1_CC           =   43 # TIM1 Capture Compare interrupt
  irqTIM2              =   44 # TIM2 global interrupt
  irqTIM3              =   45 # TIM3 global interrupt
  irqTIM4              =   46 # TIM4 global interrupt
  irqI2C1_EV           =   47 # I2C1 event interrupt
  irqI2C1_ER           =   48 # I2C1 error interrupt
  irqI2C2_EV           =   49 # I2C2 event interrupt
  irqI2C2_ER           =   50 # I2C2 error interrupt
  irqSPI1              =   51 # SPI1 global interrupt
  irqSPI2              =   52 # SPI2 global interrupt
  irqUSART1            =   53 # USART1 global interrupt
  irqUSART2            =   54 # USART2 global interrupt
  irqUSART3            =   55 # USART3 global interrupt
  irqEXTI15_10         =   56 # EXTI Line[15:10] interrupts
  irqRTCAlarm          =   57 # RTC Alarms through EXTI line interrupt
  irqUSBWakeUp         =   58 # USB Device WakeUp from suspend through EXTI Line Interrupt
  irqTIM8_BRK          =   59 # TIM8 Break interrupt
  irqTIM8_UP           =   60 # TIM8 Update interrupt
  irqTIM8_TRG_COM      =   61 # TIM8 Trigger and Commutation interrupts
  irqTIM8_CC           =   62 # TIM8 Capture Compare interrupt
  irqTIM5              =   66 # TIM5 global interrupt
  irqSPI3              =   67 # SPI3 global interrupt
  irqUART4             =   68 # UART4 global interrupt
  irqUART5             =   69 # UART5 global interrupt
  irqETH               =   77 # Ethernet global interrupt
  irqETH_WKUP          =   78 # Ethernet Wakeup through EXTI line interrupt
  irqOTG_FS            =   83 # OTG_FS
  irqUSBHSWakeup       =   84 # USBHSWakeup
  irqUSBHS             =   85 # USBHS
  irqUART6             =   87 # UART6 global interrupt
  irqUART7             =   88 # UART7 global interrupt
  irqUART8             =   89 # UART8 global interrupt
  irqTIM9_BRK          =   90 # TIM9 Break interrupt
  irqTIM9_UP           =   91 # TIM9 Update interrupt
  irqTIM9_TRG_COM      =   92 # TIM9 Trigger and Commutation interrupts
  irqTIM9_CC           =   93 # TIM9 Capture Compare interrupt
  irqTIM10_BRK         =   94 # TIM10 Break interrupt
  irqTIM10_UP          =   95 # TIM10 Update interrupt
  irqTIM10_TRG_COM     =   96 # TIM10 Trigger and Commutation interrupts
  irqTIM10_CC          =   97 # TIM10 Capture Compare interrupt

################################################################################
# Type definitions for peripheral registers
################################################################################
type USB_EP0R_Type* = object
  loc: uint

type USB_EP1R_Type* = object
  loc: uint

type USB_EP2R_Type* = object
  loc: uint

type USB_EP3R_Type* = object
  loc: uint

type USB_EP4R_Type* = object
  loc: uint

type USB_EP5R_Type* = object
  loc: uint

type USB_EP6R_Type* = object
  loc: uint

type USB_EP7R_Type* = object
  loc: uint

type USB_CNTR_Type* = object
  loc: uint

type USB_ISTR_Type* = object
  loc: uint

type USB_FNR_Type* = object
  loc: uint

type USB_DADDR_Type* = object
  loc: uint

type USB_BTABLE_Type* = object
  loc: uint

type USB_Type* = object
  EP0R*: USB_EP0R_Type
  EP1R*: USB_EP1R_Type
  EP2R*: USB_EP2R_Type
  EP3R*: USB_EP3R_Type
  EP4R*: USB_EP4R_Type
  EP5R*: USB_EP5R_Type
  EP6R*: USB_EP6R_Type
  EP7R*: USB_EP7R_Type
  CNTR*: USB_CNTR_Type
  ISTR*: USB_ISTR_Type
  FNR*: USB_FNR_Type
  DADDR*: USB_DADDR_Type
  BTABLE*: USB_BTABLE_Type

type CAN1_CTLR_Type* = object
  loc: uint

type CAN1_STATR_Type* = object
  loc: uint

type CAN1_TSTATR_Type* = object
  loc: uint

type CAN1_RFIFO0_Type* = object
  loc: uint

type CAN1_RFIFO1_Type* = object
  loc: uint

type CAN1_INTENR_Type* = object
  loc: uint

type CAN1_ERRSR_Type* = object
  loc: uint

type CAN1_BTIMR_Type* = object
  loc: uint

type CAN1_TXMIR0_Type* = object
  loc: uint

type CAN1_TXMDTR0_Type* = object
  loc: uint

type CAN1_TXMDLR0_Type* = object
  loc: uint

type CAN1_TXMDHR0_Type* = object
  loc: uint

type CAN1_TXMIR1_Type* = object
  loc: uint

type CAN1_TXMDTR1_Type* = object
  loc: uint

type CAN1_TXMDLR1_Type* = object
  loc: uint

type CAN1_TXMDHR1_Type* = object
  loc: uint

type CAN1_TXMIR2_Type* = object
  loc: uint

type CAN1_TXMDTR2_Type* = object
  loc: uint

type CAN1_TXMDLR2_Type* = object
  loc: uint

type CAN1_TXMDHR2_Type* = object
  loc: uint

type CAN1_RXMIR0_Type* = object
  loc: uint

type CAN1_RXMDTR0_Type* = object
  loc: uint

type CAN1_RXMDLR0_Type* = object
  loc: uint

type CAN1_RXMDHR0_Type* = object
  loc: uint

type CAN1_RXMIR1_Type* = object
  loc: uint

type CAN1_RXMDTR1_Type* = object
  loc: uint

type CAN1_RXMDLR1_Type* = object
  loc: uint

type CAN1_RXMDHR1_Type* = object
  loc: uint

type CAN1_FCTLR_Type* = object
  loc: uint

type CAN1_FMCFGR_Type* = object
  loc: uint

type CAN1_FSCFGR_Type* = object
  loc: uint

type CAN1_FAFIFOR_Type* = object
  loc: uint

type CAN1_FWR_Type* = object
  loc: uint

type CAN1_F0R1_Type* = object
  loc: uint

type CAN1_F0R2_Type* = object
  loc: uint

type CAN1_F1R1_Type* = object
  loc: uint

type CAN1_F1R2_Type* = object
  loc: uint

type CAN1_F2R1_Type* = object
  loc: uint

type CAN1_F2R2_Type* = object
  loc: uint

type CAN1_F3R1_Type* = object
  loc: uint

type CAN1_F3R2_Type* = object
  loc: uint

type CAN1_F4R1_Type* = object
  loc: uint

type CAN1_F4R2_Type* = object
  loc: uint

type CAN1_F5R1_Type* = object
  loc: uint

type CAN1_F5R2_Type* = object
  loc: uint

type CAN1_F6R1_Type* = object
  loc: uint

type CAN1_F6R2_Type* = object
  loc: uint

type CAN1_F7R1_Type* = object
  loc: uint

type CAN1_F7R2_Type* = object
  loc: uint

type CAN1_F8R1_Type* = object
  loc: uint

type CAN1_F8R2_Type* = object
  loc: uint

type CAN1_F9R1_Type* = object
  loc: uint

type CAN1_F9R2_Type* = object
  loc: uint

type CAN1_F10R1_Type* = object
  loc: uint

type CAN1_F10R2_Type* = object
  loc: uint

type CAN1_F11R1_Type* = object
  loc: uint

type CAN1_F11R2_Type* = object
  loc: uint

type CAN1_F12R1_Type* = object
  loc: uint

type CAN1_F12R2_Type* = object
  loc: uint

type CAN1_F13R1_Type* = object
  loc: uint

type CAN1_F13R2_Type* = object
  loc: uint

type CAN1_F14R1_Type* = object
  loc: uint

type CAN1_F14R2_Type* = object
  loc: uint

type CAN1_F15R1_Type* = object
  loc: uint

type CAN1_F15R2_Type* = object
  loc: uint

type CAN1_F16R1_Type* = object
  loc: uint

type CAN1_F16R2_Type* = object
  loc: uint

type CAN1_F17R1_Type* = object
  loc: uint

type CAN1_F17R2_Type* = object
  loc: uint

type CAN1_F18R1_Type* = object
  loc: uint

type CAN1_F18R2_Type* = object
  loc: uint

type CAN1_F19R1_Type* = object
  loc: uint

type CAN1_F19R2_Type* = object
  loc: uint

type CAN1_F20R1_Type* = object
  loc: uint

type CAN1_F20R2_Type* = object
  loc: uint

type CAN1_F21R1_Type* = object
  loc: uint

type CAN1_F21R2_Type* = object
  loc: uint

type CAN1_F22R1_Type* = object
  loc: uint

type CAN1_F22R2_Type* = object
  loc: uint

type CAN1_F23R1_Type* = object
  loc: uint

type CAN1_F23R2_Type* = object
  loc: uint

type CAN1_F24R1_Type* = object
  loc: uint

type CAN1_F24R2_Type* = object
  loc: uint

type CAN1_F25R1_Type* = object
  loc: uint

type CAN1_F25R2_Type* = object
  loc: uint

type CAN1_F26R1_Type* = object
  loc: uint

type CAN1_F26R2_Type* = object
  loc: uint

type CAN1_F27R1_Type* = object
  loc: uint

type CAN1_F27R2_Type* = object
  loc: uint

type CAN1_Type* = object
  CTLR*: CAN1_CTLR_Type
  STATR*: CAN1_STATR_Type
  TSTATR*: CAN1_TSTATR_Type
  RFIFO0*: CAN1_RFIFO0_Type
  RFIFO1*: CAN1_RFIFO1_Type
  INTENR*: CAN1_INTENR_Type
  ERRSR*: CAN1_ERRSR_Type
  BTIMR*: CAN1_BTIMR_Type
  TXMIR0*: CAN1_TXMIR0_Type
  TXMDTR0*: CAN1_TXMDTR0_Type
  TXMDLR0*: CAN1_TXMDLR0_Type
  TXMDHR0*: CAN1_TXMDHR0_Type
  TXMIR1*: CAN1_TXMIR1_Type
  TXMDTR1*: CAN1_TXMDTR1_Type
  TXMDLR1*: CAN1_TXMDLR1_Type
  TXMDHR1*: CAN1_TXMDHR1_Type
  TXMIR2*: CAN1_TXMIR2_Type
  TXMDTR2*: CAN1_TXMDTR2_Type
  TXMDLR2*: CAN1_TXMDLR2_Type
  TXMDHR2*: CAN1_TXMDHR2_Type
  RXMIR0*: CAN1_RXMIR0_Type
  RXMDTR0*: CAN1_RXMDTR0_Type
  RXMDLR0*: CAN1_RXMDLR0_Type
  RXMDHR0*: CAN1_RXMDHR0_Type
  RXMIR1*: CAN1_RXMIR1_Type
  RXMDTR1*: CAN1_RXMDTR1_Type
  RXMDLR1*: CAN1_RXMDLR1_Type
  RXMDHR1*: CAN1_RXMDHR1_Type
  FCTLR*: CAN1_FCTLR_Type
  FMCFGR*: CAN1_FMCFGR_Type
  FSCFGR*: CAN1_FSCFGR_Type
  FAFIFOR*: CAN1_FAFIFOR_Type
  FWR*: CAN1_FWR_Type
  F0R1*: CAN1_F0R1_Type
  F0R2*: CAN1_F0R2_Type
  F1R1*: CAN1_F1R1_Type
  F1R2*: CAN1_F1R2_Type
  F2R1*: CAN1_F2R1_Type
  F2R2*: CAN1_F2R2_Type
  F3R1*: CAN1_F3R1_Type
  F3R2*: CAN1_F3R2_Type
  F4R1*: CAN1_F4R1_Type
  F4R2*: CAN1_F4R2_Type
  F5R1*: CAN1_F5R1_Type
  F5R2*: CAN1_F5R2_Type
  F6R1*: CAN1_F6R1_Type
  F6R2*: CAN1_F6R2_Type
  F7R1*: CAN1_F7R1_Type
  F7R2*: CAN1_F7R2_Type
  F8R1*: CAN1_F8R1_Type
  F8R2*: CAN1_F8R2_Type
  F9R1*: CAN1_F9R1_Type
  F9R2*: CAN1_F9R2_Type
  F10R1*: CAN1_F10R1_Type
  F10R2*: CAN1_F10R2_Type
  F11R1*: CAN1_F11R1_Type
  F11R2*: CAN1_F11R2_Type
  F12R1*: CAN1_F12R1_Type
  F12R2*: CAN1_F12R2_Type
  F13R1*: CAN1_F13R1_Type
  F13R2*: CAN1_F13R2_Type
  F14R1*: CAN1_F14R1_Type
  F14R2*: CAN1_F14R2_Type
  F15R1*: CAN1_F15R1_Type
  F15R2*: CAN1_F15R2_Type
  F16R1*: CAN1_F16R1_Type
  F16R2*: CAN1_F16R2_Type
  F17R1*: CAN1_F17R1_Type
  F17R2*: CAN1_F17R2_Type
  F18R1*: CAN1_F18R1_Type
  F18R2*: CAN1_F18R2_Type
  F19R1*: CAN1_F19R1_Type
  F19R2*: CAN1_F19R2_Type
  F20R1*: CAN1_F20R1_Type
  F20R2*: CAN1_F20R2_Type
  F21R1*: CAN1_F21R1_Type
  F21R2*: CAN1_F21R2_Type
  F22R1*: CAN1_F22R1_Type
  F22R2*: CAN1_F22R2_Type
  F23R1*: CAN1_F23R1_Type
  F23R2*: CAN1_F23R2_Type
  F24R1*: CAN1_F24R1_Type
  F24R2*: CAN1_F24R2_Type
  F25R1*: CAN1_F25R1_Type
  F25R2*: CAN1_F25R2_Type
  F26R1*: CAN1_F26R1_Type
  F26R2*: CAN1_F26R2_Type
  F27R1*: CAN1_F27R1_Type
  F27R2*: CAN1_F27R2_Type

type ETHERNET_MAC_MACCR_Type* = object
  loc: uint

type ETHERNET_MAC_MACFFR_Type* = object
  loc: uint

type ETHERNET_MAC_MACHTHR_Type* = object
  loc: uint

type ETHERNET_MAC_MACHTLR_Type* = object
  loc: uint

type ETHERNET_MAC_MACMIIAR_Type* = object
  loc: uint

type ETHERNET_MAC_MACMIIDR_Type* = object
  loc: uint

type ETHERNET_MAC_MACFCR_Type* = object
  loc: uint

type ETHERNET_MAC_MACVLANTR_Type* = object
  loc: uint

type ETHERNET_MAC_MACRWUFFR_Type* = object
  loc: uint

type ETHERNET_MAC_MACPMTCSR_Type* = object
  loc: uint

type ETHERNET_MAC_MACSR_Type* = object
  loc: uint

type ETHERNET_MAC_MACIMR_Type* = object
  loc: uint

type ETHERNET_MAC_MACA0HR_Type* = object
  loc: uint

type ETHERNET_MAC_MACA0LR_Type* = object
  loc: uint

type ETHERNET_MAC_MACA1HR_Type* = object
  loc: uint

type ETHERNET_MAC_MACA1LR_Type* = object
  loc: uint

type ETHERNET_MAC_MACA2HR_Type* = object
  loc: uint

type ETHERNET_MAC_MACA2LR_Type* = object
  loc: uint

type ETHERNET_MAC_MACA3HR_Type* = object
  loc: uint

type ETHERNET_MAC_MACA3LR_Type* = object
  loc: uint

type ETHERNET_MAC_Type* = object
  MACCR*: ETHERNET_MAC_MACCR_Type
  MACFFR*: ETHERNET_MAC_MACFFR_Type
  MACHTHR*: ETHERNET_MAC_MACHTHR_Type
  MACHTLR*: ETHERNET_MAC_MACHTLR_Type
  MACMIIAR*: ETHERNET_MAC_MACMIIAR_Type
  MACMIIDR*: ETHERNET_MAC_MACMIIDR_Type
  MACFCR*: ETHERNET_MAC_MACFCR_Type
  MACVLANTR*: ETHERNET_MAC_MACVLANTR_Type
  MACRWUFFR*: ETHERNET_MAC_MACRWUFFR_Type
  MACPMTCSR*: ETHERNET_MAC_MACPMTCSR_Type
  MACSR*: ETHERNET_MAC_MACSR_Type
  MACIMR*: ETHERNET_MAC_MACIMR_Type
  MACA0HR*: ETHERNET_MAC_MACA0HR_Type
  MACA0LR*: ETHERNET_MAC_MACA0LR_Type
  MACA1HR*: ETHERNET_MAC_MACA1HR_Type
  MACA1LR*: ETHERNET_MAC_MACA1LR_Type
  MACA2HR*: ETHERNET_MAC_MACA2HR_Type
  MACA2LR*: ETHERNET_MAC_MACA2LR_Type
  MACA3HR*: ETHERNET_MAC_MACA3HR_Type
  MACA3LR*: ETHERNET_MAC_MACA3LR_Type

type ETHERNET_MMC_MMCCR_Type* = object
  loc: uint

type ETHERNET_MMC_MMCRIR_Type* = object
  loc: uint

type ETHERNET_MMC_MMCTIR_Type* = object
  loc: uint

type ETHERNET_MMC_MMCRIMR_Type* = object
  loc: uint

type ETHERNET_MMC_MMCTIMR_Type* = object
  loc: uint

type ETHERNET_MMC_MMCTGFSCCR_Type* = object
  loc: uint

type ETHERNET_MMC_MMCTGFMSCCR_Type* = object
  loc: uint

type ETHERNET_MMC_MMCTGFCR_Type* = object
  loc: uint

type ETHERNET_MMC_MMCRFCECR_Type* = object
  loc: uint

type ETHERNET_MMC_MMCRFAECR_Type* = object
  loc: uint

type ETHERNET_MMC_MMCRGUFCR_Type* = object
  loc: uint

type ETHERNET_MMC_Type* = object
  MMCCR*: ETHERNET_MMC_MMCCR_Type
  MMCRIR*: ETHERNET_MMC_MMCRIR_Type
  MMCTIR*: ETHERNET_MMC_MMCTIR_Type
  MMCRIMR*: ETHERNET_MMC_MMCRIMR_Type
  MMCTIMR*: ETHERNET_MMC_MMCTIMR_Type
  MMCTGFSCCR*: ETHERNET_MMC_MMCTGFSCCR_Type
  MMCTGFMSCCR*: ETHERNET_MMC_MMCTGFMSCCR_Type
  MMCTGFCR*: ETHERNET_MMC_MMCTGFCR_Type
  MMCRFCECR*: ETHERNET_MMC_MMCRFCECR_Type
  MMCRFAECR*: ETHERNET_MMC_MMCRFAECR_Type
  MMCRGUFCR*: ETHERNET_MMC_MMCRGUFCR_Type

type ETHERNET_PTP_PTPTSCR_Type* = object
  loc: uint

type ETHERNET_PTP_PTPSSIR_Type* = object
  loc: uint

type ETHERNET_PTP_PTPTSHR_Type* = object
  loc: uint

type ETHERNET_PTP_PTPTSLR_Type* = object
  loc: uint

type ETHERNET_PTP_PTPTSHUR_Type* = object
  loc: uint

type ETHERNET_PTP_PTPTSLUR_Type* = object
  loc: uint

type ETHERNET_PTP_PTPTSAR_Type* = object
  loc: uint

type ETHERNET_PTP_PTPTTHR_Type* = object
  loc: uint

type ETHERNET_PTP_PTPTTLR_Type* = object
  loc: uint

type ETHERNET_PTP_Type* = object
  PTPTSCR*: ETHERNET_PTP_PTPTSCR_Type
  PTPSSIR*: ETHERNET_PTP_PTPSSIR_Type
  PTPTSHR*: ETHERNET_PTP_PTPTSHR_Type
  PTPTSLR*: ETHERNET_PTP_PTPTSLR_Type
  PTPTSHUR*: ETHERNET_PTP_PTPTSHUR_Type
  PTPTSLUR*: ETHERNET_PTP_PTPTSLUR_Type
  PTPTSAR*: ETHERNET_PTP_PTPTSAR_Type
  PTPTTHR*: ETHERNET_PTP_PTPTTHR_Type
  PTPTTLR*: ETHERNET_PTP_PTPTTLR_Type

type ETHERNET_DMA_DMABMR_Type* = object
  loc: uint

type ETHERNET_DMA_DMATPDR_Type* = object
  loc: uint

type ETHERNET_DMA_DMARPDR_Type* = object
  loc: uint

type ETHERNET_DMA_DMARDLAR_Type* = object
  loc: uint

type ETHERNET_DMA_DMATDLAR_Type* = object
  loc: uint

type ETHERNET_DMA_DMASR_Type* = object
  loc: uint

type ETHERNET_DMA_DMAOMR_Type* = object
  loc: uint

type ETHERNET_DMA_DMAIER_Type* = object
  loc: uint

type ETHERNET_DMA_DMAMFBOCR_Type* = object
  loc: uint

type ETHERNET_DMA_DMACHTDR_Type* = object
  loc: uint

type ETHERNET_DMA_DMACHRDR_Type* = object
  loc: uint

type ETHERNET_DMA_DMACHTBAR_Type* = object
  loc: uint

type ETHERNET_DMA_DMACHRBAR_Type* = object
  loc: uint

type ETHERNET_DMA_Type* = object
  DMABMR*: ETHERNET_DMA_DMABMR_Type
  DMATPDR*: ETHERNET_DMA_DMATPDR_Type
  DMARPDR*: ETHERNET_DMA_DMARPDR_Type
  DMARDLAR*: ETHERNET_DMA_DMARDLAR_Type
  DMATDLAR*: ETHERNET_DMA_DMATDLAR_Type
  DMASR*: ETHERNET_DMA_DMASR_Type
  DMAOMR*: ETHERNET_DMA_DMAOMR_Type
  DMAIER*: ETHERNET_DMA_DMAIER_Type
  DMAMFBOCR*: ETHERNET_DMA_DMAMFBOCR_Type
  DMACHTDR*: ETHERNET_DMA_DMACHTDR_Type
  DMACHRDR*: ETHERNET_DMA_DMACHRDR_Type
  DMACHTBAR*: ETHERNET_DMA_DMACHTBAR_Type
  DMACHRBAR*: ETHERNET_DMA_DMACHRBAR_Type

type DAC_CTLR_Type* = object
  loc: uint

type DAC_SWTR_Type* = object
  loc: uint

type DAC_R12BDHR1_Type* = object
  loc: uint

type DAC_L12BDHR1_Type* = object
  loc: uint

type DAC_R8BDHR1_Type* = object
  loc: uint

type DAC_R12BDHR2_Type* = object
  loc: uint

type DAC_L12BDHR2_Type* = object
  loc: uint

type DAC_R8BDHR2_Type* = object
  loc: uint

type DAC_RD12BDHR_Type* = object
  loc: uint

type DAC_LD12BDHR_Type* = object
  loc: uint

type DAC_RD8BDHR_Type* = object
  loc: uint

type DAC_DOR1_Type* = object
  loc: uint

type DAC_DOR2_Type* = object
  loc: uint

type DAC_Type* = object
  CTLR*: DAC_CTLR_Type
  SWTR*: DAC_SWTR_Type
  R12BDHR1*: DAC_R12BDHR1_Type
  L12BDHR1*: DAC_L12BDHR1_Type
  R8BDHR1*: DAC_R8BDHR1_Type
  R12BDHR2*: DAC_R12BDHR2_Type
  L12BDHR2*: DAC_L12BDHR2_Type
  R8BDHR2*: DAC_R8BDHR2_Type
  RD12BDHR*: DAC_RD12BDHR_Type
  LD12BDHR*: DAC_LD12BDHR_Type
  RD8BDHR*: DAC_RD8BDHR_Type
  DOR1*: DAC_DOR1_Type
  DOR2*: DAC_DOR2_Type

type PWR_CTLR_Type* = object
  loc: uint

type PWR_CSR_Type* = object
  loc: uint

type PWR_Type* = object
  CTLR*: PWR_CTLR_Type
  CSR*: PWR_CSR_Type

type RCC_CTLR_Type* = object
  loc: uint

type RCC_CFGR0_Type* = object
  loc: uint

type RCC_INTR_Type* = object
  loc: uint

type RCC_APB2PRSTR_Type* = object
  loc: uint

type RCC_APB1PRSTR_Type* = object
  loc: uint

type RCC_AHBPCENR_Type* = object
  loc: uint

type RCC_APB2PCENR_Type* = object
  loc: uint

type RCC_APB1PCENR_Type* = object
  loc: uint

type RCC_BDCTLR_Type* = object
  loc: uint

type RCC_RSTSCKR_Type* = object
  loc: uint

type RCC_AHBRSTR_Type* = object
  loc: uint

type RCC_CFGR2_Type* = object
  loc: uint

type RCC_Type* = object
  CTLR*: RCC_CTLR_Type
  CFGR0*: RCC_CFGR0_Type
  INTR*: RCC_INTR_Type
  APB2PRSTR*: RCC_APB2PRSTR_Type
  APB1PRSTR*: RCC_APB1PRSTR_Type
  AHBPCENR*: RCC_AHBPCENR_Type
  APB2PCENR*: RCC_APB2PCENR_Type
  APB1PCENR*: RCC_APB1PCENR_Type
  BDCTLR*: RCC_BDCTLR_Type
  RSTSCKR*: RCC_RSTSCKR_Type
  AHBRSTR*: RCC_AHBRSTR_Type
  CFGR2*: RCC_CFGR2_Type

type EXTEND_EXTEND_CTR_Type* = object
  loc: uint

type EXTEND_Type* = object
  EXTEND_CTR*: EXTEND_EXTEND_CTR_Type

type OPA_CR_Type* = object
  loc: uint

type OPA_Type* = object
  CR*: OPA_CR_Type

type GPIOA_CFGLR_Type* = object
  loc: uint

type GPIOA_CFGHR_Type* = object
  loc: uint

type GPIOA_INDR_Type* = object
  loc: uint

type GPIOA_OUTDR_Type* = object
  loc: uint

type GPIOA_BSHR_Type* = object
  loc: uint

type GPIOA_BCR_Type* = object
  loc: uint

type GPIOA_LCKR_Type* = object
  loc: uint

type GPIOA_Type* = object
  CFGLR*: GPIOA_CFGLR_Type
  CFGHR*: GPIOA_CFGHR_Type
  INDR*: GPIOA_INDR_Type
  OUTDR*: GPIOA_OUTDR_Type
  BSHR*: GPIOA_BSHR_Type
  BCR*: GPIOA_BCR_Type
  LCKR*: GPIOA_LCKR_Type

type AFIO_ECR_Type* = object
  loc: uint

type AFIO_PCFR_Type* = object
  loc: uint

type AFIO_EXTICR1_Type* = object
  loc: uint

type AFIO_EXTICR2_Type* = object
  loc: uint

type AFIO_EXTICR3_Type* = object
  loc: uint

type AFIO_EXTICR4_Type* = object
  loc: uint

type AFIO_PCFR2_Type* = object
  loc: uint

type AFIO_Type* = object
  ECR*: AFIO_ECR_Type
  PCFR*: AFIO_PCFR_Type
  EXTICR1*: AFIO_EXTICR1_Type
  EXTICR2*: AFIO_EXTICR2_Type
  EXTICR3*: AFIO_EXTICR3_Type
  EXTICR4*: AFIO_EXTICR4_Type
  PCFR2*: AFIO_PCFR2_Type

type EXTI_INTENR_Type* = object
  loc: uint

type EXTI_EVENR_Type* = object
  loc: uint

type EXTI_RTENR_Type* = object
  loc: uint

type EXTI_FTENR_Type* = object
  loc: uint

type EXTI_SWIEVR_Type* = object
  loc: uint

type EXTI_INTFR_Type* = object
  loc: uint

type EXTI_Type* = object
  INTENR*: EXTI_INTENR_Type
  EVENR*: EXTI_EVENR_Type
  RTENR*: EXTI_RTENR_Type
  FTENR*: EXTI_FTENR_Type
  SWIEVR*: EXTI_SWIEVR_Type
  INTFR*: EXTI_INTFR_Type

type DMA1_INTFR_Type* = object
  loc: uint

type DMA1_INTFCR_Type* = object
  loc: uint

type DMA1_CFGR1_Type* = object
  loc: uint

type DMA1_CNTR1_Type* = object
  loc: uint

type DMA1_PADDR1_Type* = object
  loc: uint

type DMA1_MADDR1_Type* = object
  loc: uint

type DMA1_CFGR2_Type* = object
  loc: uint

type DMA1_CNTR2_Type* = object
  loc: uint

type DMA1_PADDR2_Type* = object
  loc: uint

type DMA1_MADDR2_Type* = object
  loc: uint

type DMA1_CFGR3_Type* = object
  loc: uint

type DMA1_CNTR3_Type* = object
  loc: uint

type DMA1_PADDR3_Type* = object
  loc: uint

type DMA1_MADDR3_Type* = object
  loc: uint

type DMA1_CFGR4_Type* = object
  loc: uint

type DMA1_CNTR4_Type* = object
  loc: uint

type DMA1_PADDR4_Type* = object
  loc: uint

type DMA1_MADDR4_Type* = object
  loc: uint

type DMA1_CFGR5_Type* = object
  loc: uint

type DMA1_CNTR5_Type* = object
  loc: uint

type DMA1_PADDR5_Type* = object
  loc: uint

type DMA1_MADDR5_Type* = object
  loc: uint

type DMA1_CFGR6_Type* = object
  loc: uint

type DMA1_CNTR6_Type* = object
  loc: uint

type DMA1_PADDR6_Type* = object
  loc: uint

type DMA1_MADDR6_Type* = object
  loc: uint

type DMA1_CFGR7_Type* = object
  loc: uint

type DMA1_CNTR7_Type* = object
  loc: uint

type DMA1_PADDR7_Type* = object
  loc: uint

type DMA1_MADDR7_Type* = object
  loc: uint

type DMA1_CFGR8_Type* = object
  loc: uint

type DMA1_CNTR8_Type* = object
  loc: uint

type DMA1_PADDR8_Type* = object
  loc: uint

type DMA1_MADDR8_Type* = object
  loc: uint

type DMA1_Type* = object
  INTFR*: DMA1_INTFR_Type
  INTFCR*: DMA1_INTFCR_Type
  CFGR1*: DMA1_CFGR1_Type
  CNTR1*: DMA1_CNTR1_Type
  PADDR1*: DMA1_PADDR1_Type
  MADDR1*: DMA1_MADDR1_Type
  CFGR2*: DMA1_CFGR2_Type
  CNTR2*: DMA1_CNTR2_Type
  PADDR2*: DMA1_PADDR2_Type
  MADDR2*: DMA1_MADDR2_Type
  CFGR3*: DMA1_CFGR3_Type
  CNTR3*: DMA1_CNTR3_Type
  PADDR3*: DMA1_PADDR3_Type
  MADDR3*: DMA1_MADDR3_Type
  CFGR4*: DMA1_CFGR4_Type
  CNTR4*: DMA1_CNTR4_Type
  PADDR4*: DMA1_PADDR4_Type
  MADDR4*: DMA1_MADDR4_Type
  CFGR5*: DMA1_CFGR5_Type
  CNTR5*: DMA1_CNTR5_Type
  PADDR5*: DMA1_PADDR5_Type
  MADDR5*: DMA1_MADDR5_Type
  CFGR6*: DMA1_CFGR6_Type
  CNTR6*: DMA1_CNTR6_Type
  PADDR6*: DMA1_PADDR6_Type
  MADDR6*: DMA1_MADDR6_Type
  CFGR7*: DMA1_CFGR7_Type
  CNTR7*: DMA1_CNTR7_Type
  PADDR7*: DMA1_PADDR7_Type
  MADDR7*: DMA1_MADDR7_Type
  CFGR8*: DMA1_CFGR8_Type
  CNTR8*: DMA1_CNTR8_Type
  PADDR8*: DMA1_PADDR8_Type
  MADDR8*: DMA1_MADDR8_Type

type RTC_CTLRH_Type* = object
  loc: uint

type RTC_CTLRL_Type* = object
  loc: uint

type RTC_PSCRH_Type* = object
  loc: uint

type RTC_PSCRL_Type* = object
  loc: uint

type RTC_DIVH_Type* = object
  loc: uint

type RTC_DIVL_Type* = object
  loc: uint

type RTC_CNTH_Type* = object
  loc: uint

type RTC_CNTL_Type* = object
  loc: uint

type RTC_ALRMH_Type* = object
  loc: uint

type RTC_ALRML_Type* = object
  loc: uint

type RTC_Type* = object
  CTLRH*: RTC_CTLRH_Type
  CTLRL*: RTC_CTLRL_Type
  PSCRH*: RTC_PSCRH_Type
  PSCRL*: RTC_PSCRL_Type
  DIVH*: RTC_DIVH_Type
  DIVL*: RTC_DIVL_Type
  CNTH*: RTC_CNTH_Type
  CNTL*: RTC_CNTL_Type
  ALRMH*: RTC_ALRMH_Type
  ALRML*: RTC_ALRML_Type

type BKP_DATAR1_Type* = object
  loc: uint

type BKP_DATAR2_Type* = object
  loc: uint

type BKP_DATAR3_Type* = object
  loc: uint

type BKP_DATAR4_Type* = object
  loc: uint

type BKP_DATAR5_Type* = object
  loc: uint

type BKP_DATAR6_Type* = object
  loc: uint

type BKP_DATAR7_Type* = object
  loc: uint

type BKP_DATAR8_Type* = object
  loc: uint

type BKP_DATAR9_Type* = object
  loc: uint

type BKP_DATAR10_Type* = object
  loc: uint

type BKP_DATAR11_Type* = object
  loc: uint

type BKP_DATAR12_Type* = object
  loc: uint

type BKP_DATAR13_Type* = object
  loc: uint

type BKP_DATAR14_Type* = object
  loc: uint

type BKP_DATAR15_Type* = object
  loc: uint

type BKP_DATAR16_Type* = object
  loc: uint

type BKP_DATAR17_Type* = object
  loc: uint

type BKP_DATAR18_Type* = object
  loc: uint

type BKP_DATAR19_Type* = object
  loc: uint

type BKP_DATAR20_Type* = object
  loc: uint

type BKP_DATAR21_Type* = object
  loc: uint

type BKP_DATAR22_Type* = object
  loc: uint

type BKP_DATAR23_Type* = object
  loc: uint

type BKP_DATAR24_Type* = object
  loc: uint

type BKP_DATAR25_Type* = object
  loc: uint

type BKP_DATAR26_Type* = object
  loc: uint

type BKP_DATAR27_Type* = object
  loc: uint

type BKP_DATAR28_Type* = object
  loc: uint

type BKP_DATAR29_Type* = object
  loc: uint

type BKP_DATAR30_Type* = object
  loc: uint

type BKP_DATAR31_Type* = object
  loc: uint

type BKP_DATAR32_Type* = object
  loc: uint

type BKP_DATAR33_Type* = object
  loc: uint

type BKP_DATAR34_Type* = object
  loc: uint

type BKP_DATAR35_Type* = object
  loc: uint

type BKP_DATAR36_Type* = object
  loc: uint

type BKP_DATAR37_Type* = object
  loc: uint

type BKP_DATAR38_Type* = object
  loc: uint

type BKP_DATAR39_Type* = object
  loc: uint

type BKP_DATAR40_Type* = object
  loc: uint

type BKP_DATAR41_Type* = object
  loc: uint

type BKP_DATAR42_Type* = object
  loc: uint

type BKP_OCTLR_Type* = object
  loc: uint

type BKP_TPCTLR_Type* = object
  loc: uint

type BKP_TPCSR_Type* = object
  loc: uint

type BKP_Type* = object
  DATAR1*: BKP_DATAR1_Type
  DATAR2*: BKP_DATAR2_Type
  DATAR3*: BKP_DATAR3_Type
  DATAR4*: BKP_DATAR4_Type
  DATAR5*: BKP_DATAR5_Type
  DATAR6*: BKP_DATAR6_Type
  DATAR7*: BKP_DATAR7_Type
  DATAR8*: BKP_DATAR8_Type
  DATAR9*: BKP_DATAR9_Type
  DATAR10*: BKP_DATAR10_Type
  OCTLR*: BKP_OCTLR_Type
  TPCTLR*: BKP_TPCTLR_Type
  TPCSR*: BKP_TPCSR_Type
  DATAR11*: BKP_DATAR11_Type
  DATAR12*: BKP_DATAR12_Type
  DATAR13*: BKP_DATAR13_Type
  DATAR14*: BKP_DATAR14_Type
  DATAR15*: BKP_DATAR15_Type
  DATAR16*: BKP_DATAR16_Type
  DATAR17*: BKP_DATAR17_Type
  DATAR18*: BKP_DATAR18_Type
  DATAR19*: BKP_DATAR19_Type
  DATAR20*: BKP_DATAR20_Type
  DATAR21*: BKP_DATAR21_Type
  DATAR22*: BKP_DATAR22_Type
  DATAR23*: BKP_DATAR23_Type
  DATAR24*: BKP_DATAR24_Type
  DATAR25*: BKP_DATAR25_Type
  DATAR26*: BKP_DATAR26_Type
  DATAR27*: BKP_DATAR27_Type
  DATAR28*: BKP_DATAR28_Type
  DATAR29*: BKP_DATAR29_Type
  DATAR30*: BKP_DATAR30_Type
  DATAR31*: BKP_DATAR31_Type
  DATAR32*: BKP_DATAR32_Type
  DATAR33*: BKP_DATAR33_Type
  DATAR34*: BKP_DATAR34_Type
  DATAR35*: BKP_DATAR35_Type
  DATAR36*: BKP_DATAR36_Type
  DATAR37*: BKP_DATAR37_Type
  DATAR38*: BKP_DATAR38_Type
  DATAR39*: BKP_DATAR39_Type
  DATAR40*: BKP_DATAR40_Type
  DATAR41*: BKP_DATAR41_Type
  DATAR42*: BKP_DATAR42_Type

type IWDG_CTLR_Type* = object
  loc: uint

type IWDG_PSCR_Type* = object
  loc: uint

type IWDG_RLDR_Type* = object
  loc: uint

type IWDG_STATR_Type* = object
  loc: uint

type IWDG_Type* = object
  CTLR*: IWDG_CTLR_Type
  PSCR*: IWDG_PSCR_Type
  RLDR*: IWDG_RLDR_Type
  STATR*: IWDG_STATR_Type

type WWDG_CTLR_Type* = object
  loc: uint

type WWDG_CFGR_Type* = object
  loc: uint

type WWDG_STATR_Type* = object
  loc: uint

type WWDG_Type* = object
  CTLR*: WWDG_CTLR_Type
  CFGR*: WWDG_CFGR_Type
  STATR*: WWDG_STATR_Type

type TIM1_CTLR1_Type* = object
  loc: uint

type TIM1_CTLR2_Type* = object
  loc: uint

type TIM1_SMCFGR_Type* = object
  loc: uint

type TIM1_DMAINTENR_Type* = object
  loc: uint

type TIM1_INTFR_Type* = object
  loc: uint

type TIM1_SWEVGR_Type* = object
  loc: uint

type TIM1_CHCTLR1_Output_Type* = object
  loc: uint

type TIM1_CHCTLR1_Input_Type* = object
  loc: uint

type TIM1_CHCTLR2_Output_Type* = object
  loc: uint

type TIM1_CHCTLR2_Input_Type* = object
  loc: uint

type TIM1_CCER_Type* = object
  loc: uint

type TIM1_CNT_Type* = object
  loc: uint

type TIM1_PSC_Type* = object
  loc: uint

type TIM1_ATRLR_Type* = object
  loc: uint

type TIM1_RPTCR_Type* = object
  loc: uint

type TIM1_CH1CVR_Type* = object
  loc: uint

type TIM1_CH2CVR_Type* = object
  loc: uint

type TIM1_CH3CVR_Type* = object
  loc: uint

type TIM1_CH4CVR_Type* = object
  loc: uint

type TIM1_BDTR_Type* = object
  loc: uint

type TIM1_DMACFGR_Type* = object
  loc: uint

type TIM1_DMAADR_Type* = object
  loc: uint

type TIM1_Type* = object
  CTLR1*: TIM1_CTLR1_Type
  CTLR2*: TIM1_CTLR2_Type
  SMCFGR*: TIM1_SMCFGR_Type
  DMAINTENR*: TIM1_DMAINTENR_Type
  INTFR*: TIM1_INTFR_Type
  SWEVGR*: TIM1_SWEVGR_Type
  CHCTLR1_Output*: TIM1_CHCTLR1_Output_Type
  CHCTLR1_Input*: TIM1_CHCTLR1_Input_Type
  CHCTLR2_Output*: TIM1_CHCTLR2_Output_Type
  CHCTLR2_Input*: TIM1_CHCTLR2_Input_Type
  CCER*: TIM1_CCER_Type
  CNT*: TIM1_CNT_Type
  PSC*: TIM1_PSC_Type
  ATRLR*: TIM1_ATRLR_Type
  RPTCR*: TIM1_RPTCR_Type
  CH1CVR*: TIM1_CH1CVR_Type
  CH2CVR*: TIM1_CH2CVR_Type
  CH3CVR*: TIM1_CH3CVR_Type
  CH4CVR*: TIM1_CH4CVR_Type
  BDTR*: TIM1_BDTR_Type
  DMACFGR*: TIM1_DMACFGR_Type
  DMAADR*: TIM1_DMAADR_Type

type TIM2_CTLR1_Type* = object
  loc: uint

type TIM2_CTLR2_Type* = object
  loc: uint

type TIM2_SMCFGR_Type* = object
  loc: uint

type TIM2_DMAINTENR_Type* = object
  loc: uint

type TIM2_INTFR_Type* = object
  loc: uint

type TIM2_SWEVGR_Type* = object
  loc: uint

type TIM2_CHCTLR1_Output_Type* = object
  loc: uint

type TIM2_CHCTLR1_Input_Type* = object
  loc: uint

type TIM2_CHCTLR2_Output_Type* = object
  loc: uint

type TIM2_CHCTLR2_Input_Type* = object
  loc: uint

type TIM2_CCER_Type* = object
  loc: uint

type TIM2_CNT_Type* = object
  loc: uint

type TIM2_PSC_Type* = object
  loc: uint

type TIM2_ATRLR_Type* = object
  loc: uint

type TIM2_CH1CVR_Type* = object
  loc: uint

type TIM2_CH2CVR_Type* = object
  loc: uint

type TIM2_CH3CVR_Type* = object
  loc: uint

type TIM2_CH4CVR_Type* = object
  loc: uint

type TIM2_DMACFGR_Type* = object
  loc: uint

type TIM2_DMAADR_Type* = object
  loc: uint

type TIM2_Type* = object
  CTLR1*: TIM2_CTLR1_Type
  CTLR2*: TIM2_CTLR2_Type
  SMCFGR*: TIM2_SMCFGR_Type
  DMAINTENR*: TIM2_DMAINTENR_Type
  INTFR*: TIM2_INTFR_Type
  SWEVGR*: TIM2_SWEVGR_Type
  CHCTLR1_Output*: TIM2_CHCTLR1_Output_Type
  CHCTLR1_Input*: TIM2_CHCTLR1_Input_Type
  CHCTLR2_Output*: TIM2_CHCTLR2_Output_Type
  CHCTLR2_Input*: TIM2_CHCTLR2_Input_Type
  CCER*: TIM2_CCER_Type
  CNT*: TIM2_CNT_Type
  PSC*: TIM2_PSC_Type
  ATRLR*: TIM2_ATRLR_Type
  CH1CVR*: TIM2_CH1CVR_Type
  CH2CVR*: TIM2_CH2CVR_Type
  CH3CVR*: TIM2_CH3CVR_Type
  CH4CVR*: TIM2_CH4CVR_Type
  DMACFGR*: TIM2_DMACFGR_Type
  DMAADR*: TIM2_DMAADR_Type

type I2C1_CTLR1_Type* = object
  loc: uint

type I2C1_CTLR2_Type* = object
  loc: uint

type I2C1_OADDR1_Type* = object
  loc: uint

type I2C1_OADDR2_Type* = object
  loc: uint

type I2C1_DATAR_Type* = object
  loc: uint

type I2C1_STAR1_Type* = object
  loc: uint

type I2C1_STAR2_Type* = object
  loc: uint

type I2C1_CKCFGR_Type* = object
  loc: uint

type I2C1_RTR_Type* = object
  loc: uint

type I2C1_Type* = object
  CTLR1*: I2C1_CTLR1_Type
  CTLR2*: I2C1_CTLR2_Type
  OADDR1*: I2C1_OADDR1_Type
  OADDR2*: I2C1_OADDR2_Type
  DATAR*: I2C1_DATAR_Type
  STAR1*: I2C1_STAR1_Type
  STAR2*: I2C1_STAR2_Type
  CKCFGR*: I2C1_CKCFGR_Type
  RTR*: I2C1_RTR_Type

type SPI1_CTLR1_Type* = object
  loc: uint

type SPI1_CTLR2_Type* = object
  loc: uint

type SPI1_STATR_Type* = object
  loc: uint

type SPI1_DATAR_Type* = object
  loc: uint

type SPI1_CRCR_Type* = object
  loc: uint

type SPI1_RCRCR_Type* = object
  loc: uint

type SPI1_TCRCR_Type* = object
  loc: uint

type SPI1_SPI_I2S_CFGR_Type* = object
  loc: uint

type SPI1_HSCR_Type* = object
  loc: uint

type SPI1_Type* = object
  CTLR1*: SPI1_CTLR1_Type
  CTLR2*: SPI1_CTLR2_Type
  STATR*: SPI1_STATR_Type
  DATAR*: SPI1_DATAR_Type
  CRCR*: SPI1_CRCR_Type
  RCRCR*: SPI1_RCRCR_Type
  TCRCR*: SPI1_TCRCR_Type
  SPI_I2S_CFGR*: SPI1_SPI_I2S_CFGR_Type
  HSCR*: SPI1_HSCR_Type

type SPI2_CTLR1_Type* = object
  loc: uint

type SPI2_CTLR2_Type* = object
  loc: uint

type SPI2_STATR_Type* = object
  loc: uint

type SPI2_DATAR_Type* = object
  loc: uint

type SPI2_CRCR_Type* = object
  loc: uint

type SPI2_RCRCR_Type* = object
  loc: uint

type SPI2_TCRCR_Type* = object
  loc: uint

type SPI2_I2SCFGR_Type* = object
  loc: uint

type SPI2_I2SPR_Type* = object
  loc: uint

type SPI2_HSCR_Type* = object
  loc: uint

type SPI2_Type* = object
  CTLR1*: SPI2_CTLR1_Type
  CTLR2*: SPI2_CTLR2_Type
  STATR*: SPI2_STATR_Type
  DATAR*: SPI2_DATAR_Type
  CRCR*: SPI2_CRCR_Type
  RCRCR*: SPI2_RCRCR_Type
  TCRCR*: SPI2_TCRCR_Type
  I2SCFGR*: SPI2_I2SCFGR_Type
  I2SPR*: SPI2_I2SPR_Type
  HSCR*: SPI2_HSCR_Type

type USART1_STATR_Type* = object
  loc: uint

type USART1_DATAR_Type* = object
  loc: uint

type USART1_BRR_Type* = object
  loc: uint

type USART1_CTLR1_Type* = object
  loc: uint

type USART1_CTLR2_Type* = object
  loc: uint

type USART1_CTLR3_Type* = object
  loc: uint

type USART1_GPR_Type* = object
  loc: uint

type USART1_Type* = object
  STATR*: USART1_STATR_Type
  DATAR*: USART1_DATAR_Type
  BRR*: USART1_BRR_Type
  CTLR1*: USART1_CTLR1_Type
  CTLR2*: USART1_CTLR2_Type
  CTLR3*: USART1_CTLR3_Type
  GPR*: USART1_GPR_Type

type ADC1_STATR_Type* = object
  loc: uint

type ADC1_CTLR1_Type* = object
  loc: uint

type ADC1_CTLR2_Type* = object
  loc: uint

type ADC1_SAMPTR1_CHARGE1_Type* = object
  loc: uint

type ADC1_SAMPTR2_CHARGE2_Type* = object
  loc: uint

type ADC1_IOFR1_Type* = object
  loc: uint

type ADC1_IOFR2_Type* = object
  loc: uint

type ADC1_IOFR3_Type* = object
  loc: uint

type ADC1_IOFR4_Type* = object
  loc: uint

type ADC1_WDHTR_Type* = object
  loc: uint

type ADC1_WDLTR_Type* = object
  loc: uint

type ADC1_RSQR1_Type* = object
  loc: uint

type ADC1_RSQR2_Type* = object
  loc: uint

type ADC1_RSQR3_CHANNEL_Type* = object
  loc: uint

type ADC1_ISQR_Type* = object
  loc: uint

type ADC1_IDATAR1_CHGOFFSET_Type* = object
  loc: uint

type ADC1_IDATAR2_Type* = object
  loc: uint

type ADC1_IDATAR3_Type* = object
  loc: uint

type ADC1_IDATAR4_Type* = object
  loc: uint

type ADC1_RDATAR_DR_ACT_DCG_Type* = object
  loc: uint

type ADC1_Type* = object
  STATR*: ADC1_STATR_Type
  CTLR1*: ADC1_CTLR1_Type
  CTLR2*: ADC1_CTLR2_Type
  SAMPTR1_CHARGE1*: ADC1_SAMPTR1_CHARGE1_Type
  SAMPTR2_CHARGE2*: ADC1_SAMPTR2_CHARGE2_Type
  IOFR1*: ADC1_IOFR1_Type
  IOFR2*: ADC1_IOFR2_Type
  IOFR3*: ADC1_IOFR3_Type
  IOFR4*: ADC1_IOFR4_Type
  WDHTR*: ADC1_WDHTR_Type
  WDLTR*: ADC1_WDLTR_Type
  RSQR1*: ADC1_RSQR1_Type
  RSQR2*: ADC1_RSQR2_Type
  RSQR3_CHANNEL*: ADC1_RSQR3_CHANNEL_Type
  ISQR*: ADC1_ISQR_Type
  IDATAR1_CHGOFFSET*: ADC1_IDATAR1_CHGOFFSET_Type
  IDATAR2*: ADC1_IDATAR2_Type
  IDATAR3*: ADC1_IDATAR3_Type
  IDATAR4*: ADC1_IDATAR4_Type
  RDATAR_DR_ACT_DCG*: ADC1_RDATAR_DR_ACT_DCG_Type

type ADC2_STATR_Type* = object
  loc: uint

type ADC2_CTLR1_Type* = object
  loc: uint

type ADC2_CTLR2_Type* = object
  loc: uint

type ADC2_SAMPTR1_CHARGE1_Type* = object
  loc: uint

type ADC2_SAMPTR2_CHARGE2_Type* = object
  loc: uint

type ADC2_IOFR1_Type* = object
  loc: uint

type ADC2_IOFR2_Type* = object
  loc: uint

type ADC2_IOFR3_Type* = object
  loc: uint

type ADC2_IOFR4_Type* = object
  loc: uint

type ADC2_WDHTR_Type* = object
  loc: uint

type ADC2_WDLTR_Type* = object
  loc: uint

type ADC2_RSQR1_Type* = object
  loc: uint

type ADC2_RSQR2_Type* = object
  loc: uint

type ADC2_RSQR3_CHANNEL_Type* = object
  loc: uint

type ADC2_ISQR_Type* = object
  loc: uint

type ADC2_IDATAR1_CHGOFFSET_Type* = object
  loc: uint

type ADC2_IDATAR2_Type* = object
  loc: uint

type ADC2_IDATAR3_Type* = object
  loc: uint

type ADC2_IDATAR4_Type* = object
  loc: uint

type ADC2_RDATAR_DR_ACT_DCG_Type* = object
  loc: uint

type ADC2_Type* = object
  STATR*: ADC2_STATR_Type
  CTLR1*: ADC2_CTLR1_Type
  CTLR2*: ADC2_CTLR2_Type
  SAMPTR1_CHARGE1*: ADC2_SAMPTR1_CHARGE1_Type
  SAMPTR2_CHARGE2*: ADC2_SAMPTR2_CHARGE2_Type
  IOFR1*: ADC2_IOFR1_Type
  IOFR2*: ADC2_IOFR2_Type
  IOFR3*: ADC2_IOFR3_Type
  IOFR4*: ADC2_IOFR4_Type
  WDHTR*: ADC2_WDHTR_Type
  WDLTR*: ADC2_WDLTR_Type
  RSQR1*: ADC2_RSQR1_Type
  RSQR2*: ADC2_RSQR2_Type
  RSQR3_CHANNEL*: ADC2_RSQR3_CHANNEL_Type
  ISQR*: ADC2_ISQR_Type
  IDATAR1_CHGOFFSET*: ADC2_IDATAR1_CHGOFFSET_Type
  IDATAR2*: ADC2_IDATAR2_Type
  IDATAR3*: ADC2_IDATAR3_Type
  IDATAR4*: ADC2_IDATAR4_Type
  RDATAR_DR_ACT_DCG*: ADC2_RDATAR_DR_ACT_DCG_Type

type DBG_CFGR1_Type* = object
  loc: uint

type DBG_CFGR2_Type* = object
  loc: uint

type DBG_Type* = object
  CFGR1*: DBG_CFGR1_Type
  CFGR2*: DBG_CFGR2_Type

type USBHD_USB_CTRL_Type* = object
  loc: uint

type USBHD_UHOST_CTRL_Type* = object
  loc: uint

type USBHD_USB_INT_EN_Type* = object
  loc: uint

type USBHD_USB_DEV_AD_Type* = object
  loc: uint

type USBHD_USB_FRAME_NO_Type* = object
  loc: uint

type USBHD_USB_USB_SUSPEND_Type* = object
  loc: uint

type USBHD_USB_SPEED_TYPE_Type* = object
  loc: uint

type USBHD_USB_MIS_ST_Type* = object
  loc: uint

type USBHD_USB_INT_FG_Type* = object
  loc: uint

type USBHD_USB_INT_ST_Type* = object
  loc: uint

type USBHD_USB_RX_LEN_Type* = object
  loc: uint

type USBHD_UEP_CONFIG_Type* = object
  loc: uint

type USBHD_UEP_TYPE_Type* = object
  loc: uint

type USBHD_UEP_BUF_MOD_Type* = object
  loc: uint

type USBHD_UEP0_DMA_Type* = object
  loc: uint

type USBHD_UEP1_RX_DMA_Type* = object
  loc: uint

type USBHD_UEP2_RX_DMA_UH_RX_DMA_Type* = object
  loc: uint

type USBHD_UEP3_RX_DMA_Type* = object
  loc: uint

type USBHD_UEP4_RX_DMA_Type* = object
  loc: uint

type USBHD_UEP5_RX_DMA_Type* = object
  loc: uint

type USBHD_UEP6_RX_DMA_Type* = object
  loc: uint

type USBHD_UEP7_RX_DMA_Type* = object
  loc: uint

type USBHD_UEP8_RX_DMA_Type* = object
  loc: uint

type USBHD_UEP9_RX_DMA_Type* = object
  loc: uint

type USBHD_UEP10_RX_DMA_Type* = object
  loc: uint

type USBHD_UEP11_RX_DMA_Type* = object
  loc: uint

type USBHD_UEP12_RX_DMA_Type* = object
  loc: uint

type USBHD_UEP13_RX_DMA_Type* = object
  loc: uint

type USBHD_UEP14_RX_DMA_Type* = object
  loc: uint

type USBHD_UEP15_RX_DMA_Type* = object
  loc: uint

type USBHD_UEP1_TX_DMA_Type* = object
  loc: uint

type USBHD_UEP2_TX_DMA_Type* = object
  loc: uint

type USBHD_UEP3_TX_DMA_UH_TX_DMA_Type* = object
  loc: uint

type USBHD_UEP4_TX_DMA_Type* = object
  loc: uint

type USBHD_UEP5_TX_DMA_Type* = object
  loc: uint

type USBHD_UEP6_TX_DMA_Type* = object
  loc: uint

type USBHD_UEP7_TX_DMA_Type* = object
  loc: uint

type USBHD_UEP8_TX_DMA_Type* = object
  loc: uint

type USBHD_UEP9_TX_DMA_Type* = object
  loc: uint

type USBHD_UEP10_TX_DMA_Type* = object
  loc: uint

type USBHD_UEP11_TX_DMA_Type* = object
  loc: uint

type USBHD_UEP12_TX_DMA_UH_SPLIT_DATA_Type* = object
  loc: uint

type USBHD_UEP13_TX_DMA_Type* = object
  loc: uint

type USBHD_UEP14_TX_DMA_Type* = object
  loc: uint

type USBHD_UEP15_TX_DMA_Type* = object
  loc: uint

type USBHD_UEP0_MAX_LEN_Type* = object
  loc: uint

type USBHD_UEP1_MAX_LEN_Type* = object
  loc: uint

type USBHD_UEP2_MAX_LEN_UH_RX_MAX_LEN_Type* = object
  loc: uint

type USBHD_UEP3_MAX_LEN_Type* = object
  loc: uint

type USBHD_UEP4_MAX_LEN_Type* = object
  loc: uint

type USBHD_UEP5_MAX_LEN_Type* = object
  loc: uint

type USBHD_UEP6_MAX_LEN_Type* = object
  loc: uint

type USBHD_UEP7_MAX_LEN_Type* = object
  loc: uint

type USBHD_UEP8_MAX_LEN_Type* = object
  loc: uint

type USBHD_UEP9_MAX_LEN_Type* = object
  loc: uint

type USBHD_UEP10_MAX_LEN_Type* = object
  loc: uint

type USBHD_UEP11_MAX_LEN_Type* = object
  loc: uint

type USBHD_UEP12_MAX_LEN_Type* = object
  loc: uint

type USBHD_UEP13_MAX_LEN_Type* = object
  loc: uint

type USBHD_UEP14_MAX_LEN_Type* = object
  loc: uint

type USBHD_UEP15_MAX_LEN_Type* = object
  loc: uint

type USBHD_UEP0_T_LEN_Type* = object
  loc: uint

type USBHD_UEP0_T_CTRL_Type* = object
  loc: uint

type USBHD_UEP0_R_CTRL_Type* = object
  loc: uint

type USBHD_UEP1_T_LEN_Type* = object
  loc: uint

type USBHD_UEP1_T_CTRL_Type* = object
  loc: uint

type USBHD_UEP1_R_CTRL_Type* = object
  loc: uint

type USBHD_UEP2_T_LEN_UH_EP_PID_Type* = object
  loc: uint

type USBHD_UEP2_T_CTRL_Type* = object
  loc: uint

type USBHD_UEP2_R_CTRL_UH_RX_CTRL_Type* = object
  loc: uint

type USBHD_UEP3_T_LEN_UH_TX_LEN_H_Type* = object
  loc: uint

type USBHD_UEP3_T_CTRL_UH_TX_CTRL_Type* = object
  loc: uint

type USBHD_UEP3_R_CTRL_Type* = object
  loc: uint

type USBHD_UEP4_T_LEN_Type* = object
  loc: uint

type USBHD_UEP4_T_CTRL_Type* = object
  loc: uint

type USBHD_UEP4_R_CTRL_Type* = object
  loc: uint

type USBHD_UEP5_T_LEN_Type* = object
  loc: uint

type USBHD_UEP5_T_CTRL_Type* = object
  loc: uint

type USBHD_UEP5_R_CTRL_Type* = object
  loc: uint

type USBHD_UEP6_T_LEN_Type* = object
  loc: uint

type USBHD_UEP6_T_CTRL_Type* = object
  loc: uint

type USBHD_UEP6_R_CTRL_Type* = object
  loc: uint

type USBHD_UEP7_T_LEN_Type* = object
  loc: uint

type USBHD_UEP7_T_CTRL_Type* = object
  loc: uint

type USBHD_UEP7_R_CTRL_Type* = object
  loc: uint

type USBHD_UEP8_T_LEN_Type* = object
  loc: uint

type USBHD_UEP8_T_CTRL_Type* = object
  loc: uint

type USBHD_UEP8_R_CTRL_Type* = object
  loc: uint

type USBHD_UEP9_T_LEN_Type* = object
  loc: uint

type USBHD_UEP9_T_CTRL_Type* = object
  loc: uint

type USBHD_UEP9_R_CTRL_Type* = object
  loc: uint

type USBHD_UEP10_T_LEN_Type* = object
  loc: uint

type USBHD_UEP10_T_CTRL_Type* = object
  loc: uint

type USBHD_UEP10_R_CTRL_Type* = object
  loc: uint

type USBHD_UEP11_T_LEN_Type* = object
  loc: uint

type USBHD_UEP11_T_CTRL_Type* = object
  loc: uint

type USBHD_UEP11_R_CTRL_Type* = object
  loc: uint

type USBHD_UEP12_T_LEN_Type* = object
  loc: uint

type USBHD_UEP12_T_CTRL_Type* = object
  loc: uint

type USBHD_UEP12_R_CTRL_Type* = object
  loc: uint

type USBHD_UEP13_T_LEN_Type* = object
  loc: uint

type USBHD_UEP13_T_CTRL_Type* = object
  loc: uint

type USBHD_UEP13_R_CTRL_Type* = object
  loc: uint

type USBHD_UEP14_T_LEN_Type* = object
  loc: uint

type USBHD_UEP14_T_CTRL_Type* = object
  loc: uint

type USBHD_UEP14_R_CTRL_Type* = object
  loc: uint

type USBHD_UEP15_T_LEN_Type* = object
  loc: uint

type USBHD_UEP15_T_CTRL_Type* = object
  loc: uint

type USBHD_UEP15_R_CTRL_Type* = object
  loc: uint

type USBHD_Type* = object
  USB_CTRL*: USBHD_USB_CTRL_Type
  UHOST_CTRL*: USBHD_UHOST_CTRL_Type
  USB_INT_EN*: USBHD_USB_INT_EN_Type
  USB_DEV_AD*: USBHD_USB_DEV_AD_Type
  USB_FRAME_NO*: USBHD_USB_FRAME_NO_Type
  USB_USB_SUSPEND*: USBHD_USB_USB_SUSPEND_Type
  USB_SPEED_TYPE*: USBHD_USB_SPEED_TYPE_Type
  USB_MIS_ST*: USBHD_USB_MIS_ST_Type
  USB_INT_FG*: USBHD_USB_INT_FG_Type
  USB_INT_ST*: USBHD_USB_INT_ST_Type
  USB_RX_LEN*: USBHD_USB_RX_LEN_Type
  UEP_CONFIG*: USBHD_UEP_CONFIG_Type
  UEP_TYPE*: USBHD_UEP_TYPE_Type
  UEP_BUF_MOD*: USBHD_UEP_BUF_MOD_Type
  UEP0_DMA*: USBHD_UEP0_DMA_Type
  UEP1_RX_DMA*: USBHD_UEP1_RX_DMA_Type
  UEP2_RX_DMA_UH_RX_DMA*: USBHD_UEP2_RX_DMA_UH_RX_DMA_Type
  UEP3_RX_DMA*: USBHD_UEP3_RX_DMA_Type
  UEP4_RX_DMA*: USBHD_UEP4_RX_DMA_Type
  UEP5_RX_DMA*: USBHD_UEP5_RX_DMA_Type
  UEP6_RX_DMA*: USBHD_UEP6_RX_DMA_Type
  UEP7_RX_DMA*: USBHD_UEP7_RX_DMA_Type
  UEP8_RX_DMA*: USBHD_UEP8_RX_DMA_Type
  UEP9_RX_DMA*: USBHD_UEP9_RX_DMA_Type
  UEP10_RX_DMA*: USBHD_UEP10_RX_DMA_Type
  UEP11_RX_DMA*: USBHD_UEP11_RX_DMA_Type
  UEP12_RX_DMA*: USBHD_UEP12_RX_DMA_Type
  UEP13_RX_DMA*: USBHD_UEP13_RX_DMA_Type
  UEP14_RX_DMA*: USBHD_UEP14_RX_DMA_Type
  UEP15_RX_DMA*: USBHD_UEP15_RX_DMA_Type
  UEP1_TX_DMA*: USBHD_UEP1_TX_DMA_Type
  UEP2_TX_DMA*: USBHD_UEP2_TX_DMA_Type
  UEP3_TX_DMA_UH_TX_DMA*: USBHD_UEP3_TX_DMA_UH_TX_DMA_Type
  UEP4_TX_DMA*: USBHD_UEP4_TX_DMA_Type
  UEP5_TX_DMA*: USBHD_UEP5_TX_DMA_Type
  UEP6_TX_DMA*: USBHD_UEP6_TX_DMA_Type
  UEP7_TX_DMA*: USBHD_UEP7_TX_DMA_Type
  UEP8_TX_DMA*: USBHD_UEP8_TX_DMA_Type
  UEP9_TX_DMA*: USBHD_UEP9_TX_DMA_Type
  UEP10_TX_DMA*: USBHD_UEP10_TX_DMA_Type
  UEP11_TX_DMA*: USBHD_UEP11_TX_DMA_Type
  UEP12_TX_DMA_UH_SPLIT_DATA*: USBHD_UEP12_TX_DMA_UH_SPLIT_DATA_Type
  UEP13_TX_DMA*: USBHD_UEP13_TX_DMA_Type
  UEP14_TX_DMA*: USBHD_UEP14_TX_DMA_Type
  UEP15_TX_DMA*: USBHD_UEP15_TX_DMA_Type
  UEP0_MAX_LEN*: USBHD_UEP0_MAX_LEN_Type
  UEP1_MAX_LEN*: USBHD_UEP1_MAX_LEN_Type
  UEP2_MAX_LEN_UH_RX_MAX_LEN*: USBHD_UEP2_MAX_LEN_UH_RX_MAX_LEN_Type
  UEP3_MAX_LEN*: USBHD_UEP3_MAX_LEN_Type
  UEP4_MAX_LEN*: USBHD_UEP4_MAX_LEN_Type
  UEP5_MAX_LEN*: USBHD_UEP5_MAX_LEN_Type
  UEP6_MAX_LEN*: USBHD_UEP6_MAX_LEN_Type
  UEP7_MAX_LEN*: USBHD_UEP7_MAX_LEN_Type
  UEP8_MAX_LEN*: USBHD_UEP8_MAX_LEN_Type
  UEP9_MAX_LEN*: USBHD_UEP9_MAX_LEN_Type
  UEP10_MAX_LEN*: USBHD_UEP10_MAX_LEN_Type
  UEP11_MAX_LEN*: USBHD_UEP11_MAX_LEN_Type
  UEP12_MAX_LEN*: USBHD_UEP12_MAX_LEN_Type
  UEP13_MAX_LEN*: USBHD_UEP13_MAX_LEN_Type
  UEP14_MAX_LEN*: USBHD_UEP14_MAX_LEN_Type
  UEP15_MAX_LEN*: USBHD_UEP15_MAX_LEN_Type
  UEP0_T_LEN*: USBHD_UEP0_T_LEN_Type
  UEP0_T_CTRL*: USBHD_UEP0_T_CTRL_Type
  UEP0_R_CTRL*: USBHD_UEP0_R_CTRL_Type
  UEP1_T_LEN*: USBHD_UEP1_T_LEN_Type
  UEP1_T_CTRL*: USBHD_UEP1_T_CTRL_Type
  UEP1_R_CTRL*: USBHD_UEP1_R_CTRL_Type
  UEP2_T_LEN_UH_EP_PID*: USBHD_UEP2_T_LEN_UH_EP_PID_Type
  UEP2_T_CTRL*: USBHD_UEP2_T_CTRL_Type
  UEP2_R_CTRL_UH_RX_CTRL*: USBHD_UEP2_R_CTRL_UH_RX_CTRL_Type
  UEP3_T_LEN_UH_TX_LEN_H*: USBHD_UEP3_T_LEN_UH_TX_LEN_H_Type
  UEP3_T_CTRL_UH_TX_CTRL*: USBHD_UEP3_T_CTRL_UH_TX_CTRL_Type
  UEP3_R_CTRL*: USBHD_UEP3_R_CTRL_Type
  UEP4_T_LEN*: USBHD_UEP4_T_LEN_Type
  UEP4_T_CTRL*: USBHD_UEP4_T_CTRL_Type
  UEP4_R_CTRL*: USBHD_UEP4_R_CTRL_Type
  UEP5_T_LEN*: USBHD_UEP5_T_LEN_Type
  UEP5_T_CTRL*: USBHD_UEP5_T_CTRL_Type
  UEP5_R_CTRL*: USBHD_UEP5_R_CTRL_Type
  UEP6_T_LEN*: USBHD_UEP6_T_LEN_Type
  UEP6_T_CTRL*: USBHD_UEP6_T_CTRL_Type
  UEP6_R_CTRL*: USBHD_UEP6_R_CTRL_Type
  UEP7_T_LEN*: USBHD_UEP7_T_LEN_Type
  UEP7_T_CTRL*: USBHD_UEP7_T_CTRL_Type
  UEP7_R_CTRL*: USBHD_UEP7_R_CTRL_Type
  UEP8_T_LEN*: USBHD_UEP8_T_LEN_Type
  UEP8_T_CTRL*: USBHD_UEP8_T_CTRL_Type
  UEP8_R_CTRL*: USBHD_UEP8_R_CTRL_Type
  UEP9_T_LEN*: USBHD_UEP9_T_LEN_Type
  UEP9_T_CTRL*: USBHD_UEP9_T_CTRL_Type
  UEP9_R_CTRL*: USBHD_UEP9_R_CTRL_Type
  UEP10_T_LEN*: USBHD_UEP10_T_LEN_Type
  UEP10_T_CTRL*: USBHD_UEP10_T_CTRL_Type
  UEP10_R_CTRL*: USBHD_UEP10_R_CTRL_Type
  UEP11_T_LEN*: USBHD_UEP11_T_LEN_Type
  UEP11_T_CTRL*: USBHD_UEP11_T_CTRL_Type
  UEP11_R_CTRL*: USBHD_UEP11_R_CTRL_Type
  UEP12_T_LEN*: USBHD_UEP12_T_LEN_Type
  UEP12_T_CTRL*: USBHD_UEP12_T_CTRL_Type
  UEP12_R_CTRL*: USBHD_UEP12_R_CTRL_Type
  UEP13_T_LEN*: USBHD_UEP13_T_LEN_Type
  UEP13_T_CTRL*: USBHD_UEP13_T_CTRL_Type
  UEP13_R_CTRL*: USBHD_UEP13_R_CTRL_Type
  UEP14_T_LEN*: USBHD_UEP14_T_LEN_Type
  UEP14_T_CTRL*: USBHD_UEP14_T_CTRL_Type
  UEP14_R_CTRL*: USBHD_UEP14_R_CTRL_Type
  UEP15_T_LEN*: USBHD_UEP15_T_LEN_Type
  UEP15_T_CTRL*: USBHD_UEP15_T_CTRL_Type
  UEP15_R_CTRL*: USBHD_UEP15_R_CTRL_Type

type CRC_DATAR_Type* = object
  loc: uint

type CRC_IDATAR_Type* = object
  loc: uint

type CRC_CTLR_Type* = object
  loc: uint

type CRC_Type* = object
  DATAR*: CRC_DATAR_Type
  IDATAR*: CRC_IDATAR_Type
  CTLR*: CRC_CTLR_Type

type FLASH_KEYR_Type* = object
  loc: uint

type FLASH_OBKEYR_Type* = object
  loc: uint

type FLASH_STATR_Type* = object
  loc: uint

type FLASH_CTLR_Type* = object
  loc: uint

type FLASH_ADDR_Type* = object
  loc: uint

type FLASH_OBR_Type* = object
  loc: uint

type FLASH_WPR_Type* = object
  loc: uint

type FLASH_MODEKEYR_Type* = object
  loc: uint

type FLASH_Type* = object
  KEYR*: FLASH_KEYR_Type
  OBKEYR*: FLASH_OBKEYR_Type
  STATR*: FLASH_STATR_Type
  CTLR*: FLASH_CTLR_Type
  ADDRx*: FLASH_ADDR_Type
  OBR*: FLASH_OBR_Type
  WPR*: FLASH_WPR_Type
  MODEKEYR*: FLASH_MODEKEYR_Type

type USB_OTG_FS_USBHD_BASE_CTRL_Type* = object
  loc: uint

type USB_OTG_FS_USBHD_UDEV_CTRL_USBHD_UHOST_CTRL_Type* = object
  loc: uint

type USB_OTG_FS_R8_USB_INT_EN_Type* = object
  loc: uint

type USB_OTG_FS_R8_USB_DEV_AD_Type* = object
  loc: uint

type USB_OTG_FS_R8_USB_MIS_ST_Type* = object
  loc: uint

type USB_OTG_FS_R8_USB_INT_FG_Type* = object
  loc: uint

type USB_OTG_FS_R8_USB_INT_ST_Type* = object
  loc: uint

type USB_OTG_FS_R16_USB_RX_LEN_Type* = object
  loc: uint

type USB_OTG_FS_R8_UEP4_1_MOD_Type* = object
  loc: uint

type USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Type* = object
  loc: uint

type USB_OTG_FS_R8_UEP5_6_MOD_Type* = object
  loc: uint

type USB_OTG_FS_R8_UEP7_MOD_Type* = object
  loc: uint

type USB_OTG_FS_R32_UEP0_DMA_Type* = object
  loc: uint

type USB_OTG_FS_R32_UEP1_DMA_Type* = object
  loc: uint

type USB_OTG_FS_R32_UEP2_DMA_R32_UH_RX_DMA_Type* = object
  loc: uint

type USB_OTG_FS_R32_UEP3_DMA_R32_UH_TX_DMA_Type* = object
  loc: uint

type USB_OTG_FS_R32_UEP4_DMA_Type* = object
  loc: uint

type USB_OTG_FS_R32_UEP5_DMA_Type* = object
  loc: uint

type USB_OTG_FS_R32_UEP6_DMA_Type* = object
  loc: uint

type USB_OTG_FS_R32_UEP7_DMA_Type* = object
  loc: uint

type USB_OTG_FS_R8_UEP0_T_LEN_Type* = object
  loc: uint

type USB_OTG_FS_R8_UEP0_T_CTRL_Type* = object
  loc: uint

type USB_OTG_FS_R8_UEP0_R_CTRL_Type* = object
  loc: uint

type USB_OTG_FS_R8_UEP1_T_LEN_Type* = object
  loc: uint

type USB_OTG_FS_R8_UEP1_T_CTRL_USBHD_UH_SETUP_Type* = object
  loc: uint

type USB_OTG_FS_R8_UEP1_R_CTRL_Type* = object
  loc: uint

type USB_OTG_FS_R8_UEP2_T_LEN_USBHD_UH_EP_PID_Type* = object
  loc: uint

type USB_OTG_FS_R8_UEP2_T_CTRL_Type* = object
  loc: uint

type USB_OTG_FS_R8_UEP2_R_CTRL_USBHD_UH_RX_CTRL_Type* = object
  loc: uint

type USB_OTG_FS_R8_UEP3_T_LEN_USBHD_UH_TX_LEN_Type* = object
  loc: uint

type USB_OTG_FS_R8_UEP3_T_CTRL_USBHD_UH_TX_CTRL_Type* = object
  loc: uint

type USB_OTG_FS_R8_UEP3_R_CTRL_Type* = object
  loc: uint

type USB_OTG_FS_R8_UEP4_T_LEN_Type* = object
  loc: uint

type USB_OTG_FS_R8_UEP4_T_CTRL_Type* = object
  loc: uint

type USB_OTG_FS_R8_UEP4_R_CTRL_Type* = object
  loc: uint

type USB_OTG_FS_R8_UEP5_T_LEN_Type* = object
  loc: uint

type USB_OTG_FS_R8_UEP5_T_CTRL_Type* = object
  loc: uint

type USB_OTG_FS_R8_UEP5_R_CTRL_Type* = object
  loc: uint

type USB_OTG_FS_R8_UEP6_T_LEN_Type* = object
  loc: uint

type USB_OTG_FS_R8_UEP6_T_CTRL_Type* = object
  loc: uint

type USB_OTG_FS_R8_UEP6_R_CTRL_Type* = object
  loc: uint

type USB_OTG_FS_R8_UEP7_T_LEN_Type* = object
  loc: uint

type USB_OTG_FS_R8_UEP7_T_CTRL_Type* = object
  loc: uint

type USB_OTG_FS_R8_UEP7_R_CTRL_Type* = object
  loc: uint

type USB_OTG_FS_USB_OTG_CR_Type* = object
  loc: uint

type USB_OTG_FS_USB_OTG_SR_Type* = object
  loc: uint

type USB_OTG_FS_Type* = object
  USBHD_BASE_CTRL*: USB_OTG_FS_USBHD_BASE_CTRL_Type
  USBHD_UDEV_CTRL_USBHD_UHOST_CTRL*: USB_OTG_FS_USBHD_UDEV_CTRL_USBHD_UHOST_CTRL_Type
  R8_USB_INT_EN*: USB_OTG_FS_R8_USB_INT_EN_Type
  R8_USB_DEV_AD*: USB_OTG_FS_R8_USB_DEV_AD_Type
  R8_USB_MIS_ST*: USB_OTG_FS_R8_USB_MIS_ST_Type
  R8_USB_INT_FG*: USB_OTG_FS_R8_USB_INT_FG_Type
  R8_USB_INT_ST*: USB_OTG_FS_R8_USB_INT_ST_Type
  R16_USB_RX_LEN*: USB_OTG_FS_R16_USB_RX_LEN_Type
  R8_UEP4_1_MOD*: USB_OTG_FS_R8_UEP4_1_MOD_Type
  R8_UEP2_3_MOD_R8_UH_EP_MOD*: USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Type
  R8_UEP5_6_MOD*: USB_OTG_FS_R8_UEP5_6_MOD_Type
  R8_UEP7_MOD*: USB_OTG_FS_R8_UEP7_MOD_Type
  R32_UEP0_DMA*: USB_OTG_FS_R32_UEP0_DMA_Type
  R32_UEP1_DMA*: USB_OTG_FS_R32_UEP1_DMA_Type
  R32_UEP2_DMA_R32_UH_RX_DMA*: USB_OTG_FS_R32_UEP2_DMA_R32_UH_RX_DMA_Type
  R32_UEP3_DMA_R32_UH_TX_DMA*: USB_OTG_FS_R32_UEP3_DMA_R32_UH_TX_DMA_Type
  R32_UEP4_DMA*: USB_OTG_FS_R32_UEP4_DMA_Type
  R32_UEP5_DMA*: USB_OTG_FS_R32_UEP5_DMA_Type
  R32_UEP6_DMA*: USB_OTG_FS_R32_UEP6_DMA_Type
  R32_UEP7_DMA*: USB_OTG_FS_R32_UEP7_DMA_Type
  R8_UEP0_T_LEN*: USB_OTG_FS_R8_UEP0_T_LEN_Type
  R8_UEP0_T_CTRL*: USB_OTG_FS_R8_UEP0_T_CTRL_Type
  R8_UEP0_R_CTRL*: USB_OTG_FS_R8_UEP0_R_CTRL_Type
  R8_UEP1_T_LEN*: USB_OTG_FS_R8_UEP1_T_LEN_Type
  R8_UEP1_T_CTRL_USBHD_UH_SETUP*: USB_OTG_FS_R8_UEP1_T_CTRL_USBHD_UH_SETUP_Type
  R8_UEP1_R_CTRL*: USB_OTG_FS_R8_UEP1_R_CTRL_Type
  R8_UEP2_T_LEN_USBHD_UH_EP_PID*: USB_OTG_FS_R8_UEP2_T_LEN_USBHD_UH_EP_PID_Type
  R8_UEP2_T_CTRL*: USB_OTG_FS_R8_UEP2_T_CTRL_Type
  R8_UEP2_R_CTRL_USBHD_UH_RX_CTRL*: USB_OTG_FS_R8_UEP2_R_CTRL_USBHD_UH_RX_CTRL_Type
  R8_UEP3_T_LEN_USBHD_UH_TX_LEN*: USB_OTG_FS_R8_UEP3_T_LEN_USBHD_UH_TX_LEN_Type
  R8_UEP3_T_CTRL_USBHD_UH_TX_CTRL*: USB_OTG_FS_R8_UEP3_T_CTRL_USBHD_UH_TX_CTRL_Type
  R8_UEP3_R_CTRL*: USB_OTG_FS_R8_UEP3_R_CTRL_Type
  R8_UEP4_T_LEN*: USB_OTG_FS_R8_UEP4_T_LEN_Type
  R8_UEP4_T_CTRL*: USB_OTG_FS_R8_UEP4_T_CTRL_Type
  R8_UEP4_R_CTRL*: USB_OTG_FS_R8_UEP4_R_CTRL_Type
  R8_UEP5_T_LEN*: USB_OTG_FS_R8_UEP5_T_LEN_Type
  R8_UEP5_T_CTRL*: USB_OTG_FS_R8_UEP5_T_CTRL_Type
  R8_UEP5_R_CTRL*: USB_OTG_FS_R8_UEP5_R_CTRL_Type
  R8_UEP6_T_LEN*: USB_OTG_FS_R8_UEP6_T_LEN_Type
  R8_UEP6_T_CTRL*: USB_OTG_FS_R8_UEP6_T_CTRL_Type
  R8_UEP6_R_CTRL*: USB_OTG_FS_R8_UEP6_R_CTRL_Type
  R8_UEP7_T_LEN*: USB_OTG_FS_R8_UEP7_T_LEN_Type
  R8_UEP7_T_CTRL*: USB_OTG_FS_R8_UEP7_T_CTRL_Type
  R8_UEP7_R_CTRL*: USB_OTG_FS_R8_UEP7_R_CTRL_Type
  USB_OTG_CR*: USB_OTG_FS_USB_OTG_CR_Type
  USB_OTG_SR*: USB_OTG_FS_USB_OTG_SR_Type

type PFIC_ISR1_Type* = object
  loc: uint

type PFIC_ISR2_Type* = object
  loc: uint

type PFIC_ISR3_Type* = object
  loc: uint

type PFIC_ISR4_Type* = object
  loc: uint

type PFIC_IPR1_Type* = object
  loc: uint

type PFIC_IPR2_Type* = object
  loc: uint

type PFIC_IPR3_Type* = object
  loc: uint

type PFIC_IPR4_Type* = object
  loc: uint

type PFIC_ITHRESDR_Type* = object
  loc: uint

type PFIC_CFGR_Type* = object
  loc: uint

type PFIC_GISR_Type* = object
  loc: uint

type PFIC_VTFIDR_Type* = object
  loc: uint

type PFIC_VTFADDRR0_Type* = object
  loc: uint

type PFIC_VTFADDRR1_Type* = object
  loc: uint

type PFIC_VTFADDRR2_Type* = object
  loc: uint

type PFIC_VTFADDRR3_Type* = object
  loc: uint

type PFIC_IENR1_Type* = object
  loc: uint

type PFIC_IENR2_Type* = object
  loc: uint

type PFIC_IENR3_Type* = object
  loc: uint

type PFIC_IENR4_Type* = object
  loc: uint

type PFIC_IRER1_Type* = object
  loc: uint

type PFIC_IRER2_Type* = object
  loc: uint

type PFIC_IRER3_Type* = object
  loc: uint

type PFIC_IRER4_Type* = object
  loc: uint

type PFIC_IPSR1_Type* = object
  loc: uint

type PFIC_IPSR2_Type* = object
  loc: uint

type PFIC_IPSR3_Type* = object
  loc: uint

type PFIC_IPSR4_Type* = object
  loc: uint

type PFIC_IPRR1_Type* = object
  loc: uint

type PFIC_IPRR2_Type* = object
  loc: uint

type PFIC_IPRR3_Type* = object
  loc: uint

type PFIC_IPRR4_Type* = object
  loc: uint

type PFIC_IACTR1_Type* = object
  loc: uint

type PFIC_IACTR2_Type* = object
  loc: uint

type PFIC_IACTR3_Type* = object
  loc: uint

type PFIC_IACTR4_Type* = object
  loc: uint

type PFIC_IPRIOR0_Type* = object
  loc: uint

type PFIC_IPRIOR1_Type* = object
  loc: uint

type PFIC_IPRIOR2_Type* = object
  loc: uint

type PFIC_IPRIOR3_Type* = object
  loc: uint

type PFIC_IPRIOR4_Type* = object
  loc: uint

type PFIC_IPRIOR5_Type* = object
  loc: uint

type PFIC_IPRIOR6_Type* = object
  loc: uint

type PFIC_IPRIOR7_Type* = object
  loc: uint

type PFIC_IPRIOR8_Type* = object
  loc: uint

type PFIC_IPRIOR9_Type* = object
  loc: uint

type PFIC_IPRIOR10_Type* = object
  loc: uint

type PFIC_IPRIOR11_Type* = object
  loc: uint

type PFIC_IPRIOR12_Type* = object
  loc: uint

type PFIC_IPRIOR13_Type* = object
  loc: uint

type PFIC_IPRIOR14_Type* = object
  loc: uint

type PFIC_IPRIOR15_Type* = object
  loc: uint

type PFIC_IPRIOR16_Type* = object
  loc: uint

type PFIC_IPRIOR17_Type* = object
  loc: uint

type PFIC_IPRIOR18_Type* = object
  loc: uint

type PFIC_IPRIOR19_Type* = object
  loc: uint

type PFIC_IPRIOR20_Type* = object
  loc: uint

type PFIC_IPRIOR21_Type* = object
  loc: uint

type PFIC_IPRIOR22_Type* = object
  loc: uint

type PFIC_IPRIOR23_Type* = object
  loc: uint

type PFIC_IPRIOR24_Type* = object
  loc: uint

type PFIC_IPRIOR25_Type* = object
  loc: uint

type PFIC_IPRIOR26_Type* = object
  loc: uint

type PFIC_IPRIOR27_Type* = object
  loc: uint

type PFIC_IPRIOR28_Type* = object
  loc: uint

type PFIC_IPRIOR29_Type* = object
  loc: uint

type PFIC_IPRIOR30_Type* = object
  loc: uint

type PFIC_IPRIOR31_Type* = object
  loc: uint

type PFIC_IPRIOR32_Type* = object
  loc: uint

type PFIC_IPRIOR33_Type* = object
  loc: uint

type PFIC_IPRIOR34_Type* = object
  loc: uint

type PFIC_IPRIOR35_Type* = object
  loc: uint

type PFIC_IPRIOR36_Type* = object
  loc: uint

type PFIC_IPRIOR37_Type* = object
  loc: uint

type PFIC_IPRIOR38_Type* = object
  loc: uint

type PFIC_IPRIOR39_Type* = object
  loc: uint

type PFIC_IPRIOR40_Type* = object
  loc: uint

type PFIC_IPRIOR41_Type* = object
  loc: uint

type PFIC_IPRIOR42_Type* = object
  loc: uint

type PFIC_IPRIOR43_Type* = object
  loc: uint

type PFIC_IPRIOR44_Type* = object
  loc: uint

type PFIC_IPRIOR45_Type* = object
  loc: uint

type PFIC_IPRIOR46_Type* = object
  loc: uint

type PFIC_IPRIOR47_Type* = object
  loc: uint

type PFIC_IPRIOR48_Type* = object
  loc: uint

type PFIC_IPRIOR49_Type* = object
  loc: uint

type PFIC_IPRIOR50_Type* = object
  loc: uint

type PFIC_IPRIOR51_Type* = object
  loc: uint

type PFIC_IPRIOR52_Type* = object
  loc: uint

type PFIC_IPRIOR53_Type* = object
  loc: uint

type PFIC_IPRIOR54_Type* = object
  loc: uint

type PFIC_IPRIOR55_Type* = object
  loc: uint

type PFIC_IPRIOR56_Type* = object
  loc: uint

type PFIC_IPRIOR57_Type* = object
  loc: uint

type PFIC_IPRIOR58_Type* = object
  loc: uint

type PFIC_IPRIOR59_Type* = object
  loc: uint

type PFIC_IPRIOR60_Type* = object
  loc: uint

type PFIC_IPRIOR61_Type* = object
  loc: uint

type PFIC_IPRIOR62_Type* = object
  loc: uint

type PFIC_IPRIOR63_Type* = object
  loc: uint

type PFIC_IPRIOR64_Type* = object
  loc: uint

type PFIC_IPRIOR65_Type* = object
  loc: uint

type PFIC_IPRIOR66_Type* = object
  loc: uint

type PFIC_IPRIOR67_Type* = object
  loc: uint

type PFIC_IPRIOR68_Type* = object
  loc: uint

type PFIC_IPRIOR69_Type* = object
  loc: uint

type PFIC_IPRIOR70_Type* = object
  loc: uint

type PFIC_IPRIOR71_Type* = object
  loc: uint

type PFIC_IPRIOR72_Type* = object
  loc: uint

type PFIC_IPRIOR73_Type* = object
  loc: uint

type PFIC_IPRIOR74_Type* = object
  loc: uint

type PFIC_IPRIOR75_Type* = object
  loc: uint

type PFIC_IPRIOR76_Type* = object
  loc: uint

type PFIC_IPRIOR77_Type* = object
  loc: uint

type PFIC_IPRIOR78_Type* = object
  loc: uint

type PFIC_IPRIOR79_Type* = object
  loc: uint

type PFIC_IPRIOR80_Type* = object
  loc: uint

type PFIC_IPRIOR81_Type* = object
  loc: uint

type PFIC_IPRIOR82_Type* = object
  loc: uint

type PFIC_IPRIOR83_Type* = object
  loc: uint

type PFIC_IPRIOR84_Type* = object
  loc: uint

type PFIC_IPRIOR85_Type* = object
  loc: uint

type PFIC_IPRIOR86_Type* = object
  loc: uint

type PFIC_IPRIOR87_Type* = object
  loc: uint

type PFIC_IPRIOR88_Type* = object
  loc: uint

type PFIC_IPRIOR89_Type* = object
  loc: uint

type PFIC_IPRIOR90_Type* = object
  loc: uint

type PFIC_IPRIOR91_Type* = object
  loc: uint

type PFIC_IPRIOR92_Type* = object
  loc: uint

type PFIC_IPRIOR93_Type* = object
  loc: uint

type PFIC_IPRIOR94_Type* = object
  loc: uint

type PFIC_IPRIOR95_Type* = object
  loc: uint

type PFIC_IPRIOR96_Type* = object
  loc: uint

type PFIC_IPRIOR97_Type* = object
  loc: uint

type PFIC_IPRIOR98_Type* = object
  loc: uint

type PFIC_IPRIOR99_Type* = object
  loc: uint

type PFIC_IPRIOR100_Type* = object
  loc: uint

type PFIC_IPRIOR101_Type* = object
  loc: uint

type PFIC_IPRIOR102_Type* = object
  loc: uint

type PFIC_IPRIOR103_Type* = object
  loc: uint

type PFIC_IPRIOR104_Type* = object
  loc: uint

type PFIC_IPRIOR105_Type* = object
  loc: uint

type PFIC_IPRIOR106_Type* = object
  loc: uint

type PFIC_IPRIOR107_Type* = object
  loc: uint

type PFIC_IPRIOR108_Type* = object
  loc: uint

type PFIC_IPRIOR109_Type* = object
  loc: uint

type PFIC_IPRIOR110_Type* = object
  loc: uint

type PFIC_IPRIOR111_Type* = object
  loc: uint

type PFIC_IPRIOR112_Type* = object
  loc: uint

type PFIC_IPRIOR113_Type* = object
  loc: uint

type PFIC_IPRIOR114_Type* = object
  loc: uint

type PFIC_IPRIOR115_Type* = object
  loc: uint

type PFIC_IPRIOR116_Type* = object
  loc: uint

type PFIC_IPRIOR117_Type* = object
  loc: uint

type PFIC_IPRIOR118_Type* = object
  loc: uint

type PFIC_IPRIOR119_Type* = object
  loc: uint

type PFIC_IPRIOR120_Type* = object
  loc: uint

type PFIC_IPRIOR121_Type* = object
  loc: uint

type PFIC_IPRIOR122_Type* = object
  loc: uint

type PFIC_IPRIOR123_Type* = object
  loc: uint

type PFIC_IPRIOR124_Type* = object
  loc: uint

type PFIC_IPRIOR125_Type* = object
  loc: uint

type PFIC_IPRIOR126_Type* = object
  loc: uint

type PFIC_IPRIOR127_Type* = object
  loc: uint

type PFIC_IPRIOR128_Type* = object
  loc: uint

type PFIC_IPRIOR129_Type* = object
  loc: uint

type PFIC_IPRIOR130_Type* = object
  loc: uint

type PFIC_IPRIOR131_Type* = object
  loc: uint

type PFIC_IPRIOR132_Type* = object
  loc: uint

type PFIC_IPRIOR133_Type* = object
  loc: uint

type PFIC_IPRIOR134_Type* = object
  loc: uint

type PFIC_IPRIOR135_Type* = object
  loc: uint

type PFIC_IPRIOR136_Type* = object
  loc: uint

type PFIC_IPRIOR137_Type* = object
  loc: uint

type PFIC_IPRIOR138_Type* = object
  loc: uint

type PFIC_IPRIOR139_Type* = object
  loc: uint

type PFIC_IPRIOR140_Type* = object
  loc: uint

type PFIC_IPRIOR141_Type* = object
  loc: uint

type PFIC_IPRIOR142_Type* = object
  loc: uint

type PFIC_IPRIOR143_Type* = object
  loc: uint

type PFIC_IPRIOR144_Type* = object
  loc: uint

type PFIC_IPRIOR145_Type* = object
  loc: uint

type PFIC_IPRIOR146_Type* = object
  loc: uint

type PFIC_IPRIOR147_Type* = object
  loc: uint

type PFIC_IPRIOR148_Type* = object
  loc: uint

type PFIC_IPRIOR149_Type* = object
  loc: uint

type PFIC_IPRIOR150_Type* = object
  loc: uint

type PFIC_IPRIOR151_Type* = object
  loc: uint

type PFIC_IPRIOR152_Type* = object
  loc: uint

type PFIC_IPRIOR153_Type* = object
  loc: uint

type PFIC_IPRIOR154_Type* = object
  loc: uint

type PFIC_IPRIOR155_Type* = object
  loc: uint

type PFIC_IPRIOR156_Type* = object
  loc: uint

type PFIC_IPRIOR157_Type* = object
  loc: uint

type PFIC_IPRIOR158_Type* = object
  loc: uint

type PFIC_IPRIOR159_Type* = object
  loc: uint

type PFIC_IPRIOR160_Type* = object
  loc: uint

type PFIC_IPRIOR161_Type* = object
  loc: uint

type PFIC_IPRIOR162_Type* = object
  loc: uint

type PFIC_IPRIOR163_Type* = object
  loc: uint

type PFIC_IPRIOR164_Type* = object
  loc: uint

type PFIC_IPRIOR165_Type* = object
  loc: uint

type PFIC_IPRIOR166_Type* = object
  loc: uint

type PFIC_IPRIOR167_Type* = object
  loc: uint

type PFIC_IPRIOR168_Type* = object
  loc: uint

type PFIC_IPRIOR169_Type* = object
  loc: uint

type PFIC_IPRIOR170_Type* = object
  loc: uint

type PFIC_IPRIOR171_Type* = object
  loc: uint

type PFIC_IPRIOR172_Type* = object
  loc: uint

type PFIC_IPRIOR173_Type* = object
  loc: uint

type PFIC_IPRIOR174_Type* = object
  loc: uint

type PFIC_IPRIOR175_Type* = object
  loc: uint

type PFIC_IPRIOR176_Type* = object
  loc: uint

type PFIC_IPRIOR177_Type* = object
  loc: uint

type PFIC_IPRIOR178_Type* = object
  loc: uint

type PFIC_IPRIOR179_Type* = object
  loc: uint

type PFIC_IPRIOR180_Type* = object
  loc: uint

type PFIC_IPRIOR181_Type* = object
  loc: uint

type PFIC_IPRIOR182_Type* = object
  loc: uint

type PFIC_IPRIOR183_Type* = object
  loc: uint

type PFIC_IPRIOR184_Type* = object
  loc: uint

type PFIC_IPRIOR185_Type* = object
  loc: uint

type PFIC_IPRIOR186_Type* = object
  loc: uint

type PFIC_IPRIOR187_Type* = object
  loc: uint

type PFIC_IPRIOR188_Type* = object
  loc: uint

type PFIC_IPRIOR189_Type* = object
  loc: uint

type PFIC_IPRIOR190_Type* = object
  loc: uint

type PFIC_IPRIOR191_Type* = object
  loc: uint

type PFIC_IPRIOR192_Type* = object
  loc: uint

type PFIC_IPRIOR193_Type* = object
  loc: uint

type PFIC_IPRIOR194_Type* = object
  loc: uint

type PFIC_IPRIOR195_Type* = object
  loc: uint

type PFIC_IPRIOR196_Type* = object
  loc: uint

type PFIC_IPRIOR197_Type* = object
  loc: uint

type PFIC_IPRIOR198_Type* = object
  loc: uint

type PFIC_IPRIOR199_Type* = object
  loc: uint

type PFIC_IPRIOR200_Type* = object
  loc: uint

type PFIC_IPRIOR201_Type* = object
  loc: uint

type PFIC_IPRIOR202_Type* = object
  loc: uint

type PFIC_IPRIOR203_Type* = object
  loc: uint

type PFIC_IPRIOR204_Type* = object
  loc: uint

type PFIC_IPRIOR205_Type* = object
  loc: uint

type PFIC_IPRIOR206_Type* = object
  loc: uint

type PFIC_IPRIOR207_Type* = object
  loc: uint

type PFIC_IPRIOR208_Type* = object
  loc: uint

type PFIC_IPRIOR209_Type* = object
  loc: uint

type PFIC_IPRIOR210_Type* = object
  loc: uint

type PFIC_IPRIOR211_Type* = object
  loc: uint

type PFIC_IPRIOR212_Type* = object
  loc: uint

type PFIC_IPRIOR213_Type* = object
  loc: uint

type PFIC_IPRIOR214_Type* = object
  loc: uint

type PFIC_IPRIOR215_Type* = object
  loc: uint

type PFIC_IPRIOR216_Type* = object
  loc: uint

type PFIC_IPRIOR217_Type* = object
  loc: uint

type PFIC_IPRIOR218_Type* = object
  loc: uint

type PFIC_IPRIOR219_Type* = object
  loc: uint

type PFIC_IPRIOR220_Type* = object
  loc: uint

type PFIC_IPRIOR221_Type* = object
  loc: uint

type PFIC_IPRIOR222_Type* = object
  loc: uint

type PFIC_IPRIOR223_Type* = object
  loc: uint

type PFIC_IPRIOR224_Type* = object
  loc: uint

type PFIC_IPRIOR225_Type* = object
  loc: uint

type PFIC_IPRIOR226_Type* = object
  loc: uint

type PFIC_IPRIOR227_Type* = object
  loc: uint

type PFIC_IPRIOR228_Type* = object
  loc: uint

type PFIC_IPRIOR229_Type* = object
  loc: uint

type PFIC_IPRIOR230_Type* = object
  loc: uint

type PFIC_IPRIOR231_Type* = object
  loc: uint

type PFIC_IPRIOR232_Type* = object
  loc: uint

type PFIC_IPRIOR233_Type* = object
  loc: uint

type PFIC_IPRIOR234_Type* = object
  loc: uint

type PFIC_IPRIOR235_Type* = object
  loc: uint

type PFIC_IPRIOR236_Type* = object
  loc: uint

type PFIC_IPRIOR237_Type* = object
  loc: uint

type PFIC_IPRIOR238_Type* = object
  loc: uint

type PFIC_IPRIOR239_Type* = object
  loc: uint

type PFIC_IPRIOR240_Type* = object
  loc: uint

type PFIC_IPRIOR241_Type* = object
  loc: uint

type PFIC_IPRIOR242_Type* = object
  loc: uint

type PFIC_IPRIOR243_Type* = object
  loc: uint

type PFIC_IPRIOR244_Type* = object
  loc: uint

type PFIC_IPRIOR245_Type* = object
  loc: uint

type PFIC_IPRIOR246_Type* = object
  loc: uint

type PFIC_IPRIOR247_Type* = object
  loc: uint

type PFIC_IPRIOR248_Type* = object
  loc: uint

type PFIC_IPRIOR249_Type* = object
  loc: uint

type PFIC_IPRIOR250_Type* = object
  loc: uint

type PFIC_IPRIOR251_Type* = object
  loc: uint

type PFIC_IPRIOR252_Type* = object
  loc: uint

type PFIC_IPRIOR253_Type* = object
  loc: uint

type PFIC_IPRIOR254_Type* = object
  loc: uint

type PFIC_IPRIOR255_Type* = object
  loc: uint

type PFIC_SCTLR_Type* = object
  loc: uint

type PFIC_STK_CTLR_Type* = object
  loc: uint

type PFIC_STK_SR_Type* = object
  loc: uint

type PFIC_STK_CNTL_Type* = object
  loc: uint

type PFIC_STK_CNTH_Type* = object
  loc: uint

type PFIC_STK_CMPLR_Type* = object
  loc: uint

type PFIC_STK_CMPHR_Type* = object
  loc: uint

type PFIC_Type* = object
  ISR1*: PFIC_ISR1_Type
  ISR2*: PFIC_ISR2_Type
  ISR3*: PFIC_ISR3_Type
  ISR4*: PFIC_ISR4_Type
  IPR1*: PFIC_IPR1_Type
  IPR2*: PFIC_IPR2_Type
  IPR3*: PFIC_IPR3_Type
  IPR4*: PFIC_IPR4_Type
  ITHRESDR*: PFIC_ITHRESDR_Type
  CFGR*: PFIC_CFGR_Type
  GISR*: PFIC_GISR_Type
  VTFIDR*: PFIC_VTFIDR_Type
  VTFADDRR0*: PFIC_VTFADDRR0_Type
  VTFADDRR1*: PFIC_VTFADDRR1_Type
  VTFADDRR2*: PFIC_VTFADDRR2_Type
  VTFADDRR3*: PFIC_VTFADDRR3_Type
  IENR1*: PFIC_IENR1_Type
  IENR2*: PFIC_IENR2_Type
  IENR3*: PFIC_IENR3_Type
  IENR4*: PFIC_IENR4_Type
  IRER1*: PFIC_IRER1_Type
  IRER2*: PFIC_IRER2_Type
  IRER3*: PFIC_IRER3_Type
  IRER4*: PFIC_IRER4_Type
  IPSR1*: PFIC_IPSR1_Type
  IPSR2*: PFIC_IPSR2_Type
  IPSR3*: PFIC_IPSR3_Type
  IPSR4*: PFIC_IPSR4_Type
  IPRR1*: PFIC_IPRR1_Type
  IPRR2*: PFIC_IPRR2_Type
  IPRR3*: PFIC_IPRR3_Type
  IPRR4*: PFIC_IPRR4_Type
  IACTR1*: PFIC_IACTR1_Type
  IACTR2*: PFIC_IACTR2_Type
  IACTR3*: PFIC_IACTR3_Type
  IACTR4*: PFIC_IACTR4_Type
  IPRIOR0*: PFIC_IPRIOR0_Type
  IPRIOR1*: PFIC_IPRIOR1_Type
  IPRIOR2*: PFIC_IPRIOR2_Type
  IPRIOR3*: PFIC_IPRIOR3_Type
  IPRIOR4*: PFIC_IPRIOR4_Type
  IPRIOR5*: PFIC_IPRIOR5_Type
  IPRIOR6*: PFIC_IPRIOR6_Type
  IPRIOR7*: PFIC_IPRIOR7_Type
  IPRIOR8*: PFIC_IPRIOR8_Type
  IPRIOR9*: PFIC_IPRIOR9_Type
  IPRIOR10*: PFIC_IPRIOR10_Type
  IPRIOR11*: PFIC_IPRIOR11_Type
  IPRIOR12*: PFIC_IPRIOR12_Type
  IPRIOR13*: PFIC_IPRIOR13_Type
  IPRIOR14*: PFIC_IPRIOR14_Type
  IPRIOR15*: PFIC_IPRIOR15_Type
  IPRIOR16*: PFIC_IPRIOR16_Type
  IPRIOR17*: PFIC_IPRIOR17_Type
  IPRIOR18*: PFIC_IPRIOR18_Type
  IPRIOR19*: PFIC_IPRIOR19_Type
  IPRIOR20*: PFIC_IPRIOR20_Type
  IPRIOR21*: PFIC_IPRIOR21_Type
  IPRIOR22*: PFIC_IPRIOR22_Type
  IPRIOR23*: PFIC_IPRIOR23_Type
  IPRIOR24*: PFIC_IPRIOR24_Type
  IPRIOR25*: PFIC_IPRIOR25_Type
  IPRIOR26*: PFIC_IPRIOR26_Type
  IPRIOR27*: PFIC_IPRIOR27_Type
  IPRIOR28*: PFIC_IPRIOR28_Type
  IPRIOR29*: PFIC_IPRIOR29_Type
  IPRIOR30*: PFIC_IPRIOR30_Type
  IPRIOR31*: PFIC_IPRIOR31_Type
  IPRIOR32*: PFIC_IPRIOR32_Type
  IPRIOR33*: PFIC_IPRIOR33_Type
  IPRIOR34*: PFIC_IPRIOR34_Type
  IPRIOR35*: PFIC_IPRIOR35_Type
  IPRIOR36*: PFIC_IPRIOR36_Type
  IPRIOR37*: PFIC_IPRIOR37_Type
  IPRIOR38*: PFIC_IPRIOR38_Type
  IPRIOR39*: PFIC_IPRIOR39_Type
  IPRIOR40*: PFIC_IPRIOR40_Type
  IPRIOR41*: PFIC_IPRIOR41_Type
  IPRIOR42*: PFIC_IPRIOR42_Type
  IPRIOR43*: PFIC_IPRIOR43_Type
  IPRIOR44*: PFIC_IPRIOR44_Type
  IPRIOR45*: PFIC_IPRIOR45_Type
  IPRIOR46*: PFIC_IPRIOR46_Type
  IPRIOR47*: PFIC_IPRIOR47_Type
  IPRIOR48*: PFIC_IPRIOR48_Type
  IPRIOR49*: PFIC_IPRIOR49_Type
  IPRIOR50*: PFIC_IPRIOR50_Type
  IPRIOR51*: PFIC_IPRIOR51_Type
  IPRIOR52*: PFIC_IPRIOR52_Type
  IPRIOR53*: PFIC_IPRIOR53_Type
  IPRIOR54*: PFIC_IPRIOR54_Type
  IPRIOR55*: PFIC_IPRIOR55_Type
  IPRIOR56*: PFIC_IPRIOR56_Type
  IPRIOR57*: PFIC_IPRIOR57_Type
  IPRIOR58*: PFIC_IPRIOR58_Type
  IPRIOR59*: PFIC_IPRIOR59_Type
  IPRIOR60*: PFIC_IPRIOR60_Type
  IPRIOR61*: PFIC_IPRIOR61_Type
  IPRIOR62*: PFIC_IPRIOR62_Type
  IPRIOR63*: PFIC_IPRIOR63_Type
  IPRIOR64*: PFIC_IPRIOR64_Type
  IPRIOR65*: PFIC_IPRIOR65_Type
  IPRIOR66*: PFIC_IPRIOR66_Type
  IPRIOR67*: PFIC_IPRIOR67_Type
  IPRIOR68*: PFIC_IPRIOR68_Type
  IPRIOR69*: PFIC_IPRIOR69_Type
  IPRIOR70*: PFIC_IPRIOR70_Type
  IPRIOR71*: PFIC_IPRIOR71_Type
  IPRIOR72*: PFIC_IPRIOR72_Type
  IPRIOR73*: PFIC_IPRIOR73_Type
  IPRIOR74*: PFIC_IPRIOR74_Type
  IPRIOR75*: PFIC_IPRIOR75_Type
  IPRIOR76*: PFIC_IPRIOR76_Type
  IPRIOR77*: PFIC_IPRIOR77_Type
  IPRIOR78*: PFIC_IPRIOR78_Type
  IPRIOR79*: PFIC_IPRIOR79_Type
  IPRIOR80*: PFIC_IPRIOR80_Type
  IPRIOR81*: PFIC_IPRIOR81_Type
  IPRIOR82*: PFIC_IPRIOR82_Type
  IPRIOR83*: PFIC_IPRIOR83_Type
  IPRIOR84*: PFIC_IPRIOR84_Type
  IPRIOR85*: PFIC_IPRIOR85_Type
  IPRIOR86*: PFIC_IPRIOR86_Type
  IPRIOR87*: PFIC_IPRIOR87_Type
  IPRIOR88*: PFIC_IPRIOR88_Type
  IPRIOR89*: PFIC_IPRIOR89_Type
  IPRIOR90*: PFIC_IPRIOR90_Type
  IPRIOR91*: PFIC_IPRIOR91_Type
  IPRIOR92*: PFIC_IPRIOR92_Type
  IPRIOR93*: PFIC_IPRIOR93_Type
  IPRIOR94*: PFIC_IPRIOR94_Type
  IPRIOR95*: PFIC_IPRIOR95_Type
  IPRIOR96*: PFIC_IPRIOR96_Type
  IPRIOR97*: PFIC_IPRIOR97_Type
  IPRIOR98*: PFIC_IPRIOR98_Type
  IPRIOR99*: PFIC_IPRIOR99_Type
  IPRIOR100*: PFIC_IPRIOR100_Type
  IPRIOR101*: PFIC_IPRIOR101_Type
  IPRIOR102*: PFIC_IPRIOR102_Type
  IPRIOR103*: PFIC_IPRIOR103_Type
  IPRIOR104*: PFIC_IPRIOR104_Type
  IPRIOR105*: PFIC_IPRIOR105_Type
  IPRIOR106*: PFIC_IPRIOR106_Type
  IPRIOR107*: PFIC_IPRIOR107_Type
  IPRIOR108*: PFIC_IPRIOR108_Type
  IPRIOR109*: PFIC_IPRIOR109_Type
  IPRIOR110*: PFIC_IPRIOR110_Type
  IPRIOR111*: PFIC_IPRIOR111_Type
  IPRIOR112*: PFIC_IPRIOR112_Type
  IPRIOR113*: PFIC_IPRIOR113_Type
  IPRIOR114*: PFIC_IPRIOR114_Type
  IPRIOR115*: PFIC_IPRIOR115_Type
  IPRIOR116*: PFIC_IPRIOR116_Type
  IPRIOR117*: PFIC_IPRIOR117_Type
  IPRIOR118*: PFIC_IPRIOR118_Type
  IPRIOR119*: PFIC_IPRIOR119_Type
  IPRIOR120*: PFIC_IPRIOR120_Type
  IPRIOR121*: PFIC_IPRIOR121_Type
  IPRIOR122*: PFIC_IPRIOR122_Type
  IPRIOR123*: PFIC_IPRIOR123_Type
  IPRIOR124*: PFIC_IPRIOR124_Type
  IPRIOR125*: PFIC_IPRIOR125_Type
  IPRIOR126*: PFIC_IPRIOR126_Type
  IPRIOR127*: PFIC_IPRIOR127_Type
  IPRIOR128*: PFIC_IPRIOR128_Type
  IPRIOR129*: PFIC_IPRIOR129_Type
  IPRIOR130*: PFIC_IPRIOR130_Type
  IPRIOR131*: PFIC_IPRIOR131_Type
  IPRIOR132*: PFIC_IPRIOR132_Type
  IPRIOR133*: PFIC_IPRIOR133_Type
  IPRIOR134*: PFIC_IPRIOR134_Type
  IPRIOR135*: PFIC_IPRIOR135_Type
  IPRIOR136*: PFIC_IPRIOR136_Type
  IPRIOR137*: PFIC_IPRIOR137_Type
  IPRIOR138*: PFIC_IPRIOR138_Type
  IPRIOR139*: PFIC_IPRIOR139_Type
  IPRIOR140*: PFIC_IPRIOR140_Type
  IPRIOR141*: PFIC_IPRIOR141_Type
  IPRIOR142*: PFIC_IPRIOR142_Type
  IPRIOR143*: PFIC_IPRIOR143_Type
  IPRIOR144*: PFIC_IPRIOR144_Type
  IPRIOR145*: PFIC_IPRIOR145_Type
  IPRIOR146*: PFIC_IPRIOR146_Type
  IPRIOR147*: PFIC_IPRIOR147_Type
  IPRIOR148*: PFIC_IPRIOR148_Type
  IPRIOR149*: PFIC_IPRIOR149_Type
  IPRIOR150*: PFIC_IPRIOR150_Type
  IPRIOR151*: PFIC_IPRIOR151_Type
  IPRIOR152*: PFIC_IPRIOR152_Type
  IPRIOR153*: PFIC_IPRIOR153_Type
  IPRIOR154*: PFIC_IPRIOR154_Type
  IPRIOR155*: PFIC_IPRIOR155_Type
  IPRIOR156*: PFIC_IPRIOR156_Type
  IPRIOR157*: PFIC_IPRIOR157_Type
  IPRIOR158*: PFIC_IPRIOR158_Type
  IPRIOR159*: PFIC_IPRIOR159_Type
  IPRIOR160*: PFIC_IPRIOR160_Type
  IPRIOR161*: PFIC_IPRIOR161_Type
  IPRIOR162*: PFIC_IPRIOR162_Type
  IPRIOR163*: PFIC_IPRIOR163_Type
  IPRIOR164*: PFIC_IPRIOR164_Type
  IPRIOR165*: PFIC_IPRIOR165_Type
  IPRIOR166*: PFIC_IPRIOR166_Type
  IPRIOR167*: PFIC_IPRIOR167_Type
  IPRIOR168*: PFIC_IPRIOR168_Type
  IPRIOR169*: PFIC_IPRIOR169_Type
  IPRIOR170*: PFIC_IPRIOR170_Type
  IPRIOR171*: PFIC_IPRIOR171_Type
  IPRIOR172*: PFIC_IPRIOR172_Type
  IPRIOR173*: PFIC_IPRIOR173_Type
  IPRIOR174*: PFIC_IPRIOR174_Type
  IPRIOR175*: PFIC_IPRIOR175_Type
  IPRIOR176*: PFIC_IPRIOR176_Type
  IPRIOR177*: PFIC_IPRIOR177_Type
  IPRIOR178*: PFIC_IPRIOR178_Type
  IPRIOR179*: PFIC_IPRIOR179_Type
  IPRIOR180*: PFIC_IPRIOR180_Type
  IPRIOR181*: PFIC_IPRIOR181_Type
  IPRIOR182*: PFIC_IPRIOR182_Type
  IPRIOR183*: PFIC_IPRIOR183_Type
  IPRIOR184*: PFIC_IPRIOR184_Type
  IPRIOR185*: PFIC_IPRIOR185_Type
  IPRIOR186*: PFIC_IPRIOR186_Type
  IPRIOR187*: PFIC_IPRIOR187_Type
  IPRIOR188*: PFIC_IPRIOR188_Type
  IPRIOR189*: PFIC_IPRIOR189_Type
  IPRIOR190*: PFIC_IPRIOR190_Type
  IPRIOR191*: PFIC_IPRIOR191_Type
  IPRIOR192*: PFIC_IPRIOR192_Type
  IPRIOR193*: PFIC_IPRIOR193_Type
  IPRIOR194*: PFIC_IPRIOR194_Type
  IPRIOR195*: PFIC_IPRIOR195_Type
  IPRIOR196*: PFIC_IPRIOR196_Type
  IPRIOR197*: PFIC_IPRIOR197_Type
  IPRIOR198*: PFIC_IPRIOR198_Type
  IPRIOR199*: PFIC_IPRIOR199_Type
  IPRIOR200*: PFIC_IPRIOR200_Type
  IPRIOR201*: PFIC_IPRIOR201_Type
  IPRIOR202*: PFIC_IPRIOR202_Type
  IPRIOR203*: PFIC_IPRIOR203_Type
  IPRIOR204*: PFIC_IPRIOR204_Type
  IPRIOR205*: PFIC_IPRIOR205_Type
  IPRIOR206*: PFIC_IPRIOR206_Type
  IPRIOR207*: PFIC_IPRIOR207_Type
  IPRIOR208*: PFIC_IPRIOR208_Type
  IPRIOR209*: PFIC_IPRIOR209_Type
  IPRIOR210*: PFIC_IPRIOR210_Type
  IPRIOR211*: PFIC_IPRIOR211_Type
  IPRIOR212*: PFIC_IPRIOR212_Type
  IPRIOR213*: PFIC_IPRIOR213_Type
  IPRIOR214*: PFIC_IPRIOR214_Type
  IPRIOR215*: PFIC_IPRIOR215_Type
  IPRIOR216*: PFIC_IPRIOR216_Type
  IPRIOR217*: PFIC_IPRIOR217_Type
  IPRIOR218*: PFIC_IPRIOR218_Type
  IPRIOR219*: PFIC_IPRIOR219_Type
  IPRIOR220*: PFIC_IPRIOR220_Type
  IPRIOR221*: PFIC_IPRIOR221_Type
  IPRIOR222*: PFIC_IPRIOR222_Type
  IPRIOR223*: PFIC_IPRIOR223_Type
  IPRIOR224*: PFIC_IPRIOR224_Type
  IPRIOR225*: PFIC_IPRIOR225_Type
  IPRIOR226*: PFIC_IPRIOR226_Type
  IPRIOR227*: PFIC_IPRIOR227_Type
  IPRIOR228*: PFIC_IPRIOR228_Type
  IPRIOR229*: PFIC_IPRIOR229_Type
  IPRIOR230*: PFIC_IPRIOR230_Type
  IPRIOR231*: PFIC_IPRIOR231_Type
  IPRIOR232*: PFIC_IPRIOR232_Type
  IPRIOR233*: PFIC_IPRIOR233_Type
  IPRIOR234*: PFIC_IPRIOR234_Type
  IPRIOR235*: PFIC_IPRIOR235_Type
  IPRIOR236*: PFIC_IPRIOR236_Type
  IPRIOR237*: PFIC_IPRIOR237_Type
  IPRIOR238*: PFIC_IPRIOR238_Type
  IPRIOR239*: PFIC_IPRIOR239_Type
  IPRIOR240*: PFIC_IPRIOR240_Type
  IPRIOR241*: PFIC_IPRIOR241_Type
  IPRIOR242*: PFIC_IPRIOR242_Type
  IPRIOR243*: PFIC_IPRIOR243_Type
  IPRIOR244*: PFIC_IPRIOR244_Type
  IPRIOR245*: PFIC_IPRIOR245_Type
  IPRIOR246*: PFIC_IPRIOR246_Type
  IPRIOR247*: PFIC_IPRIOR247_Type
  IPRIOR248*: PFIC_IPRIOR248_Type
  IPRIOR249*: PFIC_IPRIOR249_Type
  IPRIOR250*: PFIC_IPRIOR250_Type
  IPRIOR251*: PFIC_IPRIOR251_Type
  IPRIOR252*: PFIC_IPRIOR252_Type
  IPRIOR253*: PFIC_IPRIOR253_Type
  IPRIOR254*: PFIC_IPRIOR254_Type
  IPRIOR255*: PFIC_IPRIOR255_Type
  SCTLR*: PFIC_SCTLR_Type
  STK_CTLR*: PFIC_STK_CTLR_Type
  STK_SR*: PFIC_STK_SR_Type
  STK_CNTL*: PFIC_STK_CNTL_Type
  STK_CNTH*: PFIC_STK_CNTH_Type
  STK_CMPLR*: PFIC_STK_CMPLR_Type
  STK_CMPHR*: PFIC_STK_CMPHR_Type


################################################################################
# Peripheral object instances
################################################################################
const USB* = USB_Type(
  EP0R: USB_EP0R_Type(loc: 0x40005c00'u),
  EP1R: USB_EP1R_Type(loc: 0x40005c04'u),
  EP2R: USB_EP2R_Type(loc: 0x40005c08'u),
  EP3R: USB_EP3R_Type(loc: 0x40005c0c'u),
  EP4R: USB_EP4R_Type(loc: 0x40005c10'u),
  EP5R: USB_EP5R_Type(loc: 0x40005c14'u),
  EP6R: USB_EP6R_Type(loc: 0x40005c18'u),
  EP7R: USB_EP7R_Type(loc: 0x40005c1c'u),
  CNTR: USB_CNTR_Type(loc: 0x40005c40'u),
  ISTR: USB_ISTR_Type(loc: 0x40005c44'u),
  FNR: USB_FNR_Type(loc: 0x40005c48'u),
  DADDR: USB_DADDR_Type(loc: 0x40005c4c'u),
  BTABLE: USB_BTABLE_Type(loc: 0x40005c50'u),
)

const CAN1* = CAN1_Type(
  CTLR: CAN1_CTLR_Type(loc: 0x40006400'u),
  STATR: CAN1_STATR_Type(loc: 0x40006404'u),
  TSTATR: CAN1_TSTATR_Type(loc: 0x40006408'u),
  RFIFO0: CAN1_RFIFO0_Type(loc: 0x4000640c'u),
  RFIFO1: CAN1_RFIFO1_Type(loc: 0x40006410'u),
  INTENR: CAN1_INTENR_Type(loc: 0x40006414'u),
  ERRSR: CAN1_ERRSR_Type(loc: 0x40006418'u),
  BTIMR: CAN1_BTIMR_Type(loc: 0x4000641c'u),
  TXMIR0: CAN1_TXMIR0_Type(loc: 0x40006580'u),
  TXMDTR0: CAN1_TXMDTR0_Type(loc: 0x40006584'u),
  TXMDLR0: CAN1_TXMDLR0_Type(loc: 0x40006588'u),
  TXMDHR0: CAN1_TXMDHR0_Type(loc: 0x4000658c'u),
  TXMIR1: CAN1_TXMIR1_Type(loc: 0x40006590'u),
  TXMDTR1: CAN1_TXMDTR1_Type(loc: 0x40006594'u),
  TXMDLR1: CAN1_TXMDLR1_Type(loc: 0x40006598'u),
  TXMDHR1: CAN1_TXMDHR1_Type(loc: 0x4000659c'u),
  TXMIR2: CAN1_TXMIR2_Type(loc: 0x400065a0'u),
  TXMDTR2: CAN1_TXMDTR2_Type(loc: 0x400065a4'u),
  TXMDLR2: CAN1_TXMDLR2_Type(loc: 0x400065a8'u),
  TXMDHR2: CAN1_TXMDHR2_Type(loc: 0x400065ac'u),
  RXMIR0: CAN1_RXMIR0_Type(loc: 0x400065b0'u),
  RXMDTR0: CAN1_RXMDTR0_Type(loc: 0x400065b4'u),
  RXMDLR0: CAN1_RXMDLR0_Type(loc: 0x400065b8'u),
  RXMDHR0: CAN1_RXMDHR0_Type(loc: 0x400065bc'u),
  RXMIR1: CAN1_RXMIR1_Type(loc: 0x400065c0'u),
  RXMDTR1: CAN1_RXMDTR1_Type(loc: 0x400065c4'u),
  RXMDLR1: CAN1_RXMDLR1_Type(loc: 0x400065c8'u),
  RXMDHR1: CAN1_RXMDHR1_Type(loc: 0x400065cc'u),
  FCTLR: CAN1_FCTLR_Type(loc: 0x40006600'u),
  FMCFGR: CAN1_FMCFGR_Type(loc: 0x40006604'u),
  FSCFGR: CAN1_FSCFGR_Type(loc: 0x4000660c'u),
  FAFIFOR: CAN1_FAFIFOR_Type(loc: 0x40006614'u),
  FWR: CAN1_FWR_Type(loc: 0x4000661c'u),
  F0R1: CAN1_F0R1_Type(loc: 0x40006640'u),
  F0R2: CAN1_F0R2_Type(loc: 0x40006644'u),
  F1R1: CAN1_F1R1_Type(loc: 0x40006648'u),
  F1R2: CAN1_F1R2_Type(loc: 0x4000664c'u),
  F2R1: CAN1_F2R1_Type(loc: 0x40006650'u),
  F2R2: CAN1_F2R2_Type(loc: 0x40006654'u),
  F3R1: CAN1_F3R1_Type(loc: 0x40006658'u),
  F3R2: CAN1_F3R2_Type(loc: 0x4000665c'u),
  F4R1: CAN1_F4R1_Type(loc: 0x40006660'u),
  F4R2: CAN1_F4R2_Type(loc: 0x40006664'u),
  F5R1: CAN1_F5R1_Type(loc: 0x40006668'u),
  F5R2: CAN1_F5R2_Type(loc: 0x4000666c'u),
  F6R1: CAN1_F6R1_Type(loc: 0x40006670'u),
  F6R2: CAN1_F6R2_Type(loc: 0x40006674'u),
  F7R1: CAN1_F7R1_Type(loc: 0x40006678'u),
  F7R2: CAN1_F7R2_Type(loc: 0x4000667c'u),
  F8R1: CAN1_F8R1_Type(loc: 0x40006680'u),
  F8R2: CAN1_F8R2_Type(loc: 0x40006684'u),
  F9R1: CAN1_F9R1_Type(loc: 0x40006688'u),
  F9R2: CAN1_F9R2_Type(loc: 0x4000668c'u),
  F10R1: CAN1_F10R1_Type(loc: 0x40006690'u),
  F10R2: CAN1_F10R2_Type(loc: 0x40006694'u),
  F11R1: CAN1_F11R1_Type(loc: 0x40006698'u),
  F11R2: CAN1_F11R2_Type(loc: 0x4000669c'u),
  F12R1: CAN1_F12R1_Type(loc: 0x400066a0'u),
  F12R2: CAN1_F12R2_Type(loc: 0x400066a4'u),
  F13R1: CAN1_F13R1_Type(loc: 0x400066a8'u),
  F13R2: CAN1_F13R2_Type(loc: 0x400066ac'u),
  F14R1: CAN1_F14R1_Type(loc: 0x400066b0'u),
  F14R2: CAN1_F14R2_Type(loc: 0x400066b4'u),
  F15R1: CAN1_F15R1_Type(loc: 0x400066b8'u),
  F15R2: CAN1_F15R2_Type(loc: 0x400066bc'u),
  F16R1: CAN1_F16R1_Type(loc: 0x400066c0'u),
  F16R2: CAN1_F16R2_Type(loc: 0x400066c4'u),
  F17R1: CAN1_F17R1_Type(loc: 0x400066c8'u),
  F17R2: CAN1_F17R2_Type(loc: 0x400066cc'u),
  F18R1: CAN1_F18R1_Type(loc: 0x400066d0'u),
  F18R2: CAN1_F18R2_Type(loc: 0x400066d4'u),
  F19R1: CAN1_F19R1_Type(loc: 0x400066d8'u),
  F19R2: CAN1_F19R2_Type(loc: 0x400066dc'u),
  F20R1: CAN1_F20R1_Type(loc: 0x400066e0'u),
  F20R2: CAN1_F20R2_Type(loc: 0x400066e4'u),
  F21R1: CAN1_F21R1_Type(loc: 0x400066e8'u),
  F21R2: CAN1_F21R2_Type(loc: 0x400066ec'u),
  F22R1: CAN1_F22R1_Type(loc: 0x400066f0'u),
  F22R2: CAN1_F22R2_Type(loc: 0x400066f4'u),
  F23R1: CAN1_F23R1_Type(loc: 0x400066f8'u),
  F23R2: CAN1_F23R2_Type(loc: 0x400066fc'u),
  F24R1: CAN1_F24R1_Type(loc: 0x40006700'u),
  F24R2: CAN1_F24R2_Type(loc: 0x40006704'u),
  F25R1: CAN1_F25R1_Type(loc: 0x40006708'u),
  F25R2: CAN1_F25R2_Type(loc: 0x4000670c'u),
  F26R1: CAN1_F26R1_Type(loc: 0x40006710'u),
  F26R2: CAN1_F26R2_Type(loc: 0x40006714'u),
  F27R1: CAN1_F27R1_Type(loc: 0x40006718'u),
  F27R2: CAN1_F27R2_Type(loc: 0x4000671c'u),
)

const ETHERNET_MAC* = ETHERNET_MAC_Type(
  MACCR: ETHERNET_MAC_MACCR_Type(loc: 0x40028000'u),
  MACFFR: ETHERNET_MAC_MACFFR_Type(loc: 0x40028004'u),
  MACHTHR: ETHERNET_MAC_MACHTHR_Type(loc: 0x40028008'u),
  MACHTLR: ETHERNET_MAC_MACHTLR_Type(loc: 0x4002800c'u),
  MACMIIAR: ETHERNET_MAC_MACMIIAR_Type(loc: 0x40028010'u),
  MACMIIDR: ETHERNET_MAC_MACMIIDR_Type(loc: 0x40028014'u),
  MACFCR: ETHERNET_MAC_MACFCR_Type(loc: 0x40028018'u),
  MACVLANTR: ETHERNET_MAC_MACVLANTR_Type(loc: 0x4002801c'u),
  MACRWUFFR: ETHERNET_MAC_MACRWUFFR_Type(loc: 0x40028028'u),
  MACPMTCSR: ETHERNET_MAC_MACPMTCSR_Type(loc: 0x4002802c'u),
  MACSR: ETHERNET_MAC_MACSR_Type(loc: 0x40028038'u),
  MACIMR: ETHERNET_MAC_MACIMR_Type(loc: 0x4002803c'u),
  MACA0HR: ETHERNET_MAC_MACA0HR_Type(loc: 0x40028040'u),
  MACA0LR: ETHERNET_MAC_MACA0LR_Type(loc: 0x40028044'u),
  MACA1HR: ETHERNET_MAC_MACA1HR_Type(loc: 0x40028048'u),
  MACA1LR: ETHERNET_MAC_MACA1LR_Type(loc: 0x4002804c'u),
  MACA2HR: ETHERNET_MAC_MACA2HR_Type(loc: 0x40028050'u),
  MACA2LR: ETHERNET_MAC_MACA2LR_Type(loc: 0x40028054'u),
  MACA3HR: ETHERNET_MAC_MACA3HR_Type(loc: 0x40028058'u),
  MACA3LR: ETHERNET_MAC_MACA3LR_Type(loc: 0x4002805c'u),
)

const ETHERNET_MMC* = ETHERNET_MMC_Type(
  MMCCR: ETHERNET_MMC_MMCCR_Type(loc: 0x40028100'u),
  MMCRIR: ETHERNET_MMC_MMCRIR_Type(loc: 0x40028104'u),
  MMCTIR: ETHERNET_MMC_MMCTIR_Type(loc: 0x40028108'u),
  MMCRIMR: ETHERNET_MMC_MMCRIMR_Type(loc: 0x4002810c'u),
  MMCTIMR: ETHERNET_MMC_MMCTIMR_Type(loc: 0x40028110'u),
  MMCTGFSCCR: ETHERNET_MMC_MMCTGFSCCR_Type(loc: 0x4002814c'u),
  MMCTGFMSCCR: ETHERNET_MMC_MMCTGFMSCCR_Type(loc: 0x40028150'u),
  MMCTGFCR: ETHERNET_MMC_MMCTGFCR_Type(loc: 0x40028168'u),
  MMCRFCECR: ETHERNET_MMC_MMCRFCECR_Type(loc: 0x40028194'u),
  MMCRFAECR: ETHERNET_MMC_MMCRFAECR_Type(loc: 0x40028198'u),
  MMCRGUFCR: ETHERNET_MMC_MMCRGUFCR_Type(loc: 0x400281c4'u),
)

const ETHERNET_PTP* = ETHERNET_PTP_Type(
  PTPTSCR: ETHERNET_PTP_PTPTSCR_Type(loc: 0x40028700'u),
  PTPSSIR: ETHERNET_PTP_PTPSSIR_Type(loc: 0x40028704'u),
  PTPTSHR: ETHERNET_PTP_PTPTSHR_Type(loc: 0x40028708'u),
  PTPTSLR: ETHERNET_PTP_PTPTSLR_Type(loc: 0x4002870c'u),
  PTPTSHUR: ETHERNET_PTP_PTPTSHUR_Type(loc: 0x40028710'u),
  PTPTSLUR: ETHERNET_PTP_PTPTSLUR_Type(loc: 0x40028714'u),
  PTPTSAR: ETHERNET_PTP_PTPTSAR_Type(loc: 0x40028718'u),
  PTPTTHR: ETHERNET_PTP_PTPTTHR_Type(loc: 0x4002871c'u),
  PTPTTLR: ETHERNET_PTP_PTPTTLR_Type(loc: 0x40028720'u),
)

const ETHERNET_DMA* = ETHERNET_DMA_Type(
  DMABMR: ETHERNET_DMA_DMABMR_Type(loc: 0x40029000'u),
  DMATPDR: ETHERNET_DMA_DMATPDR_Type(loc: 0x40029004'u),
  DMARPDR: ETHERNET_DMA_DMARPDR_Type(loc: 0x40029008'u),
  DMARDLAR: ETHERNET_DMA_DMARDLAR_Type(loc: 0x4002900c'u),
  DMATDLAR: ETHERNET_DMA_DMATDLAR_Type(loc: 0x40029010'u),
  DMASR: ETHERNET_DMA_DMASR_Type(loc: 0x40029014'u),
  DMAOMR: ETHERNET_DMA_DMAOMR_Type(loc: 0x40029018'u),
  DMAIER: ETHERNET_DMA_DMAIER_Type(loc: 0x4002901c'u),
  DMAMFBOCR: ETHERNET_DMA_DMAMFBOCR_Type(loc: 0x40029020'u),
  DMACHTDR: ETHERNET_DMA_DMACHTDR_Type(loc: 0x40029048'u),
  DMACHRDR: ETHERNET_DMA_DMACHRDR_Type(loc: 0x4002904c'u),
  DMACHTBAR: ETHERNET_DMA_DMACHTBAR_Type(loc: 0x40029050'u),
  DMACHRBAR: ETHERNET_DMA_DMACHRBAR_Type(loc: 0x40029054'u),
)

const DAC* = DAC_Type(
  CTLR: DAC_CTLR_Type(loc: 0x40007400'u),
  SWTR: DAC_SWTR_Type(loc: 0x40007404'u),
  R12BDHR1: DAC_R12BDHR1_Type(loc: 0x40007408'u),
  L12BDHR1: DAC_L12BDHR1_Type(loc: 0x4000740c'u),
  R8BDHR1: DAC_R8BDHR1_Type(loc: 0x40007410'u),
  R12BDHR2: DAC_R12BDHR2_Type(loc: 0x40007414'u),
  L12BDHR2: DAC_L12BDHR2_Type(loc: 0x40007418'u),
  R8BDHR2: DAC_R8BDHR2_Type(loc: 0x4000741c'u),
  RD12BDHR: DAC_RD12BDHR_Type(loc: 0x40007420'u),
  LD12BDHR: DAC_LD12BDHR_Type(loc: 0x40007424'u),
  RD8BDHR: DAC_RD8BDHR_Type(loc: 0x40007428'u),
  DOR1: DAC_DOR1_Type(loc: 0x4000742c'u),
  DOR2: DAC_DOR2_Type(loc: 0x40007430'u),
)

const PWR* = PWR_Type(
  CTLR: PWR_CTLR_Type(loc: 0x40007000'u),
  CSR: PWR_CSR_Type(loc: 0x40007004'u),
)

const RCC* = RCC_Type(
  CTLR: RCC_CTLR_Type(loc: 0x40021000'u),
  CFGR0: RCC_CFGR0_Type(loc: 0x40021004'u),
  INTR: RCC_INTR_Type(loc: 0x40021008'u),
  APB2PRSTR: RCC_APB2PRSTR_Type(loc: 0x4002100c'u),
  APB1PRSTR: RCC_APB1PRSTR_Type(loc: 0x40021010'u),
  AHBPCENR: RCC_AHBPCENR_Type(loc: 0x40021014'u),
  APB2PCENR: RCC_APB2PCENR_Type(loc: 0x40021018'u),
  APB1PCENR: RCC_APB1PCENR_Type(loc: 0x4002101c'u),
  BDCTLR: RCC_BDCTLR_Type(loc: 0x40021020'u),
  RSTSCKR: RCC_RSTSCKR_Type(loc: 0x40021024'u),
  AHBRSTR: RCC_AHBRSTR_Type(loc: 0x40021028'u),
  CFGR2: RCC_CFGR2_Type(loc: 0x4002102c'u),
)

const EXTEND* = EXTEND_Type(
  EXTEND_CTR: EXTEND_EXTEND_CTR_Type(loc: 0x40023800'u),
)

const OPA* = OPA_Type(
  CR: OPA_CR_Type(loc: 0x40023804'u),
)

const GPIOA* = GPIOA_Type(
  CFGLR: GPIOA_CFGLR_Type(loc: 0x40010800'u),
  CFGHR: GPIOA_CFGHR_Type(loc: 0x40010804'u),
  INDR: GPIOA_INDR_Type(loc: 0x40010808'u),
  OUTDR: GPIOA_OUTDR_Type(loc: 0x4001080c'u),
  BSHR: GPIOA_BSHR_Type(loc: 0x40010810'u),
  BCR: GPIOA_BCR_Type(loc: 0x40010814'u),
  LCKR: GPIOA_LCKR_Type(loc: 0x40010818'u),
)

const GPIOB* = GPIOA_Type(
  CFGLR: GPIOA_CFGLR_Type(loc: 0x40010c00'u),
  CFGHR: GPIOA_CFGHR_Type(loc: 0x40010c04'u),
  INDR: GPIOA_INDR_Type(loc: 0x40010c08'u),
  OUTDR: GPIOA_OUTDR_Type(loc: 0x40010c0c'u),
  BSHR: GPIOA_BSHR_Type(loc: 0x40010c10'u),
  BCR: GPIOA_BCR_Type(loc: 0x40010c14'u),
  LCKR: GPIOA_LCKR_Type(loc: 0x40010c18'u),
)

const GPIOC* = GPIOA_Type(
  CFGLR: GPIOA_CFGLR_Type(loc: 0x40011000'u),
  CFGHR: GPIOA_CFGHR_Type(loc: 0x40011004'u),
  INDR: GPIOA_INDR_Type(loc: 0x40011008'u),
  OUTDR: GPIOA_OUTDR_Type(loc: 0x4001100c'u),
  BSHR: GPIOA_BSHR_Type(loc: 0x40011010'u),
  BCR: GPIOA_BCR_Type(loc: 0x40011014'u),
  LCKR: GPIOA_LCKR_Type(loc: 0x40011018'u),
)

const GPIOD* = GPIOA_Type(
  CFGLR: GPIOA_CFGLR_Type(loc: 0x40011400'u),
  CFGHR: GPIOA_CFGHR_Type(loc: 0x40011404'u),
  INDR: GPIOA_INDR_Type(loc: 0x40011408'u),
  OUTDR: GPIOA_OUTDR_Type(loc: 0x4001140c'u),
  BSHR: GPIOA_BSHR_Type(loc: 0x40011410'u),
  BCR: GPIOA_BCR_Type(loc: 0x40011414'u),
  LCKR: GPIOA_LCKR_Type(loc: 0x40011418'u),
)

const GPIOE* = GPIOA_Type(
  CFGLR: GPIOA_CFGLR_Type(loc: 0x40011800'u),
  CFGHR: GPIOA_CFGHR_Type(loc: 0x40011804'u),
  INDR: GPIOA_INDR_Type(loc: 0x40011808'u),
  OUTDR: GPIOA_OUTDR_Type(loc: 0x4001180c'u),
  BSHR: GPIOA_BSHR_Type(loc: 0x40011810'u),
  BCR: GPIOA_BCR_Type(loc: 0x40011814'u),
  LCKR: GPIOA_LCKR_Type(loc: 0x40011818'u),
)

const AFIO* = AFIO_Type(
  ECR: AFIO_ECR_Type(loc: 0x40010000'u),
  PCFR: AFIO_PCFR_Type(loc: 0x40010004'u),
  EXTICR1: AFIO_EXTICR1_Type(loc: 0x40010008'u),
  EXTICR2: AFIO_EXTICR2_Type(loc: 0x4001000c'u),
  EXTICR3: AFIO_EXTICR3_Type(loc: 0x40010010'u),
  EXTICR4: AFIO_EXTICR4_Type(loc: 0x40010014'u),
  PCFR2: AFIO_PCFR2_Type(loc: 0x4001001c'u),
)

const EXTI* = EXTI_Type(
  INTENR: EXTI_INTENR_Type(loc: 0x40010400'u),
  EVENR: EXTI_EVENR_Type(loc: 0x40010404'u),
  RTENR: EXTI_RTENR_Type(loc: 0x40010408'u),
  FTENR: EXTI_FTENR_Type(loc: 0x4001040c'u),
  SWIEVR: EXTI_SWIEVR_Type(loc: 0x40010410'u),
  INTFR: EXTI_INTFR_Type(loc: 0x40010414'u),
)

const DMA1* = DMA1_Type(
  INTFR: DMA1_INTFR_Type(loc: 0x40020000'u),
  INTFCR: DMA1_INTFCR_Type(loc: 0x40020004'u),
  CFGR1: DMA1_CFGR1_Type(loc: 0x40020008'u),
  CNTR1: DMA1_CNTR1_Type(loc: 0x4002000c'u),
  PADDR1: DMA1_PADDR1_Type(loc: 0x40020010'u),
  MADDR1: DMA1_MADDR1_Type(loc: 0x40020014'u),
  CFGR2: DMA1_CFGR2_Type(loc: 0x4002001c'u),
  CNTR2: DMA1_CNTR2_Type(loc: 0x40020020'u),
  PADDR2: DMA1_PADDR2_Type(loc: 0x40020024'u),
  MADDR2: DMA1_MADDR2_Type(loc: 0x40020028'u),
  CFGR3: DMA1_CFGR3_Type(loc: 0x40020030'u),
  CNTR3: DMA1_CNTR3_Type(loc: 0x40020034'u),
  PADDR3: DMA1_PADDR3_Type(loc: 0x40020038'u),
  MADDR3: DMA1_MADDR3_Type(loc: 0x4002003c'u),
  CFGR4: DMA1_CFGR4_Type(loc: 0x40020044'u),
  CNTR4: DMA1_CNTR4_Type(loc: 0x40020048'u),
  PADDR4: DMA1_PADDR4_Type(loc: 0x4002004c'u),
  MADDR4: DMA1_MADDR4_Type(loc: 0x40020050'u),
  CFGR5: DMA1_CFGR5_Type(loc: 0x40020058'u),
  CNTR5: DMA1_CNTR5_Type(loc: 0x4002005c'u),
  PADDR5: DMA1_PADDR5_Type(loc: 0x40020060'u),
  MADDR5: DMA1_MADDR5_Type(loc: 0x40020064'u),
  CFGR6: DMA1_CFGR6_Type(loc: 0x4002006c'u),
  CNTR6: DMA1_CNTR6_Type(loc: 0x40020070'u),
  PADDR6: DMA1_PADDR6_Type(loc: 0x40020074'u),
  MADDR6: DMA1_MADDR6_Type(loc: 0x40020078'u),
  CFGR7: DMA1_CFGR7_Type(loc: 0x40020080'u),
  CNTR7: DMA1_CNTR7_Type(loc: 0x40020084'u),
  PADDR7: DMA1_PADDR7_Type(loc: 0x40020088'u),
  MADDR7: DMA1_MADDR7_Type(loc: 0x4002008c'u),
  CFGR8: DMA1_CFGR8_Type(loc: 0x40020094'u),
  CNTR8: DMA1_CNTR8_Type(loc: 0x40020098'u),
  PADDR8: DMA1_PADDR8_Type(loc: 0x4002009c'u),
  MADDR8: DMA1_MADDR8_Type(loc: 0x400200a0'u),
)

const RTC* = RTC_Type(
  CTLRH: RTC_CTLRH_Type(loc: 0x40002800'u),
  CTLRL: RTC_CTLRL_Type(loc: 0x40002804'u),
  PSCRH: RTC_PSCRH_Type(loc: 0x40002808'u),
  PSCRL: RTC_PSCRL_Type(loc: 0x4000280c'u),
  DIVH: RTC_DIVH_Type(loc: 0x40002810'u),
  DIVL: RTC_DIVL_Type(loc: 0x40002814'u),
  CNTH: RTC_CNTH_Type(loc: 0x40002818'u),
  CNTL: RTC_CNTL_Type(loc: 0x4000281c'u),
  ALRMH: RTC_ALRMH_Type(loc: 0x40002820'u),
  ALRML: RTC_ALRML_Type(loc: 0x40002824'u),
)

const BKP* = BKP_Type(
  DATAR1: BKP_DATAR1_Type(loc: 0x40006c04'u),
  DATAR2: BKP_DATAR2_Type(loc: 0x40006c08'u),
  DATAR3: BKP_DATAR3_Type(loc: 0x40006c0c'u),
  DATAR4: BKP_DATAR4_Type(loc: 0x40006c10'u),
  DATAR5: BKP_DATAR5_Type(loc: 0x40006c14'u),
  DATAR6: BKP_DATAR6_Type(loc: 0x40006c18'u),
  DATAR7: BKP_DATAR7_Type(loc: 0x40006c1c'u),
  DATAR8: BKP_DATAR8_Type(loc: 0x40006c20'u),
  DATAR9: BKP_DATAR9_Type(loc: 0x40006c24'u),
  DATAR10: BKP_DATAR10_Type(loc: 0x40006c28'u),
  OCTLR: BKP_OCTLR_Type(loc: 0x40006c2c'u),
  TPCTLR: BKP_TPCTLR_Type(loc: 0x40006c30'u),
  TPCSR: BKP_TPCSR_Type(loc: 0x40006c34'u),
  DATAR11: BKP_DATAR11_Type(loc: 0x40006c40'u),
  DATAR12: BKP_DATAR12_Type(loc: 0x40006c44'u),
  DATAR13: BKP_DATAR13_Type(loc: 0x40006c48'u),
  DATAR14: BKP_DATAR14_Type(loc: 0x40006c4c'u),
  DATAR15: BKP_DATAR15_Type(loc: 0x40006c50'u),
  DATAR16: BKP_DATAR16_Type(loc: 0x40006c54'u),
  DATAR17: BKP_DATAR17_Type(loc: 0x40006c58'u),
  DATAR18: BKP_DATAR18_Type(loc: 0x40006c5c'u),
  DATAR19: BKP_DATAR19_Type(loc: 0x40006c60'u),
  DATAR20: BKP_DATAR20_Type(loc: 0x40006c64'u),
  DATAR21: BKP_DATAR21_Type(loc: 0x40006c68'u),
  DATAR22: BKP_DATAR22_Type(loc: 0x40006c6c'u),
  DATAR23: BKP_DATAR23_Type(loc: 0x40006c70'u),
  DATAR24: BKP_DATAR24_Type(loc: 0x40006c74'u),
  DATAR25: BKP_DATAR25_Type(loc: 0x40006c78'u),
  DATAR26: BKP_DATAR26_Type(loc: 0x40006c7c'u),
  DATAR27: BKP_DATAR27_Type(loc: 0x40006c80'u),
  DATAR28: BKP_DATAR28_Type(loc: 0x40006c84'u),
  DATAR29: BKP_DATAR29_Type(loc: 0x40006c88'u),
  DATAR30: BKP_DATAR30_Type(loc: 0x40006c8c'u),
  DATAR31: BKP_DATAR31_Type(loc: 0x40006c90'u),
  DATAR32: BKP_DATAR32_Type(loc: 0x40006c94'u),
  DATAR33: BKP_DATAR33_Type(loc: 0x40006c98'u),
  DATAR34: BKP_DATAR34_Type(loc: 0x40006c9c'u),
  DATAR35: BKP_DATAR35_Type(loc: 0x40006ca0'u),
  DATAR36: BKP_DATAR36_Type(loc: 0x40006ca4'u),
  DATAR37: BKP_DATAR37_Type(loc: 0x40006ca8'u),
  DATAR38: BKP_DATAR38_Type(loc: 0x40006cac'u),
  DATAR39: BKP_DATAR39_Type(loc: 0x40006cb0'u),
  DATAR40: BKP_DATAR40_Type(loc: 0x40006cb4'u),
  DATAR41: BKP_DATAR41_Type(loc: 0x40006cb8'u),
  DATAR42: BKP_DATAR42_Type(loc: 0x40006cbc'u),
)

const IWDG* = IWDG_Type(
  CTLR: IWDG_CTLR_Type(loc: 0x40003000'u),
  PSCR: IWDG_PSCR_Type(loc: 0x40003004'u),
  RLDR: IWDG_RLDR_Type(loc: 0x40003008'u),
  STATR: IWDG_STATR_Type(loc: 0x4000300c'u),
)

const WWDG* = WWDG_Type(
  CTLR: WWDG_CTLR_Type(loc: 0x40002c00'u),
  CFGR: WWDG_CFGR_Type(loc: 0x40002c04'u),
  STATR: WWDG_STATR_Type(loc: 0x40002c08'u),
)

const TIM1* = TIM1_Type(
  CTLR1: TIM1_CTLR1_Type(loc: 0x40012c00'u),
  CTLR2: TIM1_CTLR2_Type(loc: 0x40012c04'u),
  SMCFGR: TIM1_SMCFGR_Type(loc: 0x40012c08'u),
  DMAINTENR: TIM1_DMAINTENR_Type(loc: 0x40012c0c'u),
  INTFR: TIM1_INTFR_Type(loc: 0x40012c10'u),
  SWEVGR: TIM1_SWEVGR_Type(loc: 0x40012c14'u),
  CHCTLR1_Output: TIM1_CHCTLR1_Output_Type(loc: 0x40012c18'u),
  CHCTLR1_Input: TIM1_CHCTLR1_Input_Type(loc: 0x40012c18'u),
  CHCTLR2_Output: TIM1_CHCTLR2_Output_Type(loc: 0x40012c1c'u),
  CHCTLR2_Input: TIM1_CHCTLR2_Input_Type(loc: 0x40012c1c'u),
  CCER: TIM1_CCER_Type(loc: 0x40012c20'u),
  CNT: TIM1_CNT_Type(loc: 0x40012c24'u),
  PSC: TIM1_PSC_Type(loc: 0x40012c28'u),
  ATRLR: TIM1_ATRLR_Type(loc: 0x40012c2c'u),
  RPTCR: TIM1_RPTCR_Type(loc: 0x40012c30'u),
  CH1CVR: TIM1_CH1CVR_Type(loc: 0x40012c34'u),
  CH2CVR: TIM1_CH2CVR_Type(loc: 0x40012c38'u),
  CH3CVR: TIM1_CH3CVR_Type(loc: 0x40012c3c'u),
  CH4CVR: TIM1_CH4CVR_Type(loc: 0x40012c40'u),
  BDTR: TIM1_BDTR_Type(loc: 0x40012c44'u),
  DMACFGR: TIM1_DMACFGR_Type(loc: 0x40012c48'u),
  DMAADR: TIM1_DMAADR_Type(loc: 0x40012c4c'u),
)

const TIM8* = TIM1_Type(
  CTLR1: TIM1_CTLR1_Type(loc: 0x40013400'u),
  CTLR2: TIM1_CTLR2_Type(loc: 0x40013404'u),
  SMCFGR: TIM1_SMCFGR_Type(loc: 0x40013408'u),
  DMAINTENR: TIM1_DMAINTENR_Type(loc: 0x4001340c'u),
  INTFR: TIM1_INTFR_Type(loc: 0x40013410'u),
  SWEVGR: TIM1_SWEVGR_Type(loc: 0x40013414'u),
  CHCTLR1_Output: TIM1_CHCTLR1_Output_Type(loc: 0x40013418'u),
  CHCTLR1_Input: TIM1_CHCTLR1_Input_Type(loc: 0x40013418'u),
  CHCTLR2_Output: TIM1_CHCTLR2_Output_Type(loc: 0x4001341c'u),
  CHCTLR2_Input: TIM1_CHCTLR2_Input_Type(loc: 0x4001341c'u),
  CCER: TIM1_CCER_Type(loc: 0x40013420'u),
  CNT: TIM1_CNT_Type(loc: 0x40013424'u),
  PSC: TIM1_PSC_Type(loc: 0x40013428'u),
  ATRLR: TIM1_ATRLR_Type(loc: 0x4001342c'u),
  RPTCR: TIM1_RPTCR_Type(loc: 0x40013430'u),
  CH1CVR: TIM1_CH1CVR_Type(loc: 0x40013434'u),
  CH2CVR: TIM1_CH2CVR_Type(loc: 0x40013438'u),
  CH3CVR: TIM1_CH3CVR_Type(loc: 0x4001343c'u),
  CH4CVR: TIM1_CH4CVR_Type(loc: 0x40013440'u),
  BDTR: TIM1_BDTR_Type(loc: 0x40013444'u),
  DMACFGR: TIM1_DMACFGR_Type(loc: 0x40013448'u),
  DMAADR: TIM1_DMAADR_Type(loc: 0x4001344c'u),
)

const TIM9* = TIM1_Type(
  CTLR1: TIM1_CTLR1_Type(loc: 0x40014c00'u),
  CTLR2: TIM1_CTLR2_Type(loc: 0x40014c04'u),
  SMCFGR: TIM1_SMCFGR_Type(loc: 0x40014c08'u),
  DMAINTENR: TIM1_DMAINTENR_Type(loc: 0x40014c0c'u),
  INTFR: TIM1_INTFR_Type(loc: 0x40014c10'u),
  SWEVGR: TIM1_SWEVGR_Type(loc: 0x40014c14'u),
  CHCTLR1_Output: TIM1_CHCTLR1_Output_Type(loc: 0x40014c18'u),
  CHCTLR1_Input: TIM1_CHCTLR1_Input_Type(loc: 0x40014c18'u),
  CHCTLR2_Output: TIM1_CHCTLR2_Output_Type(loc: 0x40014c1c'u),
  CHCTLR2_Input: TIM1_CHCTLR2_Input_Type(loc: 0x40014c1c'u),
  CCER: TIM1_CCER_Type(loc: 0x40014c20'u),
  CNT: TIM1_CNT_Type(loc: 0x40014c24'u),
  PSC: TIM1_PSC_Type(loc: 0x40014c28'u),
  ATRLR: TIM1_ATRLR_Type(loc: 0x40014c2c'u),
  RPTCR: TIM1_RPTCR_Type(loc: 0x40014c30'u),
  CH1CVR: TIM1_CH1CVR_Type(loc: 0x40014c34'u),
  CH2CVR: TIM1_CH2CVR_Type(loc: 0x40014c38'u),
  CH3CVR: TIM1_CH3CVR_Type(loc: 0x40014c3c'u),
  CH4CVR: TIM1_CH4CVR_Type(loc: 0x40014c40'u),
  BDTR: TIM1_BDTR_Type(loc: 0x40014c44'u),
  DMACFGR: TIM1_DMACFGR_Type(loc: 0x40014c48'u),
  DMAADR: TIM1_DMAADR_Type(loc: 0x40014c4c'u),
)

const TIM10* = TIM1_Type(
  CTLR1: TIM1_CTLR1_Type(loc: 0x40015000'u),
  CTLR2: TIM1_CTLR2_Type(loc: 0x40015004'u),
  SMCFGR: TIM1_SMCFGR_Type(loc: 0x40015008'u),
  DMAINTENR: TIM1_DMAINTENR_Type(loc: 0x4001500c'u),
  INTFR: TIM1_INTFR_Type(loc: 0x40015010'u),
  SWEVGR: TIM1_SWEVGR_Type(loc: 0x40015014'u),
  CHCTLR1_Output: TIM1_CHCTLR1_Output_Type(loc: 0x40015018'u),
  CHCTLR1_Input: TIM1_CHCTLR1_Input_Type(loc: 0x40015018'u),
  CHCTLR2_Output: TIM1_CHCTLR2_Output_Type(loc: 0x4001501c'u),
  CHCTLR2_Input: TIM1_CHCTLR2_Input_Type(loc: 0x4001501c'u),
  CCER: TIM1_CCER_Type(loc: 0x40015020'u),
  CNT: TIM1_CNT_Type(loc: 0x40015024'u),
  PSC: TIM1_PSC_Type(loc: 0x40015028'u),
  ATRLR: TIM1_ATRLR_Type(loc: 0x4001502c'u),
  RPTCR: TIM1_RPTCR_Type(loc: 0x40015030'u),
  CH1CVR: TIM1_CH1CVR_Type(loc: 0x40015034'u),
  CH2CVR: TIM1_CH2CVR_Type(loc: 0x40015038'u),
  CH3CVR: TIM1_CH3CVR_Type(loc: 0x4001503c'u),
  CH4CVR: TIM1_CH4CVR_Type(loc: 0x40015040'u),
  BDTR: TIM1_BDTR_Type(loc: 0x40015044'u),
  DMACFGR: TIM1_DMACFGR_Type(loc: 0x40015048'u),
  DMAADR: TIM1_DMAADR_Type(loc: 0x4001504c'u),
)

const TIM2* = TIM2_Type(
  CTLR1: TIM2_CTLR1_Type(loc: 0x40000000'u),
  CTLR2: TIM2_CTLR2_Type(loc: 0x40000004'u),
  SMCFGR: TIM2_SMCFGR_Type(loc: 0x40000008'u),
  DMAINTENR: TIM2_DMAINTENR_Type(loc: 0x4000000c'u),
  INTFR: TIM2_INTFR_Type(loc: 0x40000010'u),
  SWEVGR: TIM2_SWEVGR_Type(loc: 0x40000014'u),
  CHCTLR1_Output: TIM2_CHCTLR1_Output_Type(loc: 0x40000018'u),
  CHCTLR1_Input: TIM2_CHCTLR1_Input_Type(loc: 0x40000018'u),
  CHCTLR2_Output: TIM2_CHCTLR2_Output_Type(loc: 0x4000001c'u),
  CHCTLR2_Input: TIM2_CHCTLR2_Input_Type(loc: 0x4000001c'u),
  CCER: TIM2_CCER_Type(loc: 0x40000020'u),
  CNT: TIM2_CNT_Type(loc: 0x40000024'u),
  PSC: TIM2_PSC_Type(loc: 0x40000028'u),
  ATRLR: TIM2_ATRLR_Type(loc: 0x4000002c'u),
  CH1CVR: TIM2_CH1CVR_Type(loc: 0x40000034'u),
  CH2CVR: TIM2_CH2CVR_Type(loc: 0x40000038'u),
  CH3CVR: TIM2_CH3CVR_Type(loc: 0x4000003c'u),
  CH4CVR: TIM2_CH4CVR_Type(loc: 0x40000040'u),
  DMACFGR: TIM2_DMACFGR_Type(loc: 0x40000048'u),
  DMAADR: TIM2_DMAADR_Type(loc: 0x4000004c'u),
)

const TIM3* = TIM2_Type(
  CTLR1: TIM2_CTLR1_Type(loc: 0x40000400'u),
  CTLR2: TIM2_CTLR2_Type(loc: 0x40000404'u),
  SMCFGR: TIM2_SMCFGR_Type(loc: 0x40000408'u),
  DMAINTENR: TIM2_DMAINTENR_Type(loc: 0x4000040c'u),
  INTFR: TIM2_INTFR_Type(loc: 0x40000410'u),
  SWEVGR: TIM2_SWEVGR_Type(loc: 0x40000414'u),
  CHCTLR1_Output: TIM2_CHCTLR1_Output_Type(loc: 0x40000418'u),
  CHCTLR1_Input: TIM2_CHCTLR1_Input_Type(loc: 0x40000418'u),
  CHCTLR2_Output: TIM2_CHCTLR2_Output_Type(loc: 0x4000041c'u),
  CHCTLR2_Input: TIM2_CHCTLR2_Input_Type(loc: 0x4000041c'u),
  CCER: TIM2_CCER_Type(loc: 0x40000420'u),
  CNT: TIM2_CNT_Type(loc: 0x40000424'u),
  PSC: TIM2_PSC_Type(loc: 0x40000428'u),
  ATRLR: TIM2_ATRLR_Type(loc: 0x4000042c'u),
  CH1CVR: TIM2_CH1CVR_Type(loc: 0x40000434'u),
  CH2CVR: TIM2_CH2CVR_Type(loc: 0x40000438'u),
  CH3CVR: TIM2_CH3CVR_Type(loc: 0x4000043c'u),
  CH4CVR: TIM2_CH4CVR_Type(loc: 0x40000440'u),
  DMACFGR: TIM2_DMACFGR_Type(loc: 0x40000448'u),
  DMAADR: TIM2_DMAADR_Type(loc: 0x4000044c'u),
)

const TIM4* = TIM2_Type(
  CTLR1: TIM2_CTLR1_Type(loc: 0x40000800'u),
  CTLR2: TIM2_CTLR2_Type(loc: 0x40000804'u),
  SMCFGR: TIM2_SMCFGR_Type(loc: 0x40000808'u),
  DMAINTENR: TIM2_DMAINTENR_Type(loc: 0x4000080c'u),
  INTFR: TIM2_INTFR_Type(loc: 0x40000810'u),
  SWEVGR: TIM2_SWEVGR_Type(loc: 0x40000814'u),
  CHCTLR1_Output: TIM2_CHCTLR1_Output_Type(loc: 0x40000818'u),
  CHCTLR1_Input: TIM2_CHCTLR1_Input_Type(loc: 0x40000818'u),
  CHCTLR2_Output: TIM2_CHCTLR2_Output_Type(loc: 0x4000081c'u),
  CHCTLR2_Input: TIM2_CHCTLR2_Input_Type(loc: 0x4000081c'u),
  CCER: TIM2_CCER_Type(loc: 0x40000820'u),
  CNT: TIM2_CNT_Type(loc: 0x40000824'u),
  PSC: TIM2_PSC_Type(loc: 0x40000828'u),
  ATRLR: TIM2_ATRLR_Type(loc: 0x4000082c'u),
  CH1CVR: TIM2_CH1CVR_Type(loc: 0x40000834'u),
  CH2CVR: TIM2_CH2CVR_Type(loc: 0x40000838'u),
  CH3CVR: TIM2_CH3CVR_Type(loc: 0x4000083c'u),
  CH4CVR: TIM2_CH4CVR_Type(loc: 0x40000840'u),
  DMACFGR: TIM2_DMACFGR_Type(loc: 0x40000848'u),
  DMAADR: TIM2_DMAADR_Type(loc: 0x4000084c'u),
)

const TIM5* = TIM2_Type(
  CTLR1: TIM2_CTLR1_Type(loc: 0x40000c00'u),
  CTLR2: TIM2_CTLR2_Type(loc: 0x40000c04'u),
  SMCFGR: TIM2_SMCFGR_Type(loc: 0x40000c08'u),
  DMAINTENR: TIM2_DMAINTENR_Type(loc: 0x40000c0c'u),
  INTFR: TIM2_INTFR_Type(loc: 0x40000c10'u),
  SWEVGR: TIM2_SWEVGR_Type(loc: 0x40000c14'u),
  CHCTLR1_Output: TIM2_CHCTLR1_Output_Type(loc: 0x40000c18'u),
  CHCTLR1_Input: TIM2_CHCTLR1_Input_Type(loc: 0x40000c18'u),
  CHCTLR2_Output: TIM2_CHCTLR2_Output_Type(loc: 0x40000c1c'u),
  CHCTLR2_Input: TIM2_CHCTLR2_Input_Type(loc: 0x40000c1c'u),
  CCER: TIM2_CCER_Type(loc: 0x40000c20'u),
  CNT: TIM2_CNT_Type(loc: 0x40000c24'u),
  PSC: TIM2_PSC_Type(loc: 0x40000c28'u),
  ATRLR: TIM2_ATRLR_Type(loc: 0x40000c2c'u),
  CH1CVR: TIM2_CH1CVR_Type(loc: 0x40000c34'u),
  CH2CVR: TIM2_CH2CVR_Type(loc: 0x40000c38'u),
  CH3CVR: TIM2_CH3CVR_Type(loc: 0x40000c3c'u),
  CH4CVR: TIM2_CH4CVR_Type(loc: 0x40000c40'u),
  DMACFGR: TIM2_DMACFGR_Type(loc: 0x40000c48'u),
  DMAADR: TIM2_DMAADR_Type(loc: 0x40000c4c'u),
)

const I2C1* = I2C1_Type(
  CTLR1: I2C1_CTLR1_Type(loc: 0x40005400'u),
  CTLR2: I2C1_CTLR2_Type(loc: 0x40005404'u),
  OADDR1: I2C1_OADDR1_Type(loc: 0x40005408'u),
  OADDR2: I2C1_OADDR2_Type(loc: 0x4000540c'u),
  DATAR: I2C1_DATAR_Type(loc: 0x40005410'u),
  STAR1: I2C1_STAR1_Type(loc: 0x40005414'u),
  STAR2: I2C1_STAR2_Type(loc: 0x40005418'u),
  CKCFGR: I2C1_CKCFGR_Type(loc: 0x4000541c'u),
  RTR: I2C1_RTR_Type(loc: 0x40005420'u),
)

const I2C2* = I2C1_Type(
  CTLR1: I2C1_CTLR1_Type(loc: 0x40005800'u),
  CTLR2: I2C1_CTLR2_Type(loc: 0x40005804'u),
  OADDR1: I2C1_OADDR1_Type(loc: 0x40005808'u),
  OADDR2: I2C1_OADDR2_Type(loc: 0x4000580c'u),
  DATAR: I2C1_DATAR_Type(loc: 0x40005810'u),
  STAR1: I2C1_STAR1_Type(loc: 0x40005814'u),
  STAR2: I2C1_STAR2_Type(loc: 0x40005818'u),
  CKCFGR: I2C1_CKCFGR_Type(loc: 0x4000581c'u),
  RTR: I2C1_RTR_Type(loc: 0x40005820'u),
)

const SPI1* = SPI1_Type(
  CTLR1: SPI1_CTLR1_Type(loc: 0x40013000'u),
  CTLR2: SPI1_CTLR2_Type(loc: 0x40013004'u),
  STATR: SPI1_STATR_Type(loc: 0x40013008'u),
  DATAR: SPI1_DATAR_Type(loc: 0x4001300c'u),
  CRCR: SPI1_CRCR_Type(loc: 0x40013010'u),
  RCRCR: SPI1_RCRCR_Type(loc: 0x40013014'u),
  TCRCR: SPI1_TCRCR_Type(loc: 0x40013018'u),
  SPI_I2S_CFGR: SPI1_SPI_I2S_CFGR_Type(loc: 0x4001301c'u),
  HSCR: SPI1_HSCR_Type(loc: 0x40013024'u),
)

const SPI2* = SPI2_Type(
  CTLR1: SPI2_CTLR1_Type(loc: 0x40003800'u),
  CTLR2: SPI2_CTLR2_Type(loc: 0x40003804'u),
  STATR: SPI2_STATR_Type(loc: 0x40003808'u),
  DATAR: SPI2_DATAR_Type(loc: 0x4000380c'u),
  CRCR: SPI2_CRCR_Type(loc: 0x40003810'u),
  RCRCR: SPI2_RCRCR_Type(loc: 0x40003814'u),
  TCRCR: SPI2_TCRCR_Type(loc: 0x40003818'u),
  I2SCFGR: SPI2_I2SCFGR_Type(loc: 0x4000381c'u),
  I2SPR: SPI2_I2SPR_Type(loc: 0x40003820'u),
  HSCR: SPI2_HSCR_Type(loc: 0x40003824'u),
)

const SPI3* = SPI2_Type(
  CTLR1: SPI2_CTLR1_Type(loc: 0x40003c00'u),
  CTLR2: SPI2_CTLR2_Type(loc: 0x40003c04'u),
  STATR: SPI2_STATR_Type(loc: 0x40003c08'u),
  DATAR: SPI2_DATAR_Type(loc: 0x40003c0c'u),
  CRCR: SPI2_CRCR_Type(loc: 0x40003c10'u),
  RCRCR: SPI2_RCRCR_Type(loc: 0x40003c14'u),
  TCRCR: SPI2_TCRCR_Type(loc: 0x40003c18'u),
  I2SCFGR: SPI2_I2SCFGR_Type(loc: 0x40003c1c'u),
  I2SPR: SPI2_I2SPR_Type(loc: 0x40003c20'u),
  HSCR: SPI2_HSCR_Type(loc: 0x40003c24'u),
)

const USART1* = USART1_Type(
  STATR: USART1_STATR_Type(loc: 0x40013800'u),
  DATAR: USART1_DATAR_Type(loc: 0x40013804'u),
  BRR: USART1_BRR_Type(loc: 0x40013808'u),
  CTLR1: USART1_CTLR1_Type(loc: 0x4001380c'u),
  CTLR2: USART1_CTLR2_Type(loc: 0x40013810'u),
  CTLR3: USART1_CTLR3_Type(loc: 0x40013814'u),
  GPR: USART1_GPR_Type(loc: 0x40013818'u),
)

const USART2* = USART1_Type(
  STATR: USART1_STATR_Type(loc: 0x40004400'u),
  DATAR: USART1_DATAR_Type(loc: 0x40004404'u),
  BRR: USART1_BRR_Type(loc: 0x40004408'u),
  CTLR1: USART1_CTLR1_Type(loc: 0x4000440c'u),
  CTLR2: USART1_CTLR2_Type(loc: 0x40004410'u),
  CTLR3: USART1_CTLR3_Type(loc: 0x40004414'u),
  GPR: USART1_GPR_Type(loc: 0x40004418'u),
)

const USART3* = USART1_Type(
  STATR: USART1_STATR_Type(loc: 0x40004800'u),
  DATAR: USART1_DATAR_Type(loc: 0x40004804'u),
  BRR: USART1_BRR_Type(loc: 0x40004808'u),
  CTLR1: USART1_CTLR1_Type(loc: 0x4000480c'u),
  CTLR2: USART1_CTLR2_Type(loc: 0x40004810'u),
  CTLR3: USART1_CTLR3_Type(loc: 0x40004814'u),
  GPR: USART1_GPR_Type(loc: 0x40004818'u),
)

const UART4* = USART1_Type(
  STATR: USART1_STATR_Type(loc: 0x40004c00'u),
  DATAR: USART1_DATAR_Type(loc: 0x40004c04'u),
  BRR: USART1_BRR_Type(loc: 0x40004c08'u),
  CTLR1: USART1_CTLR1_Type(loc: 0x40004c0c'u),
  CTLR2: USART1_CTLR2_Type(loc: 0x40004c10'u),
  CTLR3: USART1_CTLR3_Type(loc: 0x40004c14'u),
  GPR: USART1_GPR_Type(loc: 0x40004c18'u),
)

const UART5* = USART1_Type(
  STATR: USART1_STATR_Type(loc: 0x40005000'u),
  DATAR: USART1_DATAR_Type(loc: 0x40005004'u),
  BRR: USART1_BRR_Type(loc: 0x40005008'u),
  CTLR1: USART1_CTLR1_Type(loc: 0x4000500c'u),
  CTLR2: USART1_CTLR2_Type(loc: 0x40005010'u),
  CTLR3: USART1_CTLR3_Type(loc: 0x40005014'u),
  GPR: USART1_GPR_Type(loc: 0x40005018'u),
)

const UART6* = USART1_Type(
  STATR: USART1_STATR_Type(loc: 0x40001800'u),
  DATAR: USART1_DATAR_Type(loc: 0x40001804'u),
  BRR: USART1_BRR_Type(loc: 0x40001808'u),
  CTLR1: USART1_CTLR1_Type(loc: 0x4000180c'u),
  CTLR2: USART1_CTLR2_Type(loc: 0x40001810'u),
  CTLR3: USART1_CTLR3_Type(loc: 0x40001814'u),
  GPR: USART1_GPR_Type(loc: 0x40001818'u),
)

const UART7* = USART1_Type(
  STATR: USART1_STATR_Type(loc: 0x40001c00'u),
  DATAR: USART1_DATAR_Type(loc: 0x40001c04'u),
  BRR: USART1_BRR_Type(loc: 0x40001c08'u),
  CTLR1: USART1_CTLR1_Type(loc: 0x40001c0c'u),
  CTLR2: USART1_CTLR2_Type(loc: 0x40001c10'u),
  CTLR3: USART1_CTLR3_Type(loc: 0x40001c14'u),
  GPR: USART1_GPR_Type(loc: 0x40001c18'u),
)

const UART8* = USART1_Type(
  STATR: USART1_STATR_Type(loc: 0x40002000'u),
  DATAR: USART1_DATAR_Type(loc: 0x40002004'u),
  BRR: USART1_BRR_Type(loc: 0x40002008'u),
  CTLR1: USART1_CTLR1_Type(loc: 0x4000200c'u),
  CTLR2: USART1_CTLR2_Type(loc: 0x40002010'u),
  CTLR3: USART1_CTLR3_Type(loc: 0x40002014'u),
  GPR: USART1_GPR_Type(loc: 0x40002018'u),
)

const ADC1* = ADC1_Type(
  STATR: ADC1_STATR_Type(loc: 0x40012400'u),
  CTLR1: ADC1_CTLR1_Type(loc: 0x40012404'u),
  CTLR2: ADC1_CTLR2_Type(loc: 0x40012408'u),
  SAMPTR1_CHARGE1: ADC1_SAMPTR1_CHARGE1_Type(loc: 0x4001240c'u),
  SAMPTR2_CHARGE2: ADC1_SAMPTR2_CHARGE2_Type(loc: 0x40012410'u),
  IOFR1: ADC1_IOFR1_Type(loc: 0x40012414'u),
  IOFR2: ADC1_IOFR2_Type(loc: 0x40012418'u),
  IOFR3: ADC1_IOFR3_Type(loc: 0x4001241c'u),
  IOFR4: ADC1_IOFR4_Type(loc: 0x40012420'u),
  WDHTR: ADC1_WDHTR_Type(loc: 0x40012424'u),
  WDLTR: ADC1_WDLTR_Type(loc: 0x40012428'u),
  RSQR1: ADC1_RSQR1_Type(loc: 0x4001242c'u),
  RSQR2: ADC1_RSQR2_Type(loc: 0x40012430'u),
  RSQR3_CHANNEL: ADC1_RSQR3_CHANNEL_Type(loc: 0x40012434'u),
  ISQR: ADC1_ISQR_Type(loc: 0x40012438'u),
  IDATAR1_CHGOFFSET: ADC1_IDATAR1_CHGOFFSET_Type(loc: 0x4001243c'u),
  IDATAR2: ADC1_IDATAR2_Type(loc: 0x40012440'u),
  IDATAR3: ADC1_IDATAR3_Type(loc: 0x40012444'u),
  IDATAR4: ADC1_IDATAR4_Type(loc: 0x40012448'u),
  RDATAR_DR_ACT_DCG: ADC1_RDATAR_DR_ACT_DCG_Type(loc: 0x4001244c'u),
)

const ADC2* = ADC2_Type(
  STATR: ADC2_STATR_Type(loc: 0x40012800'u),
  CTLR1: ADC2_CTLR1_Type(loc: 0x40012804'u),
  CTLR2: ADC2_CTLR2_Type(loc: 0x40012808'u),
  SAMPTR1_CHARGE1: ADC2_SAMPTR1_CHARGE1_Type(loc: 0x4001280c'u),
  SAMPTR2_CHARGE2: ADC2_SAMPTR2_CHARGE2_Type(loc: 0x40012810'u),
  IOFR1: ADC2_IOFR1_Type(loc: 0x40012814'u),
  IOFR2: ADC2_IOFR2_Type(loc: 0x40012818'u),
  IOFR3: ADC2_IOFR3_Type(loc: 0x4001281c'u),
  IOFR4: ADC2_IOFR4_Type(loc: 0x40012820'u),
  WDHTR: ADC2_WDHTR_Type(loc: 0x40012824'u),
  WDLTR: ADC2_WDLTR_Type(loc: 0x40012828'u),
  RSQR1: ADC2_RSQR1_Type(loc: 0x4001282c'u),
  RSQR2: ADC2_RSQR2_Type(loc: 0x40012830'u),
  RSQR3_CHANNEL: ADC2_RSQR3_CHANNEL_Type(loc: 0x40012834'u),
  ISQR: ADC2_ISQR_Type(loc: 0x40012838'u),
  IDATAR1_CHGOFFSET: ADC2_IDATAR1_CHGOFFSET_Type(loc: 0x4001283c'u),
  IDATAR2: ADC2_IDATAR2_Type(loc: 0x40012840'u),
  IDATAR3: ADC2_IDATAR3_Type(loc: 0x40012844'u),
  IDATAR4: ADC2_IDATAR4_Type(loc: 0x40012848'u),
  RDATAR_DR_ACT_DCG: ADC2_RDATAR_DR_ACT_DCG_Type(loc: 0x4001284c'u),
)

const DBG* = DBG_Type(
  CFGR1: DBG_CFGR1_Type(loc: 0xe000d000'u),
  CFGR2: DBG_CFGR2_Type(loc: 0xe000d004'u),
)

const USBHD* = USBHD_Type(
  USB_CTRL: USBHD_USB_CTRL_Type(loc: 0x40023400'u),
  UHOST_CTRL: USBHD_UHOST_CTRL_Type(loc: 0x40023401'u),
  USB_INT_EN: USBHD_USB_INT_EN_Type(loc: 0x40023402'u),
  USB_DEV_AD: USBHD_USB_DEV_AD_Type(loc: 0x40023403'u),
  USB_FRAME_NO: USBHD_USB_FRAME_NO_Type(loc: 0x40023404'u),
  USB_USB_SUSPEND: USBHD_USB_USB_SUSPEND_Type(loc: 0x40023406'u),
  USB_SPEED_TYPE: USBHD_USB_SPEED_TYPE_Type(loc: 0x40023408'u),
  USB_MIS_ST: USBHD_USB_MIS_ST_Type(loc: 0x40023409'u),
  USB_INT_FG: USBHD_USB_INT_FG_Type(loc: 0x4002340a'u),
  USB_INT_ST: USBHD_USB_INT_ST_Type(loc: 0x4002340b'u),
  USB_RX_LEN: USBHD_USB_RX_LEN_Type(loc: 0x4002340c'u),
  UEP_CONFIG: USBHD_UEP_CONFIG_Type(loc: 0x40023410'u),
  UEP_TYPE: USBHD_UEP_TYPE_Type(loc: 0x40023414'u),
  UEP_BUF_MOD: USBHD_UEP_BUF_MOD_Type(loc: 0x40023418'u),
  UEP0_DMA: USBHD_UEP0_DMA_Type(loc: 0x4002341c'u),
  UEP1_RX_DMA: USBHD_UEP1_RX_DMA_Type(loc: 0x40023420'u),
  UEP2_RX_DMA_UH_RX_DMA: USBHD_UEP2_RX_DMA_UH_RX_DMA_Type(loc: 0x40023424'u),
  UEP3_RX_DMA: USBHD_UEP3_RX_DMA_Type(loc: 0x40023428'u),
  UEP4_RX_DMA: USBHD_UEP4_RX_DMA_Type(loc: 0x4002342c'u),
  UEP5_RX_DMA: USBHD_UEP5_RX_DMA_Type(loc: 0x40023430'u),
  UEP6_RX_DMA: USBHD_UEP6_RX_DMA_Type(loc: 0x40023434'u),
  UEP7_RX_DMA: USBHD_UEP7_RX_DMA_Type(loc: 0x40023438'u),
  UEP8_RX_DMA: USBHD_UEP8_RX_DMA_Type(loc: 0x4002343c'u),
  UEP9_RX_DMA: USBHD_UEP9_RX_DMA_Type(loc: 0x40023440'u),
  UEP10_RX_DMA: USBHD_UEP10_RX_DMA_Type(loc: 0x40023444'u),
  UEP11_RX_DMA: USBHD_UEP11_RX_DMA_Type(loc: 0x40023448'u),
  UEP12_RX_DMA: USBHD_UEP12_RX_DMA_Type(loc: 0x4002344c'u),
  UEP13_RX_DMA: USBHD_UEP13_RX_DMA_Type(loc: 0x40023450'u),
  UEP14_RX_DMA: USBHD_UEP14_RX_DMA_Type(loc: 0x40023454'u),
  UEP15_RX_DMA: USBHD_UEP15_RX_DMA_Type(loc: 0x40023458'u),
  UEP1_TX_DMA: USBHD_UEP1_TX_DMA_Type(loc: 0x4002345c'u),
  UEP2_TX_DMA: USBHD_UEP2_TX_DMA_Type(loc: 0x40023460'u),
  UEP3_TX_DMA_UH_TX_DMA: USBHD_UEP3_TX_DMA_UH_TX_DMA_Type(loc: 0x40023464'u),
  UEP4_TX_DMA: USBHD_UEP4_TX_DMA_Type(loc: 0x40023468'u),
  UEP5_TX_DMA: USBHD_UEP5_TX_DMA_Type(loc: 0x4002346c'u),
  UEP6_TX_DMA: USBHD_UEP6_TX_DMA_Type(loc: 0x40023470'u),
  UEP7_TX_DMA: USBHD_UEP7_TX_DMA_Type(loc: 0x40023474'u),
  UEP8_TX_DMA: USBHD_UEP8_TX_DMA_Type(loc: 0x40023478'u),
  UEP9_TX_DMA: USBHD_UEP9_TX_DMA_Type(loc: 0x4002347c'u),
  UEP10_TX_DMA: USBHD_UEP10_TX_DMA_Type(loc: 0x40023480'u),
  UEP11_TX_DMA: USBHD_UEP11_TX_DMA_Type(loc: 0x40023484'u),
  UEP12_TX_DMA_UH_SPLIT_DATA: USBHD_UEP12_TX_DMA_UH_SPLIT_DATA_Type(loc: 0x40023488'u),
  UEP13_TX_DMA: USBHD_UEP13_TX_DMA_Type(loc: 0x4002348c'u),
  UEP14_TX_DMA: USBHD_UEP14_TX_DMA_Type(loc: 0x40023490'u),
  UEP15_TX_DMA: USBHD_UEP15_TX_DMA_Type(loc: 0x40023494'u),
  UEP0_MAX_LEN: USBHD_UEP0_MAX_LEN_Type(loc: 0x40023498'u),
  UEP1_MAX_LEN: USBHD_UEP1_MAX_LEN_Type(loc: 0x4002349c'u),
  UEP2_MAX_LEN_UH_RX_MAX_LEN: USBHD_UEP2_MAX_LEN_UH_RX_MAX_LEN_Type(loc: 0x400234a0'u),
  UEP3_MAX_LEN: USBHD_UEP3_MAX_LEN_Type(loc: 0x400234a4'u),
  UEP4_MAX_LEN: USBHD_UEP4_MAX_LEN_Type(loc: 0x400234a8'u),
  UEP5_MAX_LEN: USBHD_UEP5_MAX_LEN_Type(loc: 0x400234ac'u),
  UEP6_MAX_LEN: USBHD_UEP6_MAX_LEN_Type(loc: 0x400234b0'u),
  UEP7_MAX_LEN: USBHD_UEP7_MAX_LEN_Type(loc: 0x400234b4'u),
  UEP8_MAX_LEN: USBHD_UEP8_MAX_LEN_Type(loc: 0x400234b8'u),
  UEP9_MAX_LEN: USBHD_UEP9_MAX_LEN_Type(loc: 0x400234bc'u),
  UEP10_MAX_LEN: USBHD_UEP10_MAX_LEN_Type(loc: 0x400234c0'u),
  UEP11_MAX_LEN: USBHD_UEP11_MAX_LEN_Type(loc: 0x400234c4'u),
  UEP12_MAX_LEN: USBHD_UEP12_MAX_LEN_Type(loc: 0x400234c8'u),
  UEP13_MAX_LEN: USBHD_UEP13_MAX_LEN_Type(loc: 0x400234cc'u),
  UEP14_MAX_LEN: USBHD_UEP14_MAX_LEN_Type(loc: 0x400234d0'u),
  UEP15_MAX_LEN: USBHD_UEP15_MAX_LEN_Type(loc: 0x400234d4'u),
  UEP0_T_LEN: USBHD_UEP0_T_LEN_Type(loc: 0x400234d8'u),
  UEP0_T_CTRL: USBHD_UEP0_T_CTRL_Type(loc: 0x400234da'u),
  UEP0_R_CTRL: USBHD_UEP0_R_CTRL_Type(loc: 0x400234db'u),
  UEP1_T_LEN: USBHD_UEP1_T_LEN_Type(loc: 0x400234dc'u),
  UEP1_T_CTRL: USBHD_UEP1_T_CTRL_Type(loc: 0x400234de'u),
  UEP1_R_CTRL: USBHD_UEP1_R_CTRL_Type(loc: 0x400234df'u),
  UEP2_T_LEN_UH_EP_PID: USBHD_UEP2_T_LEN_UH_EP_PID_Type(loc: 0x400234e0'u),
  UEP2_T_CTRL: USBHD_UEP2_T_CTRL_Type(loc: 0x400234e2'u),
  UEP2_R_CTRL_UH_RX_CTRL: USBHD_UEP2_R_CTRL_UH_RX_CTRL_Type(loc: 0x400234e3'u),
  UEP3_T_LEN_UH_TX_LEN_H: USBHD_UEP3_T_LEN_UH_TX_LEN_H_Type(loc: 0x400234e4'u),
  UEP3_T_CTRL_UH_TX_CTRL: USBHD_UEP3_T_CTRL_UH_TX_CTRL_Type(loc: 0x400234e6'u),
  UEP3_R_CTRL: USBHD_UEP3_R_CTRL_Type(loc: 0x400234e7'u),
  UEP4_T_LEN: USBHD_UEP4_T_LEN_Type(loc: 0x400234e8'u),
  UEP4_T_CTRL: USBHD_UEP4_T_CTRL_Type(loc: 0x400234ea'u),
  UEP4_R_CTRL: USBHD_UEP4_R_CTRL_Type(loc: 0x400234eb'u),
  UEP5_T_LEN: USBHD_UEP5_T_LEN_Type(loc: 0x400234ec'u),
  UEP5_T_CTRL: USBHD_UEP5_T_CTRL_Type(loc: 0x400234ee'u),
  UEP5_R_CTRL: USBHD_UEP5_R_CTRL_Type(loc: 0x400234ef'u),
  UEP6_T_LEN: USBHD_UEP6_T_LEN_Type(loc: 0x400234f0'u),
  UEP6_T_CTRL: USBHD_UEP6_T_CTRL_Type(loc: 0x400234f2'u),
  UEP6_R_CTRL: USBHD_UEP6_R_CTRL_Type(loc: 0x400234f3'u),
  UEP7_T_LEN: USBHD_UEP7_T_LEN_Type(loc: 0x400234f4'u),
  UEP7_T_CTRL: USBHD_UEP7_T_CTRL_Type(loc: 0x400234f6'u),
  UEP7_R_CTRL: USBHD_UEP7_R_CTRL_Type(loc: 0x400234f7'u),
  UEP8_T_LEN: USBHD_UEP8_T_LEN_Type(loc: 0x400234f8'u),
  UEP8_T_CTRL: USBHD_UEP8_T_CTRL_Type(loc: 0x400234fa'u),
  UEP8_R_CTRL: USBHD_UEP8_R_CTRL_Type(loc: 0x400234fb'u),
  UEP9_T_LEN: USBHD_UEP9_T_LEN_Type(loc: 0x400234fc'u),
  UEP9_T_CTRL: USBHD_UEP9_T_CTRL_Type(loc: 0x400234fe'u),
  UEP9_R_CTRL: USBHD_UEP9_R_CTRL_Type(loc: 0x400234ff'u),
  UEP10_T_LEN: USBHD_UEP10_T_LEN_Type(loc: 0x40023500'u),
  UEP10_T_CTRL: USBHD_UEP10_T_CTRL_Type(loc: 0x40023502'u),
  UEP10_R_CTRL: USBHD_UEP10_R_CTRL_Type(loc: 0x40023503'u),
  UEP11_T_LEN: USBHD_UEP11_T_LEN_Type(loc: 0x40023504'u),
  UEP11_T_CTRL: USBHD_UEP11_T_CTRL_Type(loc: 0x40023506'u),
  UEP11_R_CTRL: USBHD_UEP11_R_CTRL_Type(loc: 0x40023507'u),
  UEP12_T_LEN: USBHD_UEP12_T_LEN_Type(loc: 0x40023508'u),
  UEP12_T_CTRL: USBHD_UEP12_T_CTRL_Type(loc: 0x4002350a'u),
  UEP12_R_CTRL: USBHD_UEP12_R_CTRL_Type(loc: 0x4002350b'u),
  UEP13_T_LEN: USBHD_UEP13_T_LEN_Type(loc: 0x4002350c'u),
  UEP13_T_CTRL: USBHD_UEP13_T_CTRL_Type(loc: 0x4002350e'u),
  UEP13_R_CTRL: USBHD_UEP13_R_CTRL_Type(loc: 0x4002350f'u),
  UEP14_T_LEN: USBHD_UEP14_T_LEN_Type(loc: 0x40023510'u),
  UEP14_T_CTRL: USBHD_UEP14_T_CTRL_Type(loc: 0x40023512'u),
  UEP14_R_CTRL: USBHD_UEP14_R_CTRL_Type(loc: 0x40023513'u),
  UEP15_T_LEN: USBHD_UEP15_T_LEN_Type(loc: 0x40023514'u),
  UEP15_T_CTRL: USBHD_UEP15_T_CTRL_Type(loc: 0x40023516'u),
  UEP15_R_CTRL: USBHD_UEP15_R_CTRL_Type(loc: 0x40023517'u),
)

const CRC* = CRC_Type(
  DATAR: CRC_DATAR_Type(loc: 0x40023000'u),
  IDATAR: CRC_IDATAR_Type(loc: 0x40023004'u),
  CTLR: CRC_CTLR_Type(loc: 0x40023008'u),
)

const FLASH* = FLASH_Type(
  KEYR: FLASH_KEYR_Type(loc: 0x40022004'u),
  OBKEYR: FLASH_OBKEYR_Type(loc: 0x40022008'u),
  STATR: FLASH_STATR_Type(loc: 0x4002200c'u),
  CTLR: FLASH_CTLR_Type(loc: 0x40022010'u),
  ADDRx: FLASH_ADDR_Type(loc: 0x40022014'u),
  OBR: FLASH_OBR_Type(loc: 0x4002201c'u),
  WPR: FLASH_WPR_Type(loc: 0x40022020'u),
  MODEKEYR: FLASH_MODEKEYR_Type(loc: 0x40022024'u),
)

const USB_OTG_FS* = USB_OTG_FS_Type(
  USBHD_BASE_CTRL: USB_OTG_FS_USBHD_BASE_CTRL_Type(loc: 0x50000000'u),
  USBHD_UDEV_CTRL_USBHD_UHOST_CTRL: USB_OTG_FS_USBHD_UDEV_CTRL_USBHD_UHOST_CTRL_Type(loc: 0x50000001'u),
  R8_USB_INT_EN: USB_OTG_FS_R8_USB_INT_EN_Type(loc: 0x50000002'u),
  R8_USB_DEV_AD: USB_OTG_FS_R8_USB_DEV_AD_Type(loc: 0x50000003'u),
  R8_USB_MIS_ST: USB_OTG_FS_R8_USB_MIS_ST_Type(loc: 0x50000005'u),
  R8_USB_INT_FG: USB_OTG_FS_R8_USB_INT_FG_Type(loc: 0x50000006'u),
  R8_USB_INT_ST: USB_OTG_FS_R8_USB_INT_ST_Type(loc: 0x50000007'u),
  R16_USB_RX_LEN: USB_OTG_FS_R16_USB_RX_LEN_Type(loc: 0x50000008'u),
  R8_UEP4_1_MOD: USB_OTG_FS_R8_UEP4_1_MOD_Type(loc: 0x5000000c'u),
  R8_UEP2_3_MOD_R8_UH_EP_MOD: USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Type(loc: 0x5000000d'u),
  R8_UEP5_6_MOD: USB_OTG_FS_R8_UEP5_6_MOD_Type(loc: 0x5000000e'u),
  R8_UEP7_MOD: USB_OTG_FS_R8_UEP7_MOD_Type(loc: 0x5000000f'u),
  R32_UEP0_DMA: USB_OTG_FS_R32_UEP0_DMA_Type(loc: 0x50000010'u),
  R32_UEP1_DMA: USB_OTG_FS_R32_UEP1_DMA_Type(loc: 0x50000014'u),
  R32_UEP2_DMA_R32_UH_RX_DMA: USB_OTG_FS_R32_UEP2_DMA_R32_UH_RX_DMA_Type(loc: 0x50000018'u),
  R32_UEP3_DMA_R32_UH_TX_DMA: USB_OTG_FS_R32_UEP3_DMA_R32_UH_TX_DMA_Type(loc: 0x5000001c'u),
  R32_UEP4_DMA: USB_OTG_FS_R32_UEP4_DMA_Type(loc: 0x50000020'u),
  R32_UEP5_DMA: USB_OTG_FS_R32_UEP5_DMA_Type(loc: 0x50000024'u),
  R32_UEP6_DMA: USB_OTG_FS_R32_UEP6_DMA_Type(loc: 0x50000028'u),
  R32_UEP7_DMA: USB_OTG_FS_R32_UEP7_DMA_Type(loc: 0x5000002c'u),
  R8_UEP0_T_LEN: USB_OTG_FS_R8_UEP0_T_LEN_Type(loc: 0x50000030'u),
  R8_UEP0_T_CTRL: USB_OTG_FS_R8_UEP0_T_CTRL_Type(loc: 0x50000032'u),
  R8_UEP0_R_CTRL: USB_OTG_FS_R8_UEP0_R_CTRL_Type(loc: 0x50000033'u),
  R8_UEP1_T_LEN: USB_OTG_FS_R8_UEP1_T_LEN_Type(loc: 0x50000034'u),
  R8_UEP1_T_CTRL_USBHD_UH_SETUP: USB_OTG_FS_R8_UEP1_T_CTRL_USBHD_UH_SETUP_Type(loc: 0x50000036'u),
  R8_UEP1_R_CTRL: USB_OTG_FS_R8_UEP1_R_CTRL_Type(loc: 0x50000037'u),
  R8_UEP2_T_LEN_USBHD_UH_EP_PID: USB_OTG_FS_R8_UEP2_T_LEN_USBHD_UH_EP_PID_Type(loc: 0x50000038'u),
  R8_UEP2_T_CTRL: USB_OTG_FS_R8_UEP2_T_CTRL_Type(loc: 0x5000003a'u),
  R8_UEP2_R_CTRL_USBHD_UH_RX_CTRL: USB_OTG_FS_R8_UEP2_R_CTRL_USBHD_UH_RX_CTRL_Type(loc: 0x5000003b'u),
  R8_UEP3_T_LEN_USBHD_UH_TX_LEN: USB_OTG_FS_R8_UEP3_T_LEN_USBHD_UH_TX_LEN_Type(loc: 0x5000003c'u),
  R8_UEP3_T_CTRL_USBHD_UH_TX_CTRL: USB_OTG_FS_R8_UEP3_T_CTRL_USBHD_UH_TX_CTRL_Type(loc: 0x5000003e'u),
  R8_UEP3_R_CTRL: USB_OTG_FS_R8_UEP3_R_CTRL_Type(loc: 0x5000003f'u),
  R8_UEP4_T_LEN: USB_OTG_FS_R8_UEP4_T_LEN_Type(loc: 0x50000040'u),
  R8_UEP4_T_CTRL: USB_OTG_FS_R8_UEP4_T_CTRL_Type(loc: 0x50000042'u),
  R8_UEP4_R_CTRL: USB_OTG_FS_R8_UEP4_R_CTRL_Type(loc: 0x50000043'u),
  R8_UEP5_T_LEN: USB_OTG_FS_R8_UEP5_T_LEN_Type(loc: 0x50000044'u),
  R8_UEP5_T_CTRL: USB_OTG_FS_R8_UEP5_T_CTRL_Type(loc: 0x50000046'u),
  R8_UEP5_R_CTRL: USB_OTG_FS_R8_UEP5_R_CTRL_Type(loc: 0x50000047'u),
  R8_UEP6_T_LEN: USB_OTG_FS_R8_UEP6_T_LEN_Type(loc: 0x50000048'u),
  R8_UEP6_T_CTRL: USB_OTG_FS_R8_UEP6_T_CTRL_Type(loc: 0x5000004a'u),
  R8_UEP6_R_CTRL: USB_OTG_FS_R8_UEP6_R_CTRL_Type(loc: 0x5000004b'u),
  R8_UEP7_T_LEN: USB_OTG_FS_R8_UEP7_T_LEN_Type(loc: 0x5000004c'u),
  R8_UEP7_T_CTRL: USB_OTG_FS_R8_UEP7_T_CTRL_Type(loc: 0x5000004e'u),
  R8_UEP7_R_CTRL: USB_OTG_FS_R8_UEP7_R_CTRL_Type(loc: 0x5000004f'u),
  USB_OTG_CR: USB_OTG_FS_USB_OTG_CR_Type(loc: 0x50000054'u),
  USB_OTG_SR: USB_OTG_FS_USB_OTG_SR_Type(loc: 0x50000058'u),
)

const PFIC* = PFIC_Type(
  ISR1: PFIC_ISR1_Type(loc: 0xe000e000'u),
  ISR2: PFIC_ISR2_Type(loc: 0xe000e004'u),
  ISR3: PFIC_ISR3_Type(loc: 0xe000e008'u),
  ISR4: PFIC_ISR4_Type(loc: 0xe000e00c'u),
  IPR1: PFIC_IPR1_Type(loc: 0xe000e020'u),
  IPR2: PFIC_IPR2_Type(loc: 0xe000e024'u),
  IPR3: PFIC_IPR3_Type(loc: 0xe000e028'u),
  IPR4: PFIC_IPR4_Type(loc: 0xe000e02c'u),
  ITHRESDR: PFIC_ITHRESDR_Type(loc: 0xe000e040'u),
  CFGR: PFIC_CFGR_Type(loc: 0xe000e048'u),
  GISR: PFIC_GISR_Type(loc: 0xe000e04c'u),
  VTFIDR: PFIC_VTFIDR_Type(loc: 0xe000e050'u),
  VTFADDRR0: PFIC_VTFADDRR0_Type(loc: 0xe000e060'u),
  VTFADDRR1: PFIC_VTFADDRR1_Type(loc: 0xe000e064'u),
  VTFADDRR2: PFIC_VTFADDRR2_Type(loc: 0xe000e068'u),
  VTFADDRR3: PFIC_VTFADDRR3_Type(loc: 0xe000e06c'u),
  IENR1: PFIC_IENR1_Type(loc: 0xe000e100'u),
  IENR2: PFIC_IENR2_Type(loc: 0xe000e104'u),
  IENR3: PFIC_IENR3_Type(loc: 0xe000e108'u),
  IENR4: PFIC_IENR4_Type(loc: 0xe000e10c'u),
  IRER1: PFIC_IRER1_Type(loc: 0xe000e180'u),
  IRER2: PFIC_IRER2_Type(loc: 0xe000e184'u),
  IRER3: PFIC_IRER3_Type(loc: 0xe000e188'u),
  IRER4: PFIC_IRER4_Type(loc: 0xe000e18c'u),
  IPSR1: PFIC_IPSR1_Type(loc: 0xe000e200'u),
  IPSR2: PFIC_IPSR2_Type(loc: 0xe000e204'u),
  IPSR3: PFIC_IPSR3_Type(loc: 0xe000e208'u),
  IPSR4: PFIC_IPSR4_Type(loc: 0xe000e20c'u),
  IPRR1: PFIC_IPRR1_Type(loc: 0xe000e280'u),
  IPRR2: PFIC_IPRR2_Type(loc: 0xe000e284'u),
  IPRR3: PFIC_IPRR3_Type(loc: 0xe000e288'u),
  IPRR4: PFIC_IPRR4_Type(loc: 0xe000e28c'u),
  IACTR1: PFIC_IACTR1_Type(loc: 0xe000e300'u),
  IACTR2: PFIC_IACTR2_Type(loc: 0xe000e304'u),
  IACTR3: PFIC_IACTR3_Type(loc: 0xe000e308'u),
  IACTR4: PFIC_IACTR4_Type(loc: 0xe000e30c'u),
  IPRIOR0: PFIC_IPRIOR0_Type(loc: 0xe000e400'u),
  IPRIOR1: PFIC_IPRIOR1_Type(loc: 0xe000e401'u),
  IPRIOR2: PFIC_IPRIOR2_Type(loc: 0xe000e402'u),
  IPRIOR3: PFIC_IPRIOR3_Type(loc: 0xe000e403'u),
  IPRIOR4: PFIC_IPRIOR4_Type(loc: 0xe000e404'u),
  IPRIOR5: PFIC_IPRIOR5_Type(loc: 0xe000e405'u),
  IPRIOR6: PFIC_IPRIOR6_Type(loc: 0xe000e406'u),
  IPRIOR7: PFIC_IPRIOR7_Type(loc: 0xe000e407'u),
  IPRIOR8: PFIC_IPRIOR8_Type(loc: 0xe000e408'u),
  IPRIOR9: PFIC_IPRIOR9_Type(loc: 0xe000e409'u),
  IPRIOR10: PFIC_IPRIOR10_Type(loc: 0xe000e40a'u),
  IPRIOR11: PFIC_IPRIOR11_Type(loc: 0xe000e40b'u),
  IPRIOR12: PFIC_IPRIOR12_Type(loc: 0xe000e40c'u),
  IPRIOR13: PFIC_IPRIOR13_Type(loc: 0xe000e40d'u),
  IPRIOR14: PFIC_IPRIOR14_Type(loc: 0xe000e40e'u),
  IPRIOR15: PFIC_IPRIOR15_Type(loc: 0xe000e40f'u),
  IPRIOR16: PFIC_IPRIOR16_Type(loc: 0xe000e410'u),
  IPRIOR17: PFIC_IPRIOR17_Type(loc: 0xe000e411'u),
  IPRIOR18: PFIC_IPRIOR18_Type(loc: 0xe000e412'u),
  IPRIOR19: PFIC_IPRIOR19_Type(loc: 0xe000e413'u),
  IPRIOR20: PFIC_IPRIOR20_Type(loc: 0xe000e414'u),
  IPRIOR21: PFIC_IPRIOR21_Type(loc: 0xe000e415'u),
  IPRIOR22: PFIC_IPRIOR22_Type(loc: 0xe000e416'u),
  IPRIOR23: PFIC_IPRIOR23_Type(loc: 0xe000e417'u),
  IPRIOR24: PFIC_IPRIOR24_Type(loc: 0xe000e418'u),
  IPRIOR25: PFIC_IPRIOR25_Type(loc: 0xe000e419'u),
  IPRIOR26: PFIC_IPRIOR26_Type(loc: 0xe000e41a'u),
  IPRIOR27: PFIC_IPRIOR27_Type(loc: 0xe000e41b'u),
  IPRIOR28: PFIC_IPRIOR28_Type(loc: 0xe000e41c'u),
  IPRIOR29: PFIC_IPRIOR29_Type(loc: 0xe000e41d'u),
  IPRIOR30: PFIC_IPRIOR30_Type(loc: 0xe000e41e'u),
  IPRIOR31: PFIC_IPRIOR31_Type(loc: 0xe000e41f'u),
  IPRIOR32: PFIC_IPRIOR32_Type(loc: 0xe000e420'u),
  IPRIOR33: PFIC_IPRIOR33_Type(loc: 0xe000e421'u),
  IPRIOR34: PFIC_IPRIOR34_Type(loc: 0xe000e422'u),
  IPRIOR35: PFIC_IPRIOR35_Type(loc: 0xe000e423'u),
  IPRIOR36: PFIC_IPRIOR36_Type(loc: 0xe000e424'u),
  IPRIOR37: PFIC_IPRIOR37_Type(loc: 0xe000e425'u),
  IPRIOR38: PFIC_IPRIOR38_Type(loc: 0xe000e426'u),
  IPRIOR39: PFIC_IPRIOR39_Type(loc: 0xe000e427'u),
  IPRIOR40: PFIC_IPRIOR40_Type(loc: 0xe000e428'u),
  IPRIOR41: PFIC_IPRIOR41_Type(loc: 0xe000e429'u),
  IPRIOR42: PFIC_IPRIOR42_Type(loc: 0xe000e42a'u),
  IPRIOR43: PFIC_IPRIOR43_Type(loc: 0xe000e42b'u),
  IPRIOR44: PFIC_IPRIOR44_Type(loc: 0xe000e42c'u),
  IPRIOR45: PFIC_IPRIOR45_Type(loc: 0xe000e42d'u),
  IPRIOR46: PFIC_IPRIOR46_Type(loc: 0xe000e42e'u),
  IPRIOR47: PFIC_IPRIOR47_Type(loc: 0xe000e42f'u),
  IPRIOR48: PFIC_IPRIOR48_Type(loc: 0xe000e430'u),
  IPRIOR49: PFIC_IPRIOR49_Type(loc: 0xe000e431'u),
  IPRIOR50: PFIC_IPRIOR50_Type(loc: 0xe000e432'u),
  IPRIOR51: PFIC_IPRIOR51_Type(loc: 0xe000e433'u),
  IPRIOR52: PFIC_IPRIOR52_Type(loc: 0xe000e434'u),
  IPRIOR53: PFIC_IPRIOR53_Type(loc: 0xe000e435'u),
  IPRIOR54: PFIC_IPRIOR54_Type(loc: 0xe000e436'u),
  IPRIOR55: PFIC_IPRIOR55_Type(loc: 0xe000e437'u),
  IPRIOR56: PFIC_IPRIOR56_Type(loc: 0xe000e438'u),
  IPRIOR57: PFIC_IPRIOR57_Type(loc: 0xe000e439'u),
  IPRIOR58: PFIC_IPRIOR58_Type(loc: 0xe000e43a'u),
  IPRIOR59: PFIC_IPRIOR59_Type(loc: 0xe000e43b'u),
  IPRIOR60: PFIC_IPRIOR60_Type(loc: 0xe000e43c'u),
  IPRIOR61: PFIC_IPRIOR61_Type(loc: 0xe000e43d'u),
  IPRIOR62: PFIC_IPRIOR62_Type(loc: 0xe000e43e'u),
  IPRIOR63: PFIC_IPRIOR63_Type(loc: 0xe000e43f'u),
  IPRIOR64: PFIC_IPRIOR64_Type(loc: 0xe000e440'u),
  IPRIOR65: PFIC_IPRIOR65_Type(loc: 0xe000e441'u),
  IPRIOR66: PFIC_IPRIOR66_Type(loc: 0xe000e442'u),
  IPRIOR67: PFIC_IPRIOR67_Type(loc: 0xe000e443'u),
  IPRIOR68: PFIC_IPRIOR68_Type(loc: 0xe000e444'u),
  IPRIOR69: PFIC_IPRIOR69_Type(loc: 0xe000e445'u),
  IPRIOR70: PFIC_IPRIOR70_Type(loc: 0xe000e446'u),
  IPRIOR71: PFIC_IPRIOR71_Type(loc: 0xe000e447'u),
  IPRIOR72: PFIC_IPRIOR72_Type(loc: 0xe000e448'u),
  IPRIOR73: PFIC_IPRIOR73_Type(loc: 0xe000e449'u),
  IPRIOR74: PFIC_IPRIOR74_Type(loc: 0xe000e44a'u),
  IPRIOR75: PFIC_IPRIOR75_Type(loc: 0xe000e44b'u),
  IPRIOR76: PFIC_IPRIOR76_Type(loc: 0xe000e44c'u),
  IPRIOR77: PFIC_IPRIOR77_Type(loc: 0xe000e44d'u),
  IPRIOR78: PFIC_IPRIOR78_Type(loc: 0xe000e44e'u),
  IPRIOR79: PFIC_IPRIOR79_Type(loc: 0xe000e44f'u),
  IPRIOR80: PFIC_IPRIOR80_Type(loc: 0xe000e450'u),
  IPRIOR81: PFIC_IPRIOR81_Type(loc: 0xe000e451'u),
  IPRIOR82: PFIC_IPRIOR82_Type(loc: 0xe000e452'u),
  IPRIOR83: PFIC_IPRIOR83_Type(loc: 0xe000e453'u),
  IPRIOR84: PFIC_IPRIOR84_Type(loc: 0xe000e454'u),
  IPRIOR85: PFIC_IPRIOR85_Type(loc: 0xe000e455'u),
  IPRIOR86: PFIC_IPRIOR86_Type(loc: 0xe000e456'u),
  IPRIOR87: PFIC_IPRIOR87_Type(loc: 0xe000e457'u),
  IPRIOR88: PFIC_IPRIOR88_Type(loc: 0xe000e458'u),
  IPRIOR89: PFIC_IPRIOR89_Type(loc: 0xe000e459'u),
  IPRIOR90: PFIC_IPRIOR90_Type(loc: 0xe000e45a'u),
  IPRIOR91: PFIC_IPRIOR91_Type(loc: 0xe000e45b'u),
  IPRIOR92: PFIC_IPRIOR92_Type(loc: 0xe000e45c'u),
  IPRIOR93: PFIC_IPRIOR93_Type(loc: 0xe000e45d'u),
  IPRIOR94: PFIC_IPRIOR94_Type(loc: 0xe000e45e'u),
  IPRIOR95: PFIC_IPRIOR95_Type(loc: 0xe000e45f'u),
  IPRIOR96: PFIC_IPRIOR96_Type(loc: 0xe000e460'u),
  IPRIOR97: PFIC_IPRIOR97_Type(loc: 0xe000e461'u),
  IPRIOR98: PFIC_IPRIOR98_Type(loc: 0xe000e462'u),
  IPRIOR99: PFIC_IPRIOR99_Type(loc: 0xe000e463'u),
  IPRIOR100: PFIC_IPRIOR100_Type(loc: 0xe000e464'u),
  IPRIOR101: PFIC_IPRIOR101_Type(loc: 0xe000e465'u),
  IPRIOR102: PFIC_IPRIOR102_Type(loc: 0xe000e466'u),
  IPRIOR103: PFIC_IPRIOR103_Type(loc: 0xe000e467'u),
  IPRIOR104: PFIC_IPRIOR104_Type(loc: 0xe000e468'u),
  IPRIOR105: PFIC_IPRIOR105_Type(loc: 0xe000e469'u),
  IPRIOR106: PFIC_IPRIOR106_Type(loc: 0xe000e46a'u),
  IPRIOR107: PFIC_IPRIOR107_Type(loc: 0xe000e46b'u),
  IPRIOR108: PFIC_IPRIOR108_Type(loc: 0xe000e46c'u),
  IPRIOR109: PFIC_IPRIOR109_Type(loc: 0xe000e46d'u),
  IPRIOR110: PFIC_IPRIOR110_Type(loc: 0xe000e46e'u),
  IPRIOR111: PFIC_IPRIOR111_Type(loc: 0xe000e46f'u),
  IPRIOR112: PFIC_IPRIOR112_Type(loc: 0xe000e470'u),
  IPRIOR113: PFIC_IPRIOR113_Type(loc: 0xe000e471'u),
  IPRIOR114: PFIC_IPRIOR114_Type(loc: 0xe000e472'u),
  IPRIOR115: PFIC_IPRIOR115_Type(loc: 0xe000e473'u),
  IPRIOR116: PFIC_IPRIOR116_Type(loc: 0xe000e474'u),
  IPRIOR117: PFIC_IPRIOR117_Type(loc: 0xe000e475'u),
  IPRIOR118: PFIC_IPRIOR118_Type(loc: 0xe000e476'u),
  IPRIOR119: PFIC_IPRIOR119_Type(loc: 0xe000e477'u),
  IPRIOR120: PFIC_IPRIOR120_Type(loc: 0xe000e478'u),
  IPRIOR121: PFIC_IPRIOR121_Type(loc: 0xe000e479'u),
  IPRIOR122: PFIC_IPRIOR122_Type(loc: 0xe000e47a'u),
  IPRIOR123: PFIC_IPRIOR123_Type(loc: 0xe000e47b'u),
  IPRIOR124: PFIC_IPRIOR124_Type(loc: 0xe000e47c'u),
  IPRIOR125: PFIC_IPRIOR125_Type(loc: 0xe000e47d'u),
  IPRIOR126: PFIC_IPRIOR126_Type(loc: 0xe000e47e'u),
  IPRIOR127: PFIC_IPRIOR127_Type(loc: 0xe000e47f'u),
  IPRIOR128: PFIC_IPRIOR128_Type(loc: 0xe000e480'u),
  IPRIOR129: PFIC_IPRIOR129_Type(loc: 0xe000e481'u),
  IPRIOR130: PFIC_IPRIOR130_Type(loc: 0xe000e482'u),
  IPRIOR131: PFIC_IPRIOR131_Type(loc: 0xe000e483'u),
  IPRIOR132: PFIC_IPRIOR132_Type(loc: 0xe000e484'u),
  IPRIOR133: PFIC_IPRIOR133_Type(loc: 0xe000e485'u),
  IPRIOR134: PFIC_IPRIOR134_Type(loc: 0xe000e486'u),
  IPRIOR135: PFIC_IPRIOR135_Type(loc: 0xe000e487'u),
  IPRIOR136: PFIC_IPRIOR136_Type(loc: 0xe000e488'u),
  IPRIOR137: PFIC_IPRIOR137_Type(loc: 0xe000e489'u),
  IPRIOR138: PFIC_IPRIOR138_Type(loc: 0xe000e48a'u),
  IPRIOR139: PFIC_IPRIOR139_Type(loc: 0xe000e48b'u),
  IPRIOR140: PFIC_IPRIOR140_Type(loc: 0xe000e48c'u),
  IPRIOR141: PFIC_IPRIOR141_Type(loc: 0xe000e48d'u),
  IPRIOR142: PFIC_IPRIOR142_Type(loc: 0xe000e48e'u),
  IPRIOR143: PFIC_IPRIOR143_Type(loc: 0xe000e48f'u),
  IPRIOR144: PFIC_IPRIOR144_Type(loc: 0xe000e490'u),
  IPRIOR145: PFIC_IPRIOR145_Type(loc: 0xe000e491'u),
  IPRIOR146: PFIC_IPRIOR146_Type(loc: 0xe000e492'u),
  IPRIOR147: PFIC_IPRIOR147_Type(loc: 0xe000e493'u),
  IPRIOR148: PFIC_IPRIOR148_Type(loc: 0xe000e494'u),
  IPRIOR149: PFIC_IPRIOR149_Type(loc: 0xe000e495'u),
  IPRIOR150: PFIC_IPRIOR150_Type(loc: 0xe000e496'u),
  IPRIOR151: PFIC_IPRIOR151_Type(loc: 0xe000e497'u),
  IPRIOR152: PFIC_IPRIOR152_Type(loc: 0xe000e498'u),
  IPRIOR153: PFIC_IPRIOR153_Type(loc: 0xe000e499'u),
  IPRIOR154: PFIC_IPRIOR154_Type(loc: 0xe000e49a'u),
  IPRIOR155: PFIC_IPRIOR155_Type(loc: 0xe000e49b'u),
  IPRIOR156: PFIC_IPRIOR156_Type(loc: 0xe000e49c'u),
  IPRIOR157: PFIC_IPRIOR157_Type(loc: 0xe000e49d'u),
  IPRIOR158: PFIC_IPRIOR158_Type(loc: 0xe000e49e'u),
  IPRIOR159: PFIC_IPRIOR159_Type(loc: 0xe000e49f'u),
  IPRIOR160: PFIC_IPRIOR160_Type(loc: 0xe000e4a0'u),
  IPRIOR161: PFIC_IPRIOR161_Type(loc: 0xe000e4a1'u),
  IPRIOR162: PFIC_IPRIOR162_Type(loc: 0xe000e4a2'u),
  IPRIOR163: PFIC_IPRIOR163_Type(loc: 0xe000e4a3'u),
  IPRIOR164: PFIC_IPRIOR164_Type(loc: 0xe000e4a4'u),
  IPRIOR165: PFIC_IPRIOR165_Type(loc: 0xe000e4a5'u),
  IPRIOR166: PFIC_IPRIOR166_Type(loc: 0xe000e4a6'u),
  IPRIOR167: PFIC_IPRIOR167_Type(loc: 0xe000e4a7'u),
  IPRIOR168: PFIC_IPRIOR168_Type(loc: 0xe000e4a8'u),
  IPRIOR169: PFIC_IPRIOR169_Type(loc: 0xe000e4a9'u),
  IPRIOR170: PFIC_IPRIOR170_Type(loc: 0xe000e4aa'u),
  IPRIOR171: PFIC_IPRIOR171_Type(loc: 0xe000e4ab'u),
  IPRIOR172: PFIC_IPRIOR172_Type(loc: 0xe000e4ac'u),
  IPRIOR173: PFIC_IPRIOR173_Type(loc: 0xe000e4ad'u),
  IPRIOR174: PFIC_IPRIOR174_Type(loc: 0xe000e4ae'u),
  IPRIOR175: PFIC_IPRIOR175_Type(loc: 0xe000e4af'u),
  IPRIOR176: PFIC_IPRIOR176_Type(loc: 0xe000e4b0'u),
  IPRIOR177: PFIC_IPRIOR177_Type(loc: 0xe000e4b1'u),
  IPRIOR178: PFIC_IPRIOR178_Type(loc: 0xe000e4b2'u),
  IPRIOR179: PFIC_IPRIOR179_Type(loc: 0xe000e4b3'u),
  IPRIOR180: PFIC_IPRIOR180_Type(loc: 0xe000e4b4'u),
  IPRIOR181: PFIC_IPRIOR181_Type(loc: 0xe000e4b5'u),
  IPRIOR182: PFIC_IPRIOR182_Type(loc: 0xe000e4b6'u),
  IPRIOR183: PFIC_IPRIOR183_Type(loc: 0xe000e4b7'u),
  IPRIOR184: PFIC_IPRIOR184_Type(loc: 0xe000e4b8'u),
  IPRIOR185: PFIC_IPRIOR185_Type(loc: 0xe000e4b9'u),
  IPRIOR186: PFIC_IPRIOR186_Type(loc: 0xe000e4ba'u),
  IPRIOR187: PFIC_IPRIOR187_Type(loc: 0xe000e4bb'u),
  IPRIOR188: PFIC_IPRIOR188_Type(loc: 0xe000e4bc'u),
  IPRIOR189: PFIC_IPRIOR189_Type(loc: 0xe000e4bd'u),
  IPRIOR190: PFIC_IPRIOR190_Type(loc: 0xe000e4be'u),
  IPRIOR191: PFIC_IPRIOR191_Type(loc: 0xe000e4bf'u),
  IPRIOR192: PFIC_IPRIOR192_Type(loc: 0xe000e4c0'u),
  IPRIOR193: PFIC_IPRIOR193_Type(loc: 0xe000e4c1'u),
  IPRIOR194: PFIC_IPRIOR194_Type(loc: 0xe000e4c2'u),
  IPRIOR195: PFIC_IPRIOR195_Type(loc: 0xe000e4c3'u),
  IPRIOR196: PFIC_IPRIOR196_Type(loc: 0xe000e4c4'u),
  IPRIOR197: PFIC_IPRIOR197_Type(loc: 0xe000e4c5'u),
  IPRIOR198: PFIC_IPRIOR198_Type(loc: 0xe000e4c6'u),
  IPRIOR199: PFIC_IPRIOR199_Type(loc: 0xe000e4c7'u),
  IPRIOR200: PFIC_IPRIOR200_Type(loc: 0xe000e4c8'u),
  IPRIOR201: PFIC_IPRIOR201_Type(loc: 0xe000e4c9'u),
  IPRIOR202: PFIC_IPRIOR202_Type(loc: 0xe000e4ca'u),
  IPRIOR203: PFIC_IPRIOR203_Type(loc: 0xe000e4cb'u),
  IPRIOR204: PFIC_IPRIOR204_Type(loc: 0xe000e4cc'u),
  IPRIOR205: PFIC_IPRIOR205_Type(loc: 0xe000e4cd'u),
  IPRIOR206: PFIC_IPRIOR206_Type(loc: 0xe000e4ce'u),
  IPRIOR207: PFIC_IPRIOR207_Type(loc: 0xe000e4cf'u),
  IPRIOR208: PFIC_IPRIOR208_Type(loc: 0xe000e4d0'u),
  IPRIOR209: PFIC_IPRIOR209_Type(loc: 0xe000e4d1'u),
  IPRIOR210: PFIC_IPRIOR210_Type(loc: 0xe000e4d2'u),
  IPRIOR211: PFIC_IPRIOR211_Type(loc: 0xe000e4d3'u),
  IPRIOR212: PFIC_IPRIOR212_Type(loc: 0xe000e4d4'u),
  IPRIOR213: PFIC_IPRIOR213_Type(loc: 0xe000e4d5'u),
  IPRIOR214: PFIC_IPRIOR214_Type(loc: 0xe000e4d6'u),
  IPRIOR215: PFIC_IPRIOR215_Type(loc: 0xe000e4d7'u),
  IPRIOR216: PFIC_IPRIOR216_Type(loc: 0xe000e4d8'u),
  IPRIOR217: PFIC_IPRIOR217_Type(loc: 0xe000e4d9'u),
  IPRIOR218: PFIC_IPRIOR218_Type(loc: 0xe000e4da'u),
  IPRIOR219: PFIC_IPRIOR219_Type(loc: 0xe000e4db'u),
  IPRIOR220: PFIC_IPRIOR220_Type(loc: 0xe000e4dc'u),
  IPRIOR221: PFIC_IPRIOR221_Type(loc: 0xe000e4dd'u),
  IPRIOR222: PFIC_IPRIOR222_Type(loc: 0xe000e4de'u),
  IPRIOR223: PFIC_IPRIOR223_Type(loc: 0xe000e4df'u),
  IPRIOR224: PFIC_IPRIOR224_Type(loc: 0xe000e4e0'u),
  IPRIOR225: PFIC_IPRIOR225_Type(loc: 0xe000e4e1'u),
  IPRIOR226: PFIC_IPRIOR226_Type(loc: 0xe000e4e2'u),
  IPRIOR227: PFIC_IPRIOR227_Type(loc: 0xe000e4e3'u),
  IPRIOR228: PFIC_IPRIOR228_Type(loc: 0xe000e4e4'u),
  IPRIOR229: PFIC_IPRIOR229_Type(loc: 0xe000e4e5'u),
  IPRIOR230: PFIC_IPRIOR230_Type(loc: 0xe000e4e6'u),
  IPRIOR231: PFIC_IPRIOR231_Type(loc: 0xe000e4e7'u),
  IPRIOR232: PFIC_IPRIOR232_Type(loc: 0xe000e4e8'u),
  IPRIOR233: PFIC_IPRIOR233_Type(loc: 0xe000e4e9'u),
  IPRIOR234: PFIC_IPRIOR234_Type(loc: 0xe000e4ea'u),
  IPRIOR235: PFIC_IPRIOR235_Type(loc: 0xe000e4eb'u),
  IPRIOR236: PFIC_IPRIOR236_Type(loc: 0xe000e4ec'u),
  IPRIOR237: PFIC_IPRIOR237_Type(loc: 0xe000e4ed'u),
  IPRIOR238: PFIC_IPRIOR238_Type(loc: 0xe000e4ee'u),
  IPRIOR239: PFIC_IPRIOR239_Type(loc: 0xe000e4ef'u),
  IPRIOR240: PFIC_IPRIOR240_Type(loc: 0xe000e4f0'u),
  IPRIOR241: PFIC_IPRIOR241_Type(loc: 0xe000e4f1'u),
  IPRIOR242: PFIC_IPRIOR242_Type(loc: 0xe000e4f2'u),
  IPRIOR243: PFIC_IPRIOR243_Type(loc: 0xe000e4f3'u),
  IPRIOR244: PFIC_IPRIOR244_Type(loc: 0xe000e4f4'u),
  IPRIOR245: PFIC_IPRIOR245_Type(loc: 0xe000e4f5'u),
  IPRIOR246: PFIC_IPRIOR246_Type(loc: 0xe000e4f6'u),
  IPRIOR247: PFIC_IPRIOR247_Type(loc: 0xe000e4f7'u),
  IPRIOR248: PFIC_IPRIOR248_Type(loc: 0xe000e4f8'u),
  IPRIOR249: PFIC_IPRIOR249_Type(loc: 0xe000e4f9'u),
  IPRIOR250: PFIC_IPRIOR250_Type(loc: 0xe000e4fa'u),
  IPRIOR251: PFIC_IPRIOR251_Type(loc: 0xe000e4fb'u),
  IPRIOR252: PFIC_IPRIOR252_Type(loc: 0xe000e4fc'u),
  IPRIOR253: PFIC_IPRIOR253_Type(loc: 0xe000e4fd'u),
  IPRIOR254: PFIC_IPRIOR254_Type(loc: 0xe000e4fe'u),
  IPRIOR255: PFIC_IPRIOR255_Type(loc: 0xe000e4ff'u),
  SCTLR: PFIC_SCTLR_Type(loc: 0xe000ed10'u),
  STK_CTLR: PFIC_STK_CTLR_Type(loc: 0xe000f000'u),
  STK_SR: PFIC_STK_SR_Type(loc: 0xe000f004'u),
  STK_CNTL: PFIC_STK_CNTL_Type(loc: 0xe000f008'u),
  STK_CNTH: PFIC_STK_CNTH_Type(loc: 0xe000f00c'u),
  STK_CMPLR: PFIC_STK_CMPLR_Type(loc: 0xe000f010'u),
  STK_CMPHR: PFIC_STK_CMPHR_Type(loc: 0xe000f014'u),
)


################################################################################
# Accessors for peripheral registers
################################################################################
type
  USB_EP0R_Fields* = distinct uint16
  USB_EP1R_Fields* = distinct uint16
  USB_EP2R_Fields* = distinct uint16
  USB_EP3R_Fields* = distinct uint16
  USB_EP4R_Fields* = distinct uint16
  USB_EP5R_Fields* = distinct uint16
  USB_EP6R_Fields* = distinct uint16
  USB_EP7R_Fields* = distinct uint16
  USB_CNTR_Fields* = distinct uint16
  USB_ISTR_Fields* = distinct uint16
  USB_FNR_Fields* = distinct uint16
  USB_DADDR_Fields* = distinct uint16
  USB_BTABLE_Fields* = distinct uint32

proc read*(reg: USB_EP0R_Type): USB_EP0R_Fields {.inline.} =
  volatileLoad(cast[ptr USB_EP0R_Fields](reg.loc))

proc read*(reg: static USB_EP0R_Type): USB_EP0R_Fields {.inline.} =
  volatileLoad(cast[ptr USB_EP0R_Fields](reg.loc))

proc write*(reg: USB_EP0R_Type, val: USB_EP0R_Fields) {.inline.} =
  volatileStore(cast[ptr USB_EP0R_Fields](reg.loc), val)

proc write*(reg: USB_EP0R_Type, EA: uint16 = 0, STAT_TX: uint16 = 0, DTOG_TX: bool = false, CTR_TX: bool = false, EP_KIND: bool = false, EP_TYPE: uint16 = 0, SETUP: bool = false, STAT_RX: uint16 = 0, DTOG_RX: bool = false, CTR_RX: bool = false) =
  var x: uint16
  x.setMask((EA shl 0).masked(0 .. 3))
  x.setMask((STAT_TX shl 4).masked(4 .. 5))
  x.setMask((DTOG_TX.uint16 shl 6).masked(6 .. 6))
  x.setMask((CTR_TX.uint16 shl 7).masked(7 .. 7))
  x.setMask((EP_KIND.uint16 shl 8).masked(8 .. 8))
  x.setMask((EP_TYPE shl 9).masked(9 .. 10))
  x.setMask((SETUP.uint16 shl 11).masked(11 .. 11))
  x.setMask((STAT_RX shl 12).masked(12 .. 13))
  x.setMask((DTOG_RX.uint16 shl 14).masked(14 .. 14))
  x.setMask((CTR_RX.uint16 shl 15).masked(15 .. 15))
  reg.write x.USB_EP0R_Fields

template modifyIt*(reg: USB_EP0R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_EP1R_Type): USB_EP1R_Fields {.inline.} =
  volatileLoad(cast[ptr USB_EP1R_Fields](reg.loc))

proc read*(reg: static USB_EP1R_Type): USB_EP1R_Fields {.inline.} =
  volatileLoad(cast[ptr USB_EP1R_Fields](reg.loc))

proc write*(reg: USB_EP1R_Type, val: USB_EP1R_Fields) {.inline.} =
  volatileStore(cast[ptr USB_EP1R_Fields](reg.loc), val)

proc write*(reg: USB_EP1R_Type, EA: uint16 = 0, STAT_TX: uint16 = 0, DTOG_TX: bool = false, CTR_TX: bool = false, EP_KIND: bool = false, EP_TYPE: uint16 = 0, SETUP: bool = false, STAT_RX: uint16 = 0, DTOG_RX: bool = false, CTR_RX: bool = false) =
  var x: uint16
  x.setMask((EA shl 0).masked(0 .. 3))
  x.setMask((STAT_TX shl 4).masked(4 .. 5))
  x.setMask((DTOG_TX.uint16 shl 6).masked(6 .. 6))
  x.setMask((CTR_TX.uint16 shl 7).masked(7 .. 7))
  x.setMask((EP_KIND.uint16 shl 8).masked(8 .. 8))
  x.setMask((EP_TYPE shl 9).masked(9 .. 10))
  x.setMask((SETUP.uint16 shl 11).masked(11 .. 11))
  x.setMask((STAT_RX shl 12).masked(12 .. 13))
  x.setMask((DTOG_RX.uint16 shl 14).masked(14 .. 14))
  x.setMask((CTR_RX.uint16 shl 15).masked(15 .. 15))
  reg.write x.USB_EP1R_Fields

template modifyIt*(reg: USB_EP1R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_EP2R_Type): USB_EP2R_Fields {.inline.} =
  volatileLoad(cast[ptr USB_EP2R_Fields](reg.loc))

proc read*(reg: static USB_EP2R_Type): USB_EP2R_Fields {.inline.} =
  volatileLoad(cast[ptr USB_EP2R_Fields](reg.loc))

proc write*(reg: USB_EP2R_Type, val: USB_EP2R_Fields) {.inline.} =
  volatileStore(cast[ptr USB_EP2R_Fields](reg.loc), val)

proc write*(reg: USB_EP2R_Type, EA: uint16 = 0, STAT_TX: uint16 = 0, DTOG_TX: bool = false, CTR_TX: bool = false, EP_KIND: bool = false, EP_TYPE: uint16 = 0, SETUP: bool = false, STAT_RX: uint16 = 0, DTOG_RX: bool = false, CTR_RX: bool = false) =
  var x: uint16
  x.setMask((EA shl 0).masked(0 .. 3))
  x.setMask((STAT_TX shl 4).masked(4 .. 5))
  x.setMask((DTOG_TX.uint16 shl 6).masked(6 .. 6))
  x.setMask((CTR_TX.uint16 shl 7).masked(7 .. 7))
  x.setMask((EP_KIND.uint16 shl 8).masked(8 .. 8))
  x.setMask((EP_TYPE shl 9).masked(9 .. 10))
  x.setMask((SETUP.uint16 shl 11).masked(11 .. 11))
  x.setMask((STAT_RX shl 12).masked(12 .. 13))
  x.setMask((DTOG_RX.uint16 shl 14).masked(14 .. 14))
  x.setMask((CTR_RX.uint16 shl 15).masked(15 .. 15))
  reg.write x.USB_EP2R_Fields

template modifyIt*(reg: USB_EP2R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_EP3R_Type): USB_EP3R_Fields {.inline.} =
  volatileLoad(cast[ptr USB_EP3R_Fields](reg.loc))

proc read*(reg: static USB_EP3R_Type): USB_EP3R_Fields {.inline.} =
  volatileLoad(cast[ptr USB_EP3R_Fields](reg.loc))

proc write*(reg: USB_EP3R_Type, val: USB_EP3R_Fields) {.inline.} =
  volatileStore(cast[ptr USB_EP3R_Fields](reg.loc), val)

proc write*(reg: USB_EP3R_Type, EA: uint16 = 0, STAT_TX: uint16 = 0, DTOG_TX: bool = false, CTR_TX: bool = false, EP_KIND: bool = false, EP_TYPE: uint16 = 0, SETUP: bool = false, STAT_RX: uint16 = 0, DTOG_RX: bool = false, CTR_RX: bool = false) =
  var x: uint16
  x.setMask((EA shl 0).masked(0 .. 3))
  x.setMask((STAT_TX shl 4).masked(4 .. 5))
  x.setMask((DTOG_TX.uint16 shl 6).masked(6 .. 6))
  x.setMask((CTR_TX.uint16 shl 7).masked(7 .. 7))
  x.setMask((EP_KIND.uint16 shl 8).masked(8 .. 8))
  x.setMask((EP_TYPE shl 9).masked(9 .. 10))
  x.setMask((SETUP.uint16 shl 11).masked(11 .. 11))
  x.setMask((STAT_RX shl 12).masked(12 .. 13))
  x.setMask((DTOG_RX.uint16 shl 14).masked(14 .. 14))
  x.setMask((CTR_RX.uint16 shl 15).masked(15 .. 15))
  reg.write x.USB_EP3R_Fields

template modifyIt*(reg: USB_EP3R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_EP4R_Type): USB_EP4R_Fields {.inline.} =
  volatileLoad(cast[ptr USB_EP4R_Fields](reg.loc))

proc read*(reg: static USB_EP4R_Type): USB_EP4R_Fields {.inline.} =
  volatileLoad(cast[ptr USB_EP4R_Fields](reg.loc))

proc write*(reg: USB_EP4R_Type, val: USB_EP4R_Fields) {.inline.} =
  volatileStore(cast[ptr USB_EP4R_Fields](reg.loc), val)

proc write*(reg: USB_EP4R_Type, EA: uint16 = 0, STAT_TX: uint16 = 0, DTOG_TX: bool = false, CTR_TX: bool = false, EP_KIND: bool = false, EP_TYPE: uint16 = 0, SETUP: bool = false, STAT_RX: uint16 = 0, DTOG_RX: bool = false, CTR_RX: bool = false) =
  var x: uint16
  x.setMask((EA shl 0).masked(0 .. 3))
  x.setMask((STAT_TX shl 4).masked(4 .. 5))
  x.setMask((DTOG_TX.uint16 shl 6).masked(6 .. 6))
  x.setMask((CTR_TX.uint16 shl 7).masked(7 .. 7))
  x.setMask((EP_KIND.uint16 shl 8).masked(8 .. 8))
  x.setMask((EP_TYPE shl 9).masked(9 .. 10))
  x.setMask((SETUP.uint16 shl 11).masked(11 .. 11))
  x.setMask((STAT_RX shl 12).masked(12 .. 13))
  x.setMask((DTOG_RX.uint16 shl 14).masked(14 .. 14))
  x.setMask((CTR_RX.uint16 shl 15).masked(15 .. 15))
  reg.write x.USB_EP4R_Fields

template modifyIt*(reg: USB_EP4R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_EP5R_Type): USB_EP5R_Fields {.inline.} =
  volatileLoad(cast[ptr USB_EP5R_Fields](reg.loc))

proc read*(reg: static USB_EP5R_Type): USB_EP5R_Fields {.inline.} =
  volatileLoad(cast[ptr USB_EP5R_Fields](reg.loc))

proc write*(reg: USB_EP5R_Type, val: USB_EP5R_Fields) {.inline.} =
  volatileStore(cast[ptr USB_EP5R_Fields](reg.loc), val)

proc write*(reg: USB_EP5R_Type, EA: uint16 = 0, STAT_TX: uint16 = 0, DTOG_TX: bool = false, CTR_TX: bool = false, EP_KIND: bool = false, EP_TYPE: uint16 = 0, SETUP: bool = false, STAT_RX: uint16 = 0, DTOG_RX: bool = false, CTR_RX: bool = false) =
  var x: uint16
  x.setMask((EA shl 0).masked(0 .. 3))
  x.setMask((STAT_TX shl 4).masked(4 .. 5))
  x.setMask((DTOG_TX.uint16 shl 6).masked(6 .. 6))
  x.setMask((CTR_TX.uint16 shl 7).masked(7 .. 7))
  x.setMask((EP_KIND.uint16 shl 8).masked(8 .. 8))
  x.setMask((EP_TYPE shl 9).masked(9 .. 10))
  x.setMask((SETUP.uint16 shl 11).masked(11 .. 11))
  x.setMask((STAT_RX shl 12).masked(12 .. 13))
  x.setMask((DTOG_RX.uint16 shl 14).masked(14 .. 14))
  x.setMask((CTR_RX.uint16 shl 15).masked(15 .. 15))
  reg.write x.USB_EP5R_Fields

template modifyIt*(reg: USB_EP5R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_EP6R_Type): USB_EP6R_Fields {.inline.} =
  volatileLoad(cast[ptr USB_EP6R_Fields](reg.loc))

proc read*(reg: static USB_EP6R_Type): USB_EP6R_Fields {.inline.} =
  volatileLoad(cast[ptr USB_EP6R_Fields](reg.loc))

proc write*(reg: USB_EP6R_Type, val: USB_EP6R_Fields) {.inline.} =
  volatileStore(cast[ptr USB_EP6R_Fields](reg.loc), val)

proc write*(reg: USB_EP6R_Type, EA: uint16 = 0, STAT_TX: uint16 = 0, DTOG_TX: bool = false, CTR_TX: bool = false, EP_KIND: bool = false, EP_TYPE: uint16 = 0, SETUP: bool = false, STAT_RX: uint16 = 0, DTOG_RX: bool = false, CTR_RX: bool = false) =
  var x: uint16
  x.setMask((EA shl 0).masked(0 .. 3))
  x.setMask((STAT_TX shl 4).masked(4 .. 5))
  x.setMask((DTOG_TX.uint16 shl 6).masked(6 .. 6))
  x.setMask((CTR_TX.uint16 shl 7).masked(7 .. 7))
  x.setMask((EP_KIND.uint16 shl 8).masked(8 .. 8))
  x.setMask((EP_TYPE shl 9).masked(9 .. 10))
  x.setMask((SETUP.uint16 shl 11).masked(11 .. 11))
  x.setMask((STAT_RX shl 12).masked(12 .. 13))
  x.setMask((DTOG_RX.uint16 shl 14).masked(14 .. 14))
  x.setMask((CTR_RX.uint16 shl 15).masked(15 .. 15))
  reg.write x.USB_EP6R_Fields

template modifyIt*(reg: USB_EP6R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_EP7R_Type): USB_EP7R_Fields {.inline.} =
  volatileLoad(cast[ptr USB_EP7R_Fields](reg.loc))

proc read*(reg: static USB_EP7R_Type): USB_EP7R_Fields {.inline.} =
  volatileLoad(cast[ptr USB_EP7R_Fields](reg.loc))

proc write*(reg: USB_EP7R_Type, val: USB_EP7R_Fields) {.inline.} =
  volatileStore(cast[ptr USB_EP7R_Fields](reg.loc), val)

proc write*(reg: USB_EP7R_Type, EA: uint16 = 0, STAT_TX: uint16 = 0, DTOG_TX: bool = false, CTR_TX: bool = false, EP_KIND: bool = false, EP_TYPE: uint16 = 0, SETUP: bool = false, STAT_RX: uint16 = 0, DTOG_RX: bool = false, CTR_RX: bool = false) =
  var x: uint16
  x.setMask((EA shl 0).masked(0 .. 3))
  x.setMask((STAT_TX shl 4).masked(4 .. 5))
  x.setMask((DTOG_TX.uint16 shl 6).masked(6 .. 6))
  x.setMask((CTR_TX.uint16 shl 7).masked(7 .. 7))
  x.setMask((EP_KIND.uint16 shl 8).masked(8 .. 8))
  x.setMask((EP_TYPE shl 9).masked(9 .. 10))
  x.setMask((SETUP.uint16 shl 11).masked(11 .. 11))
  x.setMask((STAT_RX shl 12).masked(12 .. 13))
  x.setMask((DTOG_RX.uint16 shl 14).masked(14 .. 14))
  x.setMask((CTR_RX.uint16 shl 15).masked(15 .. 15))
  reg.write x.USB_EP7R_Fields

template modifyIt*(reg: USB_EP7R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_CNTR_Type): USB_CNTR_Fields {.inline.} =
  volatileLoad(cast[ptr USB_CNTR_Fields](reg.loc))

proc read*(reg: static USB_CNTR_Type): USB_CNTR_Fields {.inline.} =
  volatileLoad(cast[ptr USB_CNTR_Fields](reg.loc))

proc write*(reg: USB_CNTR_Type, val: USB_CNTR_Fields) {.inline.} =
  volatileStore(cast[ptr USB_CNTR_Fields](reg.loc), val)

proc write*(reg: USB_CNTR_Type, FRES: bool = true, PDWN: bool = true, LPMODE: bool = false, FSUSP: bool = false, RESUME: bool = false, ESOFM: bool = false, SOFM: bool = false, RESETM: bool = false, SUSPM: bool = false, WKUPM: bool = false, ERRM: bool = false, PMAOVRM: bool = false, CTRM: bool = false) =
  var x: uint16
  x.setMask((FRES.uint16 shl 0).masked(0 .. 0))
  x.setMask((PDWN.uint16 shl 1).masked(1 .. 1))
  x.setMask((LPMODE.uint16 shl 2).masked(2 .. 2))
  x.setMask((FSUSP.uint16 shl 3).masked(3 .. 3))
  x.setMask((RESUME.uint16 shl 4).masked(4 .. 4))
  x.setMask((ESOFM.uint16 shl 8).masked(8 .. 8))
  x.setMask((SOFM.uint16 shl 9).masked(9 .. 9))
  x.setMask((RESETM.uint16 shl 10).masked(10 .. 10))
  x.setMask((SUSPM.uint16 shl 11).masked(11 .. 11))
  x.setMask((WKUPM.uint16 shl 12).masked(12 .. 12))
  x.setMask((ERRM.uint16 shl 13).masked(13 .. 13))
  x.setMask((PMAOVRM.uint16 shl 14).masked(14 .. 14))
  x.setMask((CTRM.uint16 shl 15).masked(15 .. 15))
  reg.write x.USB_CNTR_Fields

template modifyIt*(reg: USB_CNTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_ISTR_Type): USB_ISTR_Fields {.inline.} =
  volatileLoad(cast[ptr USB_ISTR_Fields](reg.loc))

proc read*(reg: static USB_ISTR_Type): USB_ISTR_Fields {.inline.} =
  volatileLoad(cast[ptr USB_ISTR_Fields](reg.loc))

proc write*(reg: USB_ISTR_Type, val: USB_ISTR_Fields) {.inline.} =
  volatileStore(cast[ptr USB_ISTR_Fields](reg.loc), val)

proc write*(reg: USB_ISTR_Type, EP_ID: uint16 = 0, DIR: bool = false, ESOF: bool = false, SOF: bool = false, RESET: bool = false, SUSP: bool = false, WKUP: bool = false, ERR: bool = false, PMAOVR: bool = false, CTR: bool = false) =
  var x: uint16
  x.setMask((EP_ID shl 0).masked(0 .. 3))
  x.setMask((DIR.uint16 shl 4).masked(4 .. 4))
  x.setMask((ESOF.uint16 shl 8).masked(8 .. 8))
  x.setMask((SOF.uint16 shl 9).masked(9 .. 9))
  x.setMask((RESET.uint16 shl 10).masked(10 .. 10))
  x.setMask((SUSP.uint16 shl 11).masked(11 .. 11))
  x.setMask((WKUP.uint16 shl 12).masked(12 .. 12))
  x.setMask((ERR.uint16 shl 13).masked(13 .. 13))
  x.setMask((PMAOVR.uint16 shl 14).masked(14 .. 14))
  x.setMask((CTR.uint16 shl 15).masked(15 .. 15))
  reg.write x.USB_ISTR_Fields

template modifyIt*(reg: USB_ISTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_FNR_Type): USB_FNR_Fields {.inline.} =
  volatileLoad(cast[ptr USB_FNR_Fields](reg.loc))

proc read*(reg: static USB_FNR_Type): USB_FNR_Fields {.inline.} =
  volatileLoad(cast[ptr USB_FNR_Fields](reg.loc))

proc read*(reg: USB_DADDR_Type): USB_DADDR_Fields {.inline.} =
  volatileLoad(cast[ptr USB_DADDR_Fields](reg.loc))

proc read*(reg: static USB_DADDR_Type): USB_DADDR_Fields {.inline.} =
  volatileLoad(cast[ptr USB_DADDR_Fields](reg.loc))

proc write*(reg: USB_DADDR_Type, val: USB_DADDR_Fields) {.inline.} =
  volatileStore(cast[ptr USB_DADDR_Fields](reg.loc), val)

proc write*(reg: USB_DADDR_Type, ADD: uint16 = 0, EF: bool = false) =
  var x: uint16
  x.setMask((ADD shl 0).masked(0 .. 6))
  x.setMask((EF.uint16 shl 7).masked(7 .. 7))
  reg.write x.USB_DADDR_Fields

template modifyIt*(reg: USB_DADDR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_BTABLE_Type): USB_BTABLE_Fields {.inline.} =
  volatileLoad(cast[ptr USB_BTABLE_Fields](reg.loc))

proc read*(reg: static USB_BTABLE_Type): USB_BTABLE_Fields {.inline.} =
  volatileLoad(cast[ptr USB_BTABLE_Fields](reg.loc))

proc write*(reg: USB_BTABLE_Type, val: USB_BTABLE_Fields) {.inline.} =
  volatileStore(cast[ptr USB_BTABLE_Fields](reg.loc), val)

proc write*(reg: USB_BTABLE_Type, BTABLE: uint32 = 0) =
  var x: uint32
  x.setMask((BTABLE shl 3).masked(3 .. 15))
  reg.write x.USB_BTABLE_Fields

template modifyIt*(reg: USB_BTABLE_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func EA*(r: USB_EP0R_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 3)

proc `EA=`*(r: var USB_EP0R_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.USB_EP0R_Fields

func STAT_TX*(r: USB_EP0R_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(4 .. 5)

proc `STAT_TX=`*(r: var USB_EP0R_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.USB_EP0R_Fields

func DTOG_TX*(r: USB_EP0R_Fields): bool {.inline.} =
  r.uint16.bitsliced(6 .. 6).bool

proc `DTOG_TX=`*(r: var USB_EP0R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint16 shl 6).masked(6 .. 6))
  r = tmp.USB_EP0R_Fields

func CTR_TX*(r: USB_EP0R_Fields): bool {.inline.} =
  r.uint16.bitsliced(7 .. 7).bool

proc `CTR_TX=`*(r: var USB_EP0R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint16 shl 7).masked(7 .. 7))
  r = tmp.USB_EP0R_Fields

func EP_KIND*(r: USB_EP0R_Fields): bool {.inline.} =
  r.uint16.bitsliced(8 .. 8).bool

proc `EP_KIND=`*(r: var USB_EP0R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint16 shl 8).masked(8 .. 8))
  r = tmp.USB_EP0R_Fields

func EP_TYPE*(r: USB_EP0R_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(9 .. 10)

proc `EP_TYPE=`*(r: var USB_EP0R_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(9 .. 10)
  tmp.setMask((val shl 9).masked(9 .. 10))
  r = tmp.USB_EP0R_Fields

func SETUP*(r: USB_EP0R_Fields): bool {.inline.} =
  r.uint16.bitsliced(11 .. 11).bool

proc `SETUP=`*(r: var USB_EP0R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint16 shl 11).masked(11 .. 11))
  r = tmp.USB_EP0R_Fields

func STAT_RX*(r: USB_EP0R_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(12 .. 13)

proc `STAT_RX=`*(r: var USB_EP0R_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.USB_EP0R_Fields

func DTOG_RX*(r: USB_EP0R_Fields): bool {.inline.} =
  r.uint16.bitsliced(14 .. 14).bool

proc `DTOG_RX=`*(r: var USB_EP0R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint16 shl 14).masked(14 .. 14))
  r = tmp.USB_EP0R_Fields

func CTR_RX*(r: USB_EP0R_Fields): bool {.inline.} =
  r.uint16.bitsliced(15 .. 15).bool

proc `CTR_RX=`*(r: var USB_EP0R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint16 shl 15).masked(15 .. 15))
  r = tmp.USB_EP0R_Fields

func EA*(r: USB_EP1R_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 3)

proc `EA=`*(r: var USB_EP1R_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.USB_EP1R_Fields

func STAT_TX*(r: USB_EP1R_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(4 .. 5)

proc `STAT_TX=`*(r: var USB_EP1R_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.USB_EP1R_Fields

func DTOG_TX*(r: USB_EP1R_Fields): bool {.inline.} =
  r.uint16.bitsliced(6 .. 6).bool

proc `DTOG_TX=`*(r: var USB_EP1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint16 shl 6).masked(6 .. 6))
  r = tmp.USB_EP1R_Fields

func CTR_TX*(r: USB_EP1R_Fields): bool {.inline.} =
  r.uint16.bitsliced(7 .. 7).bool

proc `CTR_TX=`*(r: var USB_EP1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint16 shl 7).masked(7 .. 7))
  r = tmp.USB_EP1R_Fields

func EP_KIND*(r: USB_EP1R_Fields): bool {.inline.} =
  r.uint16.bitsliced(8 .. 8).bool

proc `EP_KIND=`*(r: var USB_EP1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint16 shl 8).masked(8 .. 8))
  r = tmp.USB_EP1R_Fields

func EP_TYPE*(r: USB_EP1R_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(9 .. 10)

proc `EP_TYPE=`*(r: var USB_EP1R_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(9 .. 10)
  tmp.setMask((val shl 9).masked(9 .. 10))
  r = tmp.USB_EP1R_Fields

func SETUP*(r: USB_EP1R_Fields): bool {.inline.} =
  r.uint16.bitsliced(11 .. 11).bool

proc `SETUP=`*(r: var USB_EP1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint16 shl 11).masked(11 .. 11))
  r = tmp.USB_EP1R_Fields

func STAT_RX*(r: USB_EP1R_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(12 .. 13)

proc `STAT_RX=`*(r: var USB_EP1R_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.USB_EP1R_Fields

func DTOG_RX*(r: USB_EP1R_Fields): bool {.inline.} =
  r.uint16.bitsliced(14 .. 14).bool

proc `DTOG_RX=`*(r: var USB_EP1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint16 shl 14).masked(14 .. 14))
  r = tmp.USB_EP1R_Fields

func CTR_RX*(r: USB_EP1R_Fields): bool {.inline.} =
  r.uint16.bitsliced(15 .. 15).bool

proc `CTR_RX=`*(r: var USB_EP1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint16 shl 15).masked(15 .. 15))
  r = tmp.USB_EP1R_Fields

func EA*(r: USB_EP2R_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 3)

proc `EA=`*(r: var USB_EP2R_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.USB_EP2R_Fields

func STAT_TX*(r: USB_EP2R_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(4 .. 5)

proc `STAT_TX=`*(r: var USB_EP2R_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.USB_EP2R_Fields

func DTOG_TX*(r: USB_EP2R_Fields): bool {.inline.} =
  r.uint16.bitsliced(6 .. 6).bool

proc `DTOG_TX=`*(r: var USB_EP2R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint16 shl 6).masked(6 .. 6))
  r = tmp.USB_EP2R_Fields

func CTR_TX*(r: USB_EP2R_Fields): bool {.inline.} =
  r.uint16.bitsliced(7 .. 7).bool

proc `CTR_TX=`*(r: var USB_EP2R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint16 shl 7).masked(7 .. 7))
  r = tmp.USB_EP2R_Fields

func EP_KIND*(r: USB_EP2R_Fields): bool {.inline.} =
  r.uint16.bitsliced(8 .. 8).bool

proc `EP_KIND=`*(r: var USB_EP2R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint16 shl 8).masked(8 .. 8))
  r = tmp.USB_EP2R_Fields

func EP_TYPE*(r: USB_EP2R_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(9 .. 10)

proc `EP_TYPE=`*(r: var USB_EP2R_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(9 .. 10)
  tmp.setMask((val shl 9).masked(9 .. 10))
  r = tmp.USB_EP2R_Fields

func SETUP*(r: USB_EP2R_Fields): bool {.inline.} =
  r.uint16.bitsliced(11 .. 11).bool

proc `SETUP=`*(r: var USB_EP2R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint16 shl 11).masked(11 .. 11))
  r = tmp.USB_EP2R_Fields

func STAT_RX*(r: USB_EP2R_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(12 .. 13)

proc `STAT_RX=`*(r: var USB_EP2R_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.USB_EP2R_Fields

func DTOG_RX*(r: USB_EP2R_Fields): bool {.inline.} =
  r.uint16.bitsliced(14 .. 14).bool

proc `DTOG_RX=`*(r: var USB_EP2R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint16 shl 14).masked(14 .. 14))
  r = tmp.USB_EP2R_Fields

func CTR_RX*(r: USB_EP2R_Fields): bool {.inline.} =
  r.uint16.bitsliced(15 .. 15).bool

proc `CTR_RX=`*(r: var USB_EP2R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint16 shl 15).masked(15 .. 15))
  r = tmp.USB_EP2R_Fields

func EA*(r: USB_EP3R_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 3)

proc `EA=`*(r: var USB_EP3R_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.USB_EP3R_Fields

func STAT_TX*(r: USB_EP3R_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(4 .. 5)

proc `STAT_TX=`*(r: var USB_EP3R_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.USB_EP3R_Fields

func DTOG_TX*(r: USB_EP3R_Fields): bool {.inline.} =
  r.uint16.bitsliced(6 .. 6).bool

proc `DTOG_TX=`*(r: var USB_EP3R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint16 shl 6).masked(6 .. 6))
  r = tmp.USB_EP3R_Fields

func CTR_TX*(r: USB_EP3R_Fields): bool {.inline.} =
  r.uint16.bitsliced(7 .. 7).bool

proc `CTR_TX=`*(r: var USB_EP3R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint16 shl 7).masked(7 .. 7))
  r = tmp.USB_EP3R_Fields

func EP_KIND*(r: USB_EP3R_Fields): bool {.inline.} =
  r.uint16.bitsliced(8 .. 8).bool

proc `EP_KIND=`*(r: var USB_EP3R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint16 shl 8).masked(8 .. 8))
  r = tmp.USB_EP3R_Fields

func EP_TYPE*(r: USB_EP3R_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(9 .. 10)

proc `EP_TYPE=`*(r: var USB_EP3R_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(9 .. 10)
  tmp.setMask((val shl 9).masked(9 .. 10))
  r = tmp.USB_EP3R_Fields

func SETUP*(r: USB_EP3R_Fields): bool {.inline.} =
  r.uint16.bitsliced(11 .. 11).bool

proc `SETUP=`*(r: var USB_EP3R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint16 shl 11).masked(11 .. 11))
  r = tmp.USB_EP3R_Fields

func STAT_RX*(r: USB_EP3R_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(12 .. 13)

proc `STAT_RX=`*(r: var USB_EP3R_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.USB_EP3R_Fields

func DTOG_RX*(r: USB_EP3R_Fields): bool {.inline.} =
  r.uint16.bitsliced(14 .. 14).bool

proc `DTOG_RX=`*(r: var USB_EP3R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint16 shl 14).masked(14 .. 14))
  r = tmp.USB_EP3R_Fields

func CTR_RX*(r: USB_EP3R_Fields): bool {.inline.} =
  r.uint16.bitsliced(15 .. 15).bool

proc `CTR_RX=`*(r: var USB_EP3R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint16 shl 15).masked(15 .. 15))
  r = tmp.USB_EP3R_Fields

func EA*(r: USB_EP4R_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 3)

proc `EA=`*(r: var USB_EP4R_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.USB_EP4R_Fields

func STAT_TX*(r: USB_EP4R_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(4 .. 5)

proc `STAT_TX=`*(r: var USB_EP4R_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.USB_EP4R_Fields

func DTOG_TX*(r: USB_EP4R_Fields): bool {.inline.} =
  r.uint16.bitsliced(6 .. 6).bool

proc `DTOG_TX=`*(r: var USB_EP4R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint16 shl 6).masked(6 .. 6))
  r = tmp.USB_EP4R_Fields

func CTR_TX*(r: USB_EP4R_Fields): bool {.inline.} =
  r.uint16.bitsliced(7 .. 7).bool

proc `CTR_TX=`*(r: var USB_EP4R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint16 shl 7).masked(7 .. 7))
  r = tmp.USB_EP4R_Fields

func EP_KIND*(r: USB_EP4R_Fields): bool {.inline.} =
  r.uint16.bitsliced(8 .. 8).bool

proc `EP_KIND=`*(r: var USB_EP4R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint16 shl 8).masked(8 .. 8))
  r = tmp.USB_EP4R_Fields

func EP_TYPE*(r: USB_EP4R_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(9 .. 10)

proc `EP_TYPE=`*(r: var USB_EP4R_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(9 .. 10)
  tmp.setMask((val shl 9).masked(9 .. 10))
  r = tmp.USB_EP4R_Fields

func SETUP*(r: USB_EP4R_Fields): bool {.inline.} =
  r.uint16.bitsliced(11 .. 11).bool

proc `SETUP=`*(r: var USB_EP4R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint16 shl 11).masked(11 .. 11))
  r = tmp.USB_EP4R_Fields

func STAT_RX*(r: USB_EP4R_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(12 .. 13)

proc `STAT_RX=`*(r: var USB_EP4R_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.USB_EP4R_Fields

func DTOG_RX*(r: USB_EP4R_Fields): bool {.inline.} =
  r.uint16.bitsliced(14 .. 14).bool

proc `DTOG_RX=`*(r: var USB_EP4R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint16 shl 14).masked(14 .. 14))
  r = tmp.USB_EP4R_Fields

func CTR_RX*(r: USB_EP4R_Fields): bool {.inline.} =
  r.uint16.bitsliced(15 .. 15).bool

proc `CTR_RX=`*(r: var USB_EP4R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint16 shl 15).masked(15 .. 15))
  r = tmp.USB_EP4R_Fields

func EA*(r: USB_EP5R_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 3)

proc `EA=`*(r: var USB_EP5R_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.USB_EP5R_Fields

func STAT_TX*(r: USB_EP5R_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(4 .. 5)

proc `STAT_TX=`*(r: var USB_EP5R_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.USB_EP5R_Fields

func DTOG_TX*(r: USB_EP5R_Fields): bool {.inline.} =
  r.uint16.bitsliced(6 .. 6).bool

proc `DTOG_TX=`*(r: var USB_EP5R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint16 shl 6).masked(6 .. 6))
  r = tmp.USB_EP5R_Fields

func CTR_TX*(r: USB_EP5R_Fields): bool {.inline.} =
  r.uint16.bitsliced(7 .. 7).bool

proc `CTR_TX=`*(r: var USB_EP5R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint16 shl 7).masked(7 .. 7))
  r = tmp.USB_EP5R_Fields

func EP_KIND*(r: USB_EP5R_Fields): bool {.inline.} =
  r.uint16.bitsliced(8 .. 8).bool

proc `EP_KIND=`*(r: var USB_EP5R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint16 shl 8).masked(8 .. 8))
  r = tmp.USB_EP5R_Fields

func EP_TYPE*(r: USB_EP5R_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(9 .. 10)

proc `EP_TYPE=`*(r: var USB_EP5R_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(9 .. 10)
  tmp.setMask((val shl 9).masked(9 .. 10))
  r = tmp.USB_EP5R_Fields

func SETUP*(r: USB_EP5R_Fields): bool {.inline.} =
  r.uint16.bitsliced(11 .. 11).bool

proc `SETUP=`*(r: var USB_EP5R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint16 shl 11).masked(11 .. 11))
  r = tmp.USB_EP5R_Fields

func STAT_RX*(r: USB_EP5R_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(12 .. 13)

proc `STAT_RX=`*(r: var USB_EP5R_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.USB_EP5R_Fields

func DTOG_RX*(r: USB_EP5R_Fields): bool {.inline.} =
  r.uint16.bitsliced(14 .. 14).bool

proc `DTOG_RX=`*(r: var USB_EP5R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint16 shl 14).masked(14 .. 14))
  r = tmp.USB_EP5R_Fields

func CTR_RX*(r: USB_EP5R_Fields): bool {.inline.} =
  r.uint16.bitsliced(15 .. 15).bool

proc `CTR_RX=`*(r: var USB_EP5R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint16 shl 15).masked(15 .. 15))
  r = tmp.USB_EP5R_Fields

func EA*(r: USB_EP6R_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 3)

proc `EA=`*(r: var USB_EP6R_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.USB_EP6R_Fields

func STAT_TX*(r: USB_EP6R_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(4 .. 5)

proc `STAT_TX=`*(r: var USB_EP6R_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.USB_EP6R_Fields

func DTOG_TX*(r: USB_EP6R_Fields): bool {.inline.} =
  r.uint16.bitsliced(6 .. 6).bool

proc `DTOG_TX=`*(r: var USB_EP6R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint16 shl 6).masked(6 .. 6))
  r = tmp.USB_EP6R_Fields

func CTR_TX*(r: USB_EP6R_Fields): bool {.inline.} =
  r.uint16.bitsliced(7 .. 7).bool

proc `CTR_TX=`*(r: var USB_EP6R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint16 shl 7).masked(7 .. 7))
  r = tmp.USB_EP6R_Fields

func EP_KIND*(r: USB_EP6R_Fields): bool {.inline.} =
  r.uint16.bitsliced(8 .. 8).bool

proc `EP_KIND=`*(r: var USB_EP6R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint16 shl 8).masked(8 .. 8))
  r = tmp.USB_EP6R_Fields

func EP_TYPE*(r: USB_EP6R_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(9 .. 10)

proc `EP_TYPE=`*(r: var USB_EP6R_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(9 .. 10)
  tmp.setMask((val shl 9).masked(9 .. 10))
  r = tmp.USB_EP6R_Fields

func SETUP*(r: USB_EP6R_Fields): bool {.inline.} =
  r.uint16.bitsliced(11 .. 11).bool

proc `SETUP=`*(r: var USB_EP6R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint16 shl 11).masked(11 .. 11))
  r = tmp.USB_EP6R_Fields

func STAT_RX*(r: USB_EP6R_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(12 .. 13)

proc `STAT_RX=`*(r: var USB_EP6R_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.USB_EP6R_Fields

func DTOG_RX*(r: USB_EP6R_Fields): bool {.inline.} =
  r.uint16.bitsliced(14 .. 14).bool

proc `DTOG_RX=`*(r: var USB_EP6R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint16 shl 14).masked(14 .. 14))
  r = tmp.USB_EP6R_Fields

func CTR_RX*(r: USB_EP6R_Fields): bool {.inline.} =
  r.uint16.bitsliced(15 .. 15).bool

proc `CTR_RX=`*(r: var USB_EP6R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint16 shl 15).masked(15 .. 15))
  r = tmp.USB_EP6R_Fields

func EA*(r: USB_EP7R_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 3)

proc `EA=`*(r: var USB_EP7R_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.USB_EP7R_Fields

func STAT_TX*(r: USB_EP7R_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(4 .. 5)

proc `STAT_TX=`*(r: var USB_EP7R_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.USB_EP7R_Fields

func DTOG_TX*(r: USB_EP7R_Fields): bool {.inline.} =
  r.uint16.bitsliced(6 .. 6).bool

proc `DTOG_TX=`*(r: var USB_EP7R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint16 shl 6).masked(6 .. 6))
  r = tmp.USB_EP7R_Fields

func CTR_TX*(r: USB_EP7R_Fields): bool {.inline.} =
  r.uint16.bitsliced(7 .. 7).bool

proc `CTR_TX=`*(r: var USB_EP7R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint16 shl 7).masked(7 .. 7))
  r = tmp.USB_EP7R_Fields

func EP_KIND*(r: USB_EP7R_Fields): bool {.inline.} =
  r.uint16.bitsliced(8 .. 8).bool

proc `EP_KIND=`*(r: var USB_EP7R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint16 shl 8).masked(8 .. 8))
  r = tmp.USB_EP7R_Fields

func EP_TYPE*(r: USB_EP7R_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(9 .. 10)

proc `EP_TYPE=`*(r: var USB_EP7R_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(9 .. 10)
  tmp.setMask((val shl 9).masked(9 .. 10))
  r = tmp.USB_EP7R_Fields

func SETUP*(r: USB_EP7R_Fields): bool {.inline.} =
  r.uint16.bitsliced(11 .. 11).bool

proc `SETUP=`*(r: var USB_EP7R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint16 shl 11).masked(11 .. 11))
  r = tmp.USB_EP7R_Fields

func STAT_RX*(r: USB_EP7R_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(12 .. 13)

proc `STAT_RX=`*(r: var USB_EP7R_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.USB_EP7R_Fields

func DTOG_RX*(r: USB_EP7R_Fields): bool {.inline.} =
  r.uint16.bitsliced(14 .. 14).bool

proc `DTOG_RX=`*(r: var USB_EP7R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint16 shl 14).masked(14 .. 14))
  r = tmp.USB_EP7R_Fields

func CTR_RX*(r: USB_EP7R_Fields): bool {.inline.} =
  r.uint16.bitsliced(15 .. 15).bool

proc `CTR_RX=`*(r: var USB_EP7R_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint16 shl 15).masked(15 .. 15))
  r = tmp.USB_EP7R_Fields

func FRES*(r: USB_CNTR_Fields): bool {.inline.} =
  r.uint16.bitsliced(0 .. 0).bool

proc `FRES=`*(r: var USB_CNTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint16 shl 0).masked(0 .. 0))
  r = tmp.USB_CNTR_Fields

func PDWN*(r: USB_CNTR_Fields): bool {.inline.} =
  r.uint16.bitsliced(1 .. 1).bool

proc `PDWN=`*(r: var USB_CNTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint16 shl 1).masked(1 .. 1))
  r = tmp.USB_CNTR_Fields

func LPMODE*(r: USB_CNTR_Fields): bool {.inline.} =
  r.uint16.bitsliced(2 .. 2).bool

proc `LPMODE=`*(r: var USB_CNTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint16 shl 2).masked(2 .. 2))
  r = tmp.USB_CNTR_Fields

func FSUSP*(r: USB_CNTR_Fields): bool {.inline.} =
  r.uint16.bitsliced(3 .. 3).bool

proc `FSUSP=`*(r: var USB_CNTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint16 shl 3).masked(3 .. 3))
  r = tmp.USB_CNTR_Fields

func RESUME*(r: USB_CNTR_Fields): bool {.inline.} =
  r.uint16.bitsliced(4 .. 4).bool

proc `RESUME=`*(r: var USB_CNTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint16 shl 4).masked(4 .. 4))
  r = tmp.USB_CNTR_Fields

func ESOFM*(r: USB_CNTR_Fields): bool {.inline.} =
  r.uint16.bitsliced(8 .. 8).bool

proc `ESOFM=`*(r: var USB_CNTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint16 shl 8).masked(8 .. 8))
  r = tmp.USB_CNTR_Fields

func SOFM*(r: USB_CNTR_Fields): bool {.inline.} =
  r.uint16.bitsliced(9 .. 9).bool

proc `SOFM=`*(r: var USB_CNTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint16 shl 9).masked(9 .. 9))
  r = tmp.USB_CNTR_Fields

func RESETM*(r: USB_CNTR_Fields): bool {.inline.} =
  r.uint16.bitsliced(10 .. 10).bool

proc `RESETM=`*(r: var USB_CNTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint16 shl 10).masked(10 .. 10))
  r = tmp.USB_CNTR_Fields

func SUSPM*(r: USB_CNTR_Fields): bool {.inline.} =
  r.uint16.bitsliced(11 .. 11).bool

proc `SUSPM=`*(r: var USB_CNTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint16 shl 11).masked(11 .. 11))
  r = tmp.USB_CNTR_Fields

func WKUPM*(r: USB_CNTR_Fields): bool {.inline.} =
  r.uint16.bitsliced(12 .. 12).bool

proc `WKUPM=`*(r: var USB_CNTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint16 shl 12).masked(12 .. 12))
  r = tmp.USB_CNTR_Fields

func ERRM*(r: USB_CNTR_Fields): bool {.inline.} =
  r.uint16.bitsliced(13 .. 13).bool

proc `ERRM=`*(r: var USB_CNTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint16 shl 13).masked(13 .. 13))
  r = tmp.USB_CNTR_Fields

func PMAOVRM*(r: USB_CNTR_Fields): bool {.inline.} =
  r.uint16.bitsliced(14 .. 14).bool

proc `PMAOVRM=`*(r: var USB_CNTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint16 shl 14).masked(14 .. 14))
  r = tmp.USB_CNTR_Fields

func CTRM*(r: USB_CNTR_Fields): bool {.inline.} =
  r.uint16.bitsliced(15 .. 15).bool

proc `CTRM=`*(r: var USB_CNTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint16 shl 15).masked(15 .. 15))
  r = tmp.USB_CNTR_Fields

func EP_ID*(r: USB_ISTR_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 3)

proc `EP_ID=`*(r: var USB_ISTR_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.USB_ISTR_Fields

func DIR*(r: USB_ISTR_Fields): bool {.inline.} =
  r.uint16.bitsliced(4 .. 4).bool

proc `DIR=`*(r: var USB_ISTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint16 shl 4).masked(4 .. 4))
  r = tmp.USB_ISTR_Fields

func ESOF*(r: USB_ISTR_Fields): bool {.inline.} =
  r.uint16.bitsliced(8 .. 8).bool

proc `ESOF=`*(r: var USB_ISTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint16 shl 8).masked(8 .. 8))
  r = tmp.USB_ISTR_Fields

func SOF*(r: USB_ISTR_Fields): bool {.inline.} =
  r.uint16.bitsliced(9 .. 9).bool

proc `SOF=`*(r: var USB_ISTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint16 shl 9).masked(9 .. 9))
  r = tmp.USB_ISTR_Fields

func RESET*(r: USB_ISTR_Fields): bool {.inline.} =
  r.uint16.bitsliced(10 .. 10).bool

proc `RESET=`*(r: var USB_ISTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint16 shl 10).masked(10 .. 10))
  r = tmp.USB_ISTR_Fields

func SUSP*(r: USB_ISTR_Fields): bool {.inline.} =
  r.uint16.bitsliced(11 .. 11).bool

proc `SUSP=`*(r: var USB_ISTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint16 shl 11).masked(11 .. 11))
  r = tmp.USB_ISTR_Fields

func WKUP*(r: USB_ISTR_Fields): bool {.inline.} =
  r.uint16.bitsliced(12 .. 12).bool

proc `WKUP=`*(r: var USB_ISTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint16 shl 12).masked(12 .. 12))
  r = tmp.USB_ISTR_Fields

func ERR*(r: USB_ISTR_Fields): bool {.inline.} =
  r.uint16.bitsliced(13 .. 13).bool

proc `ERR=`*(r: var USB_ISTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint16 shl 13).masked(13 .. 13))
  r = tmp.USB_ISTR_Fields

func PMAOVR*(r: USB_ISTR_Fields): bool {.inline.} =
  r.uint16.bitsliced(14 .. 14).bool

proc `PMAOVR=`*(r: var USB_ISTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint16 shl 14).masked(14 .. 14))
  r = tmp.USB_ISTR_Fields

func CTR*(r: USB_ISTR_Fields): bool {.inline.} =
  r.uint16.bitsliced(15 .. 15).bool

proc `CTR=`*(r: var USB_ISTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint16 shl 15).masked(15 .. 15))
  r = tmp.USB_ISTR_Fields

func FN*(r: USB_FNR_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 10)

func LSOF*(r: USB_FNR_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(11 .. 12)

func LCK*(r: USB_FNR_Fields): bool {.inline.} =
  r.uint16.bitsliced(13 .. 13).bool

func RXDM*(r: USB_FNR_Fields): bool {.inline.} =
  r.uint16.bitsliced(14 .. 14).bool

func RXDP*(r: USB_FNR_Fields): bool {.inline.} =
  r.uint16.bitsliced(15 .. 15).bool

func ADD*(r: USB_DADDR_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 6)

proc `ADD=`*(r: var USB_DADDR_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 6)
  tmp.setMask((val shl 0).masked(0 .. 6))
  r = tmp.USB_DADDR_Fields

func EF*(r: USB_DADDR_Fields): bool {.inline.} =
  r.uint16.bitsliced(7 .. 7).bool

proc `EF=`*(r: var USB_DADDR_Fields, val: bool) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint16 shl 7).masked(7 .. 7))
  r = tmp.USB_DADDR_Fields

func BTABLE*(r: USB_BTABLE_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 15)

proc `BTABLE=`*(r: var USB_BTABLE_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 15)
  tmp.setMask((val shl 3).masked(3 .. 15))
  r = tmp.USB_BTABLE_Fields

type
  CAN1_CTLR_Fields* = distinct uint32
  CAN1_STATR_Fields* = distinct uint32
  CAN1_TSTATR_Fields* = distinct uint32
  CAN1_RFIFO0_Fields* = distinct uint32
  CAN1_RFIFO1_Fields* = distinct uint32
  CAN1_INTENR_Fields* = distinct uint32
  CAN1_ERRSR_Fields* = distinct uint32
  CAN1_BTIMR_Fields* = distinct uint32
  CAN1_TXMIR0_Fields* = distinct uint32
  CAN1_TXMDTR0_Fields* = distinct uint32
  CAN1_TXMDLR0_Fields* = distinct uint32
  CAN1_TXMDHR0_Fields* = distinct uint32
  CAN1_TXMIR1_Fields* = distinct uint32
  CAN1_TXMDTR1_Fields* = distinct uint32
  CAN1_TXMDLR1_Fields* = distinct uint32
  CAN1_TXMDHR1_Fields* = distinct uint32
  CAN1_TXMIR2_Fields* = distinct uint32
  CAN1_TXMDTR2_Fields* = distinct uint32
  CAN1_TXMDLR2_Fields* = distinct uint32
  CAN1_TXMDHR2_Fields* = distinct uint32
  CAN1_RXMIR0_Fields* = distinct uint32
  CAN1_RXMDTR0_Fields* = distinct uint32
  CAN1_RXMDLR0_Fields* = distinct uint32
  CAN1_RXMDHR0_Fields* = distinct uint32
  CAN1_RXMIR1_Fields* = distinct uint32
  CAN1_RXMDTR1_Fields* = distinct uint32
  CAN1_RXMDLR1_Fields* = distinct uint32
  CAN1_RXMDHR1_Fields* = distinct uint32
  CAN1_FCTLR_Fields* = distinct uint32
  CAN1_FMCFGR_Fields* = distinct uint32
  CAN1_FSCFGR_Fields* = distinct uint32
  CAN1_FAFIFOR_Fields* = distinct uint32
  CAN1_FWR_Fields* = distinct uint32
  CAN1_F0R1_Fields* = distinct uint32
  CAN1_F0R2_Fields* = distinct uint32
  CAN1_F1R1_Fields* = distinct uint32
  CAN1_F1R2_Fields* = distinct uint32
  CAN1_F2R1_Fields* = distinct uint32
  CAN1_F2R2_Fields* = distinct uint32
  CAN1_F3R1_Fields* = distinct uint32
  CAN1_F3R2_Fields* = distinct uint32
  CAN1_F4R1_Fields* = distinct uint32
  CAN1_F4R2_Fields* = distinct uint32
  CAN1_F5R1_Fields* = distinct uint32
  CAN1_F5R2_Fields* = distinct uint32
  CAN1_F6R1_Fields* = distinct uint32
  CAN1_F6R2_Fields* = distinct uint32
  CAN1_F7R1_Fields* = distinct uint32
  CAN1_F7R2_Fields* = distinct uint32
  CAN1_F8R1_Fields* = distinct uint32
  CAN1_F8R2_Fields* = distinct uint32
  CAN1_F9R1_Fields* = distinct uint32
  CAN1_F9R2_Fields* = distinct uint32
  CAN1_F10R1_Fields* = distinct uint32
  CAN1_F10R2_Fields* = distinct uint32
  CAN1_F11R1_Fields* = distinct uint32
  CAN1_F11R2_Fields* = distinct uint32
  CAN1_F12R1_Fields* = distinct uint32
  CAN1_F12R2_Fields* = distinct uint32
  CAN1_F13R1_Fields* = distinct uint32
  CAN1_F13R2_Fields* = distinct uint32
  CAN1_F14R1_Fields* = distinct uint32
  CAN1_F14R2_Fields* = distinct uint32
  CAN1_F15R1_Fields* = distinct uint32
  CAN1_F15R2_Fields* = distinct uint32
  CAN1_F16R1_Fields* = distinct uint32
  CAN1_F16R2_Fields* = distinct uint32
  CAN1_F17R1_Fields* = distinct uint32
  CAN1_F17R2_Fields* = distinct uint32
  CAN1_F18R1_Fields* = distinct uint32
  CAN1_F18R2_Fields* = distinct uint32
  CAN1_F19R1_Fields* = distinct uint32
  CAN1_F19R2_Fields* = distinct uint32
  CAN1_F20R1_Fields* = distinct uint32
  CAN1_F20R2_Fields* = distinct uint32
  CAN1_F21R1_Fields* = distinct uint32
  CAN1_F21R2_Fields* = distinct uint32
  CAN1_F22R1_Fields* = distinct uint32
  CAN1_F22R2_Fields* = distinct uint32
  CAN1_F23R1_Fields* = distinct uint32
  CAN1_F23R2_Fields* = distinct uint32
  CAN1_F24R1_Fields* = distinct uint32
  CAN1_F24R2_Fields* = distinct uint32
  CAN1_F25R1_Fields* = distinct uint32
  CAN1_F25R2_Fields* = distinct uint32
  CAN1_F26R1_Fields* = distinct uint32
  CAN1_F26R2_Fields* = distinct uint32
  CAN1_F27R1_Fields* = distinct uint32
  CAN1_F27R2_Fields* = distinct uint32

proc read*(reg: CAN1_CTLR_Type): CAN1_CTLR_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_CTLR_Fields](reg.loc))

proc read*(reg: static CAN1_CTLR_Type): CAN1_CTLR_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_CTLR_Fields](reg.loc))

proc write*(reg: CAN1_CTLR_Type, val: CAN1_CTLR_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_CTLR_Fields](reg.loc), val)

proc write*(reg: CAN1_CTLR_Type, DBF: bool = true, RESET: bool = false, TTCM: bool = false, ABOM: bool = false, AWUM: bool = false, NART: bool = false, RFLM: bool = false, TXFP: bool = false, SLEEP: bool = true, INRQ: bool = false) =
  var x: uint32
  x.setMask((DBF.uint32 shl 16).masked(16 .. 16))
  x.setMask((RESET.uint32 shl 15).masked(15 .. 15))
  x.setMask((TTCM.uint32 shl 7).masked(7 .. 7))
  x.setMask((ABOM.uint32 shl 6).masked(6 .. 6))
  x.setMask((AWUM.uint32 shl 5).masked(5 .. 5))
  x.setMask((NART.uint32 shl 4).masked(4 .. 4))
  x.setMask((RFLM.uint32 shl 3).masked(3 .. 3))
  x.setMask((TXFP.uint32 shl 2).masked(2 .. 2))
  x.setMask((SLEEP.uint32 shl 1).masked(1 .. 1))
  x.setMask((INRQ.uint32 shl 0).masked(0 .. 0))
  reg.write x.CAN1_CTLR_Fields

template modifyIt*(reg: CAN1_CTLR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_STATR_Type): CAN1_STATR_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_STATR_Fields](reg.loc))

proc read*(reg: static CAN1_STATR_Type): CAN1_STATR_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_STATR_Fields](reg.loc))

proc write*(reg: CAN1_STATR_Type, val: CAN1_STATR_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_STATR_Fields](reg.loc), val)

proc write*(reg: CAN1_STATR_Type, SLAKI: bool = false, WKUI: bool = false, ERRI: bool = false) =
  var x: uint32
  x.setMask((SLAKI.uint32 shl 4).masked(4 .. 4))
  x.setMask((WKUI.uint32 shl 3).masked(3 .. 3))
  x.setMask((ERRI.uint32 shl 2).masked(2 .. 2))
  reg.write x.CAN1_STATR_Fields

template modifyIt*(reg: CAN1_STATR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_TSTATR_Type): CAN1_TSTATR_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TSTATR_Fields](reg.loc))

proc read*(reg: static CAN1_TSTATR_Type): CAN1_TSTATR_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TSTATR_Fields](reg.loc))

proc write*(reg: CAN1_TSTATR_Type, val: CAN1_TSTATR_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_TSTATR_Fields](reg.loc), val)

proc write*(reg: CAN1_TSTATR_Type, ABRQ2: bool = false, TERR2: bool = false, ALST2: bool = false, TXOK2: bool = false, RQCP2: bool = false, ABRQ1: bool = false, TERR1: bool = false, ALST1: bool = false, TXOK1: bool = false, RQCP1: bool = false, ABRQ0: bool = false, TERR0: bool = false, ALST0: bool = false, TXOK0: bool = false, RQCP0: bool = false) =
  var x: uint32
  x.setMask((ABRQ2.uint32 shl 23).masked(23 .. 23))
  x.setMask((TERR2.uint32 shl 19).masked(19 .. 19))
  x.setMask((ALST2.uint32 shl 18).masked(18 .. 18))
  x.setMask((TXOK2.uint32 shl 17).masked(17 .. 17))
  x.setMask((RQCP2.uint32 shl 16).masked(16 .. 16))
  x.setMask((ABRQ1.uint32 shl 15).masked(15 .. 15))
  x.setMask((TERR1.uint32 shl 11).masked(11 .. 11))
  x.setMask((ALST1.uint32 shl 10).masked(10 .. 10))
  x.setMask((TXOK1.uint32 shl 9).masked(9 .. 9))
  x.setMask((RQCP1.uint32 shl 8).masked(8 .. 8))
  x.setMask((ABRQ0.uint32 shl 7).masked(7 .. 7))
  x.setMask((TERR0.uint32 shl 3).masked(3 .. 3))
  x.setMask((ALST0.uint32 shl 2).masked(2 .. 2))
  x.setMask((TXOK0.uint32 shl 1).masked(1 .. 1))
  x.setMask((RQCP0.uint32 shl 0).masked(0 .. 0))
  reg.write x.CAN1_TSTATR_Fields

template modifyIt*(reg: CAN1_TSTATR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_RFIFO0_Type): CAN1_RFIFO0_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_RFIFO0_Fields](reg.loc))

proc read*(reg: static CAN1_RFIFO0_Type): CAN1_RFIFO0_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_RFIFO0_Fields](reg.loc))

proc write*(reg: CAN1_RFIFO0_Type, val: CAN1_RFIFO0_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_RFIFO0_Fields](reg.loc), val)

proc write*(reg: CAN1_RFIFO0_Type, RFOM0: bool = false, FOVR0: bool = false, FULL0: bool = false) =
  var x: uint32
  x.setMask((RFOM0.uint32 shl 5).masked(5 .. 5))
  x.setMask((FOVR0.uint32 shl 4).masked(4 .. 4))
  x.setMask((FULL0.uint32 shl 3).masked(3 .. 3))
  reg.write x.CAN1_RFIFO0_Fields

template modifyIt*(reg: CAN1_RFIFO0_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_RFIFO1_Type): CAN1_RFIFO1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_RFIFO1_Fields](reg.loc))

proc read*(reg: static CAN1_RFIFO1_Type): CAN1_RFIFO1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_RFIFO1_Fields](reg.loc))

proc write*(reg: CAN1_RFIFO1_Type, val: CAN1_RFIFO1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_RFIFO1_Fields](reg.loc), val)

proc write*(reg: CAN1_RFIFO1_Type, RFOM1: bool = false, FOVR1: bool = false, FULL1: bool = false) =
  var x: uint32
  x.setMask((RFOM1.uint32 shl 5).masked(5 .. 5))
  x.setMask((FOVR1.uint32 shl 4).masked(4 .. 4))
  x.setMask((FULL1.uint32 shl 3).masked(3 .. 3))
  reg.write x.CAN1_RFIFO1_Fields

template modifyIt*(reg: CAN1_RFIFO1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_INTENR_Type): CAN1_INTENR_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_INTENR_Fields](reg.loc))

proc read*(reg: static CAN1_INTENR_Type): CAN1_INTENR_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_INTENR_Fields](reg.loc))

proc write*(reg: CAN1_INTENR_Type, val: CAN1_INTENR_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_INTENR_Fields](reg.loc), val)

proc write*(reg: CAN1_INTENR_Type, SLKIE: bool = false, WKUIE: bool = false, ERRIE: bool = false, LECIE: bool = false, BOFIE: bool = false, EPVIE: bool = false, EWGIE: bool = false, FOVIE1: bool = false, FFIE1: bool = false, FMPIE1: bool = false, FOVIE0: bool = false, FFIE0: bool = false, FMPIE0: bool = false, TMEIE: bool = false) =
  var x: uint32
  x.setMask((SLKIE.uint32 shl 17).masked(17 .. 17))
  x.setMask((WKUIE.uint32 shl 16).masked(16 .. 16))
  x.setMask((ERRIE.uint32 shl 15).masked(15 .. 15))
  x.setMask((LECIE.uint32 shl 11).masked(11 .. 11))
  x.setMask((BOFIE.uint32 shl 10).masked(10 .. 10))
  x.setMask((EPVIE.uint32 shl 9).masked(9 .. 9))
  x.setMask((EWGIE.uint32 shl 8).masked(8 .. 8))
  x.setMask((FOVIE1.uint32 shl 6).masked(6 .. 6))
  x.setMask((FFIE1.uint32 shl 5).masked(5 .. 5))
  x.setMask((FMPIE1.uint32 shl 4).masked(4 .. 4))
  x.setMask((FOVIE0.uint32 shl 3).masked(3 .. 3))
  x.setMask((FFIE0.uint32 shl 2).masked(2 .. 2))
  x.setMask((FMPIE0.uint32 shl 1).masked(1 .. 1))
  x.setMask((TMEIE.uint32 shl 0).masked(0 .. 0))
  reg.write x.CAN1_INTENR_Fields

template modifyIt*(reg: CAN1_INTENR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_ERRSR_Type): CAN1_ERRSR_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_ERRSR_Fields](reg.loc))

proc read*(reg: static CAN1_ERRSR_Type): CAN1_ERRSR_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_ERRSR_Fields](reg.loc))

proc write*(reg: CAN1_ERRSR_Type, val: CAN1_ERRSR_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_ERRSR_Fields](reg.loc), val)

proc write*(reg: CAN1_ERRSR_Type, LEC: uint32 = 0) =
  var x: uint32
  x.setMask((LEC shl 4).masked(4 .. 6))
  reg.write x.CAN1_ERRSR_Fields

template modifyIt*(reg: CAN1_ERRSR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_BTIMR_Type): CAN1_BTIMR_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_BTIMR_Fields](reg.loc))

proc read*(reg: static CAN1_BTIMR_Type): CAN1_BTIMR_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_BTIMR_Fields](reg.loc))

proc write*(reg: CAN1_BTIMR_Type, val: CAN1_BTIMR_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_BTIMR_Fields](reg.loc), val)

proc write*(reg: CAN1_BTIMR_Type, SILM: bool = false, LBKM: bool = false, SJW: uint32 = 1, TS2: uint32 = 2, TS1: uint32 = 3, BRP: uint32 = 0) =
  var x: uint32
  x.setMask((SILM.uint32 shl 31).masked(31 .. 31))
  x.setMask((LBKM.uint32 shl 30).masked(30 .. 30))
  x.setMask((SJW shl 24).masked(24 .. 25))
  x.setMask((TS2 shl 20).masked(20 .. 22))
  x.setMask((TS1 shl 16).masked(16 .. 19))
  x.setMask((BRP shl 0).masked(0 .. 9))
  reg.write x.CAN1_BTIMR_Fields

template modifyIt*(reg: CAN1_BTIMR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_TXMIR0_Type): CAN1_TXMIR0_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TXMIR0_Fields](reg.loc))

proc read*(reg: static CAN1_TXMIR0_Type): CAN1_TXMIR0_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TXMIR0_Fields](reg.loc))

proc write*(reg: CAN1_TXMIR0_Type, val: CAN1_TXMIR0_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_TXMIR0_Fields](reg.loc), val)

proc write*(reg: CAN1_TXMIR0_Type, STID: uint32 = 0, EXID: uint32 = 0, IDE: bool = false, RTR: bool = false, TXRQ: bool = false) =
  var x: uint32
  x.setMask((STID shl 21).masked(21 .. 31))
  x.setMask((EXID shl 3).masked(3 .. 20))
  x.setMask((IDE.uint32 shl 2).masked(2 .. 2))
  x.setMask((RTR.uint32 shl 1).masked(1 .. 1))
  x.setMask((TXRQ.uint32 shl 0).masked(0 .. 0))
  reg.write x.CAN1_TXMIR0_Fields

template modifyIt*(reg: CAN1_TXMIR0_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_TXMDTR0_Type): CAN1_TXMDTR0_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TXMDTR0_Fields](reg.loc))

proc read*(reg: static CAN1_TXMDTR0_Type): CAN1_TXMDTR0_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TXMDTR0_Fields](reg.loc))

proc write*(reg: CAN1_TXMDTR0_Type, val: CAN1_TXMDTR0_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_TXMDTR0_Fields](reg.loc), val)

proc write*(reg: CAN1_TXMDTR0_Type, TIME: uint32 = 0, TGT: bool = false, DLC: uint32 = 0) =
  var x: uint32
  x.setMask((TIME shl 16).masked(16 .. 31))
  x.setMask((TGT.uint32 shl 8).masked(8 .. 8))
  x.setMask((DLC shl 0).masked(0 .. 3))
  reg.write x.CAN1_TXMDTR0_Fields

template modifyIt*(reg: CAN1_TXMDTR0_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_TXMDLR0_Type): CAN1_TXMDLR0_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TXMDLR0_Fields](reg.loc))

proc read*(reg: static CAN1_TXMDLR0_Type): CAN1_TXMDLR0_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TXMDLR0_Fields](reg.loc))

proc write*(reg: CAN1_TXMDLR0_Type, val: CAN1_TXMDLR0_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_TXMDLR0_Fields](reg.loc), val)

proc write*(reg: CAN1_TXMDLR0_Type, DATA3: uint32 = 0, DATA2: uint32 = 0, DATA1: uint32 = 0, DATA0: uint32 = 0) =
  var x: uint32
  x.setMask((DATA3 shl 24).masked(24 .. 31))
  x.setMask((DATA2 shl 16).masked(16 .. 23))
  x.setMask((DATA1 shl 8).masked(8 .. 15))
  x.setMask((DATA0 shl 0).masked(0 .. 7))
  reg.write x.CAN1_TXMDLR0_Fields

template modifyIt*(reg: CAN1_TXMDLR0_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_TXMDHR0_Type): CAN1_TXMDHR0_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TXMDHR0_Fields](reg.loc))

proc read*(reg: static CAN1_TXMDHR0_Type): CAN1_TXMDHR0_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TXMDHR0_Fields](reg.loc))

proc write*(reg: CAN1_TXMDHR0_Type, val: CAN1_TXMDHR0_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_TXMDHR0_Fields](reg.loc), val)

proc write*(reg: CAN1_TXMDHR0_Type, DATA7: uint32 = 0, DATA6: uint32 = 0, DATA5: uint32 = 0, DATA4: uint32 = 0) =
  var x: uint32
  x.setMask((DATA7 shl 24).masked(24 .. 31))
  x.setMask((DATA6 shl 16).masked(16 .. 23))
  x.setMask((DATA5 shl 8).masked(8 .. 15))
  x.setMask((DATA4 shl 0).masked(0 .. 7))
  reg.write x.CAN1_TXMDHR0_Fields

template modifyIt*(reg: CAN1_TXMDHR0_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_TXMIR1_Type): CAN1_TXMIR1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TXMIR1_Fields](reg.loc))

proc read*(reg: static CAN1_TXMIR1_Type): CAN1_TXMIR1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TXMIR1_Fields](reg.loc))

proc write*(reg: CAN1_TXMIR1_Type, val: CAN1_TXMIR1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_TXMIR1_Fields](reg.loc), val)

proc write*(reg: CAN1_TXMIR1_Type, STID: uint32 = 0, EXID: uint32 = 0, IDE: bool = false, RTR: bool = false, TXRQ: bool = false) =
  var x: uint32
  x.setMask((STID shl 21).masked(21 .. 31))
  x.setMask((EXID shl 3).masked(3 .. 20))
  x.setMask((IDE.uint32 shl 2).masked(2 .. 2))
  x.setMask((RTR.uint32 shl 1).masked(1 .. 1))
  x.setMask((TXRQ.uint32 shl 0).masked(0 .. 0))
  reg.write x.CAN1_TXMIR1_Fields

template modifyIt*(reg: CAN1_TXMIR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_TXMDTR1_Type): CAN1_TXMDTR1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TXMDTR1_Fields](reg.loc))

proc read*(reg: static CAN1_TXMDTR1_Type): CAN1_TXMDTR1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TXMDTR1_Fields](reg.loc))

proc write*(reg: CAN1_TXMDTR1_Type, val: CAN1_TXMDTR1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_TXMDTR1_Fields](reg.loc), val)

proc write*(reg: CAN1_TXMDTR1_Type, TIME: uint32 = 0, TGT: bool = false, DLC: uint32 = 0) =
  var x: uint32
  x.setMask((TIME shl 16).masked(16 .. 31))
  x.setMask((TGT.uint32 shl 8).masked(8 .. 8))
  x.setMask((DLC shl 0).masked(0 .. 3))
  reg.write x.CAN1_TXMDTR1_Fields

template modifyIt*(reg: CAN1_TXMDTR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_TXMDLR1_Type): CAN1_TXMDLR1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TXMDLR1_Fields](reg.loc))

proc read*(reg: static CAN1_TXMDLR1_Type): CAN1_TXMDLR1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TXMDLR1_Fields](reg.loc))

proc write*(reg: CAN1_TXMDLR1_Type, val: CAN1_TXMDLR1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_TXMDLR1_Fields](reg.loc), val)

proc write*(reg: CAN1_TXMDLR1_Type, DATA3: uint32 = 0, DATA2: uint32 = 0, DATA1: uint32 = 0, DATA0: uint32 = 0) =
  var x: uint32
  x.setMask((DATA3 shl 24).masked(24 .. 31))
  x.setMask((DATA2 shl 16).masked(16 .. 23))
  x.setMask((DATA1 shl 8).masked(8 .. 15))
  x.setMask((DATA0 shl 0).masked(0 .. 7))
  reg.write x.CAN1_TXMDLR1_Fields

template modifyIt*(reg: CAN1_TXMDLR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_TXMDHR1_Type): CAN1_TXMDHR1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TXMDHR1_Fields](reg.loc))

proc read*(reg: static CAN1_TXMDHR1_Type): CAN1_TXMDHR1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TXMDHR1_Fields](reg.loc))

proc write*(reg: CAN1_TXMDHR1_Type, val: CAN1_TXMDHR1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_TXMDHR1_Fields](reg.loc), val)

proc write*(reg: CAN1_TXMDHR1_Type, DATA7: uint32 = 0, DATA6: uint32 = 0, DATA5: uint32 = 0, DATA4: uint32 = 0) =
  var x: uint32
  x.setMask((DATA7 shl 24).masked(24 .. 31))
  x.setMask((DATA6 shl 16).masked(16 .. 23))
  x.setMask((DATA5 shl 8).masked(8 .. 15))
  x.setMask((DATA4 shl 0).masked(0 .. 7))
  reg.write x.CAN1_TXMDHR1_Fields

template modifyIt*(reg: CAN1_TXMDHR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_TXMIR2_Type): CAN1_TXMIR2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TXMIR2_Fields](reg.loc))

proc read*(reg: static CAN1_TXMIR2_Type): CAN1_TXMIR2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TXMIR2_Fields](reg.loc))

proc write*(reg: CAN1_TXMIR2_Type, val: CAN1_TXMIR2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_TXMIR2_Fields](reg.loc), val)

proc write*(reg: CAN1_TXMIR2_Type, STID: uint32 = 0, EXID: uint32 = 0, IDE: bool = false, RTR: bool = false, TXRQ: bool = false) =
  var x: uint32
  x.setMask((STID shl 21).masked(21 .. 31))
  x.setMask((EXID shl 3).masked(3 .. 20))
  x.setMask((IDE.uint32 shl 2).masked(2 .. 2))
  x.setMask((RTR.uint32 shl 1).masked(1 .. 1))
  x.setMask((TXRQ.uint32 shl 0).masked(0 .. 0))
  reg.write x.CAN1_TXMIR2_Fields

template modifyIt*(reg: CAN1_TXMIR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_TXMDTR2_Type): CAN1_TXMDTR2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TXMDTR2_Fields](reg.loc))

proc read*(reg: static CAN1_TXMDTR2_Type): CAN1_TXMDTR2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TXMDTR2_Fields](reg.loc))

proc write*(reg: CAN1_TXMDTR2_Type, val: CAN1_TXMDTR2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_TXMDTR2_Fields](reg.loc), val)

proc write*(reg: CAN1_TXMDTR2_Type, TIME: uint32 = 0, TGT: bool = false, DLC: uint32 = 0) =
  var x: uint32
  x.setMask((TIME shl 16).masked(16 .. 31))
  x.setMask((TGT.uint32 shl 8).masked(8 .. 8))
  x.setMask((DLC shl 0).masked(0 .. 3))
  reg.write x.CAN1_TXMDTR2_Fields

template modifyIt*(reg: CAN1_TXMDTR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_TXMDLR2_Type): CAN1_TXMDLR2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TXMDLR2_Fields](reg.loc))

proc read*(reg: static CAN1_TXMDLR2_Type): CAN1_TXMDLR2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TXMDLR2_Fields](reg.loc))

proc write*(reg: CAN1_TXMDLR2_Type, val: CAN1_TXMDLR2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_TXMDLR2_Fields](reg.loc), val)

proc write*(reg: CAN1_TXMDLR2_Type, DATA3: uint32 = 0, DATA2: uint32 = 0, DATA1: uint32 = 0, DATA0: uint32 = 0) =
  var x: uint32
  x.setMask((DATA3 shl 24).masked(24 .. 31))
  x.setMask((DATA2 shl 16).masked(16 .. 23))
  x.setMask((DATA1 shl 8).masked(8 .. 15))
  x.setMask((DATA0 shl 0).masked(0 .. 7))
  reg.write x.CAN1_TXMDLR2_Fields

template modifyIt*(reg: CAN1_TXMDLR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_TXMDHR2_Type): CAN1_TXMDHR2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TXMDHR2_Fields](reg.loc))

proc read*(reg: static CAN1_TXMDHR2_Type): CAN1_TXMDHR2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TXMDHR2_Fields](reg.loc))

proc write*(reg: CAN1_TXMDHR2_Type, val: CAN1_TXMDHR2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_TXMDHR2_Fields](reg.loc), val)

proc write*(reg: CAN1_TXMDHR2_Type, DATA7: uint32 = 0, DATA6: uint32 = 0, DATA5: uint32 = 0, DATA4: uint32 = 0) =
  var x: uint32
  x.setMask((DATA7 shl 24).masked(24 .. 31))
  x.setMask((DATA6 shl 16).masked(16 .. 23))
  x.setMask((DATA5 shl 8).masked(8 .. 15))
  x.setMask((DATA4 shl 0).masked(0 .. 7))
  reg.write x.CAN1_TXMDHR2_Fields

template modifyIt*(reg: CAN1_TXMDHR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_RXMIR0_Type): CAN1_RXMIR0_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_RXMIR0_Fields](reg.loc))

proc read*(reg: static CAN1_RXMIR0_Type): CAN1_RXMIR0_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_RXMIR0_Fields](reg.loc))

proc read*(reg: CAN1_RXMDTR0_Type): CAN1_RXMDTR0_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_RXMDTR0_Fields](reg.loc))

proc read*(reg: static CAN1_RXMDTR0_Type): CAN1_RXMDTR0_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_RXMDTR0_Fields](reg.loc))

proc read*(reg: CAN1_RXMDLR0_Type): CAN1_RXMDLR0_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_RXMDLR0_Fields](reg.loc))

proc read*(reg: static CAN1_RXMDLR0_Type): CAN1_RXMDLR0_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_RXMDLR0_Fields](reg.loc))

proc read*(reg: CAN1_RXMDHR0_Type): CAN1_RXMDHR0_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_RXMDHR0_Fields](reg.loc))

proc read*(reg: static CAN1_RXMDHR0_Type): CAN1_RXMDHR0_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_RXMDHR0_Fields](reg.loc))

proc read*(reg: CAN1_RXMIR1_Type): CAN1_RXMIR1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_RXMIR1_Fields](reg.loc))

proc read*(reg: static CAN1_RXMIR1_Type): CAN1_RXMIR1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_RXMIR1_Fields](reg.loc))

proc read*(reg: CAN1_RXMDTR1_Type): CAN1_RXMDTR1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_RXMDTR1_Fields](reg.loc))

proc read*(reg: static CAN1_RXMDTR1_Type): CAN1_RXMDTR1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_RXMDTR1_Fields](reg.loc))

proc read*(reg: CAN1_RXMDLR1_Type): CAN1_RXMDLR1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_RXMDLR1_Fields](reg.loc))

proc read*(reg: static CAN1_RXMDLR1_Type): CAN1_RXMDLR1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_RXMDLR1_Fields](reg.loc))

proc read*(reg: CAN1_RXMDHR1_Type): CAN1_RXMDHR1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_RXMDHR1_Fields](reg.loc))

proc read*(reg: static CAN1_RXMDHR1_Type): CAN1_RXMDHR1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_RXMDHR1_Fields](reg.loc))

proc read*(reg: CAN1_FCTLR_Type): CAN1_FCTLR_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_FCTLR_Fields](reg.loc))

proc read*(reg: static CAN1_FCTLR_Type): CAN1_FCTLR_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_FCTLR_Fields](reg.loc))

proc write*(reg: CAN1_FCTLR_Type, val: CAN1_FCTLR_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_FCTLR_Fields](reg.loc), val)

proc write*(reg: CAN1_FCTLR_Type, FINIT: bool = true) =
  var x: uint32
  x.setMask((FINIT.uint32 shl 0).masked(0 .. 0))
  reg.write x.CAN1_FCTLR_Fields

template modifyIt*(reg: CAN1_FCTLR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_FMCFGR_Type): CAN1_FMCFGR_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_FMCFGR_Fields](reg.loc))

proc read*(reg: static CAN1_FMCFGR_Type): CAN1_FMCFGR_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_FMCFGR_Fields](reg.loc))

proc write*(reg: CAN1_FMCFGR_Type, val: CAN1_FMCFGR_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_FMCFGR_Fields](reg.loc), val)

proc write*(reg: CAN1_FMCFGR_Type, FBM0: bool = false, FBM1: bool = false, FBM2: bool = false, FBM3: bool = false, FBM4: bool = false, FBM5: bool = false, FBM6: bool = false, FBM7: bool = false, FBM8: bool = false, FBM9: bool = false, FBM10: bool = false, FBM11: bool = false, FBM12: bool = false, FBM13: bool = false) =
  var x: uint32
  x.setMask((FBM0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FBM1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FBM2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FBM3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FBM4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FBM5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FBM6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FBM7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FBM8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FBM9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FBM10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FBM11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FBM12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FBM13.uint32 shl 13).masked(13 .. 13))
  reg.write x.CAN1_FMCFGR_Fields

template modifyIt*(reg: CAN1_FMCFGR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_FSCFGR_Type): CAN1_FSCFGR_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_FSCFGR_Fields](reg.loc))

proc read*(reg: static CAN1_FSCFGR_Type): CAN1_FSCFGR_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_FSCFGR_Fields](reg.loc))

proc write*(reg: CAN1_FSCFGR_Type, val: CAN1_FSCFGR_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_FSCFGR_Fields](reg.loc), val)

proc write*(reg: CAN1_FSCFGR_Type, FSC0: bool = false, FSC1: bool = false, FSC2: bool = false, FSC3: bool = false, FSC4: bool = false, FSC5: bool = false, FSC6: bool = false, FSC7: bool = false, FSC8: bool = false, FSC9: bool = false, FSC10: bool = false, FSC11: bool = false, FSC12: bool = false, FSC13: bool = false) =
  var x: uint32
  x.setMask((FSC0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FSC1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FSC2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FSC3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FSC4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FSC5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FSC6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FSC7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FSC8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FSC9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FSC10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FSC11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FSC12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FSC13.uint32 shl 13).masked(13 .. 13))
  reg.write x.CAN1_FSCFGR_Fields

template modifyIt*(reg: CAN1_FSCFGR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_FAFIFOR_Type): CAN1_FAFIFOR_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_FAFIFOR_Fields](reg.loc))

proc read*(reg: static CAN1_FAFIFOR_Type): CAN1_FAFIFOR_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_FAFIFOR_Fields](reg.loc))

proc write*(reg: CAN1_FAFIFOR_Type, val: CAN1_FAFIFOR_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_FAFIFOR_Fields](reg.loc), val)

proc write*(reg: CAN1_FAFIFOR_Type, FFA0: bool = false, FFA1: bool = false, FFA2: bool = false, FFA3: bool = false, FFA4: bool = false, FFA5: bool = false, FFA6: bool = false, FFA7: bool = false, FFA8: bool = false, FFA9: bool = false, FFA10: bool = false, FFA11: bool = false, FFA12: bool = false, FFA13: bool = false) =
  var x: uint32
  x.setMask((FFA0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FFA1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FFA2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FFA3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FFA4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FFA5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FFA6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FFA7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FFA8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FFA9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FFA10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FFA11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FFA12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FFA13.uint32 shl 13).masked(13 .. 13))
  reg.write x.CAN1_FAFIFOR_Fields

template modifyIt*(reg: CAN1_FAFIFOR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_FWR_Type): CAN1_FWR_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_FWR_Fields](reg.loc))

proc read*(reg: static CAN1_FWR_Type): CAN1_FWR_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_FWR_Fields](reg.loc))

proc write*(reg: CAN1_FWR_Type, val: CAN1_FWR_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_FWR_Fields](reg.loc), val)

proc write*(reg: CAN1_FWR_Type, FACT0: bool = false, FACT1: bool = false, FACT2: bool = false, FACT3: bool = false, FACT4: bool = false, FACT5: bool = false, FACT6: bool = false, FACT7: bool = false, FACT8: bool = false, FACT9: bool = false, FACT10: bool = false, FACT11: bool = false, FACT12: bool = false, FACT13: bool = false) =
  var x: uint32
  x.setMask((FACT0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FACT1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FACT2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FACT3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FACT4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FACT5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FACT6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FACT7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FACT8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FACT9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FACT10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FACT11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FACT12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FACT13.uint32 shl 13).masked(13 .. 13))
  reg.write x.CAN1_FWR_Fields

template modifyIt*(reg: CAN1_FWR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F0R1_Type): CAN1_F0R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F0R1_Fields](reg.loc))

proc read*(reg: static CAN1_F0R1_Type): CAN1_F0R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F0R1_Fields](reg.loc))

proc write*(reg: CAN1_F0R1_Type, val: CAN1_F0R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F0R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F0R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F0R1_Fields

template modifyIt*(reg: CAN1_F0R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F0R2_Type): CAN1_F0R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F0R2_Fields](reg.loc))

proc read*(reg: static CAN1_F0R2_Type): CAN1_F0R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F0R2_Fields](reg.loc))

proc write*(reg: CAN1_F0R2_Type, val: CAN1_F0R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F0R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F0R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F0R2_Fields

template modifyIt*(reg: CAN1_F0R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F1R1_Type): CAN1_F1R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F1R1_Fields](reg.loc))

proc read*(reg: static CAN1_F1R1_Type): CAN1_F1R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F1R1_Fields](reg.loc))

proc write*(reg: CAN1_F1R1_Type, val: CAN1_F1R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F1R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F1R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F1R1_Fields

template modifyIt*(reg: CAN1_F1R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F1R2_Type): CAN1_F1R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F1R2_Fields](reg.loc))

proc read*(reg: static CAN1_F1R2_Type): CAN1_F1R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F1R2_Fields](reg.loc))

proc write*(reg: CAN1_F1R2_Type, val: CAN1_F1R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F1R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F1R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F1R2_Fields

template modifyIt*(reg: CAN1_F1R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F2R1_Type): CAN1_F2R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F2R1_Fields](reg.loc))

proc read*(reg: static CAN1_F2R1_Type): CAN1_F2R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F2R1_Fields](reg.loc))

proc write*(reg: CAN1_F2R1_Type, val: CAN1_F2R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F2R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F2R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F2R1_Fields

template modifyIt*(reg: CAN1_F2R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F2R2_Type): CAN1_F2R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F2R2_Fields](reg.loc))

proc read*(reg: static CAN1_F2R2_Type): CAN1_F2R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F2R2_Fields](reg.loc))

proc write*(reg: CAN1_F2R2_Type, val: CAN1_F2R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F2R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F2R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F2R2_Fields

template modifyIt*(reg: CAN1_F2R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F3R1_Type): CAN1_F3R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F3R1_Fields](reg.loc))

proc read*(reg: static CAN1_F3R1_Type): CAN1_F3R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F3R1_Fields](reg.loc))

proc write*(reg: CAN1_F3R1_Type, val: CAN1_F3R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F3R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F3R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F3R1_Fields

template modifyIt*(reg: CAN1_F3R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F3R2_Type): CAN1_F3R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F3R2_Fields](reg.loc))

proc read*(reg: static CAN1_F3R2_Type): CAN1_F3R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F3R2_Fields](reg.loc))

proc write*(reg: CAN1_F3R2_Type, val: CAN1_F3R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F3R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F3R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F3R2_Fields

template modifyIt*(reg: CAN1_F3R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F4R1_Type): CAN1_F4R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F4R1_Fields](reg.loc))

proc read*(reg: static CAN1_F4R1_Type): CAN1_F4R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F4R1_Fields](reg.loc))

proc write*(reg: CAN1_F4R1_Type, val: CAN1_F4R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F4R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F4R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F4R1_Fields

template modifyIt*(reg: CAN1_F4R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F4R2_Type): CAN1_F4R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F4R2_Fields](reg.loc))

proc read*(reg: static CAN1_F4R2_Type): CAN1_F4R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F4R2_Fields](reg.loc))

proc write*(reg: CAN1_F4R2_Type, val: CAN1_F4R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F4R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F4R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F4R2_Fields

template modifyIt*(reg: CAN1_F4R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F5R1_Type): CAN1_F5R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F5R1_Fields](reg.loc))

proc read*(reg: static CAN1_F5R1_Type): CAN1_F5R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F5R1_Fields](reg.loc))

proc write*(reg: CAN1_F5R1_Type, val: CAN1_F5R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F5R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F5R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F5R1_Fields

template modifyIt*(reg: CAN1_F5R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F5R2_Type): CAN1_F5R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F5R2_Fields](reg.loc))

proc read*(reg: static CAN1_F5R2_Type): CAN1_F5R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F5R2_Fields](reg.loc))

proc write*(reg: CAN1_F5R2_Type, val: CAN1_F5R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F5R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F5R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F5R2_Fields

template modifyIt*(reg: CAN1_F5R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F6R1_Type): CAN1_F6R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F6R1_Fields](reg.loc))

proc read*(reg: static CAN1_F6R1_Type): CAN1_F6R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F6R1_Fields](reg.loc))

proc write*(reg: CAN1_F6R1_Type, val: CAN1_F6R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F6R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F6R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F6R1_Fields

template modifyIt*(reg: CAN1_F6R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F6R2_Type): CAN1_F6R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F6R2_Fields](reg.loc))

proc read*(reg: static CAN1_F6R2_Type): CAN1_F6R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F6R2_Fields](reg.loc))

proc write*(reg: CAN1_F6R2_Type, val: CAN1_F6R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F6R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F6R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F6R2_Fields

template modifyIt*(reg: CAN1_F6R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F7R1_Type): CAN1_F7R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F7R1_Fields](reg.loc))

proc read*(reg: static CAN1_F7R1_Type): CAN1_F7R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F7R1_Fields](reg.loc))

proc write*(reg: CAN1_F7R1_Type, val: CAN1_F7R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F7R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F7R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F7R1_Fields

template modifyIt*(reg: CAN1_F7R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F7R2_Type): CAN1_F7R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F7R2_Fields](reg.loc))

proc read*(reg: static CAN1_F7R2_Type): CAN1_F7R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F7R2_Fields](reg.loc))

proc write*(reg: CAN1_F7R2_Type, val: CAN1_F7R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F7R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F7R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F7R2_Fields

template modifyIt*(reg: CAN1_F7R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F8R1_Type): CAN1_F8R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F8R1_Fields](reg.loc))

proc read*(reg: static CAN1_F8R1_Type): CAN1_F8R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F8R1_Fields](reg.loc))

proc write*(reg: CAN1_F8R1_Type, val: CAN1_F8R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F8R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F8R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F8R1_Fields

template modifyIt*(reg: CAN1_F8R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F8R2_Type): CAN1_F8R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F8R2_Fields](reg.loc))

proc read*(reg: static CAN1_F8R2_Type): CAN1_F8R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F8R2_Fields](reg.loc))

proc write*(reg: CAN1_F8R2_Type, val: CAN1_F8R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F8R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F8R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F8R2_Fields

template modifyIt*(reg: CAN1_F8R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F9R1_Type): CAN1_F9R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F9R1_Fields](reg.loc))

proc read*(reg: static CAN1_F9R1_Type): CAN1_F9R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F9R1_Fields](reg.loc))

proc write*(reg: CAN1_F9R1_Type, val: CAN1_F9R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F9R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F9R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F9R1_Fields

template modifyIt*(reg: CAN1_F9R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F9R2_Type): CAN1_F9R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F9R2_Fields](reg.loc))

proc read*(reg: static CAN1_F9R2_Type): CAN1_F9R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F9R2_Fields](reg.loc))

proc write*(reg: CAN1_F9R2_Type, val: CAN1_F9R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F9R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F9R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F9R2_Fields

template modifyIt*(reg: CAN1_F9R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F10R1_Type): CAN1_F10R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F10R1_Fields](reg.loc))

proc read*(reg: static CAN1_F10R1_Type): CAN1_F10R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F10R1_Fields](reg.loc))

proc write*(reg: CAN1_F10R1_Type, val: CAN1_F10R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F10R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F10R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F10R1_Fields

template modifyIt*(reg: CAN1_F10R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F10R2_Type): CAN1_F10R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F10R2_Fields](reg.loc))

proc read*(reg: static CAN1_F10R2_Type): CAN1_F10R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F10R2_Fields](reg.loc))

proc write*(reg: CAN1_F10R2_Type, val: CAN1_F10R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F10R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F10R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F10R2_Fields

template modifyIt*(reg: CAN1_F10R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F11R1_Type): CAN1_F11R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F11R1_Fields](reg.loc))

proc read*(reg: static CAN1_F11R1_Type): CAN1_F11R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F11R1_Fields](reg.loc))

proc write*(reg: CAN1_F11R1_Type, val: CAN1_F11R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F11R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F11R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F11R1_Fields

template modifyIt*(reg: CAN1_F11R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F11R2_Type): CAN1_F11R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F11R2_Fields](reg.loc))

proc read*(reg: static CAN1_F11R2_Type): CAN1_F11R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F11R2_Fields](reg.loc))

proc write*(reg: CAN1_F11R2_Type, val: CAN1_F11R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F11R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F11R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F11R2_Fields

template modifyIt*(reg: CAN1_F11R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F12R1_Type): CAN1_F12R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F12R1_Fields](reg.loc))

proc read*(reg: static CAN1_F12R1_Type): CAN1_F12R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F12R1_Fields](reg.loc))

proc write*(reg: CAN1_F12R1_Type, val: CAN1_F12R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F12R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F12R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F12R1_Fields

template modifyIt*(reg: CAN1_F12R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F12R2_Type): CAN1_F12R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F12R2_Fields](reg.loc))

proc read*(reg: static CAN1_F12R2_Type): CAN1_F12R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F12R2_Fields](reg.loc))

proc write*(reg: CAN1_F12R2_Type, val: CAN1_F12R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F12R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F12R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F12R2_Fields

template modifyIt*(reg: CAN1_F12R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F13R1_Type): CAN1_F13R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F13R1_Fields](reg.loc))

proc read*(reg: static CAN1_F13R1_Type): CAN1_F13R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F13R1_Fields](reg.loc))

proc write*(reg: CAN1_F13R1_Type, val: CAN1_F13R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F13R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F13R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F13R1_Fields

template modifyIt*(reg: CAN1_F13R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F13R2_Type): CAN1_F13R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F13R2_Fields](reg.loc))

proc read*(reg: static CAN1_F13R2_Type): CAN1_F13R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F13R2_Fields](reg.loc))

proc write*(reg: CAN1_F13R2_Type, val: CAN1_F13R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F13R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F13R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F13R2_Fields

template modifyIt*(reg: CAN1_F13R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F14R1_Type): CAN1_F14R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F14R1_Fields](reg.loc))

proc read*(reg: static CAN1_F14R1_Type): CAN1_F14R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F14R1_Fields](reg.loc))

proc write*(reg: CAN1_F14R1_Type, val: CAN1_F14R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F14R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F14R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F14R1_Fields

template modifyIt*(reg: CAN1_F14R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F14R2_Type): CAN1_F14R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F14R2_Fields](reg.loc))

proc read*(reg: static CAN1_F14R2_Type): CAN1_F14R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F14R2_Fields](reg.loc))

proc write*(reg: CAN1_F14R2_Type, val: CAN1_F14R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F14R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F14R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F14R2_Fields

template modifyIt*(reg: CAN1_F14R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F15R1_Type): CAN1_F15R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F15R1_Fields](reg.loc))

proc read*(reg: static CAN1_F15R1_Type): CAN1_F15R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F15R1_Fields](reg.loc))

proc write*(reg: CAN1_F15R1_Type, val: CAN1_F15R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F15R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F15R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F15R1_Fields

template modifyIt*(reg: CAN1_F15R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F15R2_Type): CAN1_F15R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F15R2_Fields](reg.loc))

proc read*(reg: static CAN1_F15R2_Type): CAN1_F15R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F15R2_Fields](reg.loc))

proc write*(reg: CAN1_F15R2_Type, val: CAN1_F15R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F15R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F15R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F15R2_Fields

template modifyIt*(reg: CAN1_F15R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F16R1_Type): CAN1_F16R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F16R1_Fields](reg.loc))

proc read*(reg: static CAN1_F16R1_Type): CAN1_F16R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F16R1_Fields](reg.loc))

proc write*(reg: CAN1_F16R1_Type, val: CAN1_F16R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F16R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F16R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F16R1_Fields

template modifyIt*(reg: CAN1_F16R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F16R2_Type): CAN1_F16R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F16R2_Fields](reg.loc))

proc read*(reg: static CAN1_F16R2_Type): CAN1_F16R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F16R2_Fields](reg.loc))

proc write*(reg: CAN1_F16R2_Type, val: CAN1_F16R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F16R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F16R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F16R2_Fields

template modifyIt*(reg: CAN1_F16R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F17R1_Type): CAN1_F17R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F17R1_Fields](reg.loc))

proc read*(reg: static CAN1_F17R1_Type): CAN1_F17R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F17R1_Fields](reg.loc))

proc write*(reg: CAN1_F17R1_Type, val: CAN1_F17R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F17R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F17R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F17R1_Fields

template modifyIt*(reg: CAN1_F17R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F17R2_Type): CAN1_F17R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F17R2_Fields](reg.loc))

proc read*(reg: static CAN1_F17R2_Type): CAN1_F17R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F17R2_Fields](reg.loc))

proc write*(reg: CAN1_F17R2_Type, val: CAN1_F17R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F17R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F17R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F17R2_Fields

template modifyIt*(reg: CAN1_F17R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F18R1_Type): CAN1_F18R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F18R1_Fields](reg.loc))

proc read*(reg: static CAN1_F18R1_Type): CAN1_F18R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F18R1_Fields](reg.loc))

proc write*(reg: CAN1_F18R1_Type, val: CAN1_F18R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F18R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F18R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F18R1_Fields

template modifyIt*(reg: CAN1_F18R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F18R2_Type): CAN1_F18R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F18R2_Fields](reg.loc))

proc read*(reg: static CAN1_F18R2_Type): CAN1_F18R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F18R2_Fields](reg.loc))

proc write*(reg: CAN1_F18R2_Type, val: CAN1_F18R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F18R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F18R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F18R2_Fields

template modifyIt*(reg: CAN1_F18R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F19R1_Type): CAN1_F19R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F19R1_Fields](reg.loc))

proc read*(reg: static CAN1_F19R1_Type): CAN1_F19R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F19R1_Fields](reg.loc))

proc write*(reg: CAN1_F19R1_Type, val: CAN1_F19R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F19R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F19R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F19R1_Fields

template modifyIt*(reg: CAN1_F19R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F19R2_Type): CAN1_F19R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F19R2_Fields](reg.loc))

proc read*(reg: static CAN1_F19R2_Type): CAN1_F19R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F19R2_Fields](reg.loc))

proc write*(reg: CAN1_F19R2_Type, val: CAN1_F19R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F19R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F19R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F19R2_Fields

template modifyIt*(reg: CAN1_F19R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F20R1_Type): CAN1_F20R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F20R1_Fields](reg.loc))

proc read*(reg: static CAN1_F20R1_Type): CAN1_F20R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F20R1_Fields](reg.loc))

proc write*(reg: CAN1_F20R1_Type, val: CAN1_F20R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F20R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F20R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F20R1_Fields

template modifyIt*(reg: CAN1_F20R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F20R2_Type): CAN1_F20R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F20R2_Fields](reg.loc))

proc read*(reg: static CAN1_F20R2_Type): CAN1_F20R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F20R2_Fields](reg.loc))

proc write*(reg: CAN1_F20R2_Type, val: CAN1_F20R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F20R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F20R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F20R2_Fields

template modifyIt*(reg: CAN1_F20R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F21R1_Type): CAN1_F21R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F21R1_Fields](reg.loc))

proc read*(reg: static CAN1_F21R1_Type): CAN1_F21R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F21R1_Fields](reg.loc))

proc write*(reg: CAN1_F21R1_Type, val: CAN1_F21R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F21R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F21R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F21R1_Fields

template modifyIt*(reg: CAN1_F21R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F21R2_Type): CAN1_F21R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F21R2_Fields](reg.loc))

proc read*(reg: static CAN1_F21R2_Type): CAN1_F21R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F21R2_Fields](reg.loc))

proc write*(reg: CAN1_F21R2_Type, val: CAN1_F21R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F21R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F21R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F21R2_Fields

template modifyIt*(reg: CAN1_F21R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F22R1_Type): CAN1_F22R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F22R1_Fields](reg.loc))

proc read*(reg: static CAN1_F22R1_Type): CAN1_F22R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F22R1_Fields](reg.loc))

proc write*(reg: CAN1_F22R1_Type, val: CAN1_F22R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F22R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F22R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F22R1_Fields

template modifyIt*(reg: CAN1_F22R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F22R2_Type): CAN1_F22R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F22R2_Fields](reg.loc))

proc read*(reg: static CAN1_F22R2_Type): CAN1_F22R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F22R2_Fields](reg.loc))

proc write*(reg: CAN1_F22R2_Type, val: CAN1_F22R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F22R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F22R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F22R2_Fields

template modifyIt*(reg: CAN1_F22R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F23R1_Type): CAN1_F23R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F23R1_Fields](reg.loc))

proc read*(reg: static CAN1_F23R1_Type): CAN1_F23R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F23R1_Fields](reg.loc))

proc write*(reg: CAN1_F23R1_Type, val: CAN1_F23R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F23R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F23R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F23R1_Fields

template modifyIt*(reg: CAN1_F23R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F23R2_Type): CAN1_F23R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F23R2_Fields](reg.loc))

proc read*(reg: static CAN1_F23R2_Type): CAN1_F23R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F23R2_Fields](reg.loc))

proc write*(reg: CAN1_F23R2_Type, val: CAN1_F23R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F23R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F23R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F23R2_Fields

template modifyIt*(reg: CAN1_F23R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F24R1_Type): CAN1_F24R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F24R1_Fields](reg.loc))

proc read*(reg: static CAN1_F24R1_Type): CAN1_F24R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F24R1_Fields](reg.loc))

proc write*(reg: CAN1_F24R1_Type, val: CAN1_F24R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F24R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F24R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F24R1_Fields

template modifyIt*(reg: CAN1_F24R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F24R2_Type): CAN1_F24R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F24R2_Fields](reg.loc))

proc read*(reg: static CAN1_F24R2_Type): CAN1_F24R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F24R2_Fields](reg.loc))

proc write*(reg: CAN1_F24R2_Type, val: CAN1_F24R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F24R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F24R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F24R2_Fields

template modifyIt*(reg: CAN1_F24R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F25R1_Type): CAN1_F25R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F25R1_Fields](reg.loc))

proc read*(reg: static CAN1_F25R1_Type): CAN1_F25R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F25R1_Fields](reg.loc))

proc write*(reg: CAN1_F25R1_Type, val: CAN1_F25R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F25R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F25R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F25R1_Fields

template modifyIt*(reg: CAN1_F25R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F25R2_Type): CAN1_F25R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F25R2_Fields](reg.loc))

proc read*(reg: static CAN1_F25R2_Type): CAN1_F25R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F25R2_Fields](reg.loc))

proc write*(reg: CAN1_F25R2_Type, val: CAN1_F25R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F25R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F25R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F25R2_Fields

template modifyIt*(reg: CAN1_F25R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F26R1_Type): CAN1_F26R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F26R1_Fields](reg.loc))

proc read*(reg: static CAN1_F26R1_Type): CAN1_F26R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F26R1_Fields](reg.loc))

proc write*(reg: CAN1_F26R1_Type, val: CAN1_F26R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F26R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F26R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F26R1_Fields

template modifyIt*(reg: CAN1_F26R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F26R2_Type): CAN1_F26R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F26R2_Fields](reg.loc))

proc read*(reg: static CAN1_F26R2_Type): CAN1_F26R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F26R2_Fields](reg.loc))

proc write*(reg: CAN1_F26R2_Type, val: CAN1_F26R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F26R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F26R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F26R2_Fields

template modifyIt*(reg: CAN1_F26R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F27R1_Type): CAN1_F27R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F27R1_Fields](reg.loc))

proc read*(reg: static CAN1_F27R1_Type): CAN1_F27R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F27R1_Fields](reg.loc))

proc write*(reg: CAN1_F27R1_Type, val: CAN1_F27R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F27R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F27R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F27R1_Fields

template modifyIt*(reg: CAN1_F27R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F27R2_Type): CAN1_F27R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F27R2_Fields](reg.loc))

proc read*(reg: static CAN1_F27R2_Type): CAN1_F27R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F27R2_Fields](reg.loc))

proc write*(reg: CAN1_F27R2_Type, val: CAN1_F27R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F27R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F27R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F27R2_Fields

template modifyIt*(reg: CAN1_F27R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func DBF*(r: CAN1_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `DBF=`*(r: var CAN1_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_CTLR_Fields

func RESET*(r: CAN1_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `RESET=`*(r: var CAN1_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_CTLR_Fields

func TTCM*(r: CAN1_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TTCM=`*(r: var CAN1_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_CTLR_Fields

func ABOM*(r: CAN1_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `ABOM=`*(r: var CAN1_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_CTLR_Fields

func AWUM*(r: CAN1_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `AWUM=`*(r: var CAN1_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_CTLR_Fields

func NART*(r: CAN1_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NART=`*(r: var CAN1_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_CTLR_Fields

func RFLM*(r: CAN1_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `RFLM=`*(r: var CAN1_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_CTLR_Fields

func TXFP*(r: CAN1_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `TXFP=`*(r: var CAN1_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_CTLR_Fields

func SLEEP*(r: CAN1_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `SLEEP=`*(r: var CAN1_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_CTLR_Fields

func INRQ*(r: CAN1_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `INRQ=`*(r: var CAN1_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_CTLR_Fields

func RX*(r: CAN1_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

func SAMP*(r: CAN1_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

func RXM*(r: CAN1_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

func TXM*(r: CAN1_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

func SLAKI*(r: CAN1_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `SLAKI=`*(r: var CAN1_STATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_STATR_Fields

func WKUI*(r: CAN1_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `WKUI=`*(r: var CAN1_STATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_STATR_Fields

func ERRI*(r: CAN1_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `ERRI=`*(r: var CAN1_STATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_STATR_Fields

func SLAK*(r: CAN1_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func INAK*(r: CAN1_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func LOW2*(r: CAN1_TSTATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

func LOW1*(r: CAN1_TSTATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

func LOW0*(r: CAN1_TSTATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

func TME2*(r: CAN1_TSTATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

func TME1*(r: CAN1_TSTATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

func TME0*(r: CAN1_TSTATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

func CODE*(r: CAN1_TSTATR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 25)

func ABRQ2*(r: CAN1_TSTATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `ABRQ2=`*(r: var CAN1_TSTATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_TSTATR_Fields

func TERR2*(r: CAN1_TSTATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `TERR2=`*(r: var CAN1_TSTATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_TSTATR_Fields

func ALST2*(r: CAN1_TSTATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `ALST2=`*(r: var CAN1_TSTATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_TSTATR_Fields

func TXOK2*(r: CAN1_TSTATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `TXOK2=`*(r: var CAN1_TSTATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_TSTATR_Fields

func RQCP2*(r: CAN1_TSTATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `RQCP2=`*(r: var CAN1_TSTATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_TSTATR_Fields

func ABRQ1*(r: CAN1_TSTATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `ABRQ1=`*(r: var CAN1_TSTATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_TSTATR_Fields

func TERR1*(r: CAN1_TSTATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `TERR1=`*(r: var CAN1_TSTATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_TSTATR_Fields

func ALST1*(r: CAN1_TSTATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `ALST1=`*(r: var CAN1_TSTATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_TSTATR_Fields

func TXOK1*(r: CAN1_TSTATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `TXOK1=`*(r: var CAN1_TSTATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_TSTATR_Fields

func RQCP1*(r: CAN1_TSTATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `RQCP1=`*(r: var CAN1_TSTATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_TSTATR_Fields

func ABRQ0*(r: CAN1_TSTATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `ABRQ0=`*(r: var CAN1_TSTATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_TSTATR_Fields

func TERR0*(r: CAN1_TSTATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TERR0=`*(r: var CAN1_TSTATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_TSTATR_Fields

func ALST0*(r: CAN1_TSTATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `ALST0=`*(r: var CAN1_TSTATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_TSTATR_Fields

func TXOK0*(r: CAN1_TSTATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `TXOK0=`*(r: var CAN1_TSTATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_TSTATR_Fields

func RQCP0*(r: CAN1_TSTATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `RQCP0=`*(r: var CAN1_TSTATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_TSTATR_Fields

func RFOM0*(r: CAN1_RFIFO0_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `RFOM0=`*(r: var CAN1_RFIFO0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_RFIFO0_Fields

func FOVR0*(r: CAN1_RFIFO0_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FOVR0=`*(r: var CAN1_RFIFO0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_RFIFO0_Fields

func FULL0*(r: CAN1_RFIFO0_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FULL0=`*(r: var CAN1_RFIFO0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_RFIFO0_Fields

func FMP0*(r: CAN1_RFIFO0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

func RFOM1*(r: CAN1_RFIFO1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `RFOM1=`*(r: var CAN1_RFIFO1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_RFIFO1_Fields

func FOVR1*(r: CAN1_RFIFO1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FOVR1=`*(r: var CAN1_RFIFO1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_RFIFO1_Fields

func FULL1*(r: CAN1_RFIFO1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FULL1=`*(r: var CAN1_RFIFO1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_RFIFO1_Fields

func FMP1*(r: CAN1_RFIFO1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

func SLKIE*(r: CAN1_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `SLKIE=`*(r: var CAN1_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_INTENR_Fields

func WKUIE*(r: CAN1_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `WKUIE=`*(r: var CAN1_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_INTENR_Fields

func ERRIE*(r: CAN1_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `ERRIE=`*(r: var CAN1_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_INTENR_Fields

func LECIE*(r: CAN1_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `LECIE=`*(r: var CAN1_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_INTENR_Fields

func BOFIE*(r: CAN1_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `BOFIE=`*(r: var CAN1_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_INTENR_Fields

func EPVIE*(r: CAN1_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `EPVIE=`*(r: var CAN1_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_INTENR_Fields

func EWGIE*(r: CAN1_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `EWGIE=`*(r: var CAN1_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_INTENR_Fields

func FOVIE1*(r: CAN1_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FOVIE1=`*(r: var CAN1_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_INTENR_Fields

func FFIE1*(r: CAN1_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FFIE1=`*(r: var CAN1_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_INTENR_Fields

func FMPIE1*(r: CAN1_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FMPIE1=`*(r: var CAN1_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_INTENR_Fields

func FOVIE0*(r: CAN1_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FOVIE0=`*(r: var CAN1_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_INTENR_Fields

func FFIE0*(r: CAN1_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FFIE0=`*(r: var CAN1_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_INTENR_Fields

func FMPIE0*(r: CAN1_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FMPIE0=`*(r: var CAN1_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_INTENR_Fields

func TMEIE*(r: CAN1_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `TMEIE=`*(r: var CAN1_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_INTENR_Fields

func REC*(r: CAN1_ERRSR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

func TEC*(r: CAN1_ERRSR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

func LEC*(r: CAN1_ERRSR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `LEC=`*(r: var CAN1_ERRSR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.CAN1_ERRSR_Fields

func BOFF*(r: CAN1_ERRSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func EPVF*(r: CAN1_ERRSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func EWGF*(r: CAN1_ERRSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func SILM*(r: CAN1_BTIMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `SILM=`*(r: var CAN1_BTIMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_BTIMR_Fields

func LBKM*(r: CAN1_BTIMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `LBKM=`*(r: var CAN1_BTIMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_BTIMR_Fields

func SJW*(r: CAN1_BTIMR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 25)

proc `SJW=`*(r: var CAN1_BTIMR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 25)
  tmp.setMask((val shl 24).masked(24 .. 25))
  r = tmp.CAN1_BTIMR_Fields

func TS2*(r: CAN1_BTIMR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 22)

proc `TS2=`*(r: var CAN1_BTIMR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 22)
  tmp.setMask((val shl 20).masked(20 .. 22))
  r = tmp.CAN1_BTIMR_Fields

func TS1*(r: CAN1_BTIMR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 19)

proc `TS1=`*(r: var CAN1_BTIMR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 19)
  tmp.setMask((val shl 16).masked(16 .. 19))
  r = tmp.CAN1_BTIMR_Fields

func BRP*(r: CAN1_BTIMR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 9)

proc `BRP=`*(r: var CAN1_BTIMR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 9)
  tmp.setMask((val shl 0).masked(0 .. 9))
  r = tmp.CAN1_BTIMR_Fields

func STID*(r: CAN1_TXMIR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(21 .. 31)

proc `STID=`*(r: var CAN1_TXMIR0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 31)
  tmp.setMask((val shl 21).masked(21 .. 31))
  r = tmp.CAN1_TXMIR0_Fields

func EXID*(r: CAN1_TXMIR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 20)

proc `EXID=`*(r: var CAN1_TXMIR0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 20)
  tmp.setMask((val shl 3).masked(3 .. 20))
  r = tmp.CAN1_TXMIR0_Fields

func IDE*(r: CAN1_TXMIR0_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `IDE=`*(r: var CAN1_TXMIR0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_TXMIR0_Fields

func RTR*(r: CAN1_TXMIR0_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `RTR=`*(r: var CAN1_TXMIR0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_TXMIR0_Fields

func TXRQ*(r: CAN1_TXMIR0_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `TXRQ=`*(r: var CAN1_TXMIR0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_TXMIR0_Fields

func TIME*(r: CAN1_TXMDTR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `TIME=`*(r: var CAN1_TXMDTR0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.CAN1_TXMDTR0_Fields

func TGT*(r: CAN1_TXMDTR0_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `TGT=`*(r: var CAN1_TXMDTR0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_TXMDTR0_Fields

func DLC*(r: CAN1_TXMDTR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `DLC=`*(r: var CAN1_TXMDTR0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.CAN1_TXMDTR0_Fields

func DATA3*(r: CAN1_TXMDLR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

proc `DATA3=`*(r: var CAN1_TXMDLR0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 31)
  tmp.setMask((val shl 24).masked(24 .. 31))
  r = tmp.CAN1_TXMDLR0_Fields

func DATA2*(r: CAN1_TXMDLR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

proc `DATA2=`*(r: var CAN1_TXMDLR0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 23)
  tmp.setMask((val shl 16).masked(16 .. 23))
  r = tmp.CAN1_TXMDLR0_Fields

func DATA1*(r: CAN1_TXMDLR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `DATA1=`*(r: var CAN1_TXMDLR0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.CAN1_TXMDLR0_Fields

func DATA0*(r: CAN1_TXMDLR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `DATA0=`*(r: var CAN1_TXMDLR0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.CAN1_TXMDLR0_Fields

func DATA7*(r: CAN1_TXMDHR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

proc `DATA7=`*(r: var CAN1_TXMDHR0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 31)
  tmp.setMask((val shl 24).masked(24 .. 31))
  r = tmp.CAN1_TXMDHR0_Fields

func DATA6*(r: CAN1_TXMDHR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

proc `DATA6=`*(r: var CAN1_TXMDHR0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 23)
  tmp.setMask((val shl 16).masked(16 .. 23))
  r = tmp.CAN1_TXMDHR0_Fields

func DATA5*(r: CAN1_TXMDHR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `DATA5=`*(r: var CAN1_TXMDHR0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.CAN1_TXMDHR0_Fields

func DATA4*(r: CAN1_TXMDHR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `DATA4=`*(r: var CAN1_TXMDHR0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.CAN1_TXMDHR0_Fields

func STID*(r: CAN1_TXMIR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(21 .. 31)

proc `STID=`*(r: var CAN1_TXMIR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 31)
  tmp.setMask((val shl 21).masked(21 .. 31))
  r = tmp.CAN1_TXMIR1_Fields

func EXID*(r: CAN1_TXMIR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 20)

proc `EXID=`*(r: var CAN1_TXMIR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 20)
  tmp.setMask((val shl 3).masked(3 .. 20))
  r = tmp.CAN1_TXMIR1_Fields

func IDE*(r: CAN1_TXMIR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `IDE=`*(r: var CAN1_TXMIR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_TXMIR1_Fields

func RTR*(r: CAN1_TXMIR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `RTR=`*(r: var CAN1_TXMIR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_TXMIR1_Fields

func TXRQ*(r: CAN1_TXMIR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `TXRQ=`*(r: var CAN1_TXMIR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_TXMIR1_Fields

func TIME*(r: CAN1_TXMDTR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `TIME=`*(r: var CAN1_TXMDTR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.CAN1_TXMDTR1_Fields

func TGT*(r: CAN1_TXMDTR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `TGT=`*(r: var CAN1_TXMDTR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_TXMDTR1_Fields

func DLC*(r: CAN1_TXMDTR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `DLC=`*(r: var CAN1_TXMDTR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.CAN1_TXMDTR1_Fields

func DATA3*(r: CAN1_TXMDLR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

proc `DATA3=`*(r: var CAN1_TXMDLR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 31)
  tmp.setMask((val shl 24).masked(24 .. 31))
  r = tmp.CAN1_TXMDLR1_Fields

func DATA2*(r: CAN1_TXMDLR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

proc `DATA2=`*(r: var CAN1_TXMDLR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 23)
  tmp.setMask((val shl 16).masked(16 .. 23))
  r = tmp.CAN1_TXMDLR1_Fields

func DATA1*(r: CAN1_TXMDLR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `DATA1=`*(r: var CAN1_TXMDLR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.CAN1_TXMDLR1_Fields

func DATA0*(r: CAN1_TXMDLR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `DATA0=`*(r: var CAN1_TXMDLR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.CAN1_TXMDLR1_Fields

func DATA7*(r: CAN1_TXMDHR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

proc `DATA7=`*(r: var CAN1_TXMDHR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 31)
  tmp.setMask((val shl 24).masked(24 .. 31))
  r = tmp.CAN1_TXMDHR1_Fields

func DATA6*(r: CAN1_TXMDHR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

proc `DATA6=`*(r: var CAN1_TXMDHR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 23)
  tmp.setMask((val shl 16).masked(16 .. 23))
  r = tmp.CAN1_TXMDHR1_Fields

func DATA5*(r: CAN1_TXMDHR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `DATA5=`*(r: var CAN1_TXMDHR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.CAN1_TXMDHR1_Fields

func DATA4*(r: CAN1_TXMDHR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `DATA4=`*(r: var CAN1_TXMDHR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.CAN1_TXMDHR1_Fields

func STID*(r: CAN1_TXMIR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(21 .. 31)

proc `STID=`*(r: var CAN1_TXMIR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 31)
  tmp.setMask((val shl 21).masked(21 .. 31))
  r = tmp.CAN1_TXMIR2_Fields

func EXID*(r: CAN1_TXMIR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 20)

proc `EXID=`*(r: var CAN1_TXMIR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 20)
  tmp.setMask((val shl 3).masked(3 .. 20))
  r = tmp.CAN1_TXMIR2_Fields

func IDE*(r: CAN1_TXMIR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `IDE=`*(r: var CAN1_TXMIR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_TXMIR2_Fields

func RTR*(r: CAN1_TXMIR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `RTR=`*(r: var CAN1_TXMIR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_TXMIR2_Fields

func TXRQ*(r: CAN1_TXMIR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `TXRQ=`*(r: var CAN1_TXMIR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_TXMIR2_Fields

func TIME*(r: CAN1_TXMDTR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `TIME=`*(r: var CAN1_TXMDTR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.CAN1_TXMDTR2_Fields

func TGT*(r: CAN1_TXMDTR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `TGT=`*(r: var CAN1_TXMDTR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_TXMDTR2_Fields

func DLC*(r: CAN1_TXMDTR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `DLC=`*(r: var CAN1_TXMDTR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.CAN1_TXMDTR2_Fields

func DATA3*(r: CAN1_TXMDLR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

proc `DATA3=`*(r: var CAN1_TXMDLR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 31)
  tmp.setMask((val shl 24).masked(24 .. 31))
  r = tmp.CAN1_TXMDLR2_Fields

func DATA2*(r: CAN1_TXMDLR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

proc `DATA2=`*(r: var CAN1_TXMDLR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 23)
  tmp.setMask((val shl 16).masked(16 .. 23))
  r = tmp.CAN1_TXMDLR2_Fields

func DATA1*(r: CAN1_TXMDLR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `DATA1=`*(r: var CAN1_TXMDLR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.CAN1_TXMDLR2_Fields

func DATA0*(r: CAN1_TXMDLR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `DATA0=`*(r: var CAN1_TXMDLR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.CAN1_TXMDLR2_Fields

func DATA7*(r: CAN1_TXMDHR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

proc `DATA7=`*(r: var CAN1_TXMDHR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 31)
  tmp.setMask((val shl 24).masked(24 .. 31))
  r = tmp.CAN1_TXMDHR2_Fields

func DATA6*(r: CAN1_TXMDHR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

proc `DATA6=`*(r: var CAN1_TXMDHR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 23)
  tmp.setMask((val shl 16).masked(16 .. 23))
  r = tmp.CAN1_TXMDHR2_Fields

func DATA5*(r: CAN1_TXMDHR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `DATA5=`*(r: var CAN1_TXMDHR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.CAN1_TXMDHR2_Fields

func DATA4*(r: CAN1_TXMDHR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `DATA4=`*(r: var CAN1_TXMDHR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.CAN1_TXMDHR2_Fields

func STID*(r: CAN1_RXMIR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(21 .. 31)

func EXID*(r: CAN1_RXMIR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 20)

func IDE*(r: CAN1_RXMIR0_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func RTR*(r: CAN1_RXMIR0_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func TIME*(r: CAN1_RXMDTR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

func FMI*(r: CAN1_RXMDTR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

func DLC*(r: CAN1_RXMDTR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

func DATA3*(r: CAN1_RXMDLR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

func DATA2*(r: CAN1_RXMDLR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

func DATA1*(r: CAN1_RXMDLR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

func DATA0*(r: CAN1_RXMDLR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

func DATA7*(r: CAN1_RXMDHR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

func DATA6*(r: CAN1_RXMDHR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

func DATA5*(r: CAN1_RXMDHR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

func DATA4*(r: CAN1_RXMDHR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

func STID*(r: CAN1_RXMIR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(21 .. 31)

func EXID*(r: CAN1_RXMIR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 20)

func IDE*(r: CAN1_RXMIR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func RTR*(r: CAN1_RXMIR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func TIME*(r: CAN1_RXMDTR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

func FMI*(r: CAN1_RXMDTR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

func DLC*(r: CAN1_RXMDTR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

func DATA3*(r: CAN1_RXMDLR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

func DATA2*(r: CAN1_RXMDLR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

func DATA1*(r: CAN1_RXMDLR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

func DATA0*(r: CAN1_RXMDLR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

func DATA7*(r: CAN1_RXMDHR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

func DATA6*(r: CAN1_RXMDHR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

func DATA5*(r: CAN1_RXMDHR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

func DATA4*(r: CAN1_RXMDHR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

func FINIT*(r: CAN1_FCTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FINIT=`*(r: var CAN1_FCTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_FCTLR_Fields

func FBM0*(r: CAN1_FMCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FBM0=`*(r: var CAN1_FMCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_FMCFGR_Fields

func FBM1*(r: CAN1_FMCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FBM1=`*(r: var CAN1_FMCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_FMCFGR_Fields

func FBM2*(r: CAN1_FMCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FBM2=`*(r: var CAN1_FMCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_FMCFGR_Fields

func FBM3*(r: CAN1_FMCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FBM3=`*(r: var CAN1_FMCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_FMCFGR_Fields

func FBM4*(r: CAN1_FMCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FBM4=`*(r: var CAN1_FMCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_FMCFGR_Fields

func FBM5*(r: CAN1_FMCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FBM5=`*(r: var CAN1_FMCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_FMCFGR_Fields

func FBM6*(r: CAN1_FMCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FBM6=`*(r: var CAN1_FMCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_FMCFGR_Fields

func FBM7*(r: CAN1_FMCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FBM7=`*(r: var CAN1_FMCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_FMCFGR_Fields

func FBM8*(r: CAN1_FMCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FBM8=`*(r: var CAN1_FMCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_FMCFGR_Fields

func FBM9*(r: CAN1_FMCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FBM9=`*(r: var CAN1_FMCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_FMCFGR_Fields

func FBM10*(r: CAN1_FMCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FBM10=`*(r: var CAN1_FMCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_FMCFGR_Fields

func FBM11*(r: CAN1_FMCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FBM11=`*(r: var CAN1_FMCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_FMCFGR_Fields

func FBM12*(r: CAN1_FMCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FBM12=`*(r: var CAN1_FMCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_FMCFGR_Fields

func FBM13*(r: CAN1_FMCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FBM13=`*(r: var CAN1_FMCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_FMCFGR_Fields

func FSC0*(r: CAN1_FSCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FSC0=`*(r: var CAN1_FSCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_FSCFGR_Fields

func FSC1*(r: CAN1_FSCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FSC1=`*(r: var CAN1_FSCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_FSCFGR_Fields

func FSC2*(r: CAN1_FSCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FSC2=`*(r: var CAN1_FSCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_FSCFGR_Fields

func FSC3*(r: CAN1_FSCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FSC3=`*(r: var CAN1_FSCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_FSCFGR_Fields

func FSC4*(r: CAN1_FSCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FSC4=`*(r: var CAN1_FSCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_FSCFGR_Fields

func FSC5*(r: CAN1_FSCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FSC5=`*(r: var CAN1_FSCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_FSCFGR_Fields

func FSC6*(r: CAN1_FSCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FSC6=`*(r: var CAN1_FSCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_FSCFGR_Fields

func FSC7*(r: CAN1_FSCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FSC7=`*(r: var CAN1_FSCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_FSCFGR_Fields

func FSC8*(r: CAN1_FSCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FSC8=`*(r: var CAN1_FSCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_FSCFGR_Fields

func FSC9*(r: CAN1_FSCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FSC9=`*(r: var CAN1_FSCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_FSCFGR_Fields

func FSC10*(r: CAN1_FSCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FSC10=`*(r: var CAN1_FSCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_FSCFGR_Fields

func FSC11*(r: CAN1_FSCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FSC11=`*(r: var CAN1_FSCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_FSCFGR_Fields

func FSC12*(r: CAN1_FSCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FSC12=`*(r: var CAN1_FSCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_FSCFGR_Fields

func FSC13*(r: CAN1_FSCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FSC13=`*(r: var CAN1_FSCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_FSCFGR_Fields

func FFA0*(r: CAN1_FAFIFOR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FFA0=`*(r: var CAN1_FAFIFOR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_FAFIFOR_Fields

func FFA1*(r: CAN1_FAFIFOR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FFA1=`*(r: var CAN1_FAFIFOR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_FAFIFOR_Fields

func FFA2*(r: CAN1_FAFIFOR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FFA2=`*(r: var CAN1_FAFIFOR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_FAFIFOR_Fields

func FFA3*(r: CAN1_FAFIFOR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FFA3=`*(r: var CAN1_FAFIFOR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_FAFIFOR_Fields

func FFA4*(r: CAN1_FAFIFOR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FFA4=`*(r: var CAN1_FAFIFOR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_FAFIFOR_Fields

func FFA5*(r: CAN1_FAFIFOR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FFA5=`*(r: var CAN1_FAFIFOR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_FAFIFOR_Fields

func FFA6*(r: CAN1_FAFIFOR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FFA6=`*(r: var CAN1_FAFIFOR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_FAFIFOR_Fields

func FFA7*(r: CAN1_FAFIFOR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FFA7=`*(r: var CAN1_FAFIFOR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_FAFIFOR_Fields

func FFA8*(r: CAN1_FAFIFOR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FFA8=`*(r: var CAN1_FAFIFOR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_FAFIFOR_Fields

func FFA9*(r: CAN1_FAFIFOR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FFA9=`*(r: var CAN1_FAFIFOR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_FAFIFOR_Fields

func FFA10*(r: CAN1_FAFIFOR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FFA10=`*(r: var CAN1_FAFIFOR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_FAFIFOR_Fields

func FFA11*(r: CAN1_FAFIFOR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FFA11=`*(r: var CAN1_FAFIFOR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_FAFIFOR_Fields

func FFA12*(r: CAN1_FAFIFOR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FFA12=`*(r: var CAN1_FAFIFOR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_FAFIFOR_Fields

func FFA13*(r: CAN1_FAFIFOR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FFA13=`*(r: var CAN1_FAFIFOR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_FAFIFOR_Fields

func FACT0*(r: CAN1_FWR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FACT0=`*(r: var CAN1_FWR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_FWR_Fields

func FACT1*(r: CAN1_FWR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FACT1=`*(r: var CAN1_FWR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_FWR_Fields

func FACT2*(r: CAN1_FWR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FACT2=`*(r: var CAN1_FWR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_FWR_Fields

func FACT3*(r: CAN1_FWR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FACT3=`*(r: var CAN1_FWR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_FWR_Fields

func FACT4*(r: CAN1_FWR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FACT4=`*(r: var CAN1_FWR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_FWR_Fields

func FACT5*(r: CAN1_FWR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FACT5=`*(r: var CAN1_FWR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_FWR_Fields

func FACT6*(r: CAN1_FWR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FACT6=`*(r: var CAN1_FWR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_FWR_Fields

func FACT7*(r: CAN1_FWR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FACT7=`*(r: var CAN1_FWR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_FWR_Fields

func FACT8*(r: CAN1_FWR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FACT8=`*(r: var CAN1_FWR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_FWR_Fields

func FACT9*(r: CAN1_FWR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FACT9=`*(r: var CAN1_FWR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_FWR_Fields

func FACT10*(r: CAN1_FWR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FACT10=`*(r: var CAN1_FWR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_FWR_Fields

func FACT11*(r: CAN1_FWR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FACT11=`*(r: var CAN1_FWR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_FWR_Fields

func FACT12*(r: CAN1_FWR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FACT12=`*(r: var CAN1_FWR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_FWR_Fields

func FACT13*(r: CAN1_FWR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FACT13=`*(r: var CAN1_FWR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_FWR_Fields

func FB0*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F0R1_Fields

func FB1*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F0R1_Fields

func FB2*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F0R1_Fields

func FB3*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F0R1_Fields

func FB4*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F0R1_Fields

func FB5*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F0R1_Fields

func FB6*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F0R1_Fields

func FB7*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F0R1_Fields

func FB8*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F0R1_Fields

func FB9*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F0R1_Fields

func FB10*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F0R1_Fields

func FB11*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F0R1_Fields

func FB12*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F0R1_Fields

func FB13*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F0R1_Fields

func FB14*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F0R1_Fields

func FB15*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F0R1_Fields

func FB16*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F0R1_Fields

func FB17*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F0R1_Fields

func FB18*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F0R1_Fields

func FB19*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F0R1_Fields

func FB20*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F0R1_Fields

func FB21*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F0R1_Fields

func FB22*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F0R1_Fields

func FB23*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F0R1_Fields

func FB24*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F0R1_Fields

func FB25*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F0R1_Fields

func FB26*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F0R1_Fields

func FB27*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F0R1_Fields

func FB28*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F0R1_Fields

func FB29*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F0R1_Fields

func FB30*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F0R1_Fields

func FB31*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F0R1_Fields

func FB0*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F0R2_Fields

func FB1*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F0R2_Fields

func FB2*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F0R2_Fields

func FB3*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F0R2_Fields

func FB4*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F0R2_Fields

func FB5*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F0R2_Fields

func FB6*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F0R2_Fields

func FB7*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F0R2_Fields

func FB8*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F0R2_Fields

func FB9*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F0R2_Fields

func FB10*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F0R2_Fields

func FB11*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F0R2_Fields

func FB12*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F0R2_Fields

func FB13*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F0R2_Fields

func FB14*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F0R2_Fields

func FB15*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F0R2_Fields

func FB16*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F0R2_Fields

func FB17*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F0R2_Fields

func FB18*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F0R2_Fields

func FB19*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F0R2_Fields

func FB20*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F0R2_Fields

func FB21*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F0R2_Fields

func FB22*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F0R2_Fields

func FB23*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F0R2_Fields

func FB24*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F0R2_Fields

func FB25*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F0R2_Fields

func FB26*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F0R2_Fields

func FB27*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F0R2_Fields

func FB28*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F0R2_Fields

func FB29*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F0R2_Fields

func FB30*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F0R2_Fields

func FB31*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F0R2_Fields

func FB0*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F1R1_Fields

func FB1*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F1R1_Fields

func FB2*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F1R1_Fields

func FB3*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F1R1_Fields

func FB4*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F1R1_Fields

func FB5*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F1R1_Fields

func FB6*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F1R1_Fields

func FB7*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F1R1_Fields

func FB8*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F1R1_Fields

func FB9*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F1R1_Fields

func FB10*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F1R1_Fields

func FB11*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F1R1_Fields

func FB12*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F1R1_Fields

func FB13*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F1R1_Fields

func FB14*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F1R1_Fields

func FB15*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F1R1_Fields

func FB16*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F1R1_Fields

func FB17*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F1R1_Fields

func FB18*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F1R1_Fields

func FB19*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F1R1_Fields

func FB20*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F1R1_Fields

func FB21*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F1R1_Fields

func FB22*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F1R1_Fields

func FB23*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F1R1_Fields

func FB24*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F1R1_Fields

func FB25*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F1R1_Fields

func FB26*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F1R1_Fields

func FB27*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F1R1_Fields

func FB28*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F1R1_Fields

func FB29*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F1R1_Fields

func FB30*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F1R1_Fields

func FB31*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F1R1_Fields

func FB0*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F1R2_Fields

func FB1*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F1R2_Fields

func FB2*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F1R2_Fields

func FB3*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F1R2_Fields

func FB4*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F1R2_Fields

func FB5*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F1R2_Fields

func FB6*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F1R2_Fields

func FB7*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F1R2_Fields

func FB8*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F1R2_Fields

func FB9*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F1R2_Fields

func FB10*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F1R2_Fields

func FB11*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F1R2_Fields

func FB12*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F1R2_Fields

func FB13*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F1R2_Fields

func FB14*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F1R2_Fields

func FB15*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F1R2_Fields

func FB16*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F1R2_Fields

func FB17*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F1R2_Fields

func FB18*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F1R2_Fields

func FB19*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F1R2_Fields

func FB20*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F1R2_Fields

func FB21*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F1R2_Fields

func FB22*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F1R2_Fields

func FB23*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F1R2_Fields

func FB24*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F1R2_Fields

func FB25*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F1R2_Fields

func FB26*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F1R2_Fields

func FB27*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F1R2_Fields

func FB28*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F1R2_Fields

func FB29*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F1R2_Fields

func FB30*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F1R2_Fields

func FB31*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F1R2_Fields

func FB0*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F2R1_Fields

func FB1*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F2R1_Fields

func FB2*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F2R1_Fields

func FB3*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F2R1_Fields

func FB4*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F2R1_Fields

func FB5*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F2R1_Fields

func FB6*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F2R1_Fields

func FB7*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F2R1_Fields

func FB8*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F2R1_Fields

func FB9*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F2R1_Fields

func FB10*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F2R1_Fields

func FB11*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F2R1_Fields

func FB12*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F2R1_Fields

func FB13*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F2R1_Fields

func FB14*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F2R1_Fields

func FB15*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F2R1_Fields

func FB16*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F2R1_Fields

func FB17*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F2R1_Fields

func FB18*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F2R1_Fields

func FB19*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F2R1_Fields

func FB20*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F2R1_Fields

func FB21*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F2R1_Fields

func FB22*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F2R1_Fields

func FB23*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F2R1_Fields

func FB24*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F2R1_Fields

func FB25*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F2R1_Fields

func FB26*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F2R1_Fields

func FB27*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F2R1_Fields

func FB28*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F2R1_Fields

func FB29*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F2R1_Fields

func FB30*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F2R1_Fields

func FB31*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F2R1_Fields

func FB0*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F2R2_Fields

func FB1*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F2R2_Fields

func FB2*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F2R2_Fields

func FB3*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F2R2_Fields

func FB4*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F2R2_Fields

func FB5*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F2R2_Fields

func FB6*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F2R2_Fields

func FB7*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F2R2_Fields

func FB8*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F2R2_Fields

func FB9*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F2R2_Fields

func FB10*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F2R2_Fields

func FB11*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F2R2_Fields

func FB12*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F2R2_Fields

func FB13*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F2R2_Fields

func FB14*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F2R2_Fields

func FB15*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F2R2_Fields

func FB16*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F2R2_Fields

func FB17*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F2R2_Fields

func FB18*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F2R2_Fields

func FB19*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F2R2_Fields

func FB20*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F2R2_Fields

func FB21*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F2R2_Fields

func FB22*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F2R2_Fields

func FB23*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F2R2_Fields

func FB24*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F2R2_Fields

func FB25*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F2R2_Fields

func FB26*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F2R2_Fields

func FB27*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F2R2_Fields

func FB28*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F2R2_Fields

func FB29*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F2R2_Fields

func FB30*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F2R2_Fields

func FB31*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F2R2_Fields

func FB0*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F3R1_Fields

func FB1*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F3R1_Fields

func FB2*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F3R1_Fields

func FB3*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F3R1_Fields

func FB4*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F3R1_Fields

func FB5*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F3R1_Fields

func FB6*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F3R1_Fields

func FB7*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F3R1_Fields

func FB8*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F3R1_Fields

func FB9*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F3R1_Fields

func FB10*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F3R1_Fields

func FB11*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F3R1_Fields

func FB12*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F3R1_Fields

func FB13*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F3R1_Fields

func FB14*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F3R1_Fields

func FB15*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F3R1_Fields

func FB16*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F3R1_Fields

func FB17*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F3R1_Fields

func FB18*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F3R1_Fields

func FB19*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F3R1_Fields

func FB20*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F3R1_Fields

func FB21*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F3R1_Fields

func FB22*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F3R1_Fields

func FB23*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F3R1_Fields

func FB24*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F3R1_Fields

func FB25*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F3R1_Fields

func FB26*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F3R1_Fields

func FB27*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F3R1_Fields

func FB28*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F3R1_Fields

func FB29*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F3R1_Fields

func FB30*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F3R1_Fields

func FB31*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F3R1_Fields

func FB0*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F3R2_Fields

func FB1*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F3R2_Fields

func FB2*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F3R2_Fields

func FB3*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F3R2_Fields

func FB4*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F3R2_Fields

func FB5*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F3R2_Fields

func FB6*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F3R2_Fields

func FB7*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F3R2_Fields

func FB8*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F3R2_Fields

func FB9*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F3R2_Fields

func FB10*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F3R2_Fields

func FB11*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F3R2_Fields

func FB12*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F3R2_Fields

func FB13*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F3R2_Fields

func FB14*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F3R2_Fields

func FB15*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F3R2_Fields

func FB16*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F3R2_Fields

func FB17*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F3R2_Fields

func FB18*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F3R2_Fields

func FB19*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F3R2_Fields

func FB20*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F3R2_Fields

func FB21*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F3R2_Fields

func FB22*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F3R2_Fields

func FB23*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F3R2_Fields

func FB24*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F3R2_Fields

func FB25*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F3R2_Fields

func FB26*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F3R2_Fields

func FB27*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F3R2_Fields

func FB28*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F3R2_Fields

func FB29*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F3R2_Fields

func FB30*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F3R2_Fields

func FB31*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F3R2_Fields

func FB0*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F4R1_Fields

func FB1*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F4R1_Fields

func FB2*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F4R1_Fields

func FB3*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F4R1_Fields

func FB4*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F4R1_Fields

func FB5*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F4R1_Fields

func FB6*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F4R1_Fields

func FB7*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F4R1_Fields

func FB8*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F4R1_Fields

func FB9*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F4R1_Fields

func FB10*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F4R1_Fields

func FB11*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F4R1_Fields

func FB12*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F4R1_Fields

func FB13*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F4R1_Fields

func FB14*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F4R1_Fields

func FB15*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F4R1_Fields

func FB16*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F4R1_Fields

func FB17*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F4R1_Fields

func FB18*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F4R1_Fields

func FB19*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F4R1_Fields

func FB20*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F4R1_Fields

func FB21*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F4R1_Fields

func FB22*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F4R1_Fields

func FB23*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F4R1_Fields

func FB24*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F4R1_Fields

func FB25*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F4R1_Fields

func FB26*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F4R1_Fields

func FB27*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F4R1_Fields

func FB28*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F4R1_Fields

func FB29*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F4R1_Fields

func FB30*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F4R1_Fields

func FB31*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F4R1_Fields

func FB0*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F4R2_Fields

func FB1*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F4R2_Fields

func FB2*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F4R2_Fields

func FB3*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F4R2_Fields

func FB4*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F4R2_Fields

func FB5*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F4R2_Fields

func FB6*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F4R2_Fields

func FB7*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F4R2_Fields

func FB8*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F4R2_Fields

func FB9*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F4R2_Fields

func FB10*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F4R2_Fields

func FB11*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F4R2_Fields

func FB12*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F4R2_Fields

func FB13*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F4R2_Fields

func FB14*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F4R2_Fields

func FB15*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F4R2_Fields

func FB16*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F4R2_Fields

func FB17*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F4R2_Fields

func FB18*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F4R2_Fields

func FB19*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F4R2_Fields

func FB20*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F4R2_Fields

func FB21*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F4R2_Fields

func FB22*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F4R2_Fields

func FB23*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F4R2_Fields

func FB24*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F4R2_Fields

func FB25*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F4R2_Fields

func FB26*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F4R2_Fields

func FB27*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F4R2_Fields

func FB28*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F4R2_Fields

func FB29*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F4R2_Fields

func FB30*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F4R2_Fields

func FB31*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F4R2_Fields

func FB0*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F5R1_Fields

func FB1*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F5R1_Fields

func FB2*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F5R1_Fields

func FB3*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F5R1_Fields

func FB4*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F5R1_Fields

func FB5*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F5R1_Fields

func FB6*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F5R1_Fields

func FB7*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F5R1_Fields

func FB8*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F5R1_Fields

func FB9*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F5R1_Fields

func FB10*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F5R1_Fields

func FB11*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F5R1_Fields

func FB12*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F5R1_Fields

func FB13*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F5R1_Fields

func FB14*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F5R1_Fields

func FB15*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F5R1_Fields

func FB16*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F5R1_Fields

func FB17*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F5R1_Fields

func FB18*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F5R1_Fields

func FB19*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F5R1_Fields

func FB20*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F5R1_Fields

func FB21*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F5R1_Fields

func FB22*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F5R1_Fields

func FB23*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F5R1_Fields

func FB24*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F5R1_Fields

func FB25*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F5R1_Fields

func FB26*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F5R1_Fields

func FB27*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F5R1_Fields

func FB28*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F5R1_Fields

func FB29*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F5R1_Fields

func FB30*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F5R1_Fields

func FB31*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F5R1_Fields

func FB0*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F5R2_Fields

func FB1*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F5R2_Fields

func FB2*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F5R2_Fields

func FB3*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F5R2_Fields

func FB4*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F5R2_Fields

func FB5*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F5R2_Fields

func FB6*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F5R2_Fields

func FB7*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F5R2_Fields

func FB8*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F5R2_Fields

func FB9*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F5R2_Fields

func FB10*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F5R2_Fields

func FB11*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F5R2_Fields

func FB12*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F5R2_Fields

func FB13*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F5R2_Fields

func FB14*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F5R2_Fields

func FB15*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F5R2_Fields

func FB16*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F5R2_Fields

func FB17*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F5R2_Fields

func FB18*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F5R2_Fields

func FB19*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F5R2_Fields

func FB20*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F5R2_Fields

func FB21*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F5R2_Fields

func FB22*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F5R2_Fields

func FB23*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F5R2_Fields

func FB24*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F5R2_Fields

func FB25*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F5R2_Fields

func FB26*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F5R2_Fields

func FB27*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F5R2_Fields

func FB28*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F5R2_Fields

func FB29*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F5R2_Fields

func FB30*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F5R2_Fields

func FB31*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F5R2_Fields

func FB0*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F6R1_Fields

func FB1*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F6R1_Fields

func FB2*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F6R1_Fields

func FB3*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F6R1_Fields

func FB4*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F6R1_Fields

func FB5*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F6R1_Fields

func FB6*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F6R1_Fields

func FB7*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F6R1_Fields

func FB8*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F6R1_Fields

func FB9*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F6R1_Fields

func FB10*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F6R1_Fields

func FB11*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F6R1_Fields

func FB12*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F6R1_Fields

func FB13*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F6R1_Fields

func FB14*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F6R1_Fields

func FB15*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F6R1_Fields

func FB16*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F6R1_Fields

func FB17*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F6R1_Fields

func FB18*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F6R1_Fields

func FB19*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F6R1_Fields

func FB20*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F6R1_Fields

func FB21*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F6R1_Fields

func FB22*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F6R1_Fields

func FB23*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F6R1_Fields

func FB24*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F6R1_Fields

func FB25*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F6R1_Fields

func FB26*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F6R1_Fields

func FB27*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F6R1_Fields

func FB28*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F6R1_Fields

func FB29*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F6R1_Fields

func FB30*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F6R1_Fields

func FB31*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F6R1_Fields

func FB0*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F6R2_Fields

func FB1*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F6R2_Fields

func FB2*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F6R2_Fields

func FB3*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F6R2_Fields

func FB4*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F6R2_Fields

func FB5*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F6R2_Fields

func FB6*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F6R2_Fields

func FB7*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F6R2_Fields

func FB8*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F6R2_Fields

func FB9*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F6R2_Fields

func FB10*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F6R2_Fields

func FB11*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F6R2_Fields

func FB12*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F6R2_Fields

func FB13*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F6R2_Fields

func FB14*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F6R2_Fields

func FB15*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F6R2_Fields

func FB16*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F6R2_Fields

func FB17*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F6R2_Fields

func FB18*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F6R2_Fields

func FB19*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F6R2_Fields

func FB20*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F6R2_Fields

func FB21*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F6R2_Fields

func FB22*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F6R2_Fields

func FB23*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F6R2_Fields

func FB24*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F6R2_Fields

func FB25*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F6R2_Fields

func FB26*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F6R2_Fields

func FB27*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F6R2_Fields

func FB28*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F6R2_Fields

func FB29*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F6R2_Fields

func FB30*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F6R2_Fields

func FB31*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F6R2_Fields

func FB0*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F7R1_Fields

func FB1*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F7R1_Fields

func FB2*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F7R1_Fields

func FB3*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F7R1_Fields

func FB4*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F7R1_Fields

func FB5*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F7R1_Fields

func FB6*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F7R1_Fields

func FB7*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F7R1_Fields

func FB8*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F7R1_Fields

func FB9*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F7R1_Fields

func FB10*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F7R1_Fields

func FB11*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F7R1_Fields

func FB12*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F7R1_Fields

func FB13*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F7R1_Fields

func FB14*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F7R1_Fields

func FB15*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F7R1_Fields

func FB16*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F7R1_Fields

func FB17*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F7R1_Fields

func FB18*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F7R1_Fields

func FB19*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F7R1_Fields

func FB20*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F7R1_Fields

func FB21*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F7R1_Fields

func FB22*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F7R1_Fields

func FB23*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F7R1_Fields

func FB24*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F7R1_Fields

func FB25*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F7R1_Fields

func FB26*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F7R1_Fields

func FB27*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F7R1_Fields

func FB28*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F7R1_Fields

func FB29*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F7R1_Fields

func FB30*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F7R1_Fields

func FB31*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F7R1_Fields

func FB0*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F7R2_Fields

func FB1*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F7R2_Fields

func FB2*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F7R2_Fields

func FB3*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F7R2_Fields

func FB4*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F7R2_Fields

func FB5*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F7R2_Fields

func FB6*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F7R2_Fields

func FB7*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F7R2_Fields

func FB8*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F7R2_Fields

func FB9*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F7R2_Fields

func FB10*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F7R2_Fields

func FB11*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F7R2_Fields

func FB12*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F7R2_Fields

func FB13*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F7R2_Fields

func FB14*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F7R2_Fields

func FB15*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F7R2_Fields

func FB16*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F7R2_Fields

func FB17*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F7R2_Fields

func FB18*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F7R2_Fields

func FB19*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F7R2_Fields

func FB20*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F7R2_Fields

func FB21*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F7R2_Fields

func FB22*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F7R2_Fields

func FB23*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F7R2_Fields

func FB24*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F7R2_Fields

func FB25*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F7R2_Fields

func FB26*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F7R2_Fields

func FB27*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F7R2_Fields

func FB28*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F7R2_Fields

func FB29*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F7R2_Fields

func FB30*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F7R2_Fields

func FB31*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F7R2_Fields

func FB0*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F8R1_Fields

func FB1*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F8R1_Fields

func FB2*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F8R1_Fields

func FB3*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F8R1_Fields

func FB4*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F8R1_Fields

func FB5*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F8R1_Fields

func FB6*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F8R1_Fields

func FB7*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F8R1_Fields

func FB8*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F8R1_Fields

func FB9*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F8R1_Fields

func FB10*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F8R1_Fields

func FB11*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F8R1_Fields

func FB12*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F8R1_Fields

func FB13*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F8R1_Fields

func FB14*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F8R1_Fields

func FB15*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F8R1_Fields

func FB16*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F8R1_Fields

func FB17*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F8R1_Fields

func FB18*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F8R1_Fields

func FB19*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F8R1_Fields

func FB20*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F8R1_Fields

func FB21*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F8R1_Fields

func FB22*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F8R1_Fields

func FB23*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F8R1_Fields

func FB24*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F8R1_Fields

func FB25*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F8R1_Fields

func FB26*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F8R1_Fields

func FB27*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F8R1_Fields

func FB28*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F8R1_Fields

func FB29*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F8R1_Fields

func FB30*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F8R1_Fields

func FB31*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F8R1_Fields

func FB0*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F8R2_Fields

func FB1*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F8R2_Fields

func FB2*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F8R2_Fields

func FB3*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F8R2_Fields

func FB4*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F8R2_Fields

func FB5*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F8R2_Fields

func FB6*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F8R2_Fields

func FB7*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F8R2_Fields

func FB8*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F8R2_Fields

func FB9*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F8R2_Fields

func FB10*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F8R2_Fields

func FB11*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F8R2_Fields

func FB12*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F8R2_Fields

func FB13*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F8R2_Fields

func FB14*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F8R2_Fields

func FB15*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F8R2_Fields

func FB16*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F8R2_Fields

func FB17*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F8R2_Fields

func FB18*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F8R2_Fields

func FB19*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F8R2_Fields

func FB20*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F8R2_Fields

func FB21*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F8R2_Fields

func FB22*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F8R2_Fields

func FB23*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F8R2_Fields

func FB24*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F8R2_Fields

func FB25*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F8R2_Fields

func FB26*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F8R2_Fields

func FB27*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F8R2_Fields

func FB28*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F8R2_Fields

func FB29*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F8R2_Fields

func FB30*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F8R2_Fields

func FB31*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F8R2_Fields

func FB0*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F9R1_Fields

func FB1*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F9R1_Fields

func FB2*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F9R1_Fields

func FB3*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F9R1_Fields

func FB4*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F9R1_Fields

func FB5*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F9R1_Fields

func FB6*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F9R1_Fields

func FB7*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F9R1_Fields

func FB8*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F9R1_Fields

func FB9*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F9R1_Fields

func FB10*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F9R1_Fields

func FB11*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F9R1_Fields

func FB12*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F9R1_Fields

func FB13*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F9R1_Fields

func FB14*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F9R1_Fields

func FB15*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F9R1_Fields

func FB16*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F9R1_Fields

func FB17*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F9R1_Fields

func FB18*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F9R1_Fields

func FB19*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F9R1_Fields

func FB20*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F9R1_Fields

func FB21*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F9R1_Fields

func FB22*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F9R1_Fields

func FB23*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F9R1_Fields

func FB24*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F9R1_Fields

func FB25*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F9R1_Fields

func FB26*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F9R1_Fields

func FB27*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F9R1_Fields

func FB28*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F9R1_Fields

func FB29*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F9R1_Fields

func FB30*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F9R1_Fields

func FB31*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F9R1_Fields

func FB0*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F9R2_Fields

func FB1*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F9R2_Fields

func FB2*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F9R2_Fields

func FB3*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F9R2_Fields

func FB4*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F9R2_Fields

func FB5*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F9R2_Fields

func FB6*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F9R2_Fields

func FB7*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F9R2_Fields

func FB8*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F9R2_Fields

func FB9*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F9R2_Fields

func FB10*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F9R2_Fields

func FB11*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F9R2_Fields

func FB12*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F9R2_Fields

func FB13*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F9R2_Fields

func FB14*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F9R2_Fields

func FB15*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F9R2_Fields

func FB16*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F9R2_Fields

func FB17*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F9R2_Fields

func FB18*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F9R2_Fields

func FB19*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F9R2_Fields

func FB20*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F9R2_Fields

func FB21*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F9R2_Fields

func FB22*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F9R2_Fields

func FB23*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F9R2_Fields

func FB24*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F9R2_Fields

func FB25*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F9R2_Fields

func FB26*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F9R2_Fields

func FB27*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F9R2_Fields

func FB28*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F9R2_Fields

func FB29*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F9R2_Fields

func FB30*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F9R2_Fields

func FB31*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F9R2_Fields

func FB0*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F10R1_Fields

func FB1*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F10R1_Fields

func FB2*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F10R1_Fields

func FB3*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F10R1_Fields

func FB4*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F10R1_Fields

func FB5*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F10R1_Fields

func FB6*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F10R1_Fields

func FB7*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F10R1_Fields

func FB8*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F10R1_Fields

func FB9*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F10R1_Fields

func FB10*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F10R1_Fields

func FB11*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F10R1_Fields

func FB12*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F10R1_Fields

func FB13*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F10R1_Fields

func FB14*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F10R1_Fields

func FB15*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F10R1_Fields

func FB16*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F10R1_Fields

func FB17*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F10R1_Fields

func FB18*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F10R1_Fields

func FB19*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F10R1_Fields

func FB20*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F10R1_Fields

func FB21*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F10R1_Fields

func FB22*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F10R1_Fields

func FB23*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F10R1_Fields

func FB24*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F10R1_Fields

func FB25*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F10R1_Fields

func FB26*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F10R1_Fields

func FB27*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F10R1_Fields

func FB28*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F10R1_Fields

func FB29*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F10R1_Fields

func FB30*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F10R1_Fields

func FB31*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F10R1_Fields

func FB0*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F10R2_Fields

func FB1*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F10R2_Fields

func FB2*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F10R2_Fields

func FB3*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F10R2_Fields

func FB4*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F10R2_Fields

func FB5*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F10R2_Fields

func FB6*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F10R2_Fields

func FB7*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F10R2_Fields

func FB8*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F10R2_Fields

func FB9*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F10R2_Fields

func FB10*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F10R2_Fields

func FB11*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F10R2_Fields

func FB12*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F10R2_Fields

func FB13*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F10R2_Fields

func FB14*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F10R2_Fields

func FB15*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F10R2_Fields

func FB16*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F10R2_Fields

func FB17*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F10R2_Fields

func FB18*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F10R2_Fields

func FB19*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F10R2_Fields

func FB20*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F10R2_Fields

func FB21*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F10R2_Fields

func FB22*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F10R2_Fields

func FB23*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F10R2_Fields

func FB24*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F10R2_Fields

func FB25*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F10R2_Fields

func FB26*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F10R2_Fields

func FB27*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F10R2_Fields

func FB28*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F10R2_Fields

func FB29*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F10R2_Fields

func FB30*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F10R2_Fields

func FB31*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F10R2_Fields

func FB0*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F11R1_Fields

func FB1*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F11R1_Fields

func FB2*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F11R1_Fields

func FB3*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F11R1_Fields

func FB4*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F11R1_Fields

func FB5*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F11R1_Fields

func FB6*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F11R1_Fields

func FB7*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F11R1_Fields

func FB8*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F11R1_Fields

func FB9*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F11R1_Fields

func FB10*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F11R1_Fields

func FB11*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F11R1_Fields

func FB12*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F11R1_Fields

func FB13*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F11R1_Fields

func FB14*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F11R1_Fields

func FB15*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F11R1_Fields

func FB16*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F11R1_Fields

func FB17*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F11R1_Fields

func FB18*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F11R1_Fields

func FB19*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F11R1_Fields

func FB20*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F11R1_Fields

func FB21*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F11R1_Fields

func FB22*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F11R1_Fields

func FB23*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F11R1_Fields

func FB24*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F11R1_Fields

func FB25*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F11R1_Fields

func FB26*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F11R1_Fields

func FB27*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F11R1_Fields

func FB28*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F11R1_Fields

func FB29*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F11R1_Fields

func FB30*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F11R1_Fields

func FB31*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F11R1_Fields

func FB0*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F11R2_Fields

func FB1*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F11R2_Fields

func FB2*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F11R2_Fields

func FB3*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F11R2_Fields

func FB4*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F11R2_Fields

func FB5*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F11R2_Fields

func FB6*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F11R2_Fields

func FB7*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F11R2_Fields

func FB8*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F11R2_Fields

func FB9*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F11R2_Fields

func FB10*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F11R2_Fields

func FB11*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F11R2_Fields

func FB12*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F11R2_Fields

func FB13*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F11R2_Fields

func FB14*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F11R2_Fields

func FB15*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F11R2_Fields

func FB16*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F11R2_Fields

func FB17*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F11R2_Fields

func FB18*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F11R2_Fields

func FB19*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F11R2_Fields

func FB20*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F11R2_Fields

func FB21*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F11R2_Fields

func FB22*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F11R2_Fields

func FB23*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F11R2_Fields

func FB24*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F11R2_Fields

func FB25*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F11R2_Fields

func FB26*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F11R2_Fields

func FB27*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F11R2_Fields

func FB28*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F11R2_Fields

func FB29*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F11R2_Fields

func FB30*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F11R2_Fields

func FB31*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F11R2_Fields

func FB0*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F12R1_Fields

func FB1*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F12R1_Fields

func FB2*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F12R1_Fields

func FB3*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F12R1_Fields

func FB4*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F12R1_Fields

func FB5*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F12R1_Fields

func FB6*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F12R1_Fields

func FB7*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F12R1_Fields

func FB8*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F12R1_Fields

func FB9*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F12R1_Fields

func FB10*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F12R1_Fields

func FB11*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F12R1_Fields

func FB12*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F12R1_Fields

func FB13*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F12R1_Fields

func FB14*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F12R1_Fields

func FB15*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F12R1_Fields

func FB16*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F12R1_Fields

func FB17*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F12R1_Fields

func FB18*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F12R1_Fields

func FB19*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F12R1_Fields

func FB20*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F12R1_Fields

func FB21*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F12R1_Fields

func FB22*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F12R1_Fields

func FB23*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F12R1_Fields

func FB24*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F12R1_Fields

func FB25*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F12R1_Fields

func FB26*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F12R1_Fields

func FB27*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F12R1_Fields

func FB28*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F12R1_Fields

func FB29*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F12R1_Fields

func FB30*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F12R1_Fields

func FB31*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F12R1_Fields

func FB0*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F12R2_Fields

func FB1*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F12R2_Fields

func FB2*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F12R2_Fields

func FB3*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F12R2_Fields

func FB4*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F12R2_Fields

func FB5*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F12R2_Fields

func FB6*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F12R2_Fields

func FB7*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F12R2_Fields

func FB8*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F12R2_Fields

func FB9*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F12R2_Fields

func FB10*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F12R2_Fields

func FB11*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F12R2_Fields

func FB12*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F12R2_Fields

func FB13*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F12R2_Fields

func FB14*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F12R2_Fields

func FB15*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F12R2_Fields

func FB16*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F12R2_Fields

func FB17*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F12R2_Fields

func FB18*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F12R2_Fields

func FB19*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F12R2_Fields

func FB20*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F12R2_Fields

func FB21*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F12R2_Fields

func FB22*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F12R2_Fields

func FB23*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F12R2_Fields

func FB24*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F12R2_Fields

func FB25*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F12R2_Fields

func FB26*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F12R2_Fields

func FB27*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F12R2_Fields

func FB28*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F12R2_Fields

func FB29*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F12R2_Fields

func FB30*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F12R2_Fields

func FB31*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F12R2_Fields

func FB0*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F13R1_Fields

func FB1*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F13R1_Fields

func FB2*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F13R1_Fields

func FB3*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F13R1_Fields

func FB4*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F13R1_Fields

func FB5*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F13R1_Fields

func FB6*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F13R1_Fields

func FB7*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F13R1_Fields

func FB8*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F13R1_Fields

func FB9*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F13R1_Fields

func FB10*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F13R1_Fields

func FB11*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F13R1_Fields

func FB12*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F13R1_Fields

func FB13*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F13R1_Fields

func FB14*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F13R1_Fields

func FB15*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F13R1_Fields

func FB16*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F13R1_Fields

func FB17*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F13R1_Fields

func FB18*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F13R1_Fields

func FB19*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F13R1_Fields

func FB20*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F13R1_Fields

func FB21*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F13R1_Fields

func FB22*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F13R1_Fields

func FB23*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F13R1_Fields

func FB24*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F13R1_Fields

func FB25*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F13R1_Fields

func FB26*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F13R1_Fields

func FB27*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F13R1_Fields

func FB28*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F13R1_Fields

func FB29*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F13R1_Fields

func FB30*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F13R1_Fields

func FB31*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F13R1_Fields

func FB0*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F13R2_Fields

func FB1*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F13R2_Fields

func FB2*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F13R2_Fields

func FB3*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F13R2_Fields

func FB4*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F13R2_Fields

func FB5*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F13R2_Fields

func FB6*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F13R2_Fields

func FB7*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F13R2_Fields

func FB8*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F13R2_Fields

func FB9*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F13R2_Fields

func FB10*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F13R2_Fields

func FB11*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F13R2_Fields

func FB12*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F13R2_Fields

func FB13*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F13R2_Fields

func FB14*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F13R2_Fields

func FB15*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F13R2_Fields

func FB16*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F13R2_Fields

func FB17*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F13R2_Fields

func FB18*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F13R2_Fields

func FB19*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F13R2_Fields

func FB20*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F13R2_Fields

func FB21*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F13R2_Fields

func FB22*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F13R2_Fields

func FB23*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F13R2_Fields

func FB24*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F13R2_Fields

func FB25*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F13R2_Fields

func FB26*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F13R2_Fields

func FB27*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F13R2_Fields

func FB28*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F13R2_Fields

func FB29*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F13R2_Fields

func FB30*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F13R2_Fields

func FB31*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F13R2_Fields

func FB0*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F14R1_Fields

func FB1*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F14R1_Fields

func FB2*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F14R1_Fields

func FB3*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F14R1_Fields

func FB4*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F14R1_Fields

func FB5*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F14R1_Fields

func FB6*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F14R1_Fields

func FB7*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F14R1_Fields

func FB8*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F14R1_Fields

func FB9*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F14R1_Fields

func FB10*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F14R1_Fields

func FB11*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F14R1_Fields

func FB12*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F14R1_Fields

func FB13*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F14R1_Fields

func FB14*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F14R1_Fields

func FB15*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F14R1_Fields

func FB16*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F14R1_Fields

func FB17*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F14R1_Fields

func FB18*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F14R1_Fields

func FB19*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F14R1_Fields

func FB20*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F14R1_Fields

func FB21*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F14R1_Fields

func FB22*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F14R1_Fields

func FB23*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F14R1_Fields

func FB24*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F14R1_Fields

func FB25*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F14R1_Fields

func FB26*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F14R1_Fields

func FB27*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F14R1_Fields

func FB28*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F14R1_Fields

func FB29*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F14R1_Fields

func FB30*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F14R1_Fields

func FB31*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F14R1_Fields

func FB0*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F14R2_Fields

func FB1*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F14R2_Fields

func FB2*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F14R2_Fields

func FB3*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F14R2_Fields

func FB4*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F14R2_Fields

func FB5*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F14R2_Fields

func FB6*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F14R2_Fields

func FB7*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F14R2_Fields

func FB8*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F14R2_Fields

func FB9*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F14R2_Fields

func FB10*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F14R2_Fields

func FB11*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F14R2_Fields

func FB12*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F14R2_Fields

func FB13*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F14R2_Fields

func FB14*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F14R2_Fields

func FB15*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F14R2_Fields

func FB16*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F14R2_Fields

func FB17*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F14R2_Fields

func FB18*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F14R2_Fields

func FB19*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F14R2_Fields

func FB20*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F14R2_Fields

func FB21*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F14R2_Fields

func FB22*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F14R2_Fields

func FB23*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F14R2_Fields

func FB24*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F14R2_Fields

func FB25*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F14R2_Fields

func FB26*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F14R2_Fields

func FB27*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F14R2_Fields

func FB28*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F14R2_Fields

func FB29*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F14R2_Fields

func FB30*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F14R2_Fields

func FB31*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F14R2_Fields

func FB0*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F15R1_Fields

func FB1*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F15R1_Fields

func FB2*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F15R1_Fields

func FB3*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F15R1_Fields

func FB4*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F15R1_Fields

func FB5*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F15R1_Fields

func FB6*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F15R1_Fields

func FB7*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F15R1_Fields

func FB8*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F15R1_Fields

func FB9*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F15R1_Fields

func FB10*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F15R1_Fields

func FB11*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F15R1_Fields

func FB12*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F15R1_Fields

func FB13*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F15R1_Fields

func FB14*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F15R1_Fields

func FB15*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F15R1_Fields

func FB16*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F15R1_Fields

func FB17*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F15R1_Fields

func FB18*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F15R1_Fields

func FB19*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F15R1_Fields

func FB20*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F15R1_Fields

func FB21*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F15R1_Fields

func FB22*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F15R1_Fields

func FB23*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F15R1_Fields

func FB24*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F15R1_Fields

func FB25*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F15R1_Fields

func FB26*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F15R1_Fields

func FB27*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F15R1_Fields

func FB28*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F15R1_Fields

func FB29*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F15R1_Fields

func FB30*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F15R1_Fields

func FB31*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F15R1_Fields

func FB0*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F15R2_Fields

func FB1*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F15R2_Fields

func FB2*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F15R2_Fields

func FB3*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F15R2_Fields

func FB4*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F15R2_Fields

func FB5*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F15R2_Fields

func FB6*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F15R2_Fields

func FB7*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F15R2_Fields

func FB8*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F15R2_Fields

func FB9*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F15R2_Fields

func FB10*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F15R2_Fields

func FB11*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F15R2_Fields

func FB12*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F15R2_Fields

func FB13*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F15R2_Fields

func FB14*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F15R2_Fields

func FB15*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F15R2_Fields

func FB16*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F15R2_Fields

func FB17*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F15R2_Fields

func FB18*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F15R2_Fields

func FB19*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F15R2_Fields

func FB20*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F15R2_Fields

func FB21*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F15R2_Fields

func FB22*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F15R2_Fields

func FB23*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F15R2_Fields

func FB24*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F15R2_Fields

func FB25*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F15R2_Fields

func FB26*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F15R2_Fields

func FB27*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F15R2_Fields

func FB28*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F15R2_Fields

func FB29*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F15R2_Fields

func FB30*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F15R2_Fields

func FB31*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F15R2_Fields

func FB0*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F16R1_Fields

func FB1*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F16R1_Fields

func FB2*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F16R1_Fields

func FB3*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F16R1_Fields

func FB4*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F16R1_Fields

func FB5*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F16R1_Fields

func FB6*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F16R1_Fields

func FB7*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F16R1_Fields

func FB8*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F16R1_Fields

func FB9*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F16R1_Fields

func FB10*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F16R1_Fields

func FB11*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F16R1_Fields

func FB12*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F16R1_Fields

func FB13*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F16R1_Fields

func FB14*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F16R1_Fields

func FB15*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F16R1_Fields

func FB16*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F16R1_Fields

func FB17*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F16R1_Fields

func FB18*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F16R1_Fields

func FB19*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F16R1_Fields

func FB20*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F16R1_Fields

func FB21*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F16R1_Fields

func FB22*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F16R1_Fields

func FB23*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F16R1_Fields

func FB24*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F16R1_Fields

func FB25*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F16R1_Fields

func FB26*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F16R1_Fields

func FB27*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F16R1_Fields

func FB28*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F16R1_Fields

func FB29*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F16R1_Fields

func FB30*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F16R1_Fields

func FB31*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F16R1_Fields

func FB0*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F16R2_Fields

func FB1*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F16R2_Fields

func FB2*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F16R2_Fields

func FB3*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F16R2_Fields

func FB4*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F16R2_Fields

func FB5*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F16R2_Fields

func FB6*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F16R2_Fields

func FB7*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F16R2_Fields

func FB8*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F16R2_Fields

func FB9*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F16R2_Fields

func FB10*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F16R2_Fields

func FB11*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F16R2_Fields

func FB12*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F16R2_Fields

func FB13*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F16R2_Fields

func FB14*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F16R2_Fields

func FB15*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F16R2_Fields

func FB16*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F16R2_Fields

func FB17*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F16R2_Fields

func FB18*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F16R2_Fields

func FB19*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F16R2_Fields

func FB20*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F16R2_Fields

func FB21*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F16R2_Fields

func FB22*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F16R2_Fields

func FB23*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F16R2_Fields

func FB24*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F16R2_Fields

func FB25*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F16R2_Fields

func FB26*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F16R2_Fields

func FB27*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F16R2_Fields

func FB28*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F16R2_Fields

func FB29*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F16R2_Fields

func FB30*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F16R2_Fields

func FB31*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F16R2_Fields

func FB0*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F17R1_Fields

func FB1*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F17R1_Fields

func FB2*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F17R1_Fields

func FB3*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F17R1_Fields

func FB4*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F17R1_Fields

func FB5*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F17R1_Fields

func FB6*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F17R1_Fields

func FB7*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F17R1_Fields

func FB8*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F17R1_Fields

func FB9*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F17R1_Fields

func FB10*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F17R1_Fields

func FB11*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F17R1_Fields

func FB12*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F17R1_Fields

func FB13*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F17R1_Fields

func FB14*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F17R1_Fields

func FB15*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F17R1_Fields

func FB16*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F17R1_Fields

func FB17*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F17R1_Fields

func FB18*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F17R1_Fields

func FB19*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F17R1_Fields

func FB20*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F17R1_Fields

func FB21*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F17R1_Fields

func FB22*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F17R1_Fields

func FB23*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F17R1_Fields

func FB24*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F17R1_Fields

func FB25*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F17R1_Fields

func FB26*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F17R1_Fields

func FB27*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F17R1_Fields

func FB28*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F17R1_Fields

func FB29*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F17R1_Fields

func FB30*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F17R1_Fields

func FB31*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F17R1_Fields

func FB0*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F17R2_Fields

func FB1*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F17R2_Fields

func FB2*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F17R2_Fields

func FB3*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F17R2_Fields

func FB4*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F17R2_Fields

func FB5*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F17R2_Fields

func FB6*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F17R2_Fields

func FB7*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F17R2_Fields

func FB8*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F17R2_Fields

func FB9*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F17R2_Fields

func FB10*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F17R2_Fields

func FB11*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F17R2_Fields

func FB12*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F17R2_Fields

func FB13*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F17R2_Fields

func FB14*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F17R2_Fields

func FB15*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F17R2_Fields

func FB16*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F17R2_Fields

func FB17*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F17R2_Fields

func FB18*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F17R2_Fields

func FB19*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F17R2_Fields

func FB20*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F17R2_Fields

func FB21*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F17R2_Fields

func FB22*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F17R2_Fields

func FB23*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F17R2_Fields

func FB24*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F17R2_Fields

func FB25*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F17R2_Fields

func FB26*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F17R2_Fields

func FB27*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F17R2_Fields

func FB28*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F17R2_Fields

func FB29*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F17R2_Fields

func FB30*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F17R2_Fields

func FB31*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F17R2_Fields

func FB0*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F18R1_Fields

func FB1*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F18R1_Fields

func FB2*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F18R1_Fields

func FB3*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F18R1_Fields

func FB4*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F18R1_Fields

func FB5*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F18R1_Fields

func FB6*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F18R1_Fields

func FB7*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F18R1_Fields

func FB8*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F18R1_Fields

func FB9*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F18R1_Fields

func FB10*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F18R1_Fields

func FB11*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F18R1_Fields

func FB12*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F18R1_Fields

func FB13*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F18R1_Fields

func FB14*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F18R1_Fields

func FB15*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F18R1_Fields

func FB16*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F18R1_Fields

func FB17*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F18R1_Fields

func FB18*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F18R1_Fields

func FB19*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F18R1_Fields

func FB20*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F18R1_Fields

func FB21*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F18R1_Fields

func FB22*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F18R1_Fields

func FB23*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F18R1_Fields

func FB24*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F18R1_Fields

func FB25*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F18R1_Fields

func FB26*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F18R1_Fields

func FB27*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F18R1_Fields

func FB28*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F18R1_Fields

func FB29*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F18R1_Fields

func FB30*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F18R1_Fields

func FB31*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F18R1_Fields

func FB0*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F18R2_Fields

func FB1*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F18R2_Fields

func FB2*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F18R2_Fields

func FB3*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F18R2_Fields

func FB4*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F18R2_Fields

func FB5*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F18R2_Fields

func FB6*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F18R2_Fields

func FB7*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F18R2_Fields

func FB8*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F18R2_Fields

func FB9*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F18R2_Fields

func FB10*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F18R2_Fields

func FB11*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F18R2_Fields

func FB12*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F18R2_Fields

func FB13*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F18R2_Fields

func FB14*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F18R2_Fields

func FB15*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F18R2_Fields

func FB16*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F18R2_Fields

func FB17*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F18R2_Fields

func FB18*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F18R2_Fields

func FB19*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F18R2_Fields

func FB20*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F18R2_Fields

func FB21*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F18R2_Fields

func FB22*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F18R2_Fields

func FB23*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F18R2_Fields

func FB24*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F18R2_Fields

func FB25*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F18R2_Fields

func FB26*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F18R2_Fields

func FB27*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F18R2_Fields

func FB28*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F18R2_Fields

func FB29*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F18R2_Fields

func FB30*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F18R2_Fields

func FB31*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F18R2_Fields

func FB0*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F19R1_Fields

func FB1*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F19R1_Fields

func FB2*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F19R1_Fields

func FB3*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F19R1_Fields

func FB4*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F19R1_Fields

func FB5*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F19R1_Fields

func FB6*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F19R1_Fields

func FB7*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F19R1_Fields

func FB8*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F19R1_Fields

func FB9*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F19R1_Fields

func FB10*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F19R1_Fields

func FB11*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F19R1_Fields

func FB12*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F19R1_Fields

func FB13*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F19R1_Fields

func FB14*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F19R1_Fields

func FB15*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F19R1_Fields

func FB16*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F19R1_Fields

func FB17*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F19R1_Fields

func FB18*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F19R1_Fields

func FB19*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F19R1_Fields

func FB20*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F19R1_Fields

func FB21*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F19R1_Fields

func FB22*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F19R1_Fields

func FB23*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F19R1_Fields

func FB24*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F19R1_Fields

func FB25*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F19R1_Fields

func FB26*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F19R1_Fields

func FB27*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F19R1_Fields

func FB28*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F19R1_Fields

func FB29*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F19R1_Fields

func FB30*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F19R1_Fields

func FB31*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F19R1_Fields

func FB0*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F19R2_Fields

func FB1*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F19R2_Fields

func FB2*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F19R2_Fields

func FB3*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F19R2_Fields

func FB4*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F19R2_Fields

func FB5*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F19R2_Fields

func FB6*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F19R2_Fields

func FB7*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F19R2_Fields

func FB8*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F19R2_Fields

func FB9*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F19R2_Fields

func FB10*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F19R2_Fields

func FB11*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F19R2_Fields

func FB12*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F19R2_Fields

func FB13*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F19R2_Fields

func FB14*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F19R2_Fields

func FB15*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F19R2_Fields

func FB16*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F19R2_Fields

func FB17*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F19R2_Fields

func FB18*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F19R2_Fields

func FB19*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F19R2_Fields

func FB20*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F19R2_Fields

func FB21*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F19R2_Fields

func FB22*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F19R2_Fields

func FB23*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F19R2_Fields

func FB24*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F19R2_Fields

func FB25*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F19R2_Fields

func FB26*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F19R2_Fields

func FB27*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F19R2_Fields

func FB28*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F19R2_Fields

func FB29*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F19R2_Fields

func FB30*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F19R2_Fields

func FB31*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F19R2_Fields

func FB0*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F20R1_Fields

func FB1*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F20R1_Fields

func FB2*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F20R1_Fields

func FB3*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F20R1_Fields

func FB4*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F20R1_Fields

func FB5*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F20R1_Fields

func FB6*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F20R1_Fields

func FB7*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F20R1_Fields

func FB8*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F20R1_Fields

func FB9*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F20R1_Fields

func FB10*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F20R1_Fields

func FB11*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F20R1_Fields

func FB12*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F20R1_Fields

func FB13*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F20R1_Fields

func FB14*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F20R1_Fields

func FB15*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F20R1_Fields

func FB16*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F20R1_Fields

func FB17*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F20R1_Fields

func FB18*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F20R1_Fields

func FB19*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F20R1_Fields

func FB20*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F20R1_Fields

func FB21*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F20R1_Fields

func FB22*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F20R1_Fields

func FB23*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F20R1_Fields

func FB24*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F20R1_Fields

func FB25*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F20R1_Fields

func FB26*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F20R1_Fields

func FB27*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F20R1_Fields

func FB28*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F20R1_Fields

func FB29*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F20R1_Fields

func FB30*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F20R1_Fields

func FB31*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F20R1_Fields

func FB0*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F20R2_Fields

func FB1*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F20R2_Fields

func FB2*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F20R2_Fields

func FB3*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F20R2_Fields

func FB4*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F20R2_Fields

func FB5*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F20R2_Fields

func FB6*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F20R2_Fields

func FB7*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F20R2_Fields

func FB8*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F20R2_Fields

func FB9*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F20R2_Fields

func FB10*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F20R2_Fields

func FB11*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F20R2_Fields

func FB12*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F20R2_Fields

func FB13*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F20R2_Fields

func FB14*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F20R2_Fields

func FB15*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F20R2_Fields

func FB16*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F20R2_Fields

func FB17*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F20R2_Fields

func FB18*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F20R2_Fields

func FB19*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F20R2_Fields

func FB20*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F20R2_Fields

func FB21*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F20R2_Fields

func FB22*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F20R2_Fields

func FB23*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F20R2_Fields

func FB24*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F20R2_Fields

func FB25*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F20R2_Fields

func FB26*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F20R2_Fields

func FB27*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F20R2_Fields

func FB28*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F20R2_Fields

func FB29*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F20R2_Fields

func FB30*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F20R2_Fields

func FB31*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F20R2_Fields

func FB0*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F21R1_Fields

func FB1*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F21R1_Fields

func FB2*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F21R1_Fields

func FB3*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F21R1_Fields

func FB4*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F21R1_Fields

func FB5*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F21R1_Fields

func FB6*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F21R1_Fields

func FB7*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F21R1_Fields

func FB8*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F21R1_Fields

func FB9*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F21R1_Fields

func FB10*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F21R1_Fields

func FB11*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F21R1_Fields

func FB12*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F21R1_Fields

func FB13*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F21R1_Fields

func FB14*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F21R1_Fields

func FB15*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F21R1_Fields

func FB16*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F21R1_Fields

func FB17*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F21R1_Fields

func FB18*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F21R1_Fields

func FB19*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F21R1_Fields

func FB20*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F21R1_Fields

func FB21*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F21R1_Fields

func FB22*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F21R1_Fields

func FB23*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F21R1_Fields

func FB24*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F21R1_Fields

func FB25*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F21R1_Fields

func FB26*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F21R1_Fields

func FB27*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F21R1_Fields

func FB28*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F21R1_Fields

func FB29*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F21R1_Fields

func FB30*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F21R1_Fields

func FB31*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F21R1_Fields

func FB0*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F21R2_Fields

func FB1*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F21R2_Fields

func FB2*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F21R2_Fields

func FB3*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F21R2_Fields

func FB4*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F21R2_Fields

func FB5*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F21R2_Fields

func FB6*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F21R2_Fields

func FB7*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F21R2_Fields

func FB8*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F21R2_Fields

func FB9*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F21R2_Fields

func FB10*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F21R2_Fields

func FB11*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F21R2_Fields

func FB12*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F21R2_Fields

func FB13*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F21R2_Fields

func FB14*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F21R2_Fields

func FB15*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F21R2_Fields

func FB16*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F21R2_Fields

func FB17*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F21R2_Fields

func FB18*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F21R2_Fields

func FB19*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F21R2_Fields

func FB20*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F21R2_Fields

func FB21*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F21R2_Fields

func FB22*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F21R2_Fields

func FB23*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F21R2_Fields

func FB24*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F21R2_Fields

func FB25*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F21R2_Fields

func FB26*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F21R2_Fields

func FB27*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F21R2_Fields

func FB28*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F21R2_Fields

func FB29*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F21R2_Fields

func FB30*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F21R2_Fields

func FB31*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F21R2_Fields

func FB0*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F22R1_Fields

func FB1*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F22R1_Fields

func FB2*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F22R1_Fields

func FB3*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F22R1_Fields

func FB4*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F22R1_Fields

func FB5*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F22R1_Fields

func FB6*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F22R1_Fields

func FB7*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F22R1_Fields

func FB8*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F22R1_Fields

func FB9*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F22R1_Fields

func FB10*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F22R1_Fields

func FB11*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F22R1_Fields

func FB12*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F22R1_Fields

func FB13*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F22R1_Fields

func FB14*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F22R1_Fields

func FB15*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F22R1_Fields

func FB16*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F22R1_Fields

func FB17*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F22R1_Fields

func FB18*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F22R1_Fields

func FB19*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F22R1_Fields

func FB20*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F22R1_Fields

func FB21*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F22R1_Fields

func FB22*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F22R1_Fields

func FB23*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F22R1_Fields

func FB24*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F22R1_Fields

func FB25*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F22R1_Fields

func FB26*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F22R1_Fields

func FB27*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F22R1_Fields

func FB28*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F22R1_Fields

func FB29*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F22R1_Fields

func FB30*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F22R1_Fields

func FB31*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F22R1_Fields

func FB0*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F22R2_Fields

func FB1*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F22R2_Fields

func FB2*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F22R2_Fields

func FB3*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F22R2_Fields

func FB4*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F22R2_Fields

func FB5*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F22R2_Fields

func FB6*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F22R2_Fields

func FB7*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F22R2_Fields

func FB8*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F22R2_Fields

func FB9*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F22R2_Fields

func FB10*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F22R2_Fields

func FB11*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F22R2_Fields

func FB12*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F22R2_Fields

func FB13*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F22R2_Fields

func FB14*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F22R2_Fields

func FB15*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F22R2_Fields

func FB16*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F22R2_Fields

func FB17*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F22R2_Fields

func FB18*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F22R2_Fields

func FB19*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F22R2_Fields

func FB20*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F22R2_Fields

func FB21*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F22R2_Fields

func FB22*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F22R2_Fields

func FB23*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F22R2_Fields

func FB24*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F22R2_Fields

func FB25*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F22R2_Fields

func FB26*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F22R2_Fields

func FB27*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F22R2_Fields

func FB28*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F22R2_Fields

func FB29*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F22R2_Fields

func FB30*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F22R2_Fields

func FB31*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F22R2_Fields

func FB0*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F23R1_Fields

func FB1*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F23R1_Fields

func FB2*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F23R1_Fields

func FB3*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F23R1_Fields

func FB4*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F23R1_Fields

func FB5*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F23R1_Fields

func FB6*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F23R1_Fields

func FB7*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F23R1_Fields

func FB8*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F23R1_Fields

func FB9*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F23R1_Fields

func FB10*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F23R1_Fields

func FB11*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F23R1_Fields

func FB12*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F23R1_Fields

func FB13*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F23R1_Fields

func FB14*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F23R1_Fields

func FB15*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F23R1_Fields

func FB16*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F23R1_Fields

func FB17*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F23R1_Fields

func FB18*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F23R1_Fields

func FB19*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F23R1_Fields

func FB20*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F23R1_Fields

func FB21*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F23R1_Fields

func FB22*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F23R1_Fields

func FB23*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F23R1_Fields

func FB24*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F23R1_Fields

func FB25*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F23R1_Fields

func FB26*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F23R1_Fields

func FB27*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F23R1_Fields

func FB28*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F23R1_Fields

func FB29*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F23R1_Fields

func FB30*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F23R1_Fields

func FB31*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F23R1_Fields

func FB0*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F23R2_Fields

func FB1*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F23R2_Fields

func FB2*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F23R2_Fields

func FB3*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F23R2_Fields

func FB4*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F23R2_Fields

func FB5*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F23R2_Fields

func FB6*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F23R2_Fields

func FB7*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F23R2_Fields

func FB8*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F23R2_Fields

func FB9*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F23R2_Fields

func FB10*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F23R2_Fields

func FB11*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F23R2_Fields

func FB12*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F23R2_Fields

func FB13*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F23R2_Fields

func FB14*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F23R2_Fields

func FB15*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F23R2_Fields

func FB16*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F23R2_Fields

func FB17*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F23R2_Fields

func FB18*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F23R2_Fields

func FB19*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F23R2_Fields

func FB20*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F23R2_Fields

func FB21*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F23R2_Fields

func FB22*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F23R2_Fields

func FB23*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F23R2_Fields

func FB24*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F23R2_Fields

func FB25*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F23R2_Fields

func FB26*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F23R2_Fields

func FB27*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F23R2_Fields

func FB28*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F23R2_Fields

func FB29*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F23R2_Fields

func FB30*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F23R2_Fields

func FB31*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F23R2_Fields

func FB0*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F24R1_Fields

func FB1*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F24R1_Fields

func FB2*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F24R1_Fields

func FB3*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F24R1_Fields

func FB4*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F24R1_Fields

func FB5*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F24R1_Fields

func FB6*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F24R1_Fields

func FB7*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F24R1_Fields

func FB8*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F24R1_Fields

func FB9*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F24R1_Fields

func FB10*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F24R1_Fields

func FB11*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F24R1_Fields

func FB12*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F24R1_Fields

func FB13*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F24R1_Fields

func FB14*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F24R1_Fields

func FB15*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F24R1_Fields

func FB16*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F24R1_Fields

func FB17*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F24R1_Fields

func FB18*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F24R1_Fields

func FB19*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F24R1_Fields

func FB20*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F24R1_Fields

func FB21*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F24R1_Fields

func FB22*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F24R1_Fields

func FB23*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F24R1_Fields

func FB24*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F24R1_Fields

func FB25*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F24R1_Fields

func FB26*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F24R1_Fields

func FB27*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F24R1_Fields

func FB28*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F24R1_Fields

func FB29*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F24R1_Fields

func FB30*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F24R1_Fields

func FB31*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F24R1_Fields

func FB0*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F24R2_Fields

func FB1*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F24R2_Fields

func FB2*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F24R2_Fields

func FB3*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F24R2_Fields

func FB4*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F24R2_Fields

func FB5*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F24R2_Fields

func FB6*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F24R2_Fields

func FB7*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F24R2_Fields

func FB8*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F24R2_Fields

func FB9*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F24R2_Fields

func FB10*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F24R2_Fields

func FB11*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F24R2_Fields

func FB12*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F24R2_Fields

func FB13*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F24R2_Fields

func FB14*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F24R2_Fields

func FB15*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F24R2_Fields

func FB16*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F24R2_Fields

func FB17*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F24R2_Fields

func FB18*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F24R2_Fields

func FB19*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F24R2_Fields

func FB20*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F24R2_Fields

func FB21*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F24R2_Fields

func FB22*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F24R2_Fields

func FB23*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F24R2_Fields

func FB24*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F24R2_Fields

func FB25*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F24R2_Fields

func FB26*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F24R2_Fields

func FB27*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F24R2_Fields

func FB28*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F24R2_Fields

func FB29*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F24R2_Fields

func FB30*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F24R2_Fields

func FB31*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F24R2_Fields

func FB0*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F25R1_Fields

func FB1*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F25R1_Fields

func FB2*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F25R1_Fields

func FB3*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F25R1_Fields

func FB4*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F25R1_Fields

func FB5*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F25R1_Fields

func FB6*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F25R1_Fields

func FB7*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F25R1_Fields

func FB8*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F25R1_Fields

func FB9*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F25R1_Fields

func FB10*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F25R1_Fields

func FB11*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F25R1_Fields

func FB12*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F25R1_Fields

func FB13*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F25R1_Fields

func FB14*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F25R1_Fields

func FB15*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F25R1_Fields

func FB16*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F25R1_Fields

func FB17*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F25R1_Fields

func FB18*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F25R1_Fields

func FB19*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F25R1_Fields

func FB20*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F25R1_Fields

func FB21*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F25R1_Fields

func FB22*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F25R1_Fields

func FB23*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F25R1_Fields

func FB24*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F25R1_Fields

func FB25*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F25R1_Fields

func FB26*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F25R1_Fields

func FB27*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F25R1_Fields

func FB28*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F25R1_Fields

func FB29*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F25R1_Fields

func FB30*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F25R1_Fields

func FB31*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F25R1_Fields

func FB0*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F25R2_Fields

func FB1*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F25R2_Fields

func FB2*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F25R2_Fields

func FB3*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F25R2_Fields

func FB4*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F25R2_Fields

func FB5*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F25R2_Fields

func FB6*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F25R2_Fields

func FB7*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F25R2_Fields

func FB8*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F25R2_Fields

func FB9*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F25R2_Fields

func FB10*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F25R2_Fields

func FB11*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F25R2_Fields

func FB12*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F25R2_Fields

func FB13*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F25R2_Fields

func FB14*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F25R2_Fields

func FB15*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F25R2_Fields

func FB16*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F25R2_Fields

func FB17*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F25R2_Fields

func FB18*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F25R2_Fields

func FB19*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F25R2_Fields

func FB20*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F25R2_Fields

func FB21*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F25R2_Fields

func FB22*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F25R2_Fields

func FB23*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F25R2_Fields

func FB24*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F25R2_Fields

func FB25*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F25R2_Fields

func FB26*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F25R2_Fields

func FB27*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F25R2_Fields

func FB28*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F25R2_Fields

func FB29*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F25R2_Fields

func FB30*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F25R2_Fields

func FB31*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F25R2_Fields

func FB0*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F26R1_Fields

func FB1*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F26R1_Fields

func FB2*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F26R1_Fields

func FB3*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F26R1_Fields

func FB4*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F26R1_Fields

func FB5*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F26R1_Fields

func FB6*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F26R1_Fields

func FB7*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F26R1_Fields

func FB8*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F26R1_Fields

func FB9*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F26R1_Fields

func FB10*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F26R1_Fields

func FB11*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F26R1_Fields

func FB12*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F26R1_Fields

func FB13*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F26R1_Fields

func FB14*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F26R1_Fields

func FB15*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F26R1_Fields

func FB16*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F26R1_Fields

func FB17*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F26R1_Fields

func FB18*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F26R1_Fields

func FB19*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F26R1_Fields

func FB20*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F26R1_Fields

func FB21*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F26R1_Fields

func FB22*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F26R1_Fields

func FB23*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F26R1_Fields

func FB24*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F26R1_Fields

func FB25*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F26R1_Fields

func FB26*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F26R1_Fields

func FB27*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F26R1_Fields

func FB28*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F26R1_Fields

func FB29*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F26R1_Fields

func FB30*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F26R1_Fields

func FB31*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F26R1_Fields

func FB0*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F26R2_Fields

func FB1*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F26R2_Fields

func FB2*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F26R2_Fields

func FB3*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F26R2_Fields

func FB4*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F26R2_Fields

func FB5*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F26R2_Fields

func FB6*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F26R2_Fields

func FB7*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F26R2_Fields

func FB8*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F26R2_Fields

func FB9*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F26R2_Fields

func FB10*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F26R2_Fields

func FB11*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F26R2_Fields

func FB12*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F26R2_Fields

func FB13*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F26R2_Fields

func FB14*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F26R2_Fields

func FB15*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F26R2_Fields

func FB16*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F26R2_Fields

func FB17*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F26R2_Fields

func FB18*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F26R2_Fields

func FB19*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F26R2_Fields

func FB20*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F26R2_Fields

func FB21*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F26R2_Fields

func FB22*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F26R2_Fields

func FB23*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F26R2_Fields

func FB24*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F26R2_Fields

func FB25*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F26R2_Fields

func FB26*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F26R2_Fields

func FB27*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F26R2_Fields

func FB28*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F26R2_Fields

func FB29*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F26R2_Fields

func FB30*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F26R2_Fields

func FB31*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F26R2_Fields

func FB0*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F27R1_Fields

func FB1*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F27R1_Fields

func FB2*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F27R1_Fields

func FB3*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F27R1_Fields

func FB4*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F27R1_Fields

func FB5*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F27R1_Fields

func FB6*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F27R1_Fields

func FB7*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F27R1_Fields

func FB8*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F27R1_Fields

func FB9*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F27R1_Fields

func FB10*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F27R1_Fields

func FB11*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F27R1_Fields

func FB12*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F27R1_Fields

func FB13*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F27R1_Fields

func FB14*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F27R1_Fields

func FB15*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F27R1_Fields

func FB16*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F27R1_Fields

func FB17*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F27R1_Fields

func FB18*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F27R1_Fields

func FB19*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F27R1_Fields

func FB20*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F27R1_Fields

func FB21*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F27R1_Fields

func FB22*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F27R1_Fields

func FB23*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F27R1_Fields

func FB24*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F27R1_Fields

func FB25*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F27R1_Fields

func FB26*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F27R1_Fields

func FB27*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F27R1_Fields

func FB28*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F27R1_Fields

func FB29*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F27R1_Fields

func FB30*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F27R1_Fields

func FB31*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F27R1_Fields

func FB0*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F27R2_Fields

func FB1*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F27R2_Fields

func FB2*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F27R2_Fields

func FB3*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F27R2_Fields

func FB4*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F27R2_Fields

func FB5*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F27R2_Fields

func FB6*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F27R2_Fields

func FB7*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F27R2_Fields

func FB8*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F27R2_Fields

func FB9*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F27R2_Fields

func FB10*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F27R2_Fields

func FB11*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F27R2_Fields

func FB12*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F27R2_Fields

func FB13*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F27R2_Fields

func FB14*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F27R2_Fields

func FB15*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F27R2_Fields

func FB16*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F27R2_Fields

func FB17*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F27R2_Fields

func FB18*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F27R2_Fields

func FB19*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F27R2_Fields

func FB20*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F27R2_Fields

func FB21*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F27R2_Fields

func FB22*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F27R2_Fields

func FB23*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F27R2_Fields

func FB24*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F27R2_Fields

func FB25*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F27R2_Fields

func FB26*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F27R2_Fields

func FB27*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F27R2_Fields

func FB28*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F27R2_Fields

func FB29*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F27R2_Fields

func FB30*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F27R2_Fields

func FB31*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F27R2_Fields

type
  ETHERNET_MAC_MACCR_Fields* = distinct uint32
  ETHERNET_MAC_MACFFR_Fields* = distinct uint32
  ETHERNET_MAC_MACMIIAR_Fields* = distinct uint32
  ETHERNET_MAC_MACMIIDR_Fields* = distinct uint32
  ETHERNET_MAC_MACFCR_Fields* = distinct uint32
  ETHERNET_MAC_MACVLANTR_Fields* = distinct uint32
  ETHERNET_MAC_MACPMTCSR_Fields* = distinct uint32
  ETHERNET_MAC_MACSR_Fields* = distinct uint32
  ETHERNET_MAC_MACIMR_Fields* = distinct uint32
  ETHERNET_MAC_MACA0HR_Fields* = distinct uint32
  ETHERNET_MAC_MACA1HR_Fields* = distinct uint32
  ETHERNET_MAC_MACA2HR_Fields* = distinct uint32
  ETHERNET_MAC_MACA2LR_Fields* = distinct uint32
  ETHERNET_MAC_MACA3HR_Fields* = distinct uint32

proc read*(reg: ETHERNET_MAC_MACCR_Type): ETHERNET_MAC_MACCR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MAC_MACCR_Fields](reg.loc))

proc read*(reg: static ETHERNET_MAC_MACCR_Type): ETHERNET_MAC_MACCR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MAC_MACCR_Fields](reg.loc))

proc write*(reg: ETHERNET_MAC_MACCR_Type, val: ETHERNET_MAC_MACCR_Fields) {.inline.} =
  volatileStore(cast[ptr ETHERNET_MAC_MACCR_Fields](reg.loc), val)

proc write*(reg: ETHERNET_MAC_MACCR_Type, TCES: bool = false, TCF: bool = false, RE: bool = false, TE: bool = false, DC: bool = false, BL: uint32 = 0, APCS: bool = false, RD: bool = false, IPCO: bool = false, DM: bool = false, LM: bool = false, ROD: bool = false, FES: bool = false, CSD: bool = false, IFG: uint32 = 0, IRE: bool = false, PDI: bool = false, JD: bool = false, WD: bool = false, TCD: uint32 = 0) =
  var x: uint32
  x.setMask((TCES.uint32 shl 0).masked(0 .. 0))
  x.setMask((TCF.uint32 shl 1).masked(1 .. 1))
  x.setMask((RE.uint32 shl 2).masked(2 .. 2))
  x.setMask((TE.uint32 shl 3).masked(3 .. 3))
  x.setMask((DC.uint32 shl 4).masked(4 .. 4))
  x.setMask((BL shl 5).masked(5 .. 6))
  x.setMask((APCS.uint32 shl 7).masked(7 .. 7))
  x.setMask((RD.uint32 shl 9).masked(9 .. 9))
  x.setMask((IPCO.uint32 shl 10).masked(10 .. 10))
  x.setMask((DM.uint32 shl 11).masked(11 .. 11))
  x.setMask((LM.uint32 shl 12).masked(12 .. 12))
  x.setMask((ROD.uint32 shl 13).masked(13 .. 13))
  x.setMask((FES.uint32 shl 14).masked(14 .. 14))
  x.setMask((CSD.uint32 shl 16).masked(16 .. 16))
  x.setMask((IFG shl 17).masked(17 .. 19))
  x.setMask((IRE.uint32 shl 20).masked(20 .. 20))
  x.setMask((PDI.uint32 shl 21).masked(21 .. 21))
  x.setMask((JD.uint32 shl 22).masked(22 .. 22))
  x.setMask((WD.uint32 shl 23).masked(23 .. 23))
  x.setMask((TCD shl 29).masked(29 .. 31))
  reg.write x.ETHERNET_MAC_MACCR_Fields

template modifyIt*(reg: ETHERNET_MAC_MACCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_MAC_MACFFR_Type): ETHERNET_MAC_MACFFR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MAC_MACFFR_Fields](reg.loc))

proc read*(reg: static ETHERNET_MAC_MACFFR_Type): ETHERNET_MAC_MACFFR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MAC_MACFFR_Fields](reg.loc))

proc write*(reg: ETHERNET_MAC_MACFFR_Type, val: ETHERNET_MAC_MACFFR_Fields) {.inline.} =
  volatileStore(cast[ptr ETHERNET_MAC_MACFFR_Fields](reg.loc), val)

proc write*(reg: ETHERNET_MAC_MACFFR_Type, PM: bool = false, HU: bool = false, HM: bool = false, DAIF: bool = false, PAM: bool = false, BFD: bool = false, PCF: uint32 = 0, SAIF: bool = false, SAF: bool = false, HPF: bool = false, RA: bool = false) =
  var x: uint32
  x.setMask((PM.uint32 shl 0).masked(0 .. 0))
  x.setMask((HU.uint32 shl 1).masked(1 .. 1))
  x.setMask((HM.uint32 shl 2).masked(2 .. 2))
  x.setMask((DAIF.uint32 shl 3).masked(3 .. 3))
  x.setMask((PAM.uint32 shl 4).masked(4 .. 4))
  x.setMask((BFD.uint32 shl 5).masked(5 .. 5))
  x.setMask((PCF shl 6).masked(6 .. 7))
  x.setMask((SAIF.uint32 shl 8).masked(8 .. 8))
  x.setMask((SAF.uint32 shl 9).masked(9 .. 9))
  x.setMask((HPF.uint32 shl 10).masked(10 .. 10))
  x.setMask((RA.uint32 shl 31).masked(31 .. 31))
  reg.write x.ETHERNET_MAC_MACFFR_Fields

template modifyIt*(reg: ETHERNET_MAC_MACFFR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_MAC_MACHTHR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static ETHERNET_MAC_MACHTHR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: ETHERNET_MAC_MACHTHR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: ETHERNET_MAC_MACHTHR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_MAC_MACHTLR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static ETHERNET_MAC_MACHTLR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: ETHERNET_MAC_MACHTLR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: ETHERNET_MAC_MACHTLR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_MAC_MACMIIAR_Type): ETHERNET_MAC_MACMIIAR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MAC_MACMIIAR_Fields](reg.loc))

proc read*(reg: static ETHERNET_MAC_MACMIIAR_Type): ETHERNET_MAC_MACMIIAR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MAC_MACMIIAR_Fields](reg.loc))

proc write*(reg: ETHERNET_MAC_MACMIIAR_Type, val: ETHERNET_MAC_MACMIIAR_Fields) {.inline.} =
  volatileStore(cast[ptr ETHERNET_MAC_MACMIIAR_Fields](reg.loc), val)

proc write*(reg: ETHERNET_MAC_MACMIIAR_Type, MB: bool = false, MW: bool = false, CR: uint32 = 0, MR: uint32 = 0, PA: uint32 = 0) =
  var x: uint32
  x.setMask((MB.uint32 shl 0).masked(0 .. 0))
  x.setMask((MW.uint32 shl 1).masked(1 .. 1))
  x.setMask((CR shl 2).masked(2 .. 4))
  x.setMask((MR shl 6).masked(6 .. 10))
  x.setMask((PA shl 11).masked(11 .. 15))
  reg.write x.ETHERNET_MAC_MACMIIAR_Fields

template modifyIt*(reg: ETHERNET_MAC_MACMIIAR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_MAC_MACMIIDR_Type): ETHERNET_MAC_MACMIIDR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MAC_MACMIIDR_Fields](reg.loc))

proc read*(reg: static ETHERNET_MAC_MACMIIDR_Type): ETHERNET_MAC_MACMIIDR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MAC_MACMIIDR_Fields](reg.loc))

proc write*(reg: ETHERNET_MAC_MACMIIDR_Type, val: ETHERNET_MAC_MACMIIDR_Fields) {.inline.} =
  volatileStore(cast[ptr ETHERNET_MAC_MACMIIDR_Fields](reg.loc), val)

proc write*(reg: ETHERNET_MAC_MACMIIDR_Type, MD: uint32 = 0) =
  var x: uint32
  x.setMask((MD shl 0).masked(0 .. 15))
  reg.write x.ETHERNET_MAC_MACMIIDR_Fields

template modifyIt*(reg: ETHERNET_MAC_MACMIIDR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_MAC_MACFCR_Type): ETHERNET_MAC_MACFCR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MAC_MACFCR_Fields](reg.loc))

proc read*(reg: static ETHERNET_MAC_MACFCR_Type): ETHERNET_MAC_MACFCR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MAC_MACFCR_Fields](reg.loc))

proc write*(reg: ETHERNET_MAC_MACFCR_Type, val: ETHERNET_MAC_MACFCR_Fields) {.inline.} =
  volatileStore(cast[ptr ETHERNET_MAC_MACFCR_Fields](reg.loc), val)

proc write*(reg: ETHERNET_MAC_MACFCR_Type, FCB_BPA: bool = false, TFCE: bool = false, RFCE: bool = false, UPFD: bool = false, PLT: uint32 = 0, ZQPD: bool = false, PT: uint32 = 0) =
  var x: uint32
  x.setMask((FCB_BPA.uint32 shl 0).masked(0 .. 0))
  x.setMask((TFCE.uint32 shl 1).masked(1 .. 1))
  x.setMask((RFCE.uint32 shl 2).masked(2 .. 2))
  x.setMask((UPFD.uint32 shl 3).masked(3 .. 3))
  x.setMask((PLT shl 4).masked(4 .. 5))
  x.setMask((ZQPD.uint32 shl 7).masked(7 .. 7))
  x.setMask((PT shl 16).masked(16 .. 31))
  reg.write x.ETHERNET_MAC_MACFCR_Fields

template modifyIt*(reg: ETHERNET_MAC_MACFCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_MAC_MACVLANTR_Type): ETHERNET_MAC_MACVLANTR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MAC_MACVLANTR_Fields](reg.loc))

proc read*(reg: static ETHERNET_MAC_MACVLANTR_Type): ETHERNET_MAC_MACVLANTR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MAC_MACVLANTR_Fields](reg.loc))

proc write*(reg: ETHERNET_MAC_MACVLANTR_Type, val: ETHERNET_MAC_MACVLANTR_Fields) {.inline.} =
  volatileStore(cast[ptr ETHERNET_MAC_MACVLANTR_Fields](reg.loc), val)

proc write*(reg: ETHERNET_MAC_MACVLANTR_Type, VLANTI: uint32 = 0, VLANTC: bool = false) =
  var x: uint32
  x.setMask((VLANTI shl 0).masked(0 .. 15))
  x.setMask((VLANTC.uint32 shl 16).masked(16 .. 16))
  reg.write x.ETHERNET_MAC_MACVLANTR_Fields

template modifyIt*(reg: ETHERNET_MAC_MACVLANTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_MAC_MACRWUFFR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static ETHERNET_MAC_MACRWUFFR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: ETHERNET_MAC_MACRWUFFR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: ETHERNET_MAC_MACRWUFFR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_MAC_MACPMTCSR_Type): ETHERNET_MAC_MACPMTCSR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MAC_MACPMTCSR_Fields](reg.loc))

proc read*(reg: static ETHERNET_MAC_MACPMTCSR_Type): ETHERNET_MAC_MACPMTCSR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MAC_MACPMTCSR_Fields](reg.loc))

proc write*(reg: ETHERNET_MAC_MACPMTCSR_Type, val: ETHERNET_MAC_MACPMTCSR_Fields) {.inline.} =
  volatileStore(cast[ptr ETHERNET_MAC_MACPMTCSR_Fields](reg.loc), val)

proc write*(reg: ETHERNET_MAC_MACPMTCSR_Type, PD: bool = false, MPE: bool = false, WFE: bool = false, MPR: bool = false, WFR: bool = false, GU: bool = false, WFFRPR: bool = false) =
  var x: uint32
  x.setMask((PD.uint32 shl 0).masked(0 .. 0))
  x.setMask((MPE.uint32 shl 1).masked(1 .. 1))
  x.setMask((WFE.uint32 shl 2).masked(2 .. 2))
  x.setMask((MPR.uint32 shl 5).masked(5 .. 5))
  x.setMask((WFR.uint32 shl 6).masked(6 .. 6))
  x.setMask((GU.uint32 shl 9).masked(9 .. 9))
  x.setMask((WFFRPR.uint32 shl 31).masked(31 .. 31))
  reg.write x.ETHERNET_MAC_MACPMTCSR_Fields

template modifyIt*(reg: ETHERNET_MAC_MACPMTCSR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_MAC_MACSR_Type): ETHERNET_MAC_MACSR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MAC_MACSR_Fields](reg.loc))

proc read*(reg: static ETHERNET_MAC_MACSR_Type): ETHERNET_MAC_MACSR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MAC_MACSR_Fields](reg.loc))

proc write*(reg: ETHERNET_MAC_MACSR_Type, val: ETHERNET_MAC_MACSR_Fields) {.inline.} =
  volatileStore(cast[ptr ETHERNET_MAC_MACSR_Fields](reg.loc), val)

proc write*(reg: ETHERNET_MAC_MACSR_Type, PMTS: bool = false, MMCS: bool = false, MMCRS: bool = false, MMCTS: bool = false, TSTS: bool = false) =
  var x: uint32
  x.setMask((PMTS.uint32 shl 3).masked(3 .. 3))
  x.setMask((MMCS.uint32 shl 4).masked(4 .. 4))
  x.setMask((MMCRS.uint32 shl 5).masked(5 .. 5))
  x.setMask((MMCTS.uint32 shl 6).masked(6 .. 6))
  x.setMask((TSTS.uint32 shl 9).masked(9 .. 9))
  reg.write x.ETHERNET_MAC_MACSR_Fields

template modifyIt*(reg: ETHERNET_MAC_MACSR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_MAC_MACIMR_Type): ETHERNET_MAC_MACIMR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MAC_MACIMR_Fields](reg.loc))

proc read*(reg: static ETHERNET_MAC_MACIMR_Type): ETHERNET_MAC_MACIMR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MAC_MACIMR_Fields](reg.loc))

proc write*(reg: ETHERNET_MAC_MACIMR_Type, val: ETHERNET_MAC_MACIMR_Fields) {.inline.} =
  volatileStore(cast[ptr ETHERNET_MAC_MACIMR_Fields](reg.loc), val)

proc write*(reg: ETHERNET_MAC_MACIMR_Type, PMTIM: bool = false, TSTIM: bool = false) =
  var x: uint32
  x.setMask((PMTIM.uint32 shl 3).masked(3 .. 3))
  x.setMask((TSTIM.uint32 shl 9).masked(9 .. 9))
  reg.write x.ETHERNET_MAC_MACIMR_Fields

template modifyIt*(reg: ETHERNET_MAC_MACIMR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_MAC_MACA0HR_Type): ETHERNET_MAC_MACA0HR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MAC_MACA0HR_Fields](reg.loc))

proc read*(reg: static ETHERNET_MAC_MACA0HR_Type): ETHERNET_MAC_MACA0HR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MAC_MACA0HR_Fields](reg.loc))

proc write*(reg: ETHERNET_MAC_MACA0HR_Type, val: ETHERNET_MAC_MACA0HR_Fields) {.inline.} =
  volatileStore(cast[ptr ETHERNET_MAC_MACA0HR_Fields](reg.loc), val)

proc write*(reg: ETHERNET_MAC_MACA0HR_Type, MACA0H: uint32 = 65535) =
  var x: uint32
  x.setMask((MACA0H shl 0).masked(0 .. 15))
  reg.write x.ETHERNET_MAC_MACA0HR_Fields

template modifyIt*(reg: ETHERNET_MAC_MACA0HR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_MAC_MACA0LR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static ETHERNET_MAC_MACA0LR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: ETHERNET_MAC_MACA0LR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: ETHERNET_MAC_MACA0LR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_MAC_MACA1HR_Type): ETHERNET_MAC_MACA1HR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MAC_MACA1HR_Fields](reg.loc))

proc read*(reg: static ETHERNET_MAC_MACA1HR_Type): ETHERNET_MAC_MACA1HR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MAC_MACA1HR_Fields](reg.loc))

proc write*(reg: ETHERNET_MAC_MACA1HR_Type, val: ETHERNET_MAC_MACA1HR_Fields) {.inline.} =
  volatileStore(cast[ptr ETHERNET_MAC_MACA1HR_Fields](reg.loc), val)

proc write*(reg: ETHERNET_MAC_MACA1HR_Type, MACA1H: uint32 = 65535, MBC: uint32 = 0, SA: bool = false, AE: bool = false) =
  var x: uint32
  x.setMask((MACA1H shl 0).masked(0 .. 15))
  x.setMask((MBC shl 24).masked(24 .. 29))
  x.setMask((SA.uint32 shl 30).masked(30 .. 30))
  x.setMask((AE.uint32 shl 31).masked(31 .. 31))
  reg.write x.ETHERNET_MAC_MACA1HR_Fields

template modifyIt*(reg: ETHERNET_MAC_MACA1HR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_MAC_MACA1LR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static ETHERNET_MAC_MACA1LR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: ETHERNET_MAC_MACA1LR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: ETHERNET_MAC_MACA1LR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_MAC_MACA2HR_Type): ETHERNET_MAC_MACA2HR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MAC_MACA2HR_Fields](reg.loc))

proc read*(reg: static ETHERNET_MAC_MACA2HR_Type): ETHERNET_MAC_MACA2HR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MAC_MACA2HR_Fields](reg.loc))

proc write*(reg: ETHERNET_MAC_MACA2HR_Type, val: ETHERNET_MAC_MACA2HR_Fields) {.inline.} =
  volatileStore(cast[ptr ETHERNET_MAC_MACA2HR_Fields](reg.loc), val)

proc write*(reg: ETHERNET_MAC_MACA2HR_Type, ETH_MACA2HR: uint32 = 65535, MBC: uint32 = 0, SA: bool = false, AE: bool = false) =
  var x: uint32
  x.setMask((ETH_MACA2HR shl 0).masked(0 .. 15))
  x.setMask((MBC shl 24).masked(24 .. 29))
  x.setMask((SA.uint32 shl 30).masked(30 .. 30))
  x.setMask((AE.uint32 shl 31).masked(31 .. 31))
  reg.write x.ETHERNET_MAC_MACA2HR_Fields

template modifyIt*(reg: ETHERNET_MAC_MACA2HR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_MAC_MACA2LR_Type): ETHERNET_MAC_MACA2LR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MAC_MACA2LR_Fields](reg.loc))

proc read*(reg: static ETHERNET_MAC_MACA2LR_Type): ETHERNET_MAC_MACA2LR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MAC_MACA2LR_Fields](reg.loc))

proc write*(reg: ETHERNET_MAC_MACA2LR_Type, val: ETHERNET_MAC_MACA2LR_Fields) {.inline.} =
  volatileStore(cast[ptr ETHERNET_MAC_MACA2LR_Fields](reg.loc), val)

proc write*(reg: ETHERNET_MAC_MACA2LR_Type, MACA2L: uint32 = 2147483647) =
  var x: uint32
  x.setMask((MACA2L shl 0).masked(0 .. 30))
  reg.write x.ETHERNET_MAC_MACA2LR_Fields

template modifyIt*(reg: ETHERNET_MAC_MACA2LR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_MAC_MACA3HR_Type): ETHERNET_MAC_MACA3HR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MAC_MACA3HR_Fields](reg.loc))

proc read*(reg: static ETHERNET_MAC_MACA3HR_Type): ETHERNET_MAC_MACA3HR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MAC_MACA3HR_Fields](reg.loc))

proc write*(reg: ETHERNET_MAC_MACA3HR_Type, val: ETHERNET_MAC_MACA3HR_Fields) {.inline.} =
  volatileStore(cast[ptr ETHERNET_MAC_MACA3HR_Fields](reg.loc), val)

proc write*(reg: ETHERNET_MAC_MACA3HR_Type, MACA3H: uint32 = 65535, MBC: uint32 = 0, SA: bool = false, AE: bool = false) =
  var x: uint32
  x.setMask((MACA3H shl 0).masked(0 .. 15))
  x.setMask((MBC shl 24).masked(24 .. 29))
  x.setMask((SA.uint32 shl 30).masked(30 .. 30))
  x.setMask((AE.uint32 shl 31).masked(31 .. 31))
  reg.write x.ETHERNET_MAC_MACA3HR_Fields

template modifyIt*(reg: ETHERNET_MAC_MACA3HR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_MAC_MACA3LR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static ETHERNET_MAC_MACA3LR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: ETHERNET_MAC_MACA3LR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: ETHERNET_MAC_MACA3LR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func TCES*(r: ETHERNET_MAC_MACCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `TCES=`*(r: var ETHERNET_MAC_MACCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.ETHERNET_MAC_MACCR_Fields

func TCF*(r: ETHERNET_MAC_MACCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `TCF=`*(r: var ETHERNET_MAC_MACCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.ETHERNET_MAC_MACCR_Fields

func RE*(r: ETHERNET_MAC_MACCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `RE=`*(r: var ETHERNET_MAC_MACCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.ETHERNET_MAC_MACCR_Fields

func TE*(r: ETHERNET_MAC_MACCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TE=`*(r: var ETHERNET_MAC_MACCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.ETHERNET_MAC_MACCR_Fields

func DC*(r: ETHERNET_MAC_MACCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `DC=`*(r: var ETHERNET_MAC_MACCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.ETHERNET_MAC_MACCR_Fields

func BL*(r: ETHERNET_MAC_MACCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(5 .. 6)

proc `BL=`*(r: var ETHERNET_MAC_MACCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 6)
  tmp.setMask((val shl 5).masked(5 .. 6))
  r = tmp.ETHERNET_MAC_MACCR_Fields

func APCS*(r: ETHERNET_MAC_MACCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `APCS=`*(r: var ETHERNET_MAC_MACCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.ETHERNET_MAC_MACCR_Fields

func RD*(r: ETHERNET_MAC_MACCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `RD=`*(r: var ETHERNET_MAC_MACCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.ETHERNET_MAC_MACCR_Fields

func IPCO*(r: ETHERNET_MAC_MACCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `IPCO=`*(r: var ETHERNET_MAC_MACCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.ETHERNET_MAC_MACCR_Fields

func DM*(r: ETHERNET_MAC_MACCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `DM=`*(r: var ETHERNET_MAC_MACCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.ETHERNET_MAC_MACCR_Fields

func LM*(r: ETHERNET_MAC_MACCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `LM=`*(r: var ETHERNET_MAC_MACCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.ETHERNET_MAC_MACCR_Fields

func ROD*(r: ETHERNET_MAC_MACCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `ROD=`*(r: var ETHERNET_MAC_MACCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.ETHERNET_MAC_MACCR_Fields

func FES*(r: ETHERNET_MAC_MACCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FES=`*(r: var ETHERNET_MAC_MACCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.ETHERNET_MAC_MACCR_Fields

func CSD*(r: ETHERNET_MAC_MACCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `CSD=`*(r: var ETHERNET_MAC_MACCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.ETHERNET_MAC_MACCR_Fields

func IFG*(r: ETHERNET_MAC_MACCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(17 .. 19)

proc `IFG=`*(r: var ETHERNET_MAC_MACCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 19)
  tmp.setMask((val shl 17).masked(17 .. 19))
  r = tmp.ETHERNET_MAC_MACCR_Fields

func IRE*(r: ETHERNET_MAC_MACCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `IRE=`*(r: var ETHERNET_MAC_MACCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.ETHERNET_MAC_MACCR_Fields

func PDI*(r: ETHERNET_MAC_MACCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `PDI=`*(r: var ETHERNET_MAC_MACCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.ETHERNET_MAC_MACCR_Fields

func JD*(r: ETHERNET_MAC_MACCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `JD=`*(r: var ETHERNET_MAC_MACCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.ETHERNET_MAC_MACCR_Fields

func WD*(r: ETHERNET_MAC_MACCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `WD=`*(r: var ETHERNET_MAC_MACCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.ETHERNET_MAC_MACCR_Fields

func TCD*(r: ETHERNET_MAC_MACCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 31)

proc `TCD=`*(r: var ETHERNET_MAC_MACCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 31)
  tmp.setMask((val shl 29).masked(29 .. 31))
  r = tmp.ETHERNET_MAC_MACCR_Fields

func PM*(r: ETHERNET_MAC_MACFFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `PM=`*(r: var ETHERNET_MAC_MACFFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.ETHERNET_MAC_MACFFR_Fields

func HU*(r: ETHERNET_MAC_MACFFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `HU=`*(r: var ETHERNET_MAC_MACFFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.ETHERNET_MAC_MACFFR_Fields

func HM*(r: ETHERNET_MAC_MACFFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `HM=`*(r: var ETHERNET_MAC_MACFFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.ETHERNET_MAC_MACFFR_Fields

func DAIF*(r: ETHERNET_MAC_MACFFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `DAIF=`*(r: var ETHERNET_MAC_MACFFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.ETHERNET_MAC_MACFFR_Fields

func PAM*(r: ETHERNET_MAC_MACFFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `PAM=`*(r: var ETHERNET_MAC_MACFFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.ETHERNET_MAC_MACFFR_Fields

func BFD*(r: ETHERNET_MAC_MACFFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `BFD=`*(r: var ETHERNET_MAC_MACFFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.ETHERNET_MAC_MACFFR_Fields

func PCF*(r: ETHERNET_MAC_MACFFR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 7)

proc `PCF=`*(r: var ETHERNET_MAC_MACFFR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 7)
  tmp.setMask((val shl 6).masked(6 .. 7))
  r = tmp.ETHERNET_MAC_MACFFR_Fields

func SAIF*(r: ETHERNET_MAC_MACFFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `SAIF=`*(r: var ETHERNET_MAC_MACFFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.ETHERNET_MAC_MACFFR_Fields

func SAF*(r: ETHERNET_MAC_MACFFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `SAF=`*(r: var ETHERNET_MAC_MACFFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.ETHERNET_MAC_MACFFR_Fields

func HPF*(r: ETHERNET_MAC_MACFFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `HPF=`*(r: var ETHERNET_MAC_MACFFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.ETHERNET_MAC_MACFFR_Fields

func RA*(r: ETHERNET_MAC_MACFFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `RA=`*(r: var ETHERNET_MAC_MACFFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.ETHERNET_MAC_MACFFR_Fields

func MB*(r: ETHERNET_MAC_MACMIIAR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `MB=`*(r: var ETHERNET_MAC_MACMIIAR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.ETHERNET_MAC_MACMIIAR_Fields

func MW*(r: ETHERNET_MAC_MACMIIAR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `MW=`*(r: var ETHERNET_MAC_MACMIIAR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.ETHERNET_MAC_MACMIIAR_Fields

func CR*(r: ETHERNET_MAC_MACMIIAR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 4)

proc `CR=`*(r: var ETHERNET_MAC_MACMIIAR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 4)
  tmp.setMask((val shl 2).masked(2 .. 4))
  r = tmp.ETHERNET_MAC_MACMIIAR_Fields

func MR*(r: ETHERNET_MAC_MACMIIAR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 10)

proc `MR=`*(r: var ETHERNET_MAC_MACMIIAR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 10)
  tmp.setMask((val shl 6).masked(6 .. 10))
  r = tmp.ETHERNET_MAC_MACMIIAR_Fields

func PA*(r: ETHERNET_MAC_MACMIIAR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 15)

proc `PA=`*(r: var ETHERNET_MAC_MACMIIAR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 15)
  tmp.setMask((val shl 11).masked(11 .. 15))
  r = tmp.ETHERNET_MAC_MACMIIAR_Fields

func MD*(r: ETHERNET_MAC_MACMIIDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `MD=`*(r: var ETHERNET_MAC_MACMIIDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.ETHERNET_MAC_MACMIIDR_Fields

func FCB_BPA*(r: ETHERNET_MAC_MACFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FCB_BPA=`*(r: var ETHERNET_MAC_MACFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.ETHERNET_MAC_MACFCR_Fields

func TFCE*(r: ETHERNET_MAC_MACFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `TFCE=`*(r: var ETHERNET_MAC_MACFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.ETHERNET_MAC_MACFCR_Fields

func RFCE*(r: ETHERNET_MAC_MACFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `RFCE=`*(r: var ETHERNET_MAC_MACFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.ETHERNET_MAC_MACFCR_Fields

func UPFD*(r: ETHERNET_MAC_MACFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `UPFD=`*(r: var ETHERNET_MAC_MACFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.ETHERNET_MAC_MACFCR_Fields

func PLT*(r: ETHERNET_MAC_MACFCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 5)

proc `PLT=`*(r: var ETHERNET_MAC_MACFCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.ETHERNET_MAC_MACFCR_Fields

func ZQPD*(r: ETHERNET_MAC_MACFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `ZQPD=`*(r: var ETHERNET_MAC_MACFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.ETHERNET_MAC_MACFCR_Fields

func PT*(r: ETHERNET_MAC_MACFCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `PT=`*(r: var ETHERNET_MAC_MACFCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.ETHERNET_MAC_MACFCR_Fields

func VLANTI*(r: ETHERNET_MAC_MACVLANTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `VLANTI=`*(r: var ETHERNET_MAC_MACVLANTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.ETHERNET_MAC_MACVLANTR_Fields

func VLANTC*(r: ETHERNET_MAC_MACVLANTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `VLANTC=`*(r: var ETHERNET_MAC_MACVLANTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.ETHERNET_MAC_MACVLANTR_Fields

func PD*(r: ETHERNET_MAC_MACPMTCSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `PD=`*(r: var ETHERNET_MAC_MACPMTCSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.ETHERNET_MAC_MACPMTCSR_Fields

func MPE*(r: ETHERNET_MAC_MACPMTCSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `MPE=`*(r: var ETHERNET_MAC_MACPMTCSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.ETHERNET_MAC_MACPMTCSR_Fields

func WFE*(r: ETHERNET_MAC_MACPMTCSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `WFE=`*(r: var ETHERNET_MAC_MACPMTCSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.ETHERNET_MAC_MACPMTCSR_Fields

func MPR*(r: ETHERNET_MAC_MACPMTCSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `MPR=`*(r: var ETHERNET_MAC_MACPMTCSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.ETHERNET_MAC_MACPMTCSR_Fields

func WFR*(r: ETHERNET_MAC_MACPMTCSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `WFR=`*(r: var ETHERNET_MAC_MACPMTCSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.ETHERNET_MAC_MACPMTCSR_Fields

func GU*(r: ETHERNET_MAC_MACPMTCSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `GU=`*(r: var ETHERNET_MAC_MACPMTCSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.ETHERNET_MAC_MACPMTCSR_Fields

func WFFRPR*(r: ETHERNET_MAC_MACPMTCSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `WFFRPR=`*(r: var ETHERNET_MAC_MACPMTCSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.ETHERNET_MAC_MACPMTCSR_Fields

func PMTS*(r: ETHERNET_MAC_MACSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `PMTS=`*(r: var ETHERNET_MAC_MACSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.ETHERNET_MAC_MACSR_Fields

func MMCS*(r: ETHERNET_MAC_MACSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `MMCS=`*(r: var ETHERNET_MAC_MACSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.ETHERNET_MAC_MACSR_Fields

func MMCRS*(r: ETHERNET_MAC_MACSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `MMCRS=`*(r: var ETHERNET_MAC_MACSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.ETHERNET_MAC_MACSR_Fields

func MMCTS*(r: ETHERNET_MAC_MACSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `MMCTS=`*(r: var ETHERNET_MAC_MACSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.ETHERNET_MAC_MACSR_Fields

func TSTS*(r: ETHERNET_MAC_MACSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `TSTS=`*(r: var ETHERNET_MAC_MACSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.ETHERNET_MAC_MACSR_Fields

func PMTIM*(r: ETHERNET_MAC_MACIMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `PMTIM=`*(r: var ETHERNET_MAC_MACIMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.ETHERNET_MAC_MACIMR_Fields

func TSTIM*(r: ETHERNET_MAC_MACIMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `TSTIM=`*(r: var ETHERNET_MAC_MACIMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.ETHERNET_MAC_MACIMR_Fields

func MACA0H*(r: ETHERNET_MAC_MACA0HR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `MACA0H=`*(r: var ETHERNET_MAC_MACA0HR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.ETHERNET_MAC_MACA0HR_Fields

func MO*(r: ETHERNET_MAC_MACA0HR_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

func MACA1H*(r: ETHERNET_MAC_MACA1HR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `MACA1H=`*(r: var ETHERNET_MAC_MACA1HR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.ETHERNET_MAC_MACA1HR_Fields

func MBC*(r: ETHERNET_MAC_MACA1HR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 29)

proc `MBC=`*(r: var ETHERNET_MAC_MACA1HR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 29)
  tmp.setMask((val shl 24).masked(24 .. 29))
  r = tmp.ETHERNET_MAC_MACA1HR_Fields

func SA*(r: ETHERNET_MAC_MACA1HR_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `SA=`*(r: var ETHERNET_MAC_MACA1HR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.ETHERNET_MAC_MACA1HR_Fields

func AE*(r: ETHERNET_MAC_MACA1HR_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `AE=`*(r: var ETHERNET_MAC_MACA1HR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.ETHERNET_MAC_MACA1HR_Fields

func ETH_MACA2HR*(r: ETHERNET_MAC_MACA2HR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `ETH_MACA2HR=`*(r: var ETHERNET_MAC_MACA2HR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.ETHERNET_MAC_MACA2HR_Fields

func MBC*(r: ETHERNET_MAC_MACA2HR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 29)

proc `MBC=`*(r: var ETHERNET_MAC_MACA2HR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 29)
  tmp.setMask((val shl 24).masked(24 .. 29))
  r = tmp.ETHERNET_MAC_MACA2HR_Fields

func SA*(r: ETHERNET_MAC_MACA2HR_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `SA=`*(r: var ETHERNET_MAC_MACA2HR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.ETHERNET_MAC_MACA2HR_Fields

func AE*(r: ETHERNET_MAC_MACA2HR_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `AE=`*(r: var ETHERNET_MAC_MACA2HR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.ETHERNET_MAC_MACA2HR_Fields

func MACA2L*(r: ETHERNET_MAC_MACA2LR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 30)

proc `MACA2L=`*(r: var ETHERNET_MAC_MACA2LR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 30)
  tmp.setMask((val shl 0).masked(0 .. 30))
  r = tmp.ETHERNET_MAC_MACA2LR_Fields

func MACA3H*(r: ETHERNET_MAC_MACA3HR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `MACA3H=`*(r: var ETHERNET_MAC_MACA3HR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.ETHERNET_MAC_MACA3HR_Fields

func MBC*(r: ETHERNET_MAC_MACA3HR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 29)

proc `MBC=`*(r: var ETHERNET_MAC_MACA3HR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 29)
  tmp.setMask((val shl 24).masked(24 .. 29))
  r = tmp.ETHERNET_MAC_MACA3HR_Fields

func SA*(r: ETHERNET_MAC_MACA3HR_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `SA=`*(r: var ETHERNET_MAC_MACA3HR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.ETHERNET_MAC_MACA3HR_Fields

func AE*(r: ETHERNET_MAC_MACA3HR_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `AE=`*(r: var ETHERNET_MAC_MACA3HR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.ETHERNET_MAC_MACA3HR_Fields

type
  ETHERNET_MMC_MMCCR_Fields* = distinct uint32
  ETHERNET_MMC_MMCRIR_Fields* = distinct uint32
  ETHERNET_MMC_MMCTIR_Fields* = distinct uint32
  ETHERNET_MMC_MMCRIMR_Fields* = distinct uint32
  ETHERNET_MMC_MMCTIMR_Fields* = distinct uint32

proc read*(reg: ETHERNET_MMC_MMCCR_Type): ETHERNET_MMC_MMCCR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MMC_MMCCR_Fields](reg.loc))

proc read*(reg: static ETHERNET_MMC_MMCCR_Type): ETHERNET_MMC_MMCCR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MMC_MMCCR_Fields](reg.loc))

proc write*(reg: ETHERNET_MMC_MMCCR_Type, val: ETHERNET_MMC_MMCCR_Fields) {.inline.} =
  volatileStore(cast[ptr ETHERNET_MMC_MMCCR_Fields](reg.loc), val)

proc write*(reg: ETHERNET_MMC_MMCCR_Type, CR: bool = false, CSR: bool = false, ROR: bool = false, MCF: bool = false) =
  var x: uint32
  x.setMask((CR.uint32 shl 0).masked(0 .. 0))
  x.setMask((CSR.uint32 shl 1).masked(1 .. 1))
  x.setMask((ROR.uint32 shl 2).masked(2 .. 2))
  x.setMask((MCF.uint32 shl 31).masked(31 .. 31))
  reg.write x.ETHERNET_MMC_MMCCR_Fields

template modifyIt*(reg: ETHERNET_MMC_MMCCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_MMC_MMCRIR_Type): ETHERNET_MMC_MMCRIR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MMC_MMCRIR_Fields](reg.loc))

proc read*(reg: static ETHERNET_MMC_MMCRIR_Type): ETHERNET_MMC_MMCRIR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MMC_MMCRIR_Fields](reg.loc))

proc write*(reg: ETHERNET_MMC_MMCRIR_Type, val: ETHERNET_MMC_MMCRIR_Fields) {.inline.} =
  volatileStore(cast[ptr ETHERNET_MMC_MMCRIR_Fields](reg.loc), val)

proc write*(reg: ETHERNET_MMC_MMCRIR_Type, RFCES: bool = false, RFAES: bool = false, RGUFS: bool = false) =
  var x: uint32
  x.setMask((RFCES.uint32 shl 5).masked(5 .. 5))
  x.setMask((RFAES.uint32 shl 6).masked(6 .. 6))
  x.setMask((RGUFS.uint32 shl 17).masked(17 .. 17))
  reg.write x.ETHERNET_MMC_MMCRIR_Fields

template modifyIt*(reg: ETHERNET_MMC_MMCRIR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_MMC_MMCTIR_Type): ETHERNET_MMC_MMCTIR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MMC_MMCTIR_Fields](reg.loc))

proc read*(reg: static ETHERNET_MMC_MMCTIR_Type): ETHERNET_MMC_MMCTIR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MMC_MMCTIR_Fields](reg.loc))

proc write*(reg: ETHERNET_MMC_MMCTIR_Type, val: ETHERNET_MMC_MMCTIR_Fields) {.inline.} =
  volatileStore(cast[ptr ETHERNET_MMC_MMCTIR_Fields](reg.loc), val)

proc write*(reg: ETHERNET_MMC_MMCTIR_Type, TGFSCS: bool = false, TGFMSCS: bool = false, TGFS: bool = false) =
  var x: uint32
  x.setMask((TGFSCS.uint32 shl 14).masked(14 .. 14))
  x.setMask((TGFMSCS.uint32 shl 15).masked(15 .. 15))
  x.setMask((TGFS.uint32 shl 21).masked(21 .. 21))
  reg.write x.ETHERNET_MMC_MMCTIR_Fields

template modifyIt*(reg: ETHERNET_MMC_MMCTIR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_MMC_MMCRIMR_Type): ETHERNET_MMC_MMCRIMR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MMC_MMCRIMR_Fields](reg.loc))

proc read*(reg: static ETHERNET_MMC_MMCRIMR_Type): ETHERNET_MMC_MMCRIMR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MMC_MMCRIMR_Fields](reg.loc))

proc write*(reg: ETHERNET_MMC_MMCRIMR_Type, val: ETHERNET_MMC_MMCRIMR_Fields) {.inline.} =
  volatileStore(cast[ptr ETHERNET_MMC_MMCRIMR_Fields](reg.loc), val)

proc write*(reg: ETHERNET_MMC_MMCRIMR_Type, RFCEM: bool = false, RFAEM: bool = false, RGUFM: bool = false) =
  var x: uint32
  x.setMask((RFCEM.uint32 shl 5).masked(5 .. 5))
  x.setMask((RFAEM.uint32 shl 6).masked(6 .. 6))
  x.setMask((RGUFM.uint32 shl 17).masked(17 .. 17))
  reg.write x.ETHERNET_MMC_MMCRIMR_Fields

template modifyIt*(reg: ETHERNET_MMC_MMCRIMR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_MMC_MMCTIMR_Type): ETHERNET_MMC_MMCTIMR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MMC_MMCTIMR_Fields](reg.loc))

proc read*(reg: static ETHERNET_MMC_MMCTIMR_Type): ETHERNET_MMC_MMCTIMR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_MMC_MMCTIMR_Fields](reg.loc))

proc write*(reg: ETHERNET_MMC_MMCTIMR_Type, val: ETHERNET_MMC_MMCTIMR_Fields) {.inline.} =
  volatileStore(cast[ptr ETHERNET_MMC_MMCTIMR_Fields](reg.loc), val)

proc write*(reg: ETHERNET_MMC_MMCTIMR_Type, TGFSCM: bool = false, TGFMSCM: bool = false, TGFM: bool = false) =
  var x: uint32
  x.setMask((TGFSCM.uint32 shl 14).masked(14 .. 14))
  x.setMask((TGFMSCM.uint32 shl 15).masked(15 .. 15))
  x.setMask((TGFM.uint32 shl 21).masked(21 .. 21))
  reg.write x.ETHERNET_MMC_MMCTIMR_Fields

template modifyIt*(reg: ETHERNET_MMC_MMCTIMR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_MMC_MMCTGFSCCR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static ETHERNET_MMC_MMCTGFSCCR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: ETHERNET_MMC_MMCTGFMSCCR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static ETHERNET_MMC_MMCTGFMSCCR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: ETHERNET_MMC_MMCTGFCR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static ETHERNET_MMC_MMCTGFCR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: ETHERNET_MMC_MMCRFCECR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static ETHERNET_MMC_MMCRFCECR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: ETHERNET_MMC_MMCRFAECR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static ETHERNET_MMC_MMCRFAECR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: ETHERNET_MMC_MMCRGUFCR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static ETHERNET_MMC_MMCRGUFCR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

func CR*(r: ETHERNET_MMC_MMCCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CR=`*(r: var ETHERNET_MMC_MMCCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.ETHERNET_MMC_MMCCR_Fields

func CSR*(r: ETHERNET_MMC_MMCCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CSR=`*(r: var ETHERNET_MMC_MMCCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.ETHERNET_MMC_MMCCR_Fields

func ROR*(r: ETHERNET_MMC_MMCCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `ROR=`*(r: var ETHERNET_MMC_MMCCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.ETHERNET_MMC_MMCCR_Fields

func MCF*(r: ETHERNET_MMC_MMCCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `MCF=`*(r: var ETHERNET_MMC_MMCCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.ETHERNET_MMC_MMCCR_Fields

func RFCES*(r: ETHERNET_MMC_MMCRIR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `RFCES=`*(r: var ETHERNET_MMC_MMCRIR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.ETHERNET_MMC_MMCRIR_Fields

func RFAES*(r: ETHERNET_MMC_MMCRIR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `RFAES=`*(r: var ETHERNET_MMC_MMCRIR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.ETHERNET_MMC_MMCRIR_Fields

func RGUFS*(r: ETHERNET_MMC_MMCRIR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `RGUFS=`*(r: var ETHERNET_MMC_MMCRIR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.ETHERNET_MMC_MMCRIR_Fields

func TGFSCS*(r: ETHERNET_MMC_MMCTIR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `TGFSCS=`*(r: var ETHERNET_MMC_MMCTIR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.ETHERNET_MMC_MMCTIR_Fields

func TGFMSCS*(r: ETHERNET_MMC_MMCTIR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `TGFMSCS=`*(r: var ETHERNET_MMC_MMCTIR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.ETHERNET_MMC_MMCTIR_Fields

func TGFS*(r: ETHERNET_MMC_MMCTIR_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `TGFS=`*(r: var ETHERNET_MMC_MMCTIR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.ETHERNET_MMC_MMCTIR_Fields

func RFCEM*(r: ETHERNET_MMC_MMCRIMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `RFCEM=`*(r: var ETHERNET_MMC_MMCRIMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.ETHERNET_MMC_MMCRIMR_Fields

func RFAEM*(r: ETHERNET_MMC_MMCRIMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `RFAEM=`*(r: var ETHERNET_MMC_MMCRIMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.ETHERNET_MMC_MMCRIMR_Fields

func RGUFM*(r: ETHERNET_MMC_MMCRIMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `RGUFM=`*(r: var ETHERNET_MMC_MMCRIMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.ETHERNET_MMC_MMCRIMR_Fields

func TGFSCM*(r: ETHERNET_MMC_MMCTIMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `TGFSCM=`*(r: var ETHERNET_MMC_MMCTIMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.ETHERNET_MMC_MMCTIMR_Fields

func TGFMSCM*(r: ETHERNET_MMC_MMCTIMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `TGFMSCM=`*(r: var ETHERNET_MMC_MMCTIMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.ETHERNET_MMC_MMCTIMR_Fields

func TGFM*(r: ETHERNET_MMC_MMCTIMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `TGFM=`*(r: var ETHERNET_MMC_MMCTIMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.ETHERNET_MMC_MMCTIMR_Fields

type
  ETHERNET_PTP_PTPTSCR_Fields* = distinct uint32
  ETHERNET_PTP_PTPSSIR_Fields* = distinct uint32
  ETHERNET_PTP_PTPTSLR_Fields* = distinct uint32
  ETHERNET_PTP_PTPTSLUR_Fields* = distinct uint32

proc read*(reg: ETHERNET_PTP_PTPTSCR_Type): ETHERNET_PTP_PTPTSCR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_PTP_PTPTSCR_Fields](reg.loc))

proc read*(reg: static ETHERNET_PTP_PTPTSCR_Type): ETHERNET_PTP_PTPTSCR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_PTP_PTPTSCR_Fields](reg.loc))

proc write*(reg: ETHERNET_PTP_PTPTSCR_Type, val: ETHERNET_PTP_PTPTSCR_Fields) {.inline.} =
  volatileStore(cast[ptr ETHERNET_PTP_PTPTSCR_Fields](reg.loc), val)

proc write*(reg: ETHERNET_PTP_PTPTSCR_Type, TSE: bool = false, TSFCU: bool = false, TSSTI: bool = false, TSSTU: bool = false, TSITE: bool = false, TSARU: bool = false) =
  var x: uint32
  x.setMask((TSE.uint32 shl 0).masked(0 .. 0))
  x.setMask((TSFCU.uint32 shl 1).masked(1 .. 1))
  x.setMask((TSSTI.uint32 shl 2).masked(2 .. 2))
  x.setMask((TSSTU.uint32 shl 3).masked(3 .. 3))
  x.setMask((TSITE.uint32 shl 4).masked(4 .. 4))
  x.setMask((TSARU.uint32 shl 5).masked(5 .. 5))
  reg.write x.ETHERNET_PTP_PTPTSCR_Fields

template modifyIt*(reg: ETHERNET_PTP_PTPTSCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_PTP_PTPSSIR_Type): ETHERNET_PTP_PTPSSIR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_PTP_PTPSSIR_Fields](reg.loc))

proc read*(reg: static ETHERNET_PTP_PTPSSIR_Type): ETHERNET_PTP_PTPSSIR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_PTP_PTPSSIR_Fields](reg.loc))

proc write*(reg: ETHERNET_PTP_PTPSSIR_Type, val: ETHERNET_PTP_PTPSSIR_Fields) {.inline.} =
  volatileStore(cast[ptr ETHERNET_PTP_PTPSSIR_Fields](reg.loc), val)

proc write*(reg: ETHERNET_PTP_PTPSSIR_Type, STSSI: uint32 = 0) =
  var x: uint32
  x.setMask((STSSI shl 0).masked(0 .. 7))
  reg.write x.ETHERNET_PTP_PTPSSIR_Fields

template modifyIt*(reg: ETHERNET_PTP_PTPSSIR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_PTP_PTPTSHR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static ETHERNET_PTP_PTPTSHR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: ETHERNET_PTP_PTPTSLR_Type): ETHERNET_PTP_PTPTSLR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_PTP_PTPTSLR_Fields](reg.loc))

proc read*(reg: static ETHERNET_PTP_PTPTSLR_Type): ETHERNET_PTP_PTPTSLR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_PTP_PTPTSLR_Fields](reg.loc))

proc read*(reg: ETHERNET_PTP_PTPTSHUR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static ETHERNET_PTP_PTPTSHUR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: ETHERNET_PTP_PTPTSHUR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: ETHERNET_PTP_PTPTSHUR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_PTP_PTPTSLUR_Type): ETHERNET_PTP_PTPTSLUR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_PTP_PTPTSLUR_Fields](reg.loc))

proc read*(reg: static ETHERNET_PTP_PTPTSLUR_Type): ETHERNET_PTP_PTPTSLUR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_PTP_PTPTSLUR_Fields](reg.loc))

proc write*(reg: ETHERNET_PTP_PTPTSLUR_Type, val: ETHERNET_PTP_PTPTSLUR_Fields) {.inline.} =
  volatileStore(cast[ptr ETHERNET_PTP_PTPTSLUR_Fields](reg.loc), val)

proc write*(reg: ETHERNET_PTP_PTPTSLUR_Type, TSUSS: uint32 = 0, TSUPNS: bool = false) =
  var x: uint32
  x.setMask((TSUSS shl 0).masked(0 .. 30))
  x.setMask((TSUPNS.uint32 shl 31).masked(31 .. 31))
  reg.write x.ETHERNET_PTP_PTPTSLUR_Fields

template modifyIt*(reg: ETHERNET_PTP_PTPTSLUR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_PTP_PTPTSAR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static ETHERNET_PTP_PTPTSAR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: ETHERNET_PTP_PTPTSAR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: ETHERNET_PTP_PTPTSAR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_PTP_PTPTTHR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static ETHERNET_PTP_PTPTTHR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: ETHERNET_PTP_PTPTTHR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: ETHERNET_PTP_PTPTTHR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_PTP_PTPTTLR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static ETHERNET_PTP_PTPTTLR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: ETHERNET_PTP_PTPTTLR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: ETHERNET_PTP_PTPTTLR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func TSE*(r: ETHERNET_PTP_PTPTSCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `TSE=`*(r: var ETHERNET_PTP_PTPTSCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.ETHERNET_PTP_PTPTSCR_Fields

func TSFCU*(r: ETHERNET_PTP_PTPTSCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `TSFCU=`*(r: var ETHERNET_PTP_PTPTSCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.ETHERNET_PTP_PTPTSCR_Fields

func TSSTI*(r: ETHERNET_PTP_PTPTSCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `TSSTI=`*(r: var ETHERNET_PTP_PTPTSCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.ETHERNET_PTP_PTPTSCR_Fields

func TSSTU*(r: ETHERNET_PTP_PTPTSCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TSSTU=`*(r: var ETHERNET_PTP_PTPTSCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.ETHERNET_PTP_PTPTSCR_Fields

func TSITE*(r: ETHERNET_PTP_PTPTSCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `TSITE=`*(r: var ETHERNET_PTP_PTPTSCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.ETHERNET_PTP_PTPTSCR_Fields

func TSARU*(r: ETHERNET_PTP_PTPTSCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `TSARU=`*(r: var ETHERNET_PTP_PTPTSCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.ETHERNET_PTP_PTPTSCR_Fields

func STSSI*(r: ETHERNET_PTP_PTPSSIR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `STSSI=`*(r: var ETHERNET_PTP_PTPSSIR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.ETHERNET_PTP_PTPSSIR_Fields

func STSS*(r: ETHERNET_PTP_PTPTSLR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 30)

func STPNS*(r: ETHERNET_PTP_PTPTSLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

func TSUSS*(r: ETHERNET_PTP_PTPTSLUR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 30)

proc `TSUSS=`*(r: var ETHERNET_PTP_PTPTSLUR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 30)
  tmp.setMask((val shl 0).masked(0 .. 30))
  r = tmp.ETHERNET_PTP_PTPTSLUR_Fields

func TSUPNS*(r: ETHERNET_PTP_PTPTSLUR_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `TSUPNS=`*(r: var ETHERNET_PTP_PTPTSLUR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.ETHERNET_PTP_PTPTSLUR_Fields

type
  ETHERNET_DMA_DMABMR_Fields* = distinct uint32
  ETHERNET_DMA_DMASR_Fields* = distinct uint32
  ETHERNET_DMA_DMAOMR_Fields* = distinct uint32
  ETHERNET_DMA_DMAIER_Fields* = distinct uint32
  ETHERNET_DMA_DMAMFBOCR_Fields* = distinct uint32

proc read*(reg: ETHERNET_DMA_DMABMR_Type): ETHERNET_DMA_DMABMR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_DMA_DMABMR_Fields](reg.loc))

proc read*(reg: static ETHERNET_DMA_DMABMR_Type): ETHERNET_DMA_DMABMR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_DMA_DMABMR_Fields](reg.loc))

proc write*(reg: ETHERNET_DMA_DMABMR_Type, val: ETHERNET_DMA_DMABMR_Fields) {.inline.} =
  volatileStore(cast[ptr ETHERNET_DMA_DMABMR_Fields](reg.loc), val)

proc write*(reg: ETHERNET_DMA_DMABMR_Type, SR: bool = true, DA: bool = false, DSL: uint32 = 0, PBL: uint32 = 33, RTPR: uint32 = 0, FB: bool = false, RDP: uint32 = 0, USP: bool = false, FPM: bool = false, AAB: bool = false) =
  var x: uint32
  x.setMask((SR.uint32 shl 0).masked(0 .. 0))
  x.setMask((DA.uint32 shl 1).masked(1 .. 1))
  x.setMask((DSL shl 2).masked(2 .. 6))
  x.setMask((PBL shl 8).masked(8 .. 13))
  x.setMask((RTPR shl 14).masked(14 .. 15))
  x.setMask((FB.uint32 shl 16).masked(16 .. 16))
  x.setMask((RDP shl 17).masked(17 .. 22))
  x.setMask((USP.uint32 shl 23).masked(23 .. 23))
  x.setMask((FPM.uint32 shl 24).masked(24 .. 24))
  x.setMask((AAB.uint32 shl 25).masked(25 .. 25))
  reg.write x.ETHERNET_DMA_DMABMR_Fields

template modifyIt*(reg: ETHERNET_DMA_DMABMR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_DMA_DMATPDR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static ETHERNET_DMA_DMATPDR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: ETHERNET_DMA_DMATPDR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: ETHERNET_DMA_DMATPDR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_DMA_DMARPDR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static ETHERNET_DMA_DMARPDR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: ETHERNET_DMA_DMARPDR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: ETHERNET_DMA_DMARPDR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_DMA_DMARDLAR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static ETHERNET_DMA_DMARDLAR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: ETHERNET_DMA_DMARDLAR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: ETHERNET_DMA_DMARDLAR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_DMA_DMATDLAR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static ETHERNET_DMA_DMATDLAR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: ETHERNET_DMA_DMATDLAR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: ETHERNET_DMA_DMATDLAR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_DMA_DMASR_Type): ETHERNET_DMA_DMASR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_DMA_DMASR_Fields](reg.loc))

proc read*(reg: static ETHERNET_DMA_DMASR_Type): ETHERNET_DMA_DMASR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_DMA_DMASR_Fields](reg.loc))

proc write*(reg: ETHERNET_DMA_DMASR_Type, val: ETHERNET_DMA_DMASR_Fields) {.inline.} =
  volatileStore(cast[ptr ETHERNET_DMA_DMASR_Fields](reg.loc), val)

proc write*(reg: ETHERNET_DMA_DMASR_Type, TS: bool = false, TPSS: bool = false, TBUS: bool = false, TJTS: bool = false, ROS: bool = false, TUS: bool = false, RS: bool = false, RBUS: bool = false, RPSS: bool = false, PWTS: bool = false, ETS: bool = false, FBES: bool = false, ERS: bool = false, AIS: bool = false, NIS: bool = false) =
  var x: uint32
  x.setMask((TS.uint32 shl 0).masked(0 .. 0))
  x.setMask((TPSS.uint32 shl 1).masked(1 .. 1))
  x.setMask((TBUS.uint32 shl 2).masked(2 .. 2))
  x.setMask((TJTS.uint32 shl 3).masked(3 .. 3))
  x.setMask((ROS.uint32 shl 4).masked(4 .. 4))
  x.setMask((TUS.uint32 shl 5).masked(5 .. 5))
  x.setMask((RS.uint32 shl 6).masked(6 .. 6))
  x.setMask((RBUS.uint32 shl 7).masked(7 .. 7))
  x.setMask((RPSS.uint32 shl 8).masked(8 .. 8))
  x.setMask((PWTS.uint32 shl 9).masked(9 .. 9))
  x.setMask((ETS.uint32 shl 10).masked(10 .. 10))
  x.setMask((FBES.uint32 shl 13).masked(13 .. 13))
  x.setMask((ERS.uint32 shl 14).masked(14 .. 14))
  x.setMask((AIS.uint32 shl 15).masked(15 .. 15))
  x.setMask((NIS.uint32 shl 16).masked(16 .. 16))
  reg.write x.ETHERNET_DMA_DMASR_Fields

template modifyIt*(reg: ETHERNET_DMA_DMASR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_DMA_DMAOMR_Type): ETHERNET_DMA_DMAOMR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_DMA_DMAOMR_Fields](reg.loc))

proc read*(reg: static ETHERNET_DMA_DMAOMR_Type): ETHERNET_DMA_DMAOMR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_DMA_DMAOMR_Fields](reg.loc))

proc write*(reg: ETHERNET_DMA_DMAOMR_Type, val: ETHERNET_DMA_DMAOMR_Fields) {.inline.} =
  volatileStore(cast[ptr ETHERNET_DMA_DMAOMR_Fields](reg.loc), val)

proc write*(reg: ETHERNET_DMA_DMAOMR_Type, SR: bool = false, OSF: bool = false, RTC: uint32 = 0, FUGF: bool = false, FEF: bool = false, ST: bool = false, TTC: uint32 = 0, FTF: bool = false, TSF: bool = false, DFRF: bool = false, RSF: bool = false, DTCEFD: bool = false) =
  var x: uint32
  x.setMask((SR.uint32 shl 1).masked(1 .. 1))
  x.setMask((OSF.uint32 shl 2).masked(2 .. 2))
  x.setMask((RTC shl 3).masked(3 .. 4))
  x.setMask((FUGF.uint32 shl 6).masked(6 .. 6))
  x.setMask((FEF.uint32 shl 7).masked(7 .. 7))
  x.setMask((ST.uint32 shl 13).masked(13 .. 13))
  x.setMask((TTC shl 14).masked(14 .. 16))
  x.setMask((FTF.uint32 shl 20).masked(20 .. 20))
  x.setMask((TSF.uint32 shl 21).masked(21 .. 21))
  x.setMask((DFRF.uint32 shl 24).masked(24 .. 24))
  x.setMask((RSF.uint32 shl 25).masked(25 .. 25))
  x.setMask((DTCEFD.uint32 shl 26).masked(26 .. 26))
  reg.write x.ETHERNET_DMA_DMAOMR_Fields

template modifyIt*(reg: ETHERNET_DMA_DMAOMR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_DMA_DMAIER_Type): ETHERNET_DMA_DMAIER_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_DMA_DMAIER_Fields](reg.loc))

proc read*(reg: static ETHERNET_DMA_DMAIER_Type): ETHERNET_DMA_DMAIER_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_DMA_DMAIER_Fields](reg.loc))

proc write*(reg: ETHERNET_DMA_DMAIER_Type, val: ETHERNET_DMA_DMAIER_Fields) {.inline.} =
  volatileStore(cast[ptr ETHERNET_DMA_DMAIER_Fields](reg.loc), val)

proc write*(reg: ETHERNET_DMA_DMAIER_Type, TIE: bool = false, TPSIE: bool = false, TBUIE: bool = false, TJTIE: bool = false, ROIE: bool = false, TUIE: bool = false, RIE: bool = false, RBUIE: bool = false, RPSIE: bool = false, RWTIE: bool = false, ETIE: bool = false, FBEIE: bool = false, ERIE: bool = false, AISE: bool = false, NISE: bool = false, IPLE: bool = false) =
  var x: uint32
  x.setMask((TIE.uint32 shl 0).masked(0 .. 0))
  x.setMask((TPSIE.uint32 shl 1).masked(1 .. 1))
  x.setMask((TBUIE.uint32 shl 2).masked(2 .. 2))
  x.setMask((TJTIE.uint32 shl 3).masked(3 .. 3))
  x.setMask((ROIE.uint32 shl 4).masked(4 .. 4))
  x.setMask((TUIE.uint32 shl 5).masked(5 .. 5))
  x.setMask((RIE.uint32 shl 6).masked(6 .. 6))
  x.setMask((RBUIE.uint32 shl 7).masked(7 .. 7))
  x.setMask((RPSIE.uint32 shl 8).masked(8 .. 8))
  x.setMask((RWTIE.uint32 shl 9).masked(9 .. 9))
  x.setMask((ETIE.uint32 shl 10).masked(10 .. 10))
  x.setMask((FBEIE.uint32 shl 13).masked(13 .. 13))
  x.setMask((ERIE.uint32 shl 14).masked(14 .. 14))
  x.setMask((AISE.uint32 shl 15).masked(15 .. 15))
  x.setMask((NISE.uint32 shl 16).masked(16 .. 16))
  x.setMask((IPLE.uint32 shl 31).masked(31 .. 31))
  reg.write x.ETHERNET_DMA_DMAIER_Fields

template modifyIt*(reg: ETHERNET_DMA_DMAIER_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ETHERNET_DMA_DMAMFBOCR_Type): ETHERNET_DMA_DMAMFBOCR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_DMA_DMAMFBOCR_Fields](reg.loc))

proc read*(reg: static ETHERNET_DMA_DMAMFBOCR_Type): ETHERNET_DMA_DMAMFBOCR_Fields {.inline.} =
  volatileLoad(cast[ptr ETHERNET_DMA_DMAMFBOCR_Fields](reg.loc))

proc read*(reg: ETHERNET_DMA_DMACHTDR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static ETHERNET_DMA_DMACHTDR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: ETHERNET_DMA_DMACHRDR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static ETHERNET_DMA_DMACHRDR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: ETHERNET_DMA_DMACHTBAR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static ETHERNET_DMA_DMACHTBAR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: ETHERNET_DMA_DMACHRBAR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static ETHERNET_DMA_DMACHRBAR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

func SR*(r: ETHERNET_DMA_DMABMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `SR=`*(r: var ETHERNET_DMA_DMABMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.ETHERNET_DMA_DMABMR_Fields

func DA*(r: ETHERNET_DMA_DMABMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `DA=`*(r: var ETHERNET_DMA_DMABMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.ETHERNET_DMA_DMABMR_Fields

func DSL*(r: ETHERNET_DMA_DMABMR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 6)

proc `DSL=`*(r: var ETHERNET_DMA_DMABMR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 6)
  tmp.setMask((val shl 2).masked(2 .. 6))
  r = tmp.ETHERNET_DMA_DMABMR_Fields

func PBL*(r: ETHERNET_DMA_DMABMR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 13)

proc `PBL=`*(r: var ETHERNET_DMA_DMABMR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 13)
  tmp.setMask((val shl 8).masked(8 .. 13))
  r = tmp.ETHERNET_DMA_DMABMR_Fields

func RTPR*(r: ETHERNET_DMA_DMABMR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `RTPR=`*(r: var ETHERNET_DMA_DMABMR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.ETHERNET_DMA_DMABMR_Fields

func FB*(r: ETHERNET_DMA_DMABMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB=`*(r: var ETHERNET_DMA_DMABMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.ETHERNET_DMA_DMABMR_Fields

func RDP*(r: ETHERNET_DMA_DMABMR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(17 .. 22)

proc `RDP=`*(r: var ETHERNET_DMA_DMABMR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 22)
  tmp.setMask((val shl 17).masked(17 .. 22))
  r = tmp.ETHERNET_DMA_DMABMR_Fields

func USP*(r: ETHERNET_DMA_DMABMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `USP=`*(r: var ETHERNET_DMA_DMABMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.ETHERNET_DMA_DMABMR_Fields

func FPM*(r: ETHERNET_DMA_DMABMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FPM=`*(r: var ETHERNET_DMA_DMABMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.ETHERNET_DMA_DMABMR_Fields

func AAB*(r: ETHERNET_DMA_DMABMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `AAB=`*(r: var ETHERNET_DMA_DMABMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.ETHERNET_DMA_DMABMR_Fields

func TS*(r: ETHERNET_DMA_DMASR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `TS=`*(r: var ETHERNET_DMA_DMASR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.ETHERNET_DMA_DMASR_Fields

func TPSS*(r: ETHERNET_DMA_DMASR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `TPSS=`*(r: var ETHERNET_DMA_DMASR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.ETHERNET_DMA_DMASR_Fields

func TBUS*(r: ETHERNET_DMA_DMASR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `TBUS=`*(r: var ETHERNET_DMA_DMASR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.ETHERNET_DMA_DMASR_Fields

func TJTS*(r: ETHERNET_DMA_DMASR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TJTS=`*(r: var ETHERNET_DMA_DMASR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.ETHERNET_DMA_DMASR_Fields

func ROS*(r: ETHERNET_DMA_DMASR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `ROS=`*(r: var ETHERNET_DMA_DMASR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.ETHERNET_DMA_DMASR_Fields

func TUS*(r: ETHERNET_DMA_DMASR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `TUS=`*(r: var ETHERNET_DMA_DMASR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.ETHERNET_DMA_DMASR_Fields

func RS*(r: ETHERNET_DMA_DMASR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `RS=`*(r: var ETHERNET_DMA_DMASR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.ETHERNET_DMA_DMASR_Fields

func RBUS*(r: ETHERNET_DMA_DMASR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `RBUS=`*(r: var ETHERNET_DMA_DMASR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.ETHERNET_DMA_DMASR_Fields

func RPSS*(r: ETHERNET_DMA_DMASR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `RPSS=`*(r: var ETHERNET_DMA_DMASR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.ETHERNET_DMA_DMASR_Fields

func PWTS*(r: ETHERNET_DMA_DMASR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `PWTS=`*(r: var ETHERNET_DMA_DMASR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.ETHERNET_DMA_DMASR_Fields

func ETS*(r: ETHERNET_DMA_DMASR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `ETS=`*(r: var ETHERNET_DMA_DMASR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.ETHERNET_DMA_DMASR_Fields

func FBES*(r: ETHERNET_DMA_DMASR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FBES=`*(r: var ETHERNET_DMA_DMASR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.ETHERNET_DMA_DMASR_Fields

func ERS*(r: ETHERNET_DMA_DMASR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `ERS=`*(r: var ETHERNET_DMA_DMASR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.ETHERNET_DMA_DMASR_Fields

func AIS*(r: ETHERNET_DMA_DMASR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `AIS=`*(r: var ETHERNET_DMA_DMASR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.ETHERNET_DMA_DMASR_Fields

func NIS*(r: ETHERNET_DMA_DMASR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `NIS=`*(r: var ETHERNET_DMA_DMASR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.ETHERNET_DMA_DMASR_Fields

func RPS*(r: ETHERNET_DMA_DMASR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(17 .. 19)

func TPS*(r: ETHERNET_DMA_DMASR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 22)

func EBS*(r: ETHERNET_DMA_DMASR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(23 .. 25)

func MMCS*(r: ETHERNET_DMA_DMASR_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

func PMTS*(r: ETHERNET_DMA_DMASR_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

func TSTS*(r: ETHERNET_DMA_DMASR_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

func IPLS*(r: ETHERNET_DMA_DMASR_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

func SR*(r: ETHERNET_DMA_DMAOMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `SR=`*(r: var ETHERNET_DMA_DMAOMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.ETHERNET_DMA_DMAOMR_Fields

func OSF*(r: ETHERNET_DMA_DMAOMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `OSF=`*(r: var ETHERNET_DMA_DMAOMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.ETHERNET_DMA_DMAOMR_Fields

func RTCField*(r: ETHERNET_DMA_DMAOMR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 4)

proc `RTCField=`*(r: var ETHERNET_DMA_DMAOMR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.ETHERNET_DMA_DMAOMR_Fields

func FUGF*(r: ETHERNET_DMA_DMAOMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FUGF=`*(r: var ETHERNET_DMA_DMAOMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.ETHERNET_DMA_DMAOMR_Fields

func FEF*(r: ETHERNET_DMA_DMAOMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FEF=`*(r: var ETHERNET_DMA_DMAOMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.ETHERNET_DMA_DMAOMR_Fields

func ST*(r: ETHERNET_DMA_DMAOMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `ST=`*(r: var ETHERNET_DMA_DMAOMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.ETHERNET_DMA_DMAOMR_Fields

func TTC*(r: ETHERNET_DMA_DMAOMR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 16)

proc `TTC=`*(r: var ETHERNET_DMA_DMAOMR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 16)
  tmp.setMask((val shl 14).masked(14 .. 16))
  r = tmp.ETHERNET_DMA_DMAOMR_Fields

func FTF*(r: ETHERNET_DMA_DMAOMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FTF=`*(r: var ETHERNET_DMA_DMAOMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.ETHERNET_DMA_DMAOMR_Fields

func TSF*(r: ETHERNET_DMA_DMAOMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `TSF=`*(r: var ETHERNET_DMA_DMAOMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.ETHERNET_DMA_DMAOMR_Fields

func DFRF*(r: ETHERNET_DMA_DMAOMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `DFRF=`*(r: var ETHERNET_DMA_DMAOMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.ETHERNET_DMA_DMAOMR_Fields

func RSF*(r: ETHERNET_DMA_DMAOMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `RSF=`*(r: var ETHERNET_DMA_DMAOMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.ETHERNET_DMA_DMAOMR_Fields

func DTCEFD*(r: ETHERNET_DMA_DMAOMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `DTCEFD=`*(r: var ETHERNET_DMA_DMAOMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.ETHERNET_DMA_DMAOMR_Fields

func TIE*(r: ETHERNET_DMA_DMAIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `TIE=`*(r: var ETHERNET_DMA_DMAIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.ETHERNET_DMA_DMAIER_Fields

func TPSIE*(r: ETHERNET_DMA_DMAIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `TPSIE=`*(r: var ETHERNET_DMA_DMAIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.ETHERNET_DMA_DMAIER_Fields

func TBUIE*(r: ETHERNET_DMA_DMAIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `TBUIE=`*(r: var ETHERNET_DMA_DMAIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.ETHERNET_DMA_DMAIER_Fields

func TJTIE*(r: ETHERNET_DMA_DMAIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TJTIE=`*(r: var ETHERNET_DMA_DMAIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.ETHERNET_DMA_DMAIER_Fields

func ROIE*(r: ETHERNET_DMA_DMAIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `ROIE=`*(r: var ETHERNET_DMA_DMAIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.ETHERNET_DMA_DMAIER_Fields

func TUIE*(r: ETHERNET_DMA_DMAIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `TUIE=`*(r: var ETHERNET_DMA_DMAIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.ETHERNET_DMA_DMAIER_Fields

func RIE*(r: ETHERNET_DMA_DMAIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `RIE=`*(r: var ETHERNET_DMA_DMAIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.ETHERNET_DMA_DMAIER_Fields

func RBUIE*(r: ETHERNET_DMA_DMAIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `RBUIE=`*(r: var ETHERNET_DMA_DMAIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.ETHERNET_DMA_DMAIER_Fields

func RPSIE*(r: ETHERNET_DMA_DMAIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `RPSIE=`*(r: var ETHERNET_DMA_DMAIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.ETHERNET_DMA_DMAIER_Fields

func RWTIE*(r: ETHERNET_DMA_DMAIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `RWTIE=`*(r: var ETHERNET_DMA_DMAIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.ETHERNET_DMA_DMAIER_Fields

func ETIE*(r: ETHERNET_DMA_DMAIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `ETIE=`*(r: var ETHERNET_DMA_DMAIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.ETHERNET_DMA_DMAIER_Fields

func FBEIE*(r: ETHERNET_DMA_DMAIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FBEIE=`*(r: var ETHERNET_DMA_DMAIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.ETHERNET_DMA_DMAIER_Fields

func ERIE*(r: ETHERNET_DMA_DMAIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `ERIE=`*(r: var ETHERNET_DMA_DMAIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.ETHERNET_DMA_DMAIER_Fields

func AISE*(r: ETHERNET_DMA_DMAIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `AISE=`*(r: var ETHERNET_DMA_DMAIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.ETHERNET_DMA_DMAIER_Fields

func NISE*(r: ETHERNET_DMA_DMAIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `NISE=`*(r: var ETHERNET_DMA_DMAIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.ETHERNET_DMA_DMAIER_Fields

func IPLE*(r: ETHERNET_DMA_DMAIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `IPLE=`*(r: var ETHERNET_DMA_DMAIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.ETHERNET_DMA_DMAIER_Fields

func MFC*(r: ETHERNET_DMA_DMAMFBOCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func OMFC*(r: ETHERNET_DMA_DMAMFBOCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

func MFA*(r: ETHERNET_DMA_DMAMFBOCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(17 .. 27)

func OFOC*(r: ETHERNET_DMA_DMAMFBOCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

type
  DAC_CTLR_Fields* = distinct uint32
  DAC_SWTR_Fields* = distinct uint32
  DAC_R12BDHR1_Fields* = distinct uint32
  DAC_L12BDHR1_Fields* = distinct uint32
  DAC_R8BDHR1_Fields* = distinct uint32
  DAC_R12BDHR2_Fields* = distinct uint32
  DAC_L12BDHR2_Fields* = distinct uint32
  DAC_R8BDHR2_Fields* = distinct uint32
  DAC_RD12BDHR_Fields* = distinct uint32
  DAC_LD12BDHR_Fields* = distinct uint32
  DAC_RD8BDHR_Fields* = distinct uint32
  DAC_DOR1_Fields* = distinct uint32
  DAC_DOR2_Fields* = distinct uint32

proc read*(reg: DAC_CTLR_Type): DAC_CTLR_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_CTLR_Fields](reg.loc))

proc read*(reg: static DAC_CTLR_Type): DAC_CTLR_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_CTLR_Fields](reg.loc))

proc write*(reg: DAC_CTLR_Type, val: DAC_CTLR_Fields) {.inline.} =
  volatileStore(cast[ptr DAC_CTLR_Fields](reg.loc), val)

proc write*(reg: DAC_CTLR_Type, EN1: bool = false, BOFF1: bool = false, TEN1: bool = false, TSEL1: uint32 = 0, WAVE1: uint32 = 0, MAMP1: uint32 = 0, DMAEN1: bool = false, EN2: bool = false, BOFF2: bool = false, TEN2: bool = false, TSEL2: uint32 = 0, WAVE2: uint32 = 0, MAMP2: uint32 = 0, DMAEN2: bool = false) =
  var x: uint32
  x.setMask((EN1.uint32 shl 0).masked(0 .. 0))
  x.setMask((BOFF1.uint32 shl 1).masked(1 .. 1))
  x.setMask((TEN1.uint32 shl 2).masked(2 .. 2))
  x.setMask((TSEL1 shl 3).masked(3 .. 5))
  x.setMask((WAVE1 shl 6).masked(6 .. 7))
  x.setMask((MAMP1 shl 8).masked(8 .. 11))
  x.setMask((DMAEN1.uint32 shl 12).masked(12 .. 12))
  x.setMask((EN2.uint32 shl 16).masked(16 .. 16))
  x.setMask((BOFF2.uint32 shl 17).masked(17 .. 17))
  x.setMask((TEN2.uint32 shl 18).masked(18 .. 18))
  x.setMask((TSEL2 shl 19).masked(19 .. 21))
  x.setMask((WAVE2 shl 22).masked(22 .. 23))
  x.setMask((MAMP2 shl 24).masked(24 .. 27))
  x.setMask((DMAEN2.uint32 shl 28).masked(28 .. 28))
  reg.write x.DAC_CTLR_Fields

template modifyIt*(reg: DAC_CTLR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc write*(reg: DAC_SWTR_Type, val: DAC_SWTR_Fields) {.inline.} =
  volatileStore(cast[ptr DAC_SWTR_Fields](reg.loc), val)

proc write*(reg: DAC_SWTR_Type, SWTRIG1: bool = false, SWTRIG2: bool = false) =
  var x: uint32
  x.setMask((SWTRIG1.uint32 shl 0).masked(0 .. 0))
  x.setMask((SWTRIG2.uint32 shl 1).masked(1 .. 1))
  reg.write x.DAC_SWTR_Fields

proc read*(reg: DAC_R12BDHR1_Type): DAC_R12BDHR1_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_R12BDHR1_Fields](reg.loc))

proc read*(reg: static DAC_R12BDHR1_Type): DAC_R12BDHR1_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_R12BDHR1_Fields](reg.loc))

proc write*(reg: DAC_R12BDHR1_Type, val: DAC_R12BDHR1_Fields) {.inline.} =
  volatileStore(cast[ptr DAC_R12BDHR1_Fields](reg.loc), val)

proc write*(reg: DAC_R12BDHR1_Type, DACC1DHR: uint32 = 0) =
  var x: uint32
  x.setMask((DACC1DHR shl 0).masked(0 .. 11))
  reg.write x.DAC_R12BDHR1_Fields

template modifyIt*(reg: DAC_R12BDHR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DAC_L12BDHR1_Type): DAC_L12BDHR1_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_L12BDHR1_Fields](reg.loc))

proc read*(reg: static DAC_L12BDHR1_Type): DAC_L12BDHR1_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_L12BDHR1_Fields](reg.loc))

proc write*(reg: DAC_L12BDHR1_Type, val: DAC_L12BDHR1_Fields) {.inline.} =
  volatileStore(cast[ptr DAC_L12BDHR1_Fields](reg.loc), val)

proc write*(reg: DAC_L12BDHR1_Type, DACC1DHR: uint32 = 0) =
  var x: uint32
  x.setMask((DACC1DHR shl 4).masked(4 .. 15))
  reg.write x.DAC_L12BDHR1_Fields

template modifyIt*(reg: DAC_L12BDHR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DAC_R8BDHR1_Type): DAC_R8BDHR1_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_R8BDHR1_Fields](reg.loc))

proc read*(reg: static DAC_R8BDHR1_Type): DAC_R8BDHR1_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_R8BDHR1_Fields](reg.loc))

proc write*(reg: DAC_R8BDHR1_Type, val: DAC_R8BDHR1_Fields) {.inline.} =
  volatileStore(cast[ptr DAC_R8BDHR1_Fields](reg.loc), val)

proc write*(reg: DAC_R8BDHR1_Type, DACC1DHR: uint32 = 0) =
  var x: uint32
  x.setMask((DACC1DHR shl 0).masked(0 .. 7))
  reg.write x.DAC_R8BDHR1_Fields

template modifyIt*(reg: DAC_R8BDHR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DAC_R12BDHR2_Type): DAC_R12BDHR2_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_R12BDHR2_Fields](reg.loc))

proc read*(reg: static DAC_R12BDHR2_Type): DAC_R12BDHR2_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_R12BDHR2_Fields](reg.loc))

proc write*(reg: DAC_R12BDHR2_Type, val: DAC_R12BDHR2_Fields) {.inline.} =
  volatileStore(cast[ptr DAC_R12BDHR2_Fields](reg.loc), val)

proc write*(reg: DAC_R12BDHR2_Type, DACC2DHR: uint32 = 0) =
  var x: uint32
  x.setMask((DACC2DHR shl 0).masked(0 .. 11))
  reg.write x.DAC_R12BDHR2_Fields

template modifyIt*(reg: DAC_R12BDHR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DAC_L12BDHR2_Type): DAC_L12BDHR2_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_L12BDHR2_Fields](reg.loc))

proc read*(reg: static DAC_L12BDHR2_Type): DAC_L12BDHR2_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_L12BDHR2_Fields](reg.loc))

proc write*(reg: DAC_L12BDHR2_Type, val: DAC_L12BDHR2_Fields) {.inline.} =
  volatileStore(cast[ptr DAC_L12BDHR2_Fields](reg.loc), val)

proc write*(reg: DAC_L12BDHR2_Type, DACC2DHR: uint32 = 0) =
  var x: uint32
  x.setMask((DACC2DHR shl 4).masked(4 .. 15))
  reg.write x.DAC_L12BDHR2_Fields

template modifyIt*(reg: DAC_L12BDHR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DAC_R8BDHR2_Type): DAC_R8BDHR2_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_R8BDHR2_Fields](reg.loc))

proc read*(reg: static DAC_R8BDHR2_Type): DAC_R8BDHR2_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_R8BDHR2_Fields](reg.loc))

proc write*(reg: DAC_R8BDHR2_Type, val: DAC_R8BDHR2_Fields) {.inline.} =
  volatileStore(cast[ptr DAC_R8BDHR2_Fields](reg.loc), val)

proc write*(reg: DAC_R8BDHR2_Type, DACC2DHR: uint32 = 0) =
  var x: uint32
  x.setMask((DACC2DHR shl 0).masked(0 .. 7))
  reg.write x.DAC_R8BDHR2_Fields

template modifyIt*(reg: DAC_R8BDHR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DAC_RD12BDHR_Type): DAC_RD12BDHR_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_RD12BDHR_Fields](reg.loc))

proc read*(reg: static DAC_RD12BDHR_Type): DAC_RD12BDHR_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_RD12BDHR_Fields](reg.loc))

proc write*(reg: DAC_RD12BDHR_Type, val: DAC_RD12BDHR_Fields) {.inline.} =
  volatileStore(cast[ptr DAC_RD12BDHR_Fields](reg.loc), val)

proc write*(reg: DAC_RD12BDHR_Type, DACC1DHR: uint32 = 0, DACC2DHR: uint32 = 0) =
  var x: uint32
  x.setMask((DACC1DHR shl 0).masked(0 .. 11))
  x.setMask((DACC2DHR shl 16).masked(16 .. 27))
  reg.write x.DAC_RD12BDHR_Fields

template modifyIt*(reg: DAC_RD12BDHR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DAC_LD12BDHR_Type): DAC_LD12BDHR_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_LD12BDHR_Fields](reg.loc))

proc read*(reg: static DAC_LD12BDHR_Type): DAC_LD12BDHR_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_LD12BDHR_Fields](reg.loc))

proc write*(reg: DAC_LD12BDHR_Type, val: DAC_LD12BDHR_Fields) {.inline.} =
  volatileStore(cast[ptr DAC_LD12BDHR_Fields](reg.loc), val)

proc write*(reg: DAC_LD12BDHR_Type, DACC1DHR: uint32 = 0, DACC2DHR: uint32 = 0) =
  var x: uint32
  x.setMask((DACC1DHR shl 4).masked(4 .. 15))
  x.setMask((DACC2DHR shl 20).masked(20 .. 31))
  reg.write x.DAC_LD12BDHR_Fields

template modifyIt*(reg: DAC_LD12BDHR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DAC_RD8BDHR_Type): DAC_RD8BDHR_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_RD8BDHR_Fields](reg.loc))

proc read*(reg: static DAC_RD8BDHR_Type): DAC_RD8BDHR_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_RD8BDHR_Fields](reg.loc))

proc write*(reg: DAC_RD8BDHR_Type, val: DAC_RD8BDHR_Fields) {.inline.} =
  volatileStore(cast[ptr DAC_RD8BDHR_Fields](reg.loc), val)

proc write*(reg: DAC_RD8BDHR_Type, DACC1DHR: uint32 = 0, DACC2DHR: uint32 = 0) =
  var x: uint32
  x.setMask((DACC1DHR shl 0).masked(0 .. 7))
  x.setMask((DACC2DHR shl 8).masked(8 .. 15))
  reg.write x.DAC_RD8BDHR_Fields

template modifyIt*(reg: DAC_RD8BDHR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DAC_DOR1_Type): DAC_DOR1_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_DOR1_Fields](reg.loc))

proc read*(reg: static DAC_DOR1_Type): DAC_DOR1_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_DOR1_Fields](reg.loc))

proc read*(reg: DAC_DOR2_Type): DAC_DOR2_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_DOR2_Fields](reg.loc))

proc read*(reg: static DAC_DOR2_Type): DAC_DOR2_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_DOR2_Fields](reg.loc))

func EN1*(r: DAC_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `EN1=`*(r: var DAC_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.DAC_CTLR_Fields

func BOFF1*(r: DAC_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `BOFF1=`*(r: var DAC_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.DAC_CTLR_Fields

func TEN1*(r: DAC_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `TEN1=`*(r: var DAC_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DAC_CTLR_Fields

func TSEL1*(r: DAC_CTLR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 5)

proc `TSEL1=`*(r: var DAC_CTLR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 5)
  tmp.setMask((val shl 3).masked(3 .. 5))
  r = tmp.DAC_CTLR_Fields

func WAVE1*(r: DAC_CTLR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 7)

proc `WAVE1=`*(r: var DAC_CTLR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 7)
  tmp.setMask((val shl 6).masked(6 .. 7))
  r = tmp.DAC_CTLR_Fields

func MAMP1*(r: DAC_CTLR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

proc `MAMP1=`*(r: var DAC_CTLR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 11)
  tmp.setMask((val shl 8).masked(8 .. 11))
  r = tmp.DAC_CTLR_Fields

func DMAEN1*(r: DAC_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `DMAEN1=`*(r: var DAC_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.DAC_CTLR_Fields

func EN2*(r: DAC_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `EN2=`*(r: var DAC_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.DAC_CTLR_Fields

func BOFF2*(r: DAC_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `BOFF2=`*(r: var DAC_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.DAC_CTLR_Fields

func TEN2*(r: DAC_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `TEN2=`*(r: var DAC_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.DAC_CTLR_Fields

func TSEL2*(r: DAC_CTLR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 21)

proc `TSEL2=`*(r: var DAC_CTLR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 21)
  tmp.setMask((val shl 19).masked(19 .. 21))
  r = tmp.DAC_CTLR_Fields

func WAVE2*(r: DAC_CTLR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 23)

proc `WAVE2=`*(r: var DAC_CTLR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 23)
  tmp.setMask((val shl 22).masked(22 .. 23))
  r = tmp.DAC_CTLR_Fields

func MAMP2*(r: DAC_CTLR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 27)

proc `MAMP2=`*(r: var DAC_CTLR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 27)
  tmp.setMask((val shl 24).masked(24 .. 27))
  r = tmp.DAC_CTLR_Fields

func DMAEN2*(r: DAC_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `DMAEN2=`*(r: var DAC_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.DAC_CTLR_Fields

proc `SWTRIG1=`*(r: var DAC_SWTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.DAC_SWTR_Fields

proc `SWTRIG2=`*(r: var DAC_SWTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.DAC_SWTR_Fields

func DACC1DHR*(r: DAC_R12BDHR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

proc `DACC1DHR=`*(r: var DAC_R12BDHR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 11)
  tmp.setMask((val shl 0).masked(0 .. 11))
  r = tmp.DAC_R12BDHR1_Fields

func DACC1DHR*(r: DAC_L12BDHR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 15)

proc `DACC1DHR=`*(r: var DAC_L12BDHR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 15)
  tmp.setMask((val shl 4).masked(4 .. 15))
  r = tmp.DAC_L12BDHR1_Fields

func DACC1DHR*(r: DAC_R8BDHR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `DACC1DHR=`*(r: var DAC_R8BDHR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.DAC_R8BDHR1_Fields

func DACC2DHR*(r: DAC_R12BDHR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

proc `DACC2DHR=`*(r: var DAC_R12BDHR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 11)
  tmp.setMask((val shl 0).masked(0 .. 11))
  r = tmp.DAC_R12BDHR2_Fields

func DACC2DHR*(r: DAC_L12BDHR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 15)

proc `DACC2DHR=`*(r: var DAC_L12BDHR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 15)
  tmp.setMask((val shl 4).masked(4 .. 15))
  r = tmp.DAC_L12BDHR2_Fields

func DACC2DHR*(r: DAC_R8BDHR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `DACC2DHR=`*(r: var DAC_R8BDHR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.DAC_R8BDHR2_Fields

func DACC1DHR*(r: DAC_RD12BDHR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

proc `DACC1DHR=`*(r: var DAC_RD12BDHR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 11)
  tmp.setMask((val shl 0).masked(0 .. 11))
  r = tmp.DAC_RD12BDHR_Fields

func DACC2DHR*(r: DAC_RD12BDHR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 27)

proc `DACC2DHR=`*(r: var DAC_RD12BDHR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 27)
  tmp.setMask((val shl 16).masked(16 .. 27))
  r = tmp.DAC_RD12BDHR_Fields

func DACC1DHR*(r: DAC_LD12BDHR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 15)

proc `DACC1DHR=`*(r: var DAC_LD12BDHR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 15)
  tmp.setMask((val shl 4).masked(4 .. 15))
  r = tmp.DAC_LD12BDHR_Fields

func DACC2DHR*(r: DAC_LD12BDHR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 31)

proc `DACC2DHR=`*(r: var DAC_LD12BDHR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 31)
  tmp.setMask((val shl 20).masked(20 .. 31))
  r = tmp.DAC_LD12BDHR_Fields

func DACC1DHR*(r: DAC_RD8BDHR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `DACC1DHR=`*(r: var DAC_RD8BDHR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.DAC_RD8BDHR_Fields

func DACC2DHR*(r: DAC_RD8BDHR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `DACC2DHR=`*(r: var DAC_RD8BDHR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.DAC_RD8BDHR_Fields

func DACC1DOR*(r: DAC_DOR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

func DACC2DOR*(r: DAC_DOR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

type
  PWR_CTLR_Fields* = distinct uint32
  PWR_CSR_Fields* = distinct uint32

proc read*(reg: PWR_CTLR_Type): PWR_CTLR_Fields {.inline.} =
  volatileLoad(cast[ptr PWR_CTLR_Fields](reg.loc))

proc read*(reg: static PWR_CTLR_Type): PWR_CTLR_Fields {.inline.} =
  volatileLoad(cast[ptr PWR_CTLR_Fields](reg.loc))

proc write*(reg: PWR_CTLR_Type, val: PWR_CTLR_Fields) {.inline.} =
  volatileStore(cast[ptr PWR_CTLR_Fields](reg.loc), val)

proc write*(reg: PWR_CTLR_Type, LPDS: bool = false, PDDS: bool = false, CWUF: bool = false, CSBF: bool = false, PVDE: bool = false, PLS: uint32 = 0, DBP: bool = false, R2K_STYEN: bool = false, R30K_STYEN: bool = false, R2K_VBATEN: bool = false, R30K_VBATEN: bool = false, RAM_LVEN: bool = false) =
  var x: uint32
  x.setMask((LPDS.uint32 shl 0).masked(0 .. 0))
  x.setMask((PDDS.uint32 shl 1).masked(1 .. 1))
  x.setMask((CWUF.uint32 shl 2).masked(2 .. 2))
  x.setMask((CSBF.uint32 shl 3).masked(3 .. 3))
  x.setMask((PVDE.uint32 shl 4).masked(4 .. 4))
  x.setMask((PLS shl 5).masked(5 .. 7))
  x.setMask((DBP.uint32 shl 8).masked(8 .. 8))
  x.setMask((R2K_STYEN.uint32 shl 16).masked(16 .. 16))
  x.setMask((R30K_STYEN.uint32 shl 17).masked(17 .. 17))
  x.setMask((R2K_VBATEN.uint32 shl 18).masked(18 .. 18))
  x.setMask((R30K_VBATEN.uint32 shl 19).masked(19 .. 19))
  x.setMask((RAM_LVEN.uint32 shl 20).masked(20 .. 20))
  reg.write x.PWR_CTLR_Fields

template modifyIt*(reg: PWR_CTLR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PWR_CSR_Type): PWR_CSR_Fields {.inline.} =
  volatileLoad(cast[ptr PWR_CSR_Fields](reg.loc))

proc read*(reg: static PWR_CSR_Type): PWR_CSR_Fields {.inline.} =
  volatileLoad(cast[ptr PWR_CSR_Fields](reg.loc))

proc write*(reg: PWR_CSR_Type, val: PWR_CSR_Fields) {.inline.} =
  volatileStore(cast[ptr PWR_CSR_Fields](reg.loc), val)

proc write*(reg: PWR_CSR_Type, EWUP: bool = false) =
  var x: uint32
  x.setMask((EWUP.uint32 shl 8).masked(8 .. 8))
  reg.write x.PWR_CSR_Fields

template modifyIt*(reg: PWR_CSR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func LPDS*(r: PWR_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `LPDS=`*(r: var PWR_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.PWR_CTLR_Fields

func PDDS*(r: PWR_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `PDDS=`*(r: var PWR_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.PWR_CTLR_Fields

func CWUF*(r: PWR_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `CWUF=`*(r: var PWR_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.PWR_CTLR_Fields

func CSBF*(r: PWR_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CSBF=`*(r: var PWR_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.PWR_CTLR_Fields

func PVDE*(r: PWR_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `PVDE=`*(r: var PWR_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.PWR_CTLR_Fields

func PLS*(r: PWR_CTLR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(5 .. 7)

proc `PLS=`*(r: var PWR_CTLR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 7)
  tmp.setMask((val shl 5).masked(5 .. 7))
  r = tmp.PWR_CTLR_Fields

func DBP*(r: PWR_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `DBP=`*(r: var PWR_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.PWR_CTLR_Fields

func R2K_STYEN*(r: PWR_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `R2K_STYEN=`*(r: var PWR_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.PWR_CTLR_Fields

func R30K_STYEN*(r: PWR_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `R30K_STYEN=`*(r: var PWR_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.PWR_CTLR_Fields

func R2K_VBATEN*(r: PWR_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `R2K_VBATEN=`*(r: var PWR_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.PWR_CTLR_Fields

func R30K_VBATEN*(r: PWR_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `R30K_VBATEN=`*(r: var PWR_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.PWR_CTLR_Fields

func RAM_LVEN*(r: PWR_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `RAM_LVEN=`*(r: var PWR_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.PWR_CTLR_Fields

func WUF*(r: PWR_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func SBF*(r: PWR_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func PVDO*(r: PWR_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func EWUP*(r: PWR_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `EWUP=`*(r: var PWR_CSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.PWR_CSR_Fields

type
  RCC_CTLR_Fields* = distinct uint32
  RCC_CFGR0_Fields* = distinct uint32
  RCC_INTR_Fields* = distinct uint32
  RCC_APB2PRSTR_Fields* = distinct uint32
  RCC_APB1PRSTR_Fields* = distinct uint32
  RCC_AHBPCENR_Fields* = distinct uint32
  RCC_APB2PCENR_Fields* = distinct uint32
  RCC_APB1PCENR_Fields* = distinct uint32
  RCC_BDCTLR_Fields* = distinct uint32
  RCC_RSTSCKR_Fields* = distinct uint32
  RCC_AHBRSTR_Fields* = distinct uint32
  RCC_CFGR2_Fields* = distinct uint32

proc read*(reg: RCC_CTLR_Type): RCC_CTLR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_CTLR_Fields](reg.loc))

proc read*(reg: static RCC_CTLR_Type): RCC_CTLR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_CTLR_Fields](reg.loc))

proc write*(reg: RCC_CTLR_Type, val: RCC_CTLR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_CTLR_Fields](reg.loc), val)

proc write*(reg: RCC_CTLR_Type, HSION: bool = true, HSITRIM: uint32 = 16, HSEON: bool = false, HSEBYP: bool = false, CSSON: bool = false, PLLON: bool = false) =
  var x: uint32
  x.setMask((HSION.uint32 shl 0).masked(0 .. 0))
  x.setMask((HSITRIM shl 3).masked(3 .. 7))
  x.setMask((HSEON.uint32 shl 16).masked(16 .. 16))
  x.setMask((HSEBYP.uint32 shl 18).masked(18 .. 18))
  x.setMask((CSSON.uint32 shl 19).masked(19 .. 19))
  x.setMask((PLLON.uint32 shl 24).masked(24 .. 24))
  reg.write x.RCC_CTLR_Fields

template modifyIt*(reg: RCC_CTLR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_CFGR0_Type): RCC_CFGR0_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_CFGR0_Fields](reg.loc))

proc read*(reg: static RCC_CFGR0_Type): RCC_CFGR0_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_CFGR0_Fields](reg.loc))

proc write*(reg: RCC_CFGR0_Type, val: RCC_CFGR0_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_CFGR0_Fields](reg.loc), val)

proc write*(reg: RCC_CFGR0_Type, SW: uint32 = 0, HPRE: uint32 = 0, PPRE1: uint32 = 0, PPRE2: uint32 = 0, ADCPRE: uint32 = 0, PLLSRC: bool = false, PLLXTPRE: bool = false, PLLMUL: uint32 = 0, USBPRE: uint32 = 0, MCO: uint32 = 0, ETHPRE: bool = false, ADC_CLK_ADJ: bool = false) =
  var x: uint32
  x.setMask((SW shl 0).masked(0 .. 1))
  x.setMask((HPRE shl 4).masked(4 .. 7))
  x.setMask((PPRE1 shl 8).masked(8 .. 10))
  x.setMask((PPRE2 shl 11).masked(11 .. 13))
  x.setMask((ADCPRE shl 14).masked(14 .. 15))
  x.setMask((PLLSRC.uint32 shl 16).masked(16 .. 16))
  x.setMask((PLLXTPRE.uint32 shl 17).masked(17 .. 17))
  x.setMask((PLLMUL shl 18).masked(18 .. 21))
  x.setMask((USBPRE shl 22).masked(22 .. 23))
  x.setMask((MCO shl 24).masked(24 .. 27))
  x.setMask((ETHPRE.uint32 shl 28).masked(28 .. 28))
  x.setMask((ADC_CLK_ADJ.uint32 shl 31).masked(31 .. 31))
  reg.write x.RCC_CFGR0_Fields

template modifyIt*(reg: RCC_CFGR0_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_INTR_Type): RCC_INTR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_INTR_Fields](reg.loc))

proc read*(reg: static RCC_INTR_Type): RCC_INTR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_INTR_Fields](reg.loc))

proc write*(reg: RCC_INTR_Type, val: RCC_INTR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_INTR_Fields](reg.loc), val)

proc write*(reg: RCC_INTR_Type, LSIRDYIE: bool = false, LSERDYIE: bool = false, HSIRDYIE: bool = false, HSERDYIE: bool = false, PLLRDYIE: bool = false, LSIRDYC: bool = false, LSERDYC: bool = false, HSIRDYC: bool = false, HSERDYC: bool = false, PLLRDYC: bool = false, CSSC: bool = false) =
  var x: uint32
  x.setMask((LSIRDYIE.uint32 shl 8).masked(8 .. 8))
  x.setMask((LSERDYIE.uint32 shl 9).masked(9 .. 9))
  x.setMask((HSIRDYIE.uint32 shl 10).masked(10 .. 10))
  x.setMask((HSERDYIE.uint32 shl 11).masked(11 .. 11))
  x.setMask((PLLRDYIE.uint32 shl 12).masked(12 .. 12))
  x.setMask((LSIRDYC.uint32 shl 16).masked(16 .. 16))
  x.setMask((LSERDYC.uint32 shl 17).masked(17 .. 17))
  x.setMask((HSIRDYC.uint32 shl 18).masked(18 .. 18))
  x.setMask((HSERDYC.uint32 shl 19).masked(19 .. 19))
  x.setMask((PLLRDYC.uint32 shl 20).masked(20 .. 20))
  x.setMask((CSSC.uint32 shl 23).masked(23 .. 23))
  reg.write x.RCC_INTR_Fields

template modifyIt*(reg: RCC_INTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_APB2PRSTR_Type): RCC_APB2PRSTR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_APB2PRSTR_Fields](reg.loc))

proc read*(reg: static RCC_APB2PRSTR_Type): RCC_APB2PRSTR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_APB2PRSTR_Fields](reg.loc))

proc write*(reg: RCC_APB2PRSTR_Type, val: RCC_APB2PRSTR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_APB2PRSTR_Fields](reg.loc), val)

proc write*(reg: RCC_APB2PRSTR_Type, AFIORST: bool = false, IOPARST: bool = false, IOPBRST: bool = false, IOPCRST: bool = false, IOPDRST: bool = false, IOPERST: bool = false, ADC1RST: bool = false, ADC2RST: bool = false, TIM1RST: bool = false, SPI1RST: bool = false, TIM8RST: bool = false, USART1RST: bool = false, TIM9RST: bool = false, TIM10RST: bool = false) =
  var x: uint32
  x.setMask((AFIORST.uint32 shl 0).masked(0 .. 0))
  x.setMask((IOPARST.uint32 shl 2).masked(2 .. 2))
  x.setMask((IOPBRST.uint32 shl 3).masked(3 .. 3))
  x.setMask((IOPCRST.uint32 shl 4).masked(4 .. 4))
  x.setMask((IOPDRST.uint32 shl 5).masked(5 .. 5))
  x.setMask((IOPERST.uint32 shl 6).masked(6 .. 6))
  x.setMask((ADC1RST.uint32 shl 9).masked(9 .. 9))
  x.setMask((ADC2RST.uint32 shl 10).masked(10 .. 10))
  x.setMask((TIM1RST.uint32 shl 11).masked(11 .. 11))
  x.setMask((SPI1RST.uint32 shl 12).masked(12 .. 12))
  x.setMask((TIM8RST.uint32 shl 13).masked(13 .. 13))
  x.setMask((USART1RST.uint32 shl 14).masked(14 .. 14))
  x.setMask((TIM9RST.uint32 shl 19).masked(19 .. 19))
  x.setMask((TIM10RST.uint32 shl 20).masked(20 .. 20))
  reg.write x.RCC_APB2PRSTR_Fields

template modifyIt*(reg: RCC_APB2PRSTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_APB1PRSTR_Type): RCC_APB1PRSTR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_APB1PRSTR_Fields](reg.loc))

proc read*(reg: static RCC_APB1PRSTR_Type): RCC_APB1PRSTR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_APB1PRSTR_Fields](reg.loc))

proc write*(reg: RCC_APB1PRSTR_Type, val: RCC_APB1PRSTR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_APB1PRSTR_Fields](reg.loc), val)

proc write*(reg: RCC_APB1PRSTR_Type, TIM2RST: bool = false, TIM3RST: bool = false, TIM4RST: bool = false, TIM5RST: bool = false, TIM6RST: bool = false, TIM7RST: bool = false, UART6RST: bool = false, UART7RST: bool = false, UART8RST: bool = false, WWDGRST: bool = false, SPI2RST: bool = false, SPI3RST: bool = false, USART2RST: bool = false, USART3RST: bool = false, USART4RST: bool = false, USART5RST: bool = false, I2C1RST: bool = false, I2C2RST: bool = false, USBDRST: bool = false, CAN1RST: bool = false, CAN2RST: bool = false, BKPRST: bool = false, PWRRST: bool = false, DACRST: bool = false) =
  var x: uint32
  x.setMask((TIM2RST.uint32 shl 0).masked(0 .. 0))
  x.setMask((TIM3RST.uint32 shl 1).masked(1 .. 1))
  x.setMask((TIM4RST.uint32 shl 2).masked(2 .. 2))
  x.setMask((TIM5RST.uint32 shl 3).masked(3 .. 3))
  x.setMask((TIM6RST.uint32 shl 4).masked(4 .. 4))
  x.setMask((TIM7RST.uint32 shl 5).masked(5 .. 5))
  x.setMask((UART6RST.uint32 shl 6).masked(6 .. 6))
  x.setMask((UART7RST.uint32 shl 7).masked(7 .. 7))
  x.setMask((UART8RST.uint32 shl 8).masked(8 .. 8))
  x.setMask((WWDGRST.uint32 shl 11).masked(11 .. 11))
  x.setMask((SPI2RST.uint32 shl 14).masked(14 .. 14))
  x.setMask((SPI3RST.uint32 shl 15).masked(15 .. 15))
  x.setMask((USART2RST.uint32 shl 17).masked(17 .. 17))
  x.setMask((USART3RST.uint32 shl 18).masked(18 .. 18))
  x.setMask((USART4RST.uint32 shl 19).masked(19 .. 19))
  x.setMask((USART5RST.uint32 shl 20).masked(20 .. 20))
  x.setMask((I2C1RST.uint32 shl 21).masked(21 .. 21))
  x.setMask((I2C2RST.uint32 shl 22).masked(22 .. 22))
  x.setMask((USBDRST.uint32 shl 23).masked(23 .. 23))
  x.setMask((CAN1RST.uint32 shl 25).masked(25 .. 25))
  x.setMask((CAN2RST.uint32 shl 26).masked(26 .. 26))
  x.setMask((BKPRST.uint32 shl 27).masked(27 .. 27))
  x.setMask((PWRRST.uint32 shl 28).masked(28 .. 28))
  x.setMask((DACRST.uint32 shl 29).masked(29 .. 29))
  reg.write x.RCC_APB1PRSTR_Fields

template modifyIt*(reg: RCC_APB1PRSTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_AHBPCENR_Type): RCC_AHBPCENR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_AHBPCENR_Fields](reg.loc))

proc read*(reg: static RCC_AHBPCENR_Type): RCC_AHBPCENR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_AHBPCENR_Fields](reg.loc))

proc write*(reg: RCC_AHBPCENR_Type, val: RCC_AHBPCENR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_AHBPCENR_Fields](reg.loc), val)

proc write*(reg: RCC_AHBPCENR_Type, DMA1EN: bool = false, DMA2EN: bool = false, SRAMEN: bool = true, FLITFEN: bool = true, CRCEN: bool = false, FSMCEN: bool = false, TRNG_EN: bool = false, SDIOEN: bool = false, USBHS_EN: bool = false, OTG_EN: bool = false, DVP_EN: bool = false, ETHMACEN: bool = false, ETHMACTXEN: bool = false, ETHMACRXEN: bool = false) =
  var x: uint32
  x.setMask((DMA1EN.uint32 shl 0).masked(0 .. 0))
  x.setMask((DMA2EN.uint32 shl 1).masked(1 .. 1))
  x.setMask((SRAMEN.uint32 shl 2).masked(2 .. 2))
  x.setMask((FLITFEN.uint32 shl 4).masked(4 .. 4))
  x.setMask((CRCEN.uint32 shl 6).masked(6 .. 6))
  x.setMask((FSMCEN.uint32 shl 8).masked(8 .. 8))
  x.setMask((TRNG_EN.uint32 shl 9).masked(9 .. 9))
  x.setMask((SDIOEN.uint32 shl 10).masked(10 .. 10))
  x.setMask((USBHS_EN.uint32 shl 11).masked(11 .. 11))
  x.setMask((OTG_EN.uint32 shl 12).masked(12 .. 12))
  x.setMask((DVP_EN.uint32 shl 13).masked(13 .. 13))
  x.setMask((ETHMACEN.uint32 shl 14).masked(14 .. 14))
  x.setMask((ETHMACTXEN.uint32 shl 15).masked(15 .. 15))
  x.setMask((ETHMACRXEN.uint32 shl 16).masked(16 .. 16))
  reg.write x.RCC_AHBPCENR_Fields

template modifyIt*(reg: RCC_AHBPCENR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_APB2PCENR_Type): RCC_APB2PCENR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_APB2PCENR_Fields](reg.loc))

proc read*(reg: static RCC_APB2PCENR_Type): RCC_APB2PCENR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_APB2PCENR_Fields](reg.loc))

proc write*(reg: RCC_APB2PCENR_Type, val: RCC_APB2PCENR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_APB2PCENR_Fields](reg.loc), val)

proc write*(reg: RCC_APB2PCENR_Type, AFIOEN: bool = false, IOPAEN: bool = false, IOPBEN: bool = false, IOPCEN: bool = false, IOPDEN: bool = false, IOPEEN: bool = false, ADC1EN: bool = false, ADC2EN: bool = false, TIM1EN: bool = false, SPI1EN: bool = false, TIM8EN: bool = false, USART1EN: bool = false, TIM9_EN: bool = false, TIM10_EN: bool = false) =
  var x: uint32
  x.setMask((AFIOEN.uint32 shl 0).masked(0 .. 0))
  x.setMask((IOPAEN.uint32 shl 2).masked(2 .. 2))
  x.setMask((IOPBEN.uint32 shl 3).masked(3 .. 3))
  x.setMask((IOPCEN.uint32 shl 4).masked(4 .. 4))
  x.setMask((IOPDEN.uint32 shl 5).masked(5 .. 5))
  x.setMask((IOPEEN.uint32 shl 6).masked(6 .. 6))
  x.setMask((ADC1EN.uint32 shl 9).masked(9 .. 9))
  x.setMask((ADC2EN.uint32 shl 10).masked(10 .. 10))
  x.setMask((TIM1EN.uint32 shl 11).masked(11 .. 11))
  x.setMask((SPI1EN.uint32 shl 12).masked(12 .. 12))
  x.setMask((TIM8EN.uint32 shl 13).masked(13 .. 13))
  x.setMask((USART1EN.uint32 shl 14).masked(14 .. 14))
  x.setMask((TIM9_EN.uint32 shl 19).masked(19 .. 19))
  x.setMask((TIM10_EN.uint32 shl 20).masked(20 .. 20))
  reg.write x.RCC_APB2PCENR_Fields

template modifyIt*(reg: RCC_APB2PCENR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_APB1PCENR_Type): RCC_APB1PCENR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_APB1PCENR_Fields](reg.loc))

proc read*(reg: static RCC_APB1PCENR_Type): RCC_APB1PCENR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_APB1PCENR_Fields](reg.loc))

proc write*(reg: RCC_APB1PCENR_Type, val: RCC_APB1PCENR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_APB1PCENR_Fields](reg.loc), val)

proc write*(reg: RCC_APB1PCENR_Type, TIM2EN: bool = false, TIM3EN: bool = false, TIM4EN: bool = false, TIM5EN: bool = false, TIM6EN: bool = false, TIM7EN: bool = false, USART6_EN: bool = false, USART7_EN: bool = false, USART8_EN: bool = false, WWDGEN: bool = false, SPI2EN: bool = false, SPI3EN: bool = false, USART2EN: bool = false, USART3EN: bool = false, UART4EN: bool = false, UART5EN: bool = false, I2C1EN: bool = false, I2C2EN: bool = false, USBDEN: bool = false, CAN1EN: bool = false, CAN2EN: bool = false, BKPEN: bool = false, PWREN: bool = false, DACEN: bool = false) =
  var x: uint32
  x.setMask((TIM2EN.uint32 shl 0).masked(0 .. 0))
  x.setMask((TIM3EN.uint32 shl 1).masked(1 .. 1))
  x.setMask((TIM4EN.uint32 shl 2).masked(2 .. 2))
  x.setMask((TIM5EN.uint32 shl 3).masked(3 .. 3))
  x.setMask((TIM6EN.uint32 shl 4).masked(4 .. 4))
  x.setMask((TIM7EN.uint32 shl 5).masked(5 .. 5))
  x.setMask((USART6_EN.uint32 shl 6).masked(6 .. 6))
  x.setMask((USART7_EN.uint32 shl 7).masked(7 .. 7))
  x.setMask((USART8_EN.uint32 shl 8).masked(8 .. 8))
  x.setMask((WWDGEN.uint32 shl 11).masked(11 .. 11))
  x.setMask((SPI2EN.uint32 shl 14).masked(14 .. 14))
  x.setMask((SPI3EN.uint32 shl 15).masked(15 .. 15))
  x.setMask((USART2EN.uint32 shl 17).masked(17 .. 17))
  x.setMask((USART3EN.uint32 shl 18).masked(18 .. 18))
  x.setMask((UART4EN.uint32 shl 19).masked(19 .. 19))
  x.setMask((UART5EN.uint32 shl 20).masked(20 .. 20))
  x.setMask((I2C1EN.uint32 shl 21).masked(21 .. 21))
  x.setMask((I2C2EN.uint32 shl 22).masked(22 .. 22))
  x.setMask((USBDEN.uint32 shl 23).masked(23 .. 23))
  x.setMask((CAN1EN.uint32 shl 25).masked(25 .. 25))
  x.setMask((CAN2EN.uint32 shl 26).masked(26 .. 26))
  x.setMask((BKPEN.uint32 shl 27).masked(27 .. 27))
  x.setMask((PWREN.uint32 shl 28).masked(28 .. 28))
  x.setMask((DACEN.uint32 shl 29).masked(29 .. 29))
  reg.write x.RCC_APB1PCENR_Fields

template modifyIt*(reg: RCC_APB1PCENR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_BDCTLR_Type): RCC_BDCTLR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_BDCTLR_Fields](reg.loc))

proc read*(reg: static RCC_BDCTLR_Type): RCC_BDCTLR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_BDCTLR_Fields](reg.loc))

proc write*(reg: RCC_BDCTLR_Type, val: RCC_BDCTLR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_BDCTLR_Fields](reg.loc), val)

proc write*(reg: RCC_BDCTLR_Type, LSEON: bool = false, LSEBYP: bool = false, RTCSEL: uint32 = 0, RTCEN: bool = false, BDRST: bool = false) =
  var x: uint32
  x.setMask((LSEON.uint32 shl 0).masked(0 .. 0))
  x.setMask((LSEBYP.uint32 shl 2).masked(2 .. 2))
  x.setMask((RTCSEL shl 8).masked(8 .. 9))
  x.setMask((RTCEN.uint32 shl 15).masked(15 .. 15))
  x.setMask((BDRST.uint32 shl 16).masked(16 .. 16))
  reg.write x.RCC_BDCTLR_Fields

template modifyIt*(reg: RCC_BDCTLR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_RSTSCKR_Type): RCC_RSTSCKR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_RSTSCKR_Fields](reg.loc))

proc read*(reg: static RCC_RSTSCKR_Type): RCC_RSTSCKR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_RSTSCKR_Fields](reg.loc))

proc write*(reg: RCC_RSTSCKR_Type, val: RCC_RSTSCKR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_RSTSCKR_Fields](reg.loc), val)

proc write*(reg: RCC_RSTSCKR_Type, LSION: bool = false, RMVF: bool = false, PINRSTF: bool = true, PORRSTF: bool = true, SFTRSTF: bool = false, IWDGRSTF: bool = false, WWDGRSTF: bool = false, LPWRRSTF: bool = false) =
  var x: uint32
  x.setMask((LSION.uint32 shl 0).masked(0 .. 0))
  x.setMask((RMVF.uint32 shl 24).masked(24 .. 24))
  x.setMask((PINRSTF.uint32 shl 26).masked(26 .. 26))
  x.setMask((PORRSTF.uint32 shl 27).masked(27 .. 27))
  x.setMask((SFTRSTF.uint32 shl 28).masked(28 .. 28))
  x.setMask((IWDGRSTF.uint32 shl 29).masked(29 .. 29))
  x.setMask((WWDGRSTF.uint32 shl 30).masked(30 .. 30))
  x.setMask((LPWRRSTF.uint32 shl 31).masked(31 .. 31))
  reg.write x.RCC_RSTSCKR_Fields

template modifyIt*(reg: RCC_RSTSCKR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_AHBRSTR_Type): RCC_AHBRSTR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_AHBRSTR_Fields](reg.loc))

proc read*(reg: static RCC_AHBRSTR_Type): RCC_AHBRSTR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_AHBRSTR_Fields](reg.loc))

proc write*(reg: RCC_AHBRSTR_Type, val: RCC_AHBRSTR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_AHBRSTR_Fields](reg.loc), val)

proc write*(reg: RCC_AHBRSTR_Type, USBHDRST: bool = false, ETHMACRST: bool = false) =
  var x: uint32
  x.setMask((USBHDRST.uint32 shl 12).masked(12 .. 12))
  x.setMask((ETHMACRST.uint32 shl 14).masked(14 .. 14))
  reg.write x.RCC_AHBRSTR_Fields

template modifyIt*(reg: RCC_AHBRSTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_CFGR2_Type): RCC_CFGR2_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_CFGR2_Fields](reg.loc))

proc read*(reg: static RCC_CFGR2_Type): RCC_CFGR2_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_CFGR2_Fields](reg.loc))

proc write*(reg: RCC_CFGR2_Type, val: RCC_CFGR2_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_CFGR2_Fields](reg.loc), val)

proc write*(reg: RCC_CFGR2_Type, PREDIV1: uint32 = 0, PREDIV2: uint32 = 0, PLL2MUL: uint32 = 0, PLL3MUL: uint32 = 0, PREDIV1SRC: bool = false, I2S2SRC: bool = false, I2S3SRC: bool = false, TRNG_SRC: bool = false, ETH1G_SRC: uint32 = 0, ETH1G_125M_EN: bool = false, USBHS_PREDIY: uint32 = 0, USBHS_PLL_SRC: bool = false, USBHS_CKPEF_SEL: uint32 = 0, USBHS_PLLALIVE: bool = false, USBHS_CLK_SRC: bool = false) =
  var x: uint32
  x.setMask((PREDIV1 shl 0).masked(0 .. 3))
  x.setMask((PREDIV2 shl 4).masked(4 .. 7))
  x.setMask((PLL2MUL shl 8).masked(8 .. 11))
  x.setMask((PLL3MUL shl 12).masked(12 .. 15))
  x.setMask((PREDIV1SRC.uint32 shl 16).masked(16 .. 16))
  x.setMask((I2S2SRC.uint32 shl 17).masked(17 .. 17))
  x.setMask((I2S3SRC.uint32 shl 18).masked(18 .. 18))
  x.setMask((TRNG_SRC.uint32 shl 19).masked(19 .. 19))
  x.setMask((ETH1G_SRC shl 20).masked(20 .. 21))
  x.setMask((ETH1G_125M_EN.uint32 shl 22).masked(22 .. 22))
  x.setMask((USBHS_PREDIY shl 24).masked(24 .. 26))
  x.setMask((USBHS_PLL_SRC.uint32 shl 27).masked(27 .. 27))
  x.setMask((USBHS_CKPEF_SEL shl 28).masked(28 .. 29))
  x.setMask((USBHS_PLLALIVE.uint32 shl 30).masked(30 .. 30))
  x.setMask((USBHS_CLK_SRC.uint32 shl 31).masked(31 .. 31))
  reg.write x.RCC_CFGR2_Fields

template modifyIt*(reg: RCC_CFGR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func HSION*(r: RCC_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `HSION=`*(r: var RCC_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.RCC_CTLR_Fields

func HSIRDY*(r: RCC_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func HSITRIM*(r: RCC_CTLR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 7)

proc `HSITRIM=`*(r: var RCC_CTLR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 7)
  tmp.setMask((val shl 3).masked(3 .. 7))
  r = tmp.RCC_CTLR_Fields

func HSICAL*(r: RCC_CTLR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

func HSEON*(r: RCC_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `HSEON=`*(r: var RCC_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.RCC_CTLR_Fields

func HSERDY*(r: RCC_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

func HSEBYP*(r: RCC_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `HSEBYP=`*(r: var RCC_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.RCC_CTLR_Fields

func CSSON*(r: RCC_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `CSSON=`*(r: var RCC_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.RCC_CTLR_Fields

func PLLON*(r: RCC_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `PLLON=`*(r: var RCC_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.RCC_CTLR_Fields

func PLLRDY*(r: RCC_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

func SW*(r: RCC_CFGR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `SW=`*(r: var RCC_CFGR0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.RCC_CFGR0_Fields

func SWS*(r: RCC_CFGR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

func HPRE*(r: RCC_CFGR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `HPRE=`*(r: var RCC_CFGR0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.RCC_CFGR0_Fields

func PPRE1*(r: RCC_CFGR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 10)

proc `PPRE1=`*(r: var RCC_CFGR0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 10)
  tmp.setMask((val shl 8).masked(8 .. 10))
  r = tmp.RCC_CFGR0_Fields

func PPRE2*(r: RCC_CFGR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 13)

proc `PPRE2=`*(r: var RCC_CFGR0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 13)
  tmp.setMask((val shl 11).masked(11 .. 13))
  r = tmp.RCC_CFGR0_Fields

func ADCPRE*(r: RCC_CFGR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `ADCPRE=`*(r: var RCC_CFGR0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.RCC_CFGR0_Fields

func PLLSRC*(r: RCC_CFGR0_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `PLLSRC=`*(r: var RCC_CFGR0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.RCC_CFGR0_Fields

func PLLXTPRE*(r: RCC_CFGR0_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `PLLXTPRE=`*(r: var RCC_CFGR0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.RCC_CFGR0_Fields

func PLLMUL*(r: RCC_CFGR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 21)

proc `PLLMUL=`*(r: var RCC_CFGR0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 21)
  tmp.setMask((val shl 18).masked(18 .. 21))
  r = tmp.RCC_CFGR0_Fields

func USBPRE*(r: RCC_CFGR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 23)

proc `USBPRE=`*(r: var RCC_CFGR0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 23)
  tmp.setMask((val shl 22).masked(22 .. 23))
  r = tmp.RCC_CFGR0_Fields

func MCO*(r: RCC_CFGR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 27)

proc `MCO=`*(r: var RCC_CFGR0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 27)
  tmp.setMask((val shl 24).masked(24 .. 27))
  r = tmp.RCC_CFGR0_Fields

func ETHPRE*(r: RCC_CFGR0_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `ETHPRE=`*(r: var RCC_CFGR0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.RCC_CFGR0_Fields

func ADC_CLK_ADJ*(r: RCC_CFGR0_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `ADC_CLK_ADJ=`*(r: var RCC_CFGR0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.RCC_CFGR0_Fields

func LSIRDYF*(r: RCC_INTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func LSERDYF*(r: RCC_INTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func HSIRDYF*(r: RCC_INTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func HSERDYF*(r: RCC_INTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

func PLLRDYF*(r: RCC_INTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

func CSSF*(r: RCC_INTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func LSIRDYIE*(r: RCC_INTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `LSIRDYIE=`*(r: var RCC_INTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.RCC_INTR_Fields

func LSERDYIE*(r: RCC_INTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `LSERDYIE=`*(r: var RCC_INTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.RCC_INTR_Fields

func HSIRDYIE*(r: RCC_INTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `HSIRDYIE=`*(r: var RCC_INTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.RCC_INTR_Fields

func HSERDYIE*(r: RCC_INTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `HSERDYIE=`*(r: var RCC_INTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.RCC_INTR_Fields

func PLLRDYIE*(r: RCC_INTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `PLLRDYIE=`*(r: var RCC_INTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.RCC_INTR_Fields

proc `LSIRDYC=`*(r: var RCC_INTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.RCC_INTR_Fields

proc `LSERDYC=`*(r: var RCC_INTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.RCC_INTR_Fields

proc `HSIRDYC=`*(r: var RCC_INTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.RCC_INTR_Fields

proc `HSERDYC=`*(r: var RCC_INTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.RCC_INTR_Fields

proc `PLLRDYC=`*(r: var RCC_INTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.RCC_INTR_Fields

proc `CSSC=`*(r: var RCC_INTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.RCC_INTR_Fields

func AFIORST*(r: RCC_APB2PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `AFIORST=`*(r: var RCC_APB2PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.RCC_APB2PRSTR_Fields

func IOPARST*(r: RCC_APB2PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `IOPARST=`*(r: var RCC_APB2PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.RCC_APB2PRSTR_Fields

func IOPBRST*(r: RCC_APB2PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `IOPBRST=`*(r: var RCC_APB2PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.RCC_APB2PRSTR_Fields

func IOPCRST*(r: RCC_APB2PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `IOPCRST=`*(r: var RCC_APB2PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.RCC_APB2PRSTR_Fields

func IOPDRST*(r: RCC_APB2PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `IOPDRST=`*(r: var RCC_APB2PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.RCC_APB2PRSTR_Fields

func IOPERST*(r: RCC_APB2PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `IOPERST=`*(r: var RCC_APB2PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.RCC_APB2PRSTR_Fields

func ADC1RST*(r: RCC_APB2PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `ADC1RST=`*(r: var RCC_APB2PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.RCC_APB2PRSTR_Fields

func ADC2RST*(r: RCC_APB2PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `ADC2RST=`*(r: var RCC_APB2PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.RCC_APB2PRSTR_Fields

func TIM1RST*(r: RCC_APB2PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `TIM1RST=`*(r: var RCC_APB2PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.RCC_APB2PRSTR_Fields

func SPI1RST*(r: RCC_APB2PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `SPI1RST=`*(r: var RCC_APB2PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.RCC_APB2PRSTR_Fields

func TIM8RST*(r: RCC_APB2PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `TIM8RST=`*(r: var RCC_APB2PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.RCC_APB2PRSTR_Fields

func USART1RST*(r: RCC_APB2PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `USART1RST=`*(r: var RCC_APB2PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.RCC_APB2PRSTR_Fields

func TIM9RST*(r: RCC_APB2PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `TIM9RST=`*(r: var RCC_APB2PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.RCC_APB2PRSTR_Fields

func TIM10RST*(r: RCC_APB2PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `TIM10RST=`*(r: var RCC_APB2PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.RCC_APB2PRSTR_Fields

func TIM2RST*(r: RCC_APB1PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `TIM2RST=`*(r: var RCC_APB1PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.RCC_APB1PRSTR_Fields

func TIM3RST*(r: RCC_APB1PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `TIM3RST=`*(r: var RCC_APB1PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.RCC_APB1PRSTR_Fields

func TIM4RST*(r: RCC_APB1PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `TIM4RST=`*(r: var RCC_APB1PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.RCC_APB1PRSTR_Fields

func TIM5RST*(r: RCC_APB1PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TIM5RST=`*(r: var RCC_APB1PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.RCC_APB1PRSTR_Fields

func TIM6RST*(r: RCC_APB1PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `TIM6RST=`*(r: var RCC_APB1PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.RCC_APB1PRSTR_Fields

func TIM7RST*(r: RCC_APB1PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `TIM7RST=`*(r: var RCC_APB1PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.RCC_APB1PRSTR_Fields

func UART6RST*(r: RCC_APB1PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `UART6RST=`*(r: var RCC_APB1PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.RCC_APB1PRSTR_Fields

func UART7RST*(r: RCC_APB1PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `UART7RST=`*(r: var RCC_APB1PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.RCC_APB1PRSTR_Fields

func UART8RST*(r: RCC_APB1PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `UART8RST=`*(r: var RCC_APB1PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.RCC_APB1PRSTR_Fields

func WWDGRST*(r: RCC_APB1PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `WWDGRST=`*(r: var RCC_APB1PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.RCC_APB1PRSTR_Fields

func SPI2RST*(r: RCC_APB1PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `SPI2RST=`*(r: var RCC_APB1PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.RCC_APB1PRSTR_Fields

func SPI3RST*(r: RCC_APB1PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `SPI3RST=`*(r: var RCC_APB1PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.RCC_APB1PRSTR_Fields

func USART2RST*(r: RCC_APB1PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `USART2RST=`*(r: var RCC_APB1PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.RCC_APB1PRSTR_Fields

func USART3RST*(r: RCC_APB1PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `USART3RST=`*(r: var RCC_APB1PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.RCC_APB1PRSTR_Fields

func USART4RST*(r: RCC_APB1PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `USART4RST=`*(r: var RCC_APB1PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.RCC_APB1PRSTR_Fields

func USART5RST*(r: RCC_APB1PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `USART5RST=`*(r: var RCC_APB1PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.RCC_APB1PRSTR_Fields

func I2C1RST*(r: RCC_APB1PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `I2C1RST=`*(r: var RCC_APB1PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.RCC_APB1PRSTR_Fields

func I2C2RST*(r: RCC_APB1PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `I2C2RST=`*(r: var RCC_APB1PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.RCC_APB1PRSTR_Fields

func USBDRST*(r: RCC_APB1PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `USBDRST=`*(r: var RCC_APB1PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.RCC_APB1PRSTR_Fields

func CAN1RST*(r: RCC_APB1PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `CAN1RST=`*(r: var RCC_APB1PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.RCC_APB1PRSTR_Fields

func CAN2RST*(r: RCC_APB1PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `CAN2RST=`*(r: var RCC_APB1PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.RCC_APB1PRSTR_Fields

func BKPRST*(r: RCC_APB1PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `BKPRST=`*(r: var RCC_APB1PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.RCC_APB1PRSTR_Fields

func PWRRST*(r: RCC_APB1PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `PWRRST=`*(r: var RCC_APB1PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.RCC_APB1PRSTR_Fields

func DACRST*(r: RCC_APB1PRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `DACRST=`*(r: var RCC_APB1PRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.RCC_APB1PRSTR_Fields

func DMA1EN*(r: RCC_AHBPCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `DMA1EN=`*(r: var RCC_AHBPCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.RCC_AHBPCENR_Fields

func DMA2EN*(r: RCC_AHBPCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `DMA2EN=`*(r: var RCC_AHBPCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.RCC_AHBPCENR_Fields

func SRAMEN*(r: RCC_AHBPCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `SRAMEN=`*(r: var RCC_AHBPCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.RCC_AHBPCENR_Fields

func FLITFEN*(r: RCC_AHBPCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FLITFEN=`*(r: var RCC_AHBPCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.RCC_AHBPCENR_Fields

func CRCEN*(r: RCC_AHBPCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `CRCEN=`*(r: var RCC_AHBPCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.RCC_AHBPCENR_Fields

func FSMCEN*(r: RCC_AHBPCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FSMCEN=`*(r: var RCC_AHBPCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.RCC_AHBPCENR_Fields

func TRNG_EN*(r: RCC_AHBPCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `TRNG_EN=`*(r: var RCC_AHBPCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.RCC_AHBPCENR_Fields

func SDIOEN*(r: RCC_AHBPCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `SDIOEN=`*(r: var RCC_AHBPCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.RCC_AHBPCENR_Fields

func USBHS_EN*(r: RCC_AHBPCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `USBHS_EN=`*(r: var RCC_AHBPCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.RCC_AHBPCENR_Fields

func OTG_EN*(r: RCC_AHBPCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `OTG_EN=`*(r: var RCC_AHBPCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.RCC_AHBPCENR_Fields

func DVP_EN*(r: RCC_AHBPCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `DVP_EN=`*(r: var RCC_AHBPCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.RCC_AHBPCENR_Fields

func ETHMACEN*(r: RCC_AHBPCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `ETHMACEN=`*(r: var RCC_AHBPCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.RCC_AHBPCENR_Fields

func ETHMACTXEN*(r: RCC_AHBPCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `ETHMACTXEN=`*(r: var RCC_AHBPCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.RCC_AHBPCENR_Fields

func ETHMACRXEN*(r: RCC_AHBPCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `ETHMACRXEN=`*(r: var RCC_AHBPCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.RCC_AHBPCENR_Fields

func AFIOEN*(r: RCC_APB2PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `AFIOEN=`*(r: var RCC_APB2PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.RCC_APB2PCENR_Fields

func IOPAEN*(r: RCC_APB2PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `IOPAEN=`*(r: var RCC_APB2PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.RCC_APB2PCENR_Fields

func IOPBEN*(r: RCC_APB2PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `IOPBEN=`*(r: var RCC_APB2PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.RCC_APB2PCENR_Fields

func IOPCEN*(r: RCC_APB2PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `IOPCEN=`*(r: var RCC_APB2PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.RCC_APB2PCENR_Fields

func IOPDEN*(r: RCC_APB2PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `IOPDEN=`*(r: var RCC_APB2PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.RCC_APB2PCENR_Fields

func IOPEEN*(r: RCC_APB2PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `IOPEEN=`*(r: var RCC_APB2PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.RCC_APB2PCENR_Fields

func ADC1EN*(r: RCC_APB2PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `ADC1EN=`*(r: var RCC_APB2PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.RCC_APB2PCENR_Fields

func ADC2EN*(r: RCC_APB2PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `ADC2EN=`*(r: var RCC_APB2PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.RCC_APB2PCENR_Fields

func TIM1EN*(r: RCC_APB2PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `TIM1EN=`*(r: var RCC_APB2PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.RCC_APB2PCENR_Fields

func SPI1EN*(r: RCC_APB2PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `SPI1EN=`*(r: var RCC_APB2PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.RCC_APB2PCENR_Fields

func TIM8EN*(r: RCC_APB2PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `TIM8EN=`*(r: var RCC_APB2PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.RCC_APB2PCENR_Fields

func USART1EN*(r: RCC_APB2PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `USART1EN=`*(r: var RCC_APB2PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.RCC_APB2PCENR_Fields

func TIM9_EN*(r: RCC_APB2PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `TIM9_EN=`*(r: var RCC_APB2PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.RCC_APB2PCENR_Fields

func TIM10_EN*(r: RCC_APB2PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `TIM10_EN=`*(r: var RCC_APB2PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.RCC_APB2PCENR_Fields

func TIM2EN*(r: RCC_APB1PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `TIM2EN=`*(r: var RCC_APB1PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.RCC_APB1PCENR_Fields

func TIM3EN*(r: RCC_APB1PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `TIM3EN=`*(r: var RCC_APB1PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.RCC_APB1PCENR_Fields

func TIM4EN*(r: RCC_APB1PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `TIM4EN=`*(r: var RCC_APB1PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.RCC_APB1PCENR_Fields

func TIM5EN*(r: RCC_APB1PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TIM5EN=`*(r: var RCC_APB1PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.RCC_APB1PCENR_Fields

func TIM6EN*(r: RCC_APB1PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `TIM6EN=`*(r: var RCC_APB1PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.RCC_APB1PCENR_Fields

func TIM7EN*(r: RCC_APB1PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `TIM7EN=`*(r: var RCC_APB1PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.RCC_APB1PCENR_Fields

func USART6_EN*(r: RCC_APB1PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `USART6_EN=`*(r: var RCC_APB1PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.RCC_APB1PCENR_Fields

func USART7_EN*(r: RCC_APB1PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `USART7_EN=`*(r: var RCC_APB1PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.RCC_APB1PCENR_Fields

func USART8_EN*(r: RCC_APB1PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `USART8_EN=`*(r: var RCC_APB1PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.RCC_APB1PCENR_Fields

func WWDGEN*(r: RCC_APB1PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `WWDGEN=`*(r: var RCC_APB1PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.RCC_APB1PCENR_Fields

func SPI2EN*(r: RCC_APB1PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `SPI2EN=`*(r: var RCC_APB1PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.RCC_APB1PCENR_Fields

func SPI3EN*(r: RCC_APB1PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `SPI3EN=`*(r: var RCC_APB1PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.RCC_APB1PCENR_Fields

func USART2EN*(r: RCC_APB1PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `USART2EN=`*(r: var RCC_APB1PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.RCC_APB1PCENR_Fields

func USART3EN*(r: RCC_APB1PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `USART3EN=`*(r: var RCC_APB1PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.RCC_APB1PCENR_Fields

func UART4EN*(r: RCC_APB1PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `UART4EN=`*(r: var RCC_APB1PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.RCC_APB1PCENR_Fields

func UART5EN*(r: RCC_APB1PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `UART5EN=`*(r: var RCC_APB1PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.RCC_APB1PCENR_Fields

func I2C1EN*(r: RCC_APB1PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `I2C1EN=`*(r: var RCC_APB1PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.RCC_APB1PCENR_Fields

func I2C2EN*(r: RCC_APB1PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `I2C2EN=`*(r: var RCC_APB1PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.RCC_APB1PCENR_Fields

func USBDEN*(r: RCC_APB1PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `USBDEN=`*(r: var RCC_APB1PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.RCC_APB1PCENR_Fields

func CAN1EN*(r: RCC_APB1PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `CAN1EN=`*(r: var RCC_APB1PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.RCC_APB1PCENR_Fields

func CAN2EN*(r: RCC_APB1PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `CAN2EN=`*(r: var RCC_APB1PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.RCC_APB1PCENR_Fields

func BKPEN*(r: RCC_APB1PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `BKPEN=`*(r: var RCC_APB1PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.RCC_APB1PCENR_Fields

func PWREN*(r: RCC_APB1PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `PWREN=`*(r: var RCC_APB1PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.RCC_APB1PCENR_Fields

func DACEN*(r: RCC_APB1PCENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `DACEN=`*(r: var RCC_APB1PCENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.RCC_APB1PCENR_Fields

func LSEON*(r: RCC_BDCTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `LSEON=`*(r: var RCC_BDCTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.RCC_BDCTLR_Fields

func LSERDY*(r: RCC_BDCTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func LSEBYP*(r: RCC_BDCTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `LSEBYP=`*(r: var RCC_BDCTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.RCC_BDCTLR_Fields

func RTCSEL*(r: RCC_BDCTLR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `RTCSEL=`*(r: var RCC_BDCTLR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.RCC_BDCTLR_Fields

func RTCEN*(r: RCC_BDCTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `RTCEN=`*(r: var RCC_BDCTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.RCC_BDCTLR_Fields

func BDRST*(r: RCC_BDCTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `BDRST=`*(r: var RCC_BDCTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.RCC_BDCTLR_Fields

func LSION*(r: RCC_RSTSCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `LSION=`*(r: var RCC_RSTSCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.RCC_RSTSCKR_Fields

func LSIRDY*(r: RCC_RSTSCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func RMVF*(r: RCC_RSTSCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `RMVF=`*(r: var RCC_RSTSCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.RCC_RSTSCKR_Fields

func PINRSTF*(r: RCC_RSTSCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `PINRSTF=`*(r: var RCC_RSTSCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.RCC_RSTSCKR_Fields

func PORRSTF*(r: RCC_RSTSCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `PORRSTF=`*(r: var RCC_RSTSCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.RCC_RSTSCKR_Fields

func SFTRSTF*(r: RCC_RSTSCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `SFTRSTF=`*(r: var RCC_RSTSCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.RCC_RSTSCKR_Fields

func IWDGRSTF*(r: RCC_RSTSCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `IWDGRSTF=`*(r: var RCC_RSTSCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.RCC_RSTSCKR_Fields

func WWDGRSTF*(r: RCC_RSTSCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `WWDGRSTF=`*(r: var RCC_RSTSCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.RCC_RSTSCKR_Fields

func LPWRRSTF*(r: RCC_RSTSCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `LPWRRSTF=`*(r: var RCC_RSTSCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.RCC_RSTSCKR_Fields

func USBHDRST*(r: RCC_AHBRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `USBHDRST=`*(r: var RCC_AHBRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.RCC_AHBRSTR_Fields

func DVPRST*(r: RCC_AHBRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

func ETHMACRST*(r: RCC_AHBRSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `ETHMACRST=`*(r: var RCC_AHBRSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.RCC_AHBRSTR_Fields

func PREDIV1*(r: RCC_CFGR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `PREDIV1=`*(r: var RCC_CFGR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.RCC_CFGR2_Fields

func PREDIV2*(r: RCC_CFGR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `PREDIV2=`*(r: var RCC_CFGR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.RCC_CFGR2_Fields

func PLL2MUL*(r: RCC_CFGR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

proc `PLL2MUL=`*(r: var RCC_CFGR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 11)
  tmp.setMask((val shl 8).masked(8 .. 11))
  r = tmp.RCC_CFGR2_Fields

func PLL3MUL*(r: RCC_CFGR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 15)

proc `PLL3MUL=`*(r: var RCC_CFGR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 15)
  tmp.setMask((val shl 12).masked(12 .. 15))
  r = tmp.RCC_CFGR2_Fields

func PREDIV1SRC*(r: RCC_CFGR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `PREDIV1SRC=`*(r: var RCC_CFGR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.RCC_CFGR2_Fields

func I2S2SRC*(r: RCC_CFGR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `I2S2SRC=`*(r: var RCC_CFGR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.RCC_CFGR2_Fields

func I2S3SRC*(r: RCC_CFGR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `I2S3SRC=`*(r: var RCC_CFGR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.RCC_CFGR2_Fields

func TRNG_SRC*(r: RCC_CFGR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `TRNG_SRC=`*(r: var RCC_CFGR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.RCC_CFGR2_Fields

func ETH1G_SRC*(r: RCC_CFGR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `ETH1G_SRC=`*(r: var RCC_CFGR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.RCC_CFGR2_Fields

func ETH1G_125M_EN*(r: RCC_CFGR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `ETH1G_125M_EN=`*(r: var RCC_CFGR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.RCC_CFGR2_Fields

func USBHS_PREDIY*(r: RCC_CFGR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 26)

proc `USBHS_PREDIY=`*(r: var RCC_CFGR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 26)
  tmp.setMask((val shl 24).masked(24 .. 26))
  r = tmp.RCC_CFGR2_Fields

func USBHS_PLL_SRC*(r: RCC_CFGR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `USBHS_PLL_SRC=`*(r: var RCC_CFGR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.RCC_CFGR2_Fields

func USBHS_CKPEF_SEL*(r: RCC_CFGR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(28 .. 29)

proc `USBHS_CKPEF_SEL=`*(r: var RCC_CFGR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 29)
  tmp.setMask((val shl 28).masked(28 .. 29))
  r = tmp.RCC_CFGR2_Fields

func USBHS_PLLALIVE*(r: RCC_CFGR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `USBHS_PLLALIVE=`*(r: var RCC_CFGR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.RCC_CFGR2_Fields

func USBHS_CLK_SRC*(r: RCC_CFGR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `USBHS_CLK_SRC=`*(r: var RCC_CFGR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.RCC_CFGR2_Fields

type
  EXTEND_EXTEND_CTR_Fields* = distinct uint32

proc read*(reg: EXTEND_EXTEND_CTR_Type): EXTEND_EXTEND_CTR_Fields {.inline.} =
  volatileLoad(cast[ptr EXTEND_EXTEND_CTR_Fields](reg.loc))

proc read*(reg: static EXTEND_EXTEND_CTR_Type): EXTEND_EXTEND_CTR_Fields {.inline.} =
  volatileLoad(cast[ptr EXTEND_EXTEND_CTR_Fields](reg.loc))

proc write*(reg: EXTEND_EXTEND_CTR_Type, val: EXTEND_EXTEND_CTR_Fields) {.inline.} =
  volatileStore(cast[ptr EXTEND_EXTEND_CTR_Fields](reg.loc), val)

proc write*(reg: EXTEND_EXTEND_CTR_Type, USBDLS: bool = false, USBDPU: bool = false, ETH_10M_EN: bool = false, ETH_RGMII_EN: bool = false, PLL_HSI_PRE: bool = false, LOCKUP_EN: bool = false, LOCKUP_RSTF: bool = false, ULLDO_TRIM: uint32 = 2, LDO_TRIM: uint32 = 2, HSE_KEEP_LP: bool = false) =
  var x: uint32
  x.setMask((USBDLS.uint32 shl 0).masked(0 .. 0))
  x.setMask((USBDPU.uint32 shl 1).masked(1 .. 1))
  x.setMask((ETH_10M_EN.uint32 shl 2).masked(2 .. 2))
  x.setMask((ETH_RGMII_EN.uint32 shl 3).masked(3 .. 3))
  x.setMask((PLL_HSI_PRE.uint32 shl 4).masked(4 .. 4))
  x.setMask((LOCKUP_EN.uint32 shl 6).masked(6 .. 6))
  x.setMask((LOCKUP_RSTF.uint32 shl 7).masked(7 .. 7))
  x.setMask((ULLDO_TRIM shl 8).masked(8 .. 9))
  x.setMask((LDO_TRIM shl 10).masked(10 .. 11))
  x.setMask((HSE_KEEP_LP.uint32 shl 12).masked(12 .. 12))
  reg.write x.EXTEND_EXTEND_CTR_Fields

template modifyIt*(reg: EXTEND_EXTEND_CTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func USBDLS*(r: EXTEND_EXTEND_CTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `USBDLS=`*(r: var EXTEND_EXTEND_CTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.EXTEND_EXTEND_CTR_Fields

func USBDPU*(r: EXTEND_EXTEND_CTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `USBDPU=`*(r: var EXTEND_EXTEND_CTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.EXTEND_EXTEND_CTR_Fields

func ETH_10M_EN*(r: EXTEND_EXTEND_CTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `ETH_10M_EN=`*(r: var EXTEND_EXTEND_CTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.EXTEND_EXTEND_CTR_Fields

func ETH_RGMII_EN*(r: EXTEND_EXTEND_CTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `ETH_RGMII_EN=`*(r: var EXTEND_EXTEND_CTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.EXTEND_EXTEND_CTR_Fields

func PLL_HSI_PRE*(r: EXTEND_EXTEND_CTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `PLL_HSI_PRE=`*(r: var EXTEND_EXTEND_CTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.EXTEND_EXTEND_CTR_Fields

func LOCKUP_EN*(r: EXTEND_EXTEND_CTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `LOCKUP_EN=`*(r: var EXTEND_EXTEND_CTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.EXTEND_EXTEND_CTR_Fields

func LOCKUP_RSTF*(r: EXTEND_EXTEND_CTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `LOCKUP_RSTF=`*(r: var EXTEND_EXTEND_CTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.EXTEND_EXTEND_CTR_Fields

func ULLDO_TRIM*(r: EXTEND_EXTEND_CTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `ULLDO_TRIM=`*(r: var EXTEND_EXTEND_CTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.EXTEND_EXTEND_CTR_Fields

func LDO_TRIM*(r: EXTEND_EXTEND_CTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `LDO_TRIM=`*(r: var EXTEND_EXTEND_CTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.EXTEND_EXTEND_CTR_Fields

func HSE_KEEP_LP*(r: EXTEND_EXTEND_CTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `HSE_KEEP_LP=`*(r: var EXTEND_EXTEND_CTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.EXTEND_EXTEND_CTR_Fields

type
  OPA_CR_Fields* = distinct uint32

proc read*(reg: OPA_CR_Type): OPA_CR_Fields {.inline.} =
  volatileLoad(cast[ptr OPA_CR_Fields](reg.loc))

proc read*(reg: static OPA_CR_Type): OPA_CR_Fields {.inline.} =
  volatileLoad(cast[ptr OPA_CR_Fields](reg.loc))

proc write*(reg: OPA_CR_Type, val: OPA_CR_Fields) {.inline.} =
  volatileStore(cast[ptr OPA_CR_Fields](reg.loc), val)

proc write*(reg: OPA_CR_Type, EN1: bool = false, MODE1: bool = false, NSEL1: bool = false, PSEL1: bool = false, EN2: bool = false, MODE2: bool = false, NSEL2: bool = false, PSEL2: bool = false, EN3: bool = false, MODE3: bool = false, NSEL3: bool = false, PSEL3: bool = false, EN4: bool = false, MODE4: bool = false, NSEL4: bool = false, PSEL4: bool = false) =
  var x: uint32
  x.setMask((EN1.uint32 shl 0).masked(0 .. 0))
  x.setMask((MODE1.uint32 shl 1).masked(1 .. 1))
  x.setMask((NSEL1.uint32 shl 2).masked(2 .. 2))
  x.setMask((PSEL1.uint32 shl 3).masked(3 .. 3))
  x.setMask((EN2.uint32 shl 4).masked(4 .. 4))
  x.setMask((MODE2.uint32 shl 5).masked(5 .. 5))
  x.setMask((NSEL2.uint32 shl 6).masked(6 .. 6))
  x.setMask((PSEL2.uint32 shl 7).masked(7 .. 7))
  x.setMask((EN3.uint32 shl 8).masked(8 .. 8))
  x.setMask((MODE3.uint32 shl 9).masked(9 .. 9))
  x.setMask((NSEL3.uint32 shl 10).masked(10 .. 10))
  x.setMask((PSEL3.uint32 shl 11).masked(11 .. 11))
  x.setMask((EN4.uint32 shl 12).masked(12 .. 12))
  x.setMask((MODE4.uint32 shl 13).masked(13 .. 13))
  x.setMask((NSEL4.uint32 shl 14).masked(14 .. 14))
  x.setMask((PSEL4.uint32 shl 15).masked(15 .. 15))
  reg.write x.OPA_CR_Fields

template modifyIt*(reg: OPA_CR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func EN1*(r: OPA_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `EN1=`*(r: var OPA_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OPA_CR_Fields

func MODE1*(r: OPA_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `MODE1=`*(r: var OPA_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OPA_CR_Fields

func NSEL1*(r: OPA_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `NSEL1=`*(r: var OPA_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OPA_CR_Fields

func PSEL1*(r: OPA_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `PSEL1=`*(r: var OPA_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OPA_CR_Fields

func EN2*(r: OPA_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `EN2=`*(r: var OPA_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OPA_CR_Fields

func MODE2*(r: OPA_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `MODE2=`*(r: var OPA_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OPA_CR_Fields

func NSEL2*(r: OPA_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NSEL2=`*(r: var OPA_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OPA_CR_Fields

func PSEL2*(r: OPA_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `PSEL2=`*(r: var OPA_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OPA_CR_Fields

func EN3*(r: OPA_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `EN3=`*(r: var OPA_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OPA_CR_Fields

func MODE3*(r: OPA_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `MODE3=`*(r: var OPA_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OPA_CR_Fields

func NSEL3*(r: OPA_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `NSEL3=`*(r: var OPA_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OPA_CR_Fields

func PSEL3*(r: OPA_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `PSEL3=`*(r: var OPA_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.OPA_CR_Fields

func EN4*(r: OPA_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `EN4=`*(r: var OPA_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.OPA_CR_Fields

func MODE4*(r: OPA_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `MODE4=`*(r: var OPA_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.OPA_CR_Fields

func NSEL4*(r: OPA_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `NSEL4=`*(r: var OPA_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.OPA_CR_Fields

func PSEL4*(r: OPA_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `PSEL4=`*(r: var OPA_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OPA_CR_Fields

type
  GPIOA_CFGLR_Fields* = distinct uint32
  GPIOA_CFGHR_Fields* = distinct uint32
  GPIOA_INDR_Fields* = distinct uint32
  GPIOA_OUTDR_Fields* = distinct uint32
  GPIOA_BSHR_Fields* = distinct uint32
  GPIOA_BCR_Fields* = distinct uint32
  GPIOA_LCKR_Fields* = distinct uint32

proc read*(reg: GPIOA_CFGLR_Type): GPIOA_CFGLR_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOA_CFGLR_Fields](reg.loc))

proc read*(reg: static GPIOA_CFGLR_Type): GPIOA_CFGLR_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOA_CFGLR_Fields](reg.loc))

proc write*(reg: GPIOA_CFGLR_Type, val: GPIOA_CFGLR_Fields) {.inline.} =
  volatileStore(cast[ptr GPIOA_CFGLR_Fields](reg.loc), val)

proc write*(reg: GPIOA_CFGLR_Type, MODE0: uint32 = 0, CNF0: uint32 = 1, MODE1: uint32 = 0, CNF1: uint32 = 1, MODE2: uint32 = 0, CNF2: uint32 = 1, MODE3: uint32 = 0, CNF3: uint32 = 1, MODE4: uint32 = 0, CNF4: uint32 = 1, MODE5: uint32 = 0, CNF5: uint32 = 1, MODE6: uint32 = 0, CNF6: uint32 = 1, MODE7: uint32 = 0, CNF7: uint32 = 1) =
  var x: uint32
  x.setMask((MODE0 shl 0).masked(0 .. 1))
  x.setMask((CNF0 shl 2).masked(2 .. 3))
  x.setMask((MODE1 shl 4).masked(4 .. 5))
  x.setMask((CNF1 shl 6).masked(6 .. 7))
  x.setMask((MODE2 shl 8).masked(8 .. 9))
  x.setMask((CNF2 shl 10).masked(10 .. 11))
  x.setMask((MODE3 shl 12).masked(12 .. 13))
  x.setMask((CNF3 shl 14).masked(14 .. 15))
  x.setMask((MODE4 shl 16).masked(16 .. 17))
  x.setMask((CNF4 shl 18).masked(18 .. 19))
  x.setMask((MODE5 shl 20).masked(20 .. 21))
  x.setMask((CNF5 shl 22).masked(22 .. 23))
  x.setMask((MODE6 shl 24).masked(24 .. 25))
  x.setMask((CNF6 shl 26).masked(26 .. 27))
  x.setMask((MODE7 shl 28).masked(28 .. 29))
  x.setMask((CNF7 shl 30).masked(30 .. 31))
  reg.write x.GPIOA_CFGLR_Fields

template modifyIt*(reg: GPIOA_CFGLR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: GPIOA_CFGHR_Type): GPIOA_CFGHR_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOA_CFGHR_Fields](reg.loc))

proc read*(reg: static GPIOA_CFGHR_Type): GPIOA_CFGHR_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOA_CFGHR_Fields](reg.loc))

proc write*(reg: GPIOA_CFGHR_Type, val: GPIOA_CFGHR_Fields) {.inline.} =
  volatileStore(cast[ptr GPIOA_CFGHR_Fields](reg.loc), val)

proc write*(reg: GPIOA_CFGHR_Type, MODE8: uint32 = 0, CNF8: uint32 = 1, MODE9: uint32 = 0, CNF9: uint32 = 1, MODE10: uint32 = 0, CNF10: uint32 = 1, MODE11: uint32 = 0, CNF11: uint32 = 1, MODE12: uint32 = 0, CNF12: uint32 = 1, MODE13: uint32 = 0, CNF13: uint32 = 1, MODE14: uint32 = 0, CNF14: uint32 = 1, MODE15: uint32 = 0, CNF15: uint32 = 1) =
  var x: uint32
  x.setMask((MODE8 shl 0).masked(0 .. 1))
  x.setMask((CNF8 shl 2).masked(2 .. 3))
  x.setMask((MODE9 shl 4).masked(4 .. 5))
  x.setMask((CNF9 shl 6).masked(6 .. 7))
  x.setMask((MODE10 shl 8).masked(8 .. 9))
  x.setMask((CNF10 shl 10).masked(10 .. 11))
  x.setMask((MODE11 shl 12).masked(12 .. 13))
  x.setMask((CNF11 shl 14).masked(14 .. 15))
  x.setMask((MODE12 shl 16).masked(16 .. 17))
  x.setMask((CNF12 shl 18).masked(18 .. 19))
  x.setMask((MODE13 shl 20).masked(20 .. 21))
  x.setMask((CNF13 shl 22).masked(22 .. 23))
  x.setMask((MODE14 shl 24).masked(24 .. 25))
  x.setMask((CNF14 shl 26).masked(26 .. 27))
  x.setMask((MODE15 shl 28).masked(28 .. 29))
  x.setMask((CNF15 shl 30).masked(30 .. 31))
  reg.write x.GPIOA_CFGHR_Fields

template modifyIt*(reg: GPIOA_CFGHR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: GPIOA_INDR_Type): GPIOA_INDR_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOA_INDR_Fields](reg.loc))

proc read*(reg: static GPIOA_INDR_Type): GPIOA_INDR_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOA_INDR_Fields](reg.loc))

proc read*(reg: GPIOA_OUTDR_Type): GPIOA_OUTDR_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOA_OUTDR_Fields](reg.loc))

proc read*(reg: static GPIOA_OUTDR_Type): GPIOA_OUTDR_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOA_OUTDR_Fields](reg.loc))

proc write*(reg: GPIOA_OUTDR_Type, val: GPIOA_OUTDR_Fields) {.inline.} =
  volatileStore(cast[ptr GPIOA_OUTDR_Fields](reg.loc), val)

proc write*(reg: GPIOA_OUTDR_Type, ODR0: bool = false, ODR1: bool = false, ODR2: bool = false, ODR3: bool = false, ODR4: bool = false, ODR5: bool = false, ODR6: bool = false, ODR7: bool = false, ODR8: bool = false, ODR9: bool = false, ODR10: bool = false, ODR11: bool = false, ODR12: bool = false, ODR13: bool = false, ODR14: bool = false, ODR15: bool = false) =
  var x: uint32
  x.setMask((ODR0.uint32 shl 0).masked(0 .. 0))
  x.setMask((ODR1.uint32 shl 1).masked(1 .. 1))
  x.setMask((ODR2.uint32 shl 2).masked(2 .. 2))
  x.setMask((ODR3.uint32 shl 3).masked(3 .. 3))
  x.setMask((ODR4.uint32 shl 4).masked(4 .. 4))
  x.setMask((ODR5.uint32 shl 5).masked(5 .. 5))
  x.setMask((ODR6.uint32 shl 6).masked(6 .. 6))
  x.setMask((ODR7.uint32 shl 7).masked(7 .. 7))
  x.setMask((ODR8.uint32 shl 8).masked(8 .. 8))
  x.setMask((ODR9.uint32 shl 9).masked(9 .. 9))
  x.setMask((ODR10.uint32 shl 10).masked(10 .. 10))
  x.setMask((ODR11.uint32 shl 11).masked(11 .. 11))
  x.setMask((ODR12.uint32 shl 12).masked(12 .. 12))
  x.setMask((ODR13.uint32 shl 13).masked(13 .. 13))
  x.setMask((ODR14.uint32 shl 14).masked(14 .. 14))
  x.setMask((ODR15.uint32 shl 15).masked(15 .. 15))
  reg.write x.GPIOA_OUTDR_Fields

template modifyIt*(reg: GPIOA_OUTDR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc write*(reg: GPIOA_BSHR_Type, val: GPIOA_BSHR_Fields) {.inline.} =
  volatileStore(cast[ptr GPIOA_BSHR_Fields](reg.loc), val)

proc write*(reg: GPIOA_BSHR_Type, BS0: bool = false, BS1: bool = false, BS2: bool = false, BS3: bool = false, BS4: bool = false, BS5: bool = false, BS6: bool = false, BS7: bool = false, BS8: bool = false, BS9: bool = false, BS10: bool = false, BS11: bool = false, BS12: bool = false, BS13: bool = false, BS14: bool = false, BS15: bool = false, BR0: bool = false, BR1: bool = false, BR2: bool = false, BR3: bool = false, BR4: bool = false, BR5: bool = false, BR6: bool = false, BR7: bool = false, BR8: bool = false, BR9: bool = false, BR10: bool = false, BR11: bool = false, BR12: bool = false, BR13: bool = false, BR14: bool = false, BR15: bool = false) =
  var x: uint32
  x.setMask((BS0.uint32 shl 0).masked(0 .. 0))
  x.setMask((BS1.uint32 shl 1).masked(1 .. 1))
  x.setMask((BS2.uint32 shl 2).masked(2 .. 2))
  x.setMask((BS3.uint32 shl 3).masked(3 .. 3))
  x.setMask((BS4.uint32 shl 4).masked(4 .. 4))
  x.setMask((BS5.uint32 shl 5).masked(5 .. 5))
  x.setMask((BS6.uint32 shl 6).masked(6 .. 6))
  x.setMask((BS7.uint32 shl 7).masked(7 .. 7))
  x.setMask((BS8.uint32 shl 8).masked(8 .. 8))
  x.setMask((BS9.uint32 shl 9).masked(9 .. 9))
  x.setMask((BS10.uint32 shl 10).masked(10 .. 10))
  x.setMask((BS11.uint32 shl 11).masked(11 .. 11))
  x.setMask((BS12.uint32 shl 12).masked(12 .. 12))
  x.setMask((BS13.uint32 shl 13).masked(13 .. 13))
  x.setMask((BS14.uint32 shl 14).masked(14 .. 14))
  x.setMask((BS15.uint32 shl 15).masked(15 .. 15))
  x.setMask((BR0.uint32 shl 16).masked(16 .. 16))
  x.setMask((BR1.uint32 shl 17).masked(17 .. 17))
  x.setMask((BR2.uint32 shl 18).masked(18 .. 18))
  x.setMask((BR3.uint32 shl 19).masked(19 .. 19))
  x.setMask((BR4.uint32 shl 20).masked(20 .. 20))
  x.setMask((BR5.uint32 shl 21).masked(21 .. 21))
  x.setMask((BR6.uint32 shl 22).masked(22 .. 22))
  x.setMask((BR7.uint32 shl 23).masked(23 .. 23))
  x.setMask((BR8.uint32 shl 24).masked(24 .. 24))
  x.setMask((BR9.uint32 shl 25).masked(25 .. 25))
  x.setMask((BR10.uint32 shl 26).masked(26 .. 26))
  x.setMask((BR11.uint32 shl 27).masked(27 .. 27))
  x.setMask((BR12.uint32 shl 28).masked(28 .. 28))
  x.setMask((BR13.uint32 shl 29).masked(29 .. 29))
  x.setMask((BR14.uint32 shl 30).masked(30 .. 30))
  x.setMask((BR15.uint32 shl 31).masked(31 .. 31))
  reg.write x.GPIOA_BSHR_Fields

proc write*(reg: GPIOA_BCR_Type, val: GPIOA_BCR_Fields) {.inline.} =
  volatileStore(cast[ptr GPIOA_BCR_Fields](reg.loc), val)

proc write*(reg: GPIOA_BCR_Type, BR0: bool = false, BR1: bool = false, BR2: bool = false, BR3: bool = false, BR4: bool = false, BR5: bool = false, BR6: bool = false, BR7: bool = false, BR8: bool = false, BR9: bool = false, BR10: bool = false, BR11: bool = false, BR12: bool = false, BR13: bool = false, BR14: bool = false, BR15: bool = false) =
  var x: uint32
  x.setMask((BR0.uint32 shl 0).masked(0 .. 0))
  x.setMask((BR1.uint32 shl 1).masked(1 .. 1))
  x.setMask((BR2.uint32 shl 2).masked(2 .. 2))
  x.setMask((BR3.uint32 shl 3).masked(3 .. 3))
  x.setMask((BR4.uint32 shl 4).masked(4 .. 4))
  x.setMask((BR5.uint32 shl 5).masked(5 .. 5))
  x.setMask((BR6.uint32 shl 6).masked(6 .. 6))
  x.setMask((BR7.uint32 shl 7).masked(7 .. 7))
  x.setMask((BR8.uint32 shl 8).masked(8 .. 8))
  x.setMask((BR9.uint32 shl 9).masked(9 .. 9))
  x.setMask((BR10.uint32 shl 10).masked(10 .. 10))
  x.setMask((BR11.uint32 shl 11).masked(11 .. 11))
  x.setMask((BR12.uint32 shl 12).masked(12 .. 12))
  x.setMask((BR13.uint32 shl 13).masked(13 .. 13))
  x.setMask((BR14.uint32 shl 14).masked(14 .. 14))
  x.setMask((BR15.uint32 shl 15).masked(15 .. 15))
  reg.write x.GPIOA_BCR_Fields

proc read*(reg: GPIOA_LCKR_Type): GPIOA_LCKR_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOA_LCKR_Fields](reg.loc))

proc read*(reg: static GPIOA_LCKR_Type): GPIOA_LCKR_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOA_LCKR_Fields](reg.loc))

proc write*(reg: GPIOA_LCKR_Type, val: GPIOA_LCKR_Fields) {.inline.} =
  volatileStore(cast[ptr GPIOA_LCKR_Fields](reg.loc), val)

proc write*(reg: GPIOA_LCKR_Type, LCK0: bool = false, LCK1: bool = false, LCK2: bool = false, LCK3: bool = false, LCK4: bool = false, LCK5: bool = false, LCK6: bool = false, LCK7: bool = false, LCK8: bool = false, LCK9: bool = false, LCK10: bool = false, LCK11: bool = false, LCK12: bool = false, LCK13: bool = false, LCK14: bool = false, LCK15: bool = false, LCKK: bool = false) =
  var x: uint32
  x.setMask((LCK0.uint32 shl 0).masked(0 .. 0))
  x.setMask((LCK1.uint32 shl 1).masked(1 .. 1))
  x.setMask((LCK2.uint32 shl 2).masked(2 .. 2))
  x.setMask((LCK3.uint32 shl 3).masked(3 .. 3))
  x.setMask((LCK4.uint32 shl 4).masked(4 .. 4))
  x.setMask((LCK5.uint32 shl 5).masked(5 .. 5))
  x.setMask((LCK6.uint32 shl 6).masked(6 .. 6))
  x.setMask((LCK7.uint32 shl 7).masked(7 .. 7))
  x.setMask((LCK8.uint32 shl 8).masked(8 .. 8))
  x.setMask((LCK9.uint32 shl 9).masked(9 .. 9))
  x.setMask((LCK10.uint32 shl 10).masked(10 .. 10))
  x.setMask((LCK11.uint32 shl 11).masked(11 .. 11))
  x.setMask((LCK12.uint32 shl 12).masked(12 .. 12))
  x.setMask((LCK13.uint32 shl 13).masked(13 .. 13))
  x.setMask((LCK14.uint32 shl 14).masked(14 .. 14))
  x.setMask((LCK15.uint32 shl 15).masked(15 .. 15))
  x.setMask((LCKK.uint32 shl 16).masked(16 .. 16))
  reg.write x.GPIOA_LCKR_Fields

template modifyIt*(reg: GPIOA_LCKR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func MODE0*(r: GPIOA_CFGLR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `MODE0=`*(r: var GPIOA_CFGLR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.GPIOA_CFGLR_Fields

func CNF0*(r: GPIOA_CFGLR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `CNF0=`*(r: var GPIOA_CFGLR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.GPIOA_CFGLR_Fields

func MODE1*(r: GPIOA_CFGLR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 5)

proc `MODE1=`*(r: var GPIOA_CFGLR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.GPIOA_CFGLR_Fields

func CNF1*(r: GPIOA_CFGLR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 7)

proc `CNF1=`*(r: var GPIOA_CFGLR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 7)
  tmp.setMask((val shl 6).masked(6 .. 7))
  r = tmp.GPIOA_CFGLR_Fields

func MODE2*(r: GPIOA_CFGLR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `MODE2=`*(r: var GPIOA_CFGLR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.GPIOA_CFGLR_Fields

func CNF2*(r: GPIOA_CFGLR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `CNF2=`*(r: var GPIOA_CFGLR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.GPIOA_CFGLR_Fields

func MODE3*(r: GPIOA_CFGLR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 13)

proc `MODE3=`*(r: var GPIOA_CFGLR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.GPIOA_CFGLR_Fields

func CNF3*(r: GPIOA_CFGLR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `CNF3=`*(r: var GPIOA_CFGLR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.GPIOA_CFGLR_Fields

func MODE4*(r: GPIOA_CFGLR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 17)

proc `MODE4=`*(r: var GPIOA_CFGLR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 17)
  tmp.setMask((val shl 16).masked(16 .. 17))
  r = tmp.GPIOA_CFGLR_Fields

func CNF4*(r: GPIOA_CFGLR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `CNF4=`*(r: var GPIOA_CFGLR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.GPIOA_CFGLR_Fields

func MODE5*(r: GPIOA_CFGLR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `MODE5=`*(r: var GPIOA_CFGLR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.GPIOA_CFGLR_Fields

func CNF5*(r: GPIOA_CFGLR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 23)

proc `CNF5=`*(r: var GPIOA_CFGLR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 23)
  tmp.setMask((val shl 22).masked(22 .. 23))
  r = tmp.GPIOA_CFGLR_Fields

func MODE6*(r: GPIOA_CFGLR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 25)

proc `MODE6=`*(r: var GPIOA_CFGLR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 25)
  tmp.setMask((val shl 24).masked(24 .. 25))
  r = tmp.GPIOA_CFGLR_Fields

func CNF6*(r: GPIOA_CFGLR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(26 .. 27)

proc `CNF6=`*(r: var GPIOA_CFGLR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 27)
  tmp.setMask((val shl 26).masked(26 .. 27))
  r = tmp.GPIOA_CFGLR_Fields

func MODE7*(r: GPIOA_CFGLR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(28 .. 29)

proc `MODE7=`*(r: var GPIOA_CFGLR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 29)
  tmp.setMask((val shl 28).masked(28 .. 29))
  r = tmp.GPIOA_CFGLR_Fields

func CNF7*(r: GPIOA_CFGLR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(30 .. 31)

proc `CNF7=`*(r: var GPIOA_CFGLR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 31)
  tmp.setMask((val shl 30).masked(30 .. 31))
  r = tmp.GPIOA_CFGLR_Fields

func MODE8*(r: GPIOA_CFGHR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `MODE8=`*(r: var GPIOA_CFGHR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.GPIOA_CFGHR_Fields

func CNF8*(r: GPIOA_CFGHR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `CNF8=`*(r: var GPIOA_CFGHR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.GPIOA_CFGHR_Fields

func MODE9*(r: GPIOA_CFGHR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 5)

proc `MODE9=`*(r: var GPIOA_CFGHR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.GPIOA_CFGHR_Fields

func CNF9*(r: GPIOA_CFGHR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 7)

proc `CNF9=`*(r: var GPIOA_CFGHR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 7)
  tmp.setMask((val shl 6).masked(6 .. 7))
  r = tmp.GPIOA_CFGHR_Fields

func MODE10*(r: GPIOA_CFGHR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `MODE10=`*(r: var GPIOA_CFGHR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.GPIOA_CFGHR_Fields

func CNF10*(r: GPIOA_CFGHR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `CNF10=`*(r: var GPIOA_CFGHR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.GPIOA_CFGHR_Fields

func MODE11*(r: GPIOA_CFGHR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 13)

proc `MODE11=`*(r: var GPIOA_CFGHR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.GPIOA_CFGHR_Fields

func CNF11*(r: GPIOA_CFGHR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `CNF11=`*(r: var GPIOA_CFGHR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.GPIOA_CFGHR_Fields

func MODE12*(r: GPIOA_CFGHR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 17)

proc `MODE12=`*(r: var GPIOA_CFGHR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 17)
  tmp.setMask((val shl 16).masked(16 .. 17))
  r = tmp.GPIOA_CFGHR_Fields

func CNF12*(r: GPIOA_CFGHR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `CNF12=`*(r: var GPIOA_CFGHR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.GPIOA_CFGHR_Fields

func MODE13*(r: GPIOA_CFGHR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `MODE13=`*(r: var GPIOA_CFGHR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.GPIOA_CFGHR_Fields

func CNF13*(r: GPIOA_CFGHR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 23)

proc `CNF13=`*(r: var GPIOA_CFGHR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 23)
  tmp.setMask((val shl 22).masked(22 .. 23))
  r = tmp.GPIOA_CFGHR_Fields

func MODE14*(r: GPIOA_CFGHR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 25)

proc `MODE14=`*(r: var GPIOA_CFGHR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 25)
  tmp.setMask((val shl 24).masked(24 .. 25))
  r = tmp.GPIOA_CFGHR_Fields

func CNF14*(r: GPIOA_CFGHR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(26 .. 27)

proc `CNF14=`*(r: var GPIOA_CFGHR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 27)
  tmp.setMask((val shl 26).masked(26 .. 27))
  r = tmp.GPIOA_CFGHR_Fields

func MODE15*(r: GPIOA_CFGHR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(28 .. 29)

proc `MODE15=`*(r: var GPIOA_CFGHR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 29)
  tmp.setMask((val shl 28).masked(28 .. 29))
  r = tmp.GPIOA_CFGHR_Fields

func CNF15*(r: GPIOA_CFGHR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(30 .. 31)

proc `CNF15=`*(r: var GPIOA_CFGHR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 31)
  tmp.setMask((val shl 30).masked(30 .. 31))
  r = tmp.GPIOA_CFGHR_Fields

func IDR0*(r: GPIOA_INDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func IDR1*(r: GPIOA_INDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func IDR2*(r: GPIOA_INDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func IDR3*(r: GPIOA_INDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

func IDR4*(r: GPIOA_INDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

func IDR5*(r: GPIOA_INDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

func IDR6*(r: GPIOA_INDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

func IDR7*(r: GPIOA_INDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func IDR8*(r: GPIOA_INDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

func IDR9*(r: GPIOA_INDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

func IDR10*(r: GPIOA_INDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

func IDR11*(r: GPIOA_INDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

func IDR12*(r: GPIOA_INDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

func IDR13*(r: GPIOA_INDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

func IDR14*(r: GPIOA_INDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

func IDR15*(r: GPIOA_INDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

func ODR0*(r: GPIOA_OUTDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `ODR0=`*(r: var GPIOA_OUTDR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.GPIOA_OUTDR_Fields

func ODR1*(r: GPIOA_OUTDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `ODR1=`*(r: var GPIOA_OUTDR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.GPIOA_OUTDR_Fields

func ODR2*(r: GPIOA_OUTDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `ODR2=`*(r: var GPIOA_OUTDR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.GPIOA_OUTDR_Fields

func ODR3*(r: GPIOA_OUTDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `ODR3=`*(r: var GPIOA_OUTDR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.GPIOA_OUTDR_Fields

func ODR4*(r: GPIOA_OUTDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `ODR4=`*(r: var GPIOA_OUTDR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.GPIOA_OUTDR_Fields

func ODR5*(r: GPIOA_OUTDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ODR5=`*(r: var GPIOA_OUTDR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.GPIOA_OUTDR_Fields

func ODR6*(r: GPIOA_OUTDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `ODR6=`*(r: var GPIOA_OUTDR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.GPIOA_OUTDR_Fields

func ODR7*(r: GPIOA_OUTDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `ODR7=`*(r: var GPIOA_OUTDR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.GPIOA_OUTDR_Fields

func ODR8*(r: GPIOA_OUTDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `ODR8=`*(r: var GPIOA_OUTDR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.GPIOA_OUTDR_Fields

func ODR9*(r: GPIOA_OUTDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `ODR9=`*(r: var GPIOA_OUTDR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.GPIOA_OUTDR_Fields

func ODR10*(r: GPIOA_OUTDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `ODR10=`*(r: var GPIOA_OUTDR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.GPIOA_OUTDR_Fields

func ODR11*(r: GPIOA_OUTDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `ODR11=`*(r: var GPIOA_OUTDR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.GPIOA_OUTDR_Fields

func ODR12*(r: GPIOA_OUTDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `ODR12=`*(r: var GPIOA_OUTDR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.GPIOA_OUTDR_Fields

func ODR13*(r: GPIOA_OUTDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `ODR13=`*(r: var GPIOA_OUTDR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.GPIOA_OUTDR_Fields

func ODR14*(r: GPIOA_OUTDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `ODR14=`*(r: var GPIOA_OUTDR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.GPIOA_OUTDR_Fields

func ODR15*(r: GPIOA_OUTDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `ODR15=`*(r: var GPIOA_OUTDR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.GPIOA_OUTDR_Fields

proc `BS0=`*(r: var GPIOA_BSHR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.GPIOA_BSHR_Fields

proc `BS1=`*(r: var GPIOA_BSHR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.GPIOA_BSHR_Fields

proc `BS2=`*(r: var GPIOA_BSHR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.GPIOA_BSHR_Fields

proc `BS3=`*(r: var GPIOA_BSHR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.GPIOA_BSHR_Fields

proc `BS4=`*(r: var GPIOA_BSHR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.GPIOA_BSHR_Fields

proc `BS5=`*(r: var GPIOA_BSHR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.GPIOA_BSHR_Fields

proc `BS6=`*(r: var GPIOA_BSHR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.GPIOA_BSHR_Fields

proc `BS7=`*(r: var GPIOA_BSHR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.GPIOA_BSHR_Fields

proc `BS8=`*(r: var GPIOA_BSHR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.GPIOA_BSHR_Fields

proc `BS9=`*(r: var GPIOA_BSHR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.GPIOA_BSHR_Fields

proc `BS10=`*(r: var GPIOA_BSHR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.GPIOA_BSHR_Fields

proc `BS11=`*(r: var GPIOA_BSHR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.GPIOA_BSHR_Fields

proc `BS12=`*(r: var GPIOA_BSHR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.GPIOA_BSHR_Fields

proc `BS13=`*(r: var GPIOA_BSHR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.GPIOA_BSHR_Fields

proc `BS14=`*(r: var GPIOA_BSHR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.GPIOA_BSHR_Fields

proc `BS15=`*(r: var GPIOA_BSHR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.GPIOA_BSHR_Fields

proc `BR0=`*(r: var GPIOA_BSHR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.GPIOA_BSHR_Fields

proc `BR1=`*(r: var GPIOA_BSHR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.GPIOA_BSHR_Fields

proc `BR2=`*(r: var GPIOA_BSHR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.GPIOA_BSHR_Fields

proc `BR3=`*(r: var GPIOA_BSHR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.GPIOA_BSHR_Fields

proc `BR4=`*(r: var GPIOA_BSHR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.GPIOA_BSHR_Fields

proc `BR5=`*(r: var GPIOA_BSHR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.GPIOA_BSHR_Fields

proc `BR6=`*(r: var GPIOA_BSHR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.GPIOA_BSHR_Fields

proc `BR7=`*(r: var GPIOA_BSHR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.GPIOA_BSHR_Fields

proc `BR8=`*(r: var GPIOA_BSHR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.GPIOA_BSHR_Fields

proc `BR9=`*(r: var GPIOA_BSHR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.GPIOA_BSHR_Fields

proc `BR10=`*(r: var GPIOA_BSHR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.GPIOA_BSHR_Fields

proc `BR11=`*(r: var GPIOA_BSHR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.GPIOA_BSHR_Fields

proc `BR12=`*(r: var GPIOA_BSHR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.GPIOA_BSHR_Fields

proc `BR13=`*(r: var GPIOA_BSHR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.GPIOA_BSHR_Fields

proc `BR14=`*(r: var GPIOA_BSHR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.GPIOA_BSHR_Fields

proc `BR15=`*(r: var GPIOA_BSHR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.GPIOA_BSHR_Fields

proc `BR0=`*(r: var GPIOA_BCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.GPIOA_BCR_Fields

proc `BR1=`*(r: var GPIOA_BCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.GPIOA_BCR_Fields

proc `BR2=`*(r: var GPIOA_BCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.GPIOA_BCR_Fields

proc `BR3=`*(r: var GPIOA_BCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.GPIOA_BCR_Fields

proc `BR4=`*(r: var GPIOA_BCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.GPIOA_BCR_Fields

proc `BR5=`*(r: var GPIOA_BCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.GPIOA_BCR_Fields

proc `BR6=`*(r: var GPIOA_BCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.GPIOA_BCR_Fields

proc `BR7=`*(r: var GPIOA_BCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.GPIOA_BCR_Fields

proc `BR8=`*(r: var GPIOA_BCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.GPIOA_BCR_Fields

proc `BR9=`*(r: var GPIOA_BCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.GPIOA_BCR_Fields

proc `BR10=`*(r: var GPIOA_BCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.GPIOA_BCR_Fields

proc `BR11=`*(r: var GPIOA_BCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.GPIOA_BCR_Fields

proc `BR12=`*(r: var GPIOA_BCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.GPIOA_BCR_Fields

proc `BR13=`*(r: var GPIOA_BCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.GPIOA_BCR_Fields

proc `BR14=`*(r: var GPIOA_BCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.GPIOA_BCR_Fields

proc `BR15=`*(r: var GPIOA_BCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.GPIOA_BCR_Fields

func LCK0*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `LCK0=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.GPIOA_LCKR_Fields

func LCK1*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `LCK1=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.GPIOA_LCKR_Fields

func LCK2*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `LCK2=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.GPIOA_LCKR_Fields

func LCK3*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `LCK3=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.GPIOA_LCKR_Fields

func LCK4*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `LCK4=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.GPIOA_LCKR_Fields

func LCK5*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `LCK5=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.GPIOA_LCKR_Fields

func LCK6*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `LCK6=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.GPIOA_LCKR_Fields

func LCK7*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `LCK7=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.GPIOA_LCKR_Fields

func LCK8*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `LCK8=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.GPIOA_LCKR_Fields

func LCK9*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `LCK9=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.GPIOA_LCKR_Fields

func LCK10*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `LCK10=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.GPIOA_LCKR_Fields

func LCK11*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `LCK11=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.GPIOA_LCKR_Fields

func LCK12*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `LCK12=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.GPIOA_LCKR_Fields

func LCK13*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `LCK13=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.GPIOA_LCKR_Fields

func LCK14*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `LCK14=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.GPIOA_LCKR_Fields

func LCK15*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `LCK15=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.GPIOA_LCKR_Fields

func LCKK*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `LCKK=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.GPIOA_LCKR_Fields

type
  AFIO_ECR_Fields* = distinct uint32
  AFIO_PCFR_Fields* = distinct uint32
  AFIO_EXTICR1_Fields* = distinct uint32
  AFIO_EXTICR2_Fields* = distinct uint32
  AFIO_EXTICR3_Fields* = distinct uint32
  AFIO_EXTICR4_Fields* = distinct uint32
  AFIO_PCFR2_Fields* = distinct uint32

proc read*(reg: AFIO_ECR_Type): AFIO_ECR_Fields {.inline.} =
  volatileLoad(cast[ptr AFIO_ECR_Fields](reg.loc))

proc read*(reg: static AFIO_ECR_Type): AFIO_ECR_Fields {.inline.} =
  volatileLoad(cast[ptr AFIO_ECR_Fields](reg.loc))

proc write*(reg: AFIO_ECR_Type, val: AFIO_ECR_Fields) {.inline.} =
  volatileStore(cast[ptr AFIO_ECR_Fields](reg.loc), val)

proc write*(reg: AFIO_ECR_Type, PIN: uint32 = 0, PORT: uint32 = 0, EVOE: bool = false) =
  var x: uint32
  x.setMask((PIN shl 0).masked(0 .. 3))
  x.setMask((PORT shl 4).masked(4 .. 6))
  x.setMask((EVOE.uint32 shl 7).masked(7 .. 7))
  reg.write x.AFIO_ECR_Fields

template modifyIt*(reg: AFIO_ECR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: AFIO_PCFR_Type): AFIO_PCFR_Fields {.inline.} =
  volatileLoad(cast[ptr AFIO_PCFR_Fields](reg.loc))

proc read*(reg: static AFIO_PCFR_Type): AFIO_PCFR_Fields {.inline.} =
  volatileLoad(cast[ptr AFIO_PCFR_Fields](reg.loc))

proc write*(reg: AFIO_PCFR_Type, val: AFIO_PCFR_Fields) {.inline.} =
  volatileStore(cast[ptr AFIO_PCFR_Fields](reg.loc), val)

proc write*(reg: AFIO_PCFR_Type, SPI1RM: bool = false, I2C1RM: bool = false, USART1RM: bool = false, USART2RM: bool = false, USART3RM: uint32 = 0, TIM1RM: uint32 = 0, TIM2RM: uint32 = 0, TIM3RM: uint32 = 0, TIM4RM: bool = false, CAN1RM: uint32 = 0, PD01RM: bool = false, TIM5CH4RM: bool = false, ADC1_ETRGINJ_RM: bool = false, ADC1_ETRGREG_RM: bool = false, ADC2_ETRGINJ_RM: bool = false, ADC2_ETRGREG_RM: bool = false, ETHRM: bool = false, CAN2RM: bool = false, MII_RMII_SEL: bool = false, SWCFG: uint32 = 0, SPI3_RM: bool = false, TIM2ITRA_RM: bool = false, PTP_PPSP_RM: bool = false) =
  var x: uint32
  x.setMask((SPI1RM.uint32 shl 0).masked(0 .. 0))
  x.setMask((I2C1RM.uint32 shl 1).masked(1 .. 1))
  x.setMask((USART1RM.uint32 shl 2).masked(2 .. 2))
  x.setMask((USART2RM.uint32 shl 3).masked(3 .. 3))
  x.setMask((USART3RM shl 4).masked(4 .. 5))
  x.setMask((TIM1RM shl 6).masked(6 .. 7))
  x.setMask((TIM2RM shl 8).masked(8 .. 9))
  x.setMask((TIM3RM shl 10).masked(10 .. 11))
  x.setMask((TIM4RM.uint32 shl 12).masked(12 .. 12))
  x.setMask((CAN1RM shl 13).masked(13 .. 14))
  x.setMask((PD01RM.uint32 shl 15).masked(15 .. 15))
  x.setMask((TIM5CH4RM.uint32 shl 16).masked(16 .. 16))
  x.setMask((ADC1_ETRGINJ_RM.uint32 shl 17).masked(17 .. 17))
  x.setMask((ADC1_ETRGREG_RM.uint32 shl 18).masked(18 .. 18))
  x.setMask((ADC2_ETRGINJ_RM.uint32 shl 19).masked(19 .. 19))
  x.setMask((ADC2_ETRGREG_RM.uint32 shl 20).masked(20 .. 20))
  x.setMask((ETHRM.uint32 shl 21).masked(21 .. 21))
  x.setMask((CAN2RM.uint32 shl 22).masked(22 .. 22))
  x.setMask((MII_RMII_SEL.uint32 shl 23).masked(23 .. 23))
  x.setMask((SWCFG shl 24).masked(24 .. 26))
  x.setMask((SPI3_RM.uint32 shl 28).masked(28 .. 28))
  x.setMask((TIM2ITRA_RM.uint32 shl 29).masked(29 .. 29))
  x.setMask((PTP_PPSP_RM.uint32 shl 30).masked(30 .. 30))
  reg.write x.AFIO_PCFR_Fields

template modifyIt*(reg: AFIO_PCFR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: AFIO_EXTICR1_Type): AFIO_EXTICR1_Fields {.inline.} =
  volatileLoad(cast[ptr AFIO_EXTICR1_Fields](reg.loc))

proc read*(reg: static AFIO_EXTICR1_Type): AFIO_EXTICR1_Fields {.inline.} =
  volatileLoad(cast[ptr AFIO_EXTICR1_Fields](reg.loc))

proc write*(reg: AFIO_EXTICR1_Type, val: AFIO_EXTICR1_Fields) {.inline.} =
  volatileStore(cast[ptr AFIO_EXTICR1_Fields](reg.loc), val)

proc write*(reg: AFIO_EXTICR1_Type, EXTI0: uint32 = 0, EXTI1: uint32 = 0, EXTI2: uint32 = 0, EXTI3: uint32 = 0) =
  var x: uint32
  x.setMask((EXTI0 shl 0).masked(0 .. 3))
  x.setMask((EXTI1 shl 4).masked(4 .. 7))
  x.setMask((EXTI2 shl 8).masked(8 .. 11))
  x.setMask((EXTI3 shl 12).masked(12 .. 15))
  reg.write x.AFIO_EXTICR1_Fields

template modifyIt*(reg: AFIO_EXTICR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: AFIO_EXTICR2_Type): AFIO_EXTICR2_Fields {.inline.} =
  volatileLoad(cast[ptr AFIO_EXTICR2_Fields](reg.loc))

proc read*(reg: static AFIO_EXTICR2_Type): AFIO_EXTICR2_Fields {.inline.} =
  volatileLoad(cast[ptr AFIO_EXTICR2_Fields](reg.loc))

proc write*(reg: AFIO_EXTICR2_Type, val: AFIO_EXTICR2_Fields) {.inline.} =
  volatileStore(cast[ptr AFIO_EXTICR2_Fields](reg.loc), val)

proc write*(reg: AFIO_EXTICR2_Type, EXTI4: uint32 = 0, EXTI5: uint32 = 0, EXTI6: uint32 = 0, EXTI7: uint32 = 0) =
  var x: uint32
  x.setMask((EXTI4 shl 0).masked(0 .. 3))
  x.setMask((EXTI5 shl 4).masked(4 .. 7))
  x.setMask((EXTI6 shl 8).masked(8 .. 11))
  x.setMask((EXTI7 shl 12).masked(12 .. 15))
  reg.write x.AFIO_EXTICR2_Fields

template modifyIt*(reg: AFIO_EXTICR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: AFIO_EXTICR3_Type): AFIO_EXTICR3_Fields {.inline.} =
  volatileLoad(cast[ptr AFIO_EXTICR3_Fields](reg.loc))

proc read*(reg: static AFIO_EXTICR3_Type): AFIO_EXTICR3_Fields {.inline.} =
  volatileLoad(cast[ptr AFIO_EXTICR3_Fields](reg.loc))

proc write*(reg: AFIO_EXTICR3_Type, val: AFIO_EXTICR3_Fields) {.inline.} =
  volatileStore(cast[ptr AFIO_EXTICR3_Fields](reg.loc), val)

proc write*(reg: AFIO_EXTICR3_Type, EXTI8: uint32 = 0, EXTI9: uint32 = 0, EXTI10: uint32 = 0, EXTI11: uint32 = 0) =
  var x: uint32
  x.setMask((EXTI8 shl 0).masked(0 .. 3))
  x.setMask((EXTI9 shl 4).masked(4 .. 7))
  x.setMask((EXTI10 shl 8).masked(8 .. 11))
  x.setMask((EXTI11 shl 12).masked(12 .. 15))
  reg.write x.AFIO_EXTICR3_Fields

template modifyIt*(reg: AFIO_EXTICR3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: AFIO_EXTICR4_Type): AFIO_EXTICR4_Fields {.inline.} =
  volatileLoad(cast[ptr AFIO_EXTICR4_Fields](reg.loc))

proc read*(reg: static AFIO_EXTICR4_Type): AFIO_EXTICR4_Fields {.inline.} =
  volatileLoad(cast[ptr AFIO_EXTICR4_Fields](reg.loc))

proc write*(reg: AFIO_EXTICR4_Type, val: AFIO_EXTICR4_Fields) {.inline.} =
  volatileStore(cast[ptr AFIO_EXTICR4_Fields](reg.loc), val)

proc write*(reg: AFIO_EXTICR4_Type, EXTI12: uint32 = 0, EXTI13: uint32 = 0, EXTI14: uint32 = 0, EXTI15: uint32 = 0) =
  var x: uint32
  x.setMask((EXTI12 shl 0).masked(0 .. 3))
  x.setMask((EXTI13 shl 4).masked(4 .. 7))
  x.setMask((EXTI14 shl 8).masked(8 .. 11))
  x.setMask((EXTI15 shl 12).masked(12 .. 15))
  reg.write x.AFIO_EXTICR4_Fields

template modifyIt*(reg: AFIO_EXTICR4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: AFIO_PCFR2_Type): AFIO_PCFR2_Fields {.inline.} =
  volatileLoad(cast[ptr AFIO_PCFR2_Fields](reg.loc))

proc read*(reg: static AFIO_PCFR2_Type): AFIO_PCFR2_Fields {.inline.} =
  volatileLoad(cast[ptr AFIO_PCFR2_Fields](reg.loc))

proc write*(reg: AFIO_PCFR2_Type, val: AFIO_PCFR2_Fields) {.inline.} =
  volatileStore(cast[ptr AFIO_PCFR2_Fields](reg.loc), val)

proc write*(reg: AFIO_PCFR2_Type, TIM8_REMAP: bool = false, TIM9_REMAP: uint32 = 0, TIM10_REMAP: uint32 = 0, FSMC_NADV: bool = false, UART4_REMAP: uint32 = 0, UART5_REMAP: uint32 = 0, UART6_REMAP: uint32 = 0, UART7_REMAP: uint32 = 0, UART8_REMAP: uint32 = 0, UART1_REMAP2: bool = false) =
  var x: uint32
  x.setMask((TIM8_REMAP.uint32 shl 2).masked(2 .. 2))
  x.setMask((TIM9_REMAP shl 3).masked(3 .. 4))
  x.setMask((TIM10_REMAP shl 5).masked(5 .. 6))
  x.setMask((FSMC_NADV.uint32 shl 10).masked(10 .. 10))
  x.setMask((UART4_REMAP shl 16).masked(16 .. 17))
  x.setMask((UART5_REMAP shl 18).masked(18 .. 19))
  x.setMask((UART6_REMAP shl 20).masked(20 .. 21))
  x.setMask((UART7_REMAP shl 22).masked(22 .. 23))
  x.setMask((UART8_REMAP shl 24).masked(24 .. 25))
  x.setMask((UART1_REMAP2.uint32 shl 26).masked(26 .. 26))
  reg.write x.AFIO_PCFR2_Fields

template modifyIt*(reg: AFIO_PCFR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func PIN*(r: AFIO_ECR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `PIN=`*(r: var AFIO_ECR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.AFIO_ECR_Fields

func PORT*(r: AFIO_ECR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `PORT=`*(r: var AFIO_ECR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.AFIO_ECR_Fields

func EVOE*(r: AFIO_ECR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `EVOE=`*(r: var AFIO_ECR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.AFIO_ECR_Fields

func SPI1RM*(r: AFIO_PCFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `SPI1RM=`*(r: var AFIO_PCFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.AFIO_PCFR_Fields

func I2C1RM*(r: AFIO_PCFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `I2C1RM=`*(r: var AFIO_PCFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.AFIO_PCFR_Fields

func USART1RM*(r: AFIO_PCFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `USART1RM=`*(r: var AFIO_PCFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.AFIO_PCFR_Fields

func USART2RM*(r: AFIO_PCFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `USART2RM=`*(r: var AFIO_PCFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.AFIO_PCFR_Fields

func USART3RM*(r: AFIO_PCFR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 5)

proc `USART3RM=`*(r: var AFIO_PCFR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.AFIO_PCFR_Fields

func TIM1RM*(r: AFIO_PCFR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 7)

proc `TIM1RM=`*(r: var AFIO_PCFR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 7)
  tmp.setMask((val shl 6).masked(6 .. 7))
  r = tmp.AFIO_PCFR_Fields

func TIM2RM*(r: AFIO_PCFR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `TIM2RM=`*(r: var AFIO_PCFR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.AFIO_PCFR_Fields

func TIM3RM*(r: AFIO_PCFR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `TIM3RM=`*(r: var AFIO_PCFR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.AFIO_PCFR_Fields

func TIM4RM*(r: AFIO_PCFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `TIM4RM=`*(r: var AFIO_PCFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.AFIO_PCFR_Fields

func CAN1RM*(r: AFIO_PCFR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(13 .. 14)

proc `CAN1RM=`*(r: var AFIO_PCFR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 14)
  tmp.setMask((val shl 13).masked(13 .. 14))
  r = tmp.AFIO_PCFR_Fields

func PD01RM*(r: AFIO_PCFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `PD01RM=`*(r: var AFIO_PCFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.AFIO_PCFR_Fields

func TIM5CH4RM*(r: AFIO_PCFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `TIM5CH4RM=`*(r: var AFIO_PCFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.AFIO_PCFR_Fields

func ADC1_ETRGINJ_RM*(r: AFIO_PCFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `ADC1_ETRGINJ_RM=`*(r: var AFIO_PCFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.AFIO_PCFR_Fields

func ADC1_ETRGREG_RM*(r: AFIO_PCFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `ADC1_ETRGREG_RM=`*(r: var AFIO_PCFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.AFIO_PCFR_Fields

func ADC2_ETRGINJ_RM*(r: AFIO_PCFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `ADC2_ETRGINJ_RM=`*(r: var AFIO_PCFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.AFIO_PCFR_Fields

func ADC2_ETRGREG_RM*(r: AFIO_PCFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `ADC2_ETRGREG_RM=`*(r: var AFIO_PCFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.AFIO_PCFR_Fields

func ETHRM*(r: AFIO_PCFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `ETHRM=`*(r: var AFIO_PCFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.AFIO_PCFR_Fields

func CAN2RM*(r: AFIO_PCFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `CAN2RM=`*(r: var AFIO_PCFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.AFIO_PCFR_Fields

func MII_RMII_SEL*(r: AFIO_PCFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `MII_RMII_SEL=`*(r: var AFIO_PCFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.AFIO_PCFR_Fields

proc `SWCFG=`*(r: var AFIO_PCFR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 26)
  tmp.setMask((val shl 24).masked(24 .. 26))
  r = tmp.AFIO_PCFR_Fields

func SPI3_RM*(r: AFIO_PCFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `SPI3_RM=`*(r: var AFIO_PCFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.AFIO_PCFR_Fields

func TIM2ITRA_RM*(r: AFIO_PCFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `TIM2ITRA_RM=`*(r: var AFIO_PCFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.AFIO_PCFR_Fields

func PTP_PPSP_RM*(r: AFIO_PCFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `PTP_PPSP_RM=`*(r: var AFIO_PCFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.AFIO_PCFR_Fields

func EXTI0*(r: AFIO_EXTICR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `EXTI0=`*(r: var AFIO_EXTICR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.AFIO_EXTICR1_Fields

func EXTI1*(r: AFIO_EXTICR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `EXTI1=`*(r: var AFIO_EXTICR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.AFIO_EXTICR1_Fields

func EXTI2*(r: AFIO_EXTICR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

proc `EXTI2=`*(r: var AFIO_EXTICR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 11)
  tmp.setMask((val shl 8).masked(8 .. 11))
  r = tmp.AFIO_EXTICR1_Fields

func EXTI3*(r: AFIO_EXTICR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 15)

proc `EXTI3=`*(r: var AFIO_EXTICR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 15)
  tmp.setMask((val shl 12).masked(12 .. 15))
  r = tmp.AFIO_EXTICR1_Fields

func EXTI4*(r: AFIO_EXTICR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `EXTI4=`*(r: var AFIO_EXTICR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.AFIO_EXTICR2_Fields

func EXTI5*(r: AFIO_EXTICR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `EXTI5=`*(r: var AFIO_EXTICR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.AFIO_EXTICR2_Fields

func EXTI6*(r: AFIO_EXTICR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

proc `EXTI6=`*(r: var AFIO_EXTICR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 11)
  tmp.setMask((val shl 8).masked(8 .. 11))
  r = tmp.AFIO_EXTICR2_Fields

func EXTI7*(r: AFIO_EXTICR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 15)

proc `EXTI7=`*(r: var AFIO_EXTICR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 15)
  tmp.setMask((val shl 12).masked(12 .. 15))
  r = tmp.AFIO_EXTICR2_Fields

func EXTI8*(r: AFIO_EXTICR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `EXTI8=`*(r: var AFIO_EXTICR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.AFIO_EXTICR3_Fields

func EXTI9*(r: AFIO_EXTICR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `EXTI9=`*(r: var AFIO_EXTICR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.AFIO_EXTICR3_Fields

func EXTI10*(r: AFIO_EXTICR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

proc `EXTI10=`*(r: var AFIO_EXTICR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 11)
  tmp.setMask((val shl 8).masked(8 .. 11))
  r = tmp.AFIO_EXTICR3_Fields

func EXTI11*(r: AFIO_EXTICR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 15)

proc `EXTI11=`*(r: var AFIO_EXTICR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 15)
  tmp.setMask((val shl 12).masked(12 .. 15))
  r = tmp.AFIO_EXTICR3_Fields

func EXTI12*(r: AFIO_EXTICR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `EXTI12=`*(r: var AFIO_EXTICR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.AFIO_EXTICR4_Fields

func EXTI13*(r: AFIO_EXTICR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `EXTI13=`*(r: var AFIO_EXTICR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.AFIO_EXTICR4_Fields

func EXTI14*(r: AFIO_EXTICR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

proc `EXTI14=`*(r: var AFIO_EXTICR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 11)
  tmp.setMask((val shl 8).masked(8 .. 11))
  r = tmp.AFIO_EXTICR4_Fields

func EXTI15*(r: AFIO_EXTICR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 15)

proc `EXTI15=`*(r: var AFIO_EXTICR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 15)
  tmp.setMask((val shl 12).masked(12 .. 15))
  r = tmp.AFIO_EXTICR4_Fields

func TIM8_REMAP*(r: AFIO_PCFR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `TIM8_REMAP=`*(r: var AFIO_PCFR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.AFIO_PCFR2_Fields

func TIM9_REMAP*(r: AFIO_PCFR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 4)

proc `TIM9_REMAP=`*(r: var AFIO_PCFR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.AFIO_PCFR2_Fields

func TIM10_REMAP*(r: AFIO_PCFR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(5 .. 6)

proc `TIM10_REMAP=`*(r: var AFIO_PCFR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 6)
  tmp.setMask((val shl 5).masked(5 .. 6))
  r = tmp.AFIO_PCFR2_Fields

func FSMC_NADV*(r: AFIO_PCFR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FSMC_NADV=`*(r: var AFIO_PCFR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.AFIO_PCFR2_Fields

func UART4_REMAP*(r: AFIO_PCFR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 17)

proc `UART4_REMAP=`*(r: var AFIO_PCFR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 17)
  tmp.setMask((val shl 16).masked(16 .. 17))
  r = tmp.AFIO_PCFR2_Fields

func UART5_REMAP*(r: AFIO_PCFR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `UART5_REMAP=`*(r: var AFIO_PCFR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.AFIO_PCFR2_Fields

func UART6_REMAP*(r: AFIO_PCFR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `UART6_REMAP=`*(r: var AFIO_PCFR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.AFIO_PCFR2_Fields

func UART7_REMAP*(r: AFIO_PCFR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 23)

proc `UART7_REMAP=`*(r: var AFIO_PCFR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 23)
  tmp.setMask((val shl 22).masked(22 .. 23))
  r = tmp.AFIO_PCFR2_Fields

func UART8_REMAP*(r: AFIO_PCFR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 25)

proc `UART8_REMAP=`*(r: var AFIO_PCFR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 25)
  tmp.setMask((val shl 24).masked(24 .. 25))
  r = tmp.AFIO_PCFR2_Fields

func UART1_REMAP2*(r: AFIO_PCFR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `UART1_REMAP2=`*(r: var AFIO_PCFR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.AFIO_PCFR2_Fields

type
  EXTI_INTENR_Fields* = distinct uint32
  EXTI_EVENR_Fields* = distinct uint32
  EXTI_RTENR_Fields* = distinct uint32
  EXTI_FTENR_Fields* = distinct uint32
  EXTI_SWIEVR_Fields* = distinct uint32
  EXTI_INTFR_Fields* = distinct uint32

proc read*(reg: EXTI_INTENR_Type): EXTI_INTENR_Fields {.inline.} =
  volatileLoad(cast[ptr EXTI_INTENR_Fields](reg.loc))

proc read*(reg: static EXTI_INTENR_Type): EXTI_INTENR_Fields {.inline.} =
  volatileLoad(cast[ptr EXTI_INTENR_Fields](reg.loc))

proc write*(reg: EXTI_INTENR_Type, val: EXTI_INTENR_Fields) {.inline.} =
  volatileStore(cast[ptr EXTI_INTENR_Fields](reg.loc), val)

proc write*(reg: EXTI_INTENR_Type, MR0: bool = false, MR1: bool = false, MR2: bool = false, MR3: bool = false, MR4: bool = false, MR5: bool = false, MR6: bool = false, MR7: bool = false, MR8: bool = false, MR9: bool = false, MR10: bool = false, MR11: bool = false, MR12: bool = false, MR13: bool = false, MR14: bool = false, MR15: bool = false, MR16: bool = false, MR17: bool = false, MR18: bool = false, MR19: bool = false) =
  var x: uint32
  x.setMask((MR0.uint32 shl 0).masked(0 .. 0))
  x.setMask((MR1.uint32 shl 1).masked(1 .. 1))
  x.setMask((MR2.uint32 shl 2).masked(2 .. 2))
  x.setMask((MR3.uint32 shl 3).masked(3 .. 3))
  x.setMask((MR4.uint32 shl 4).masked(4 .. 4))
  x.setMask((MR5.uint32 shl 5).masked(5 .. 5))
  x.setMask((MR6.uint32 shl 6).masked(6 .. 6))
  x.setMask((MR7.uint32 shl 7).masked(7 .. 7))
  x.setMask((MR8.uint32 shl 8).masked(8 .. 8))
  x.setMask((MR9.uint32 shl 9).masked(9 .. 9))
  x.setMask((MR10.uint32 shl 10).masked(10 .. 10))
  x.setMask((MR11.uint32 shl 11).masked(11 .. 11))
  x.setMask((MR12.uint32 shl 12).masked(12 .. 12))
  x.setMask((MR13.uint32 shl 13).masked(13 .. 13))
  x.setMask((MR14.uint32 shl 14).masked(14 .. 14))
  x.setMask((MR15.uint32 shl 15).masked(15 .. 15))
  x.setMask((MR16.uint32 shl 16).masked(16 .. 16))
  x.setMask((MR17.uint32 shl 17).masked(17 .. 17))
  x.setMask((MR18.uint32 shl 18).masked(18 .. 18))
  x.setMask((MR19.uint32 shl 19).masked(19 .. 19))
  reg.write x.EXTI_INTENR_Fields

template modifyIt*(reg: EXTI_INTENR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: EXTI_EVENR_Type): EXTI_EVENR_Fields {.inline.} =
  volatileLoad(cast[ptr EXTI_EVENR_Fields](reg.loc))

proc read*(reg: static EXTI_EVENR_Type): EXTI_EVENR_Fields {.inline.} =
  volatileLoad(cast[ptr EXTI_EVENR_Fields](reg.loc))

proc write*(reg: EXTI_EVENR_Type, val: EXTI_EVENR_Fields) {.inline.} =
  volatileStore(cast[ptr EXTI_EVENR_Fields](reg.loc), val)

proc write*(reg: EXTI_EVENR_Type, MR0: bool = false, MR1: bool = false, MR2: bool = false, MR3: bool = false, MR4: bool = false, MR5: bool = false, MR6: bool = false, MR7: bool = false, MR8: bool = false, MR9: bool = false, MR10: bool = false, MR11: bool = false, MR12: bool = false, MR13: bool = false, MR14: bool = false, MR15: bool = false, MR16: bool = false, MR17: bool = false, MR18: bool = false, MR19: bool = false) =
  var x: uint32
  x.setMask((MR0.uint32 shl 0).masked(0 .. 0))
  x.setMask((MR1.uint32 shl 1).masked(1 .. 1))
  x.setMask((MR2.uint32 shl 2).masked(2 .. 2))
  x.setMask((MR3.uint32 shl 3).masked(3 .. 3))
  x.setMask((MR4.uint32 shl 4).masked(4 .. 4))
  x.setMask((MR5.uint32 shl 5).masked(5 .. 5))
  x.setMask((MR6.uint32 shl 6).masked(6 .. 6))
  x.setMask((MR7.uint32 shl 7).masked(7 .. 7))
  x.setMask((MR8.uint32 shl 8).masked(8 .. 8))
  x.setMask((MR9.uint32 shl 9).masked(9 .. 9))
  x.setMask((MR10.uint32 shl 10).masked(10 .. 10))
  x.setMask((MR11.uint32 shl 11).masked(11 .. 11))
  x.setMask((MR12.uint32 shl 12).masked(12 .. 12))
  x.setMask((MR13.uint32 shl 13).masked(13 .. 13))
  x.setMask((MR14.uint32 shl 14).masked(14 .. 14))
  x.setMask((MR15.uint32 shl 15).masked(15 .. 15))
  x.setMask((MR16.uint32 shl 16).masked(16 .. 16))
  x.setMask((MR17.uint32 shl 17).masked(17 .. 17))
  x.setMask((MR18.uint32 shl 18).masked(18 .. 18))
  x.setMask((MR19.uint32 shl 19).masked(19 .. 19))
  reg.write x.EXTI_EVENR_Fields

template modifyIt*(reg: EXTI_EVENR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: EXTI_RTENR_Type): EXTI_RTENR_Fields {.inline.} =
  volatileLoad(cast[ptr EXTI_RTENR_Fields](reg.loc))

proc read*(reg: static EXTI_RTENR_Type): EXTI_RTENR_Fields {.inline.} =
  volatileLoad(cast[ptr EXTI_RTENR_Fields](reg.loc))

proc write*(reg: EXTI_RTENR_Type, val: EXTI_RTENR_Fields) {.inline.} =
  volatileStore(cast[ptr EXTI_RTENR_Fields](reg.loc), val)

proc write*(reg: EXTI_RTENR_Type, TR0: bool = false, TR1: bool = false, TR2: bool = false, TR3: bool = false, TR4: bool = false, TR5: bool = false, TR6: bool = false, TR7: bool = false, TR8: bool = false, TR9: bool = false, TR10: bool = false, TR11: bool = false, TR12: bool = false, TR13: bool = false, TR14: bool = false, TR15: bool = false, TR16: bool = false, TR17: bool = false, TR18: bool = false, TR19: bool = false) =
  var x: uint32
  x.setMask((TR0.uint32 shl 0).masked(0 .. 0))
  x.setMask((TR1.uint32 shl 1).masked(1 .. 1))
  x.setMask((TR2.uint32 shl 2).masked(2 .. 2))
  x.setMask((TR3.uint32 shl 3).masked(3 .. 3))
  x.setMask((TR4.uint32 shl 4).masked(4 .. 4))
  x.setMask((TR5.uint32 shl 5).masked(5 .. 5))
  x.setMask((TR6.uint32 shl 6).masked(6 .. 6))
  x.setMask((TR7.uint32 shl 7).masked(7 .. 7))
  x.setMask((TR8.uint32 shl 8).masked(8 .. 8))
  x.setMask((TR9.uint32 shl 9).masked(9 .. 9))
  x.setMask((TR10.uint32 shl 10).masked(10 .. 10))
  x.setMask((TR11.uint32 shl 11).masked(11 .. 11))
  x.setMask((TR12.uint32 shl 12).masked(12 .. 12))
  x.setMask((TR13.uint32 shl 13).masked(13 .. 13))
  x.setMask((TR14.uint32 shl 14).masked(14 .. 14))
  x.setMask((TR15.uint32 shl 15).masked(15 .. 15))
  x.setMask((TR16.uint32 shl 16).masked(16 .. 16))
  x.setMask((TR17.uint32 shl 17).masked(17 .. 17))
  x.setMask((TR18.uint32 shl 18).masked(18 .. 18))
  x.setMask((TR19.uint32 shl 19).masked(19 .. 19))
  reg.write x.EXTI_RTENR_Fields

template modifyIt*(reg: EXTI_RTENR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: EXTI_FTENR_Type): EXTI_FTENR_Fields {.inline.} =
  volatileLoad(cast[ptr EXTI_FTENR_Fields](reg.loc))

proc read*(reg: static EXTI_FTENR_Type): EXTI_FTENR_Fields {.inline.} =
  volatileLoad(cast[ptr EXTI_FTENR_Fields](reg.loc))

proc write*(reg: EXTI_FTENR_Type, val: EXTI_FTENR_Fields) {.inline.} =
  volatileStore(cast[ptr EXTI_FTENR_Fields](reg.loc), val)

proc write*(reg: EXTI_FTENR_Type, TR0: bool = false, TR1: bool = false, TR2: bool = false, TR3: bool = false, TR4: bool = false, TR5: bool = false, TR6: bool = false, TR7: bool = false, TR8: bool = false, TR9: bool = false, TR10: bool = false, TR11: bool = false, TR12: bool = false, TR13: bool = false, TR14: bool = false, TR15: bool = false, TR16: bool = false, TR17: bool = false, TR18: bool = false, TR19: bool = false) =
  var x: uint32
  x.setMask((TR0.uint32 shl 0).masked(0 .. 0))
  x.setMask((TR1.uint32 shl 1).masked(1 .. 1))
  x.setMask((TR2.uint32 shl 2).masked(2 .. 2))
  x.setMask((TR3.uint32 shl 3).masked(3 .. 3))
  x.setMask((TR4.uint32 shl 4).masked(4 .. 4))
  x.setMask((TR5.uint32 shl 5).masked(5 .. 5))
  x.setMask((TR6.uint32 shl 6).masked(6 .. 6))
  x.setMask((TR7.uint32 shl 7).masked(7 .. 7))
  x.setMask((TR8.uint32 shl 8).masked(8 .. 8))
  x.setMask((TR9.uint32 shl 9).masked(9 .. 9))
  x.setMask((TR10.uint32 shl 10).masked(10 .. 10))
  x.setMask((TR11.uint32 shl 11).masked(11 .. 11))
  x.setMask((TR12.uint32 shl 12).masked(12 .. 12))
  x.setMask((TR13.uint32 shl 13).masked(13 .. 13))
  x.setMask((TR14.uint32 shl 14).masked(14 .. 14))
  x.setMask((TR15.uint32 shl 15).masked(15 .. 15))
  x.setMask((TR16.uint32 shl 16).masked(16 .. 16))
  x.setMask((TR17.uint32 shl 17).masked(17 .. 17))
  x.setMask((TR18.uint32 shl 18).masked(18 .. 18))
  x.setMask((TR19.uint32 shl 19).masked(19 .. 19))
  reg.write x.EXTI_FTENR_Fields

template modifyIt*(reg: EXTI_FTENR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: EXTI_SWIEVR_Type): EXTI_SWIEVR_Fields {.inline.} =
  volatileLoad(cast[ptr EXTI_SWIEVR_Fields](reg.loc))

proc read*(reg: static EXTI_SWIEVR_Type): EXTI_SWIEVR_Fields {.inline.} =
  volatileLoad(cast[ptr EXTI_SWIEVR_Fields](reg.loc))

proc write*(reg: EXTI_SWIEVR_Type, val: EXTI_SWIEVR_Fields) {.inline.} =
  volatileStore(cast[ptr EXTI_SWIEVR_Fields](reg.loc), val)

proc write*(reg: EXTI_SWIEVR_Type, SWIER0: bool = false, SWIER1: bool = false, SWIER2: bool = false, SWIER3: bool = false, SWIER4: bool = false, SWIER5: bool = false, SWIER6: bool = false, SWIER7: bool = false, SWIER8: bool = false, SWIER9: bool = false, SWIER10: bool = false, SWIER11: bool = false, SWIER12: bool = false, SWIER13: bool = false, SWIER14: bool = false, SWIER15: bool = false, SWIER16: bool = false, SWIER17: bool = false, SWIER18: bool = false, SWIER19: bool = false) =
  var x: uint32
  x.setMask((SWIER0.uint32 shl 0).masked(0 .. 0))
  x.setMask((SWIER1.uint32 shl 1).masked(1 .. 1))
  x.setMask((SWIER2.uint32 shl 2).masked(2 .. 2))
  x.setMask((SWIER3.uint32 shl 3).masked(3 .. 3))
  x.setMask((SWIER4.uint32 shl 4).masked(4 .. 4))
  x.setMask((SWIER5.uint32 shl 5).masked(5 .. 5))
  x.setMask((SWIER6.uint32 shl 6).masked(6 .. 6))
  x.setMask((SWIER7.uint32 shl 7).masked(7 .. 7))
  x.setMask((SWIER8.uint32 shl 8).masked(8 .. 8))
  x.setMask((SWIER9.uint32 shl 9).masked(9 .. 9))
  x.setMask((SWIER10.uint32 shl 10).masked(10 .. 10))
  x.setMask((SWIER11.uint32 shl 11).masked(11 .. 11))
  x.setMask((SWIER12.uint32 shl 12).masked(12 .. 12))
  x.setMask((SWIER13.uint32 shl 13).masked(13 .. 13))
  x.setMask((SWIER14.uint32 shl 14).masked(14 .. 14))
  x.setMask((SWIER15.uint32 shl 15).masked(15 .. 15))
  x.setMask((SWIER16.uint32 shl 16).masked(16 .. 16))
  x.setMask((SWIER17.uint32 shl 17).masked(17 .. 17))
  x.setMask((SWIER18.uint32 shl 18).masked(18 .. 18))
  x.setMask((SWIER19.uint32 shl 19).masked(19 .. 19))
  reg.write x.EXTI_SWIEVR_Fields

template modifyIt*(reg: EXTI_SWIEVR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: EXTI_INTFR_Type): EXTI_INTFR_Fields {.inline.} =
  volatileLoad(cast[ptr EXTI_INTFR_Fields](reg.loc))

proc read*(reg: static EXTI_INTFR_Type): EXTI_INTFR_Fields {.inline.} =
  volatileLoad(cast[ptr EXTI_INTFR_Fields](reg.loc))

proc write*(reg: EXTI_INTFR_Type, val: EXTI_INTFR_Fields) {.inline.} =
  volatileStore(cast[ptr EXTI_INTFR_Fields](reg.loc), val)

proc write*(reg: EXTI_INTFR_Type, PR0: bool = false, PR1: bool = false, PR2: bool = false, PR3: bool = false, PR4: bool = false, PR5: bool = false, PR6: bool = false, PR7: bool = false, PR8: bool = false, PR9: bool = false, PR10: bool = false, PR11: bool = false, PR12: bool = false, PR13: bool = false, PR14: bool = false, PR15: bool = false, PR16: bool = false, PR17: bool = false, PR18: bool = false, PR19: bool = false) =
  var x: uint32
  x.setMask((PR0.uint32 shl 0).masked(0 .. 0))
  x.setMask((PR1.uint32 shl 1).masked(1 .. 1))
  x.setMask((PR2.uint32 shl 2).masked(2 .. 2))
  x.setMask((PR3.uint32 shl 3).masked(3 .. 3))
  x.setMask((PR4.uint32 shl 4).masked(4 .. 4))
  x.setMask((PR5.uint32 shl 5).masked(5 .. 5))
  x.setMask((PR6.uint32 shl 6).masked(6 .. 6))
  x.setMask((PR7.uint32 shl 7).masked(7 .. 7))
  x.setMask((PR8.uint32 shl 8).masked(8 .. 8))
  x.setMask((PR9.uint32 shl 9).masked(9 .. 9))
  x.setMask((PR10.uint32 shl 10).masked(10 .. 10))
  x.setMask((PR11.uint32 shl 11).masked(11 .. 11))
  x.setMask((PR12.uint32 shl 12).masked(12 .. 12))
  x.setMask((PR13.uint32 shl 13).masked(13 .. 13))
  x.setMask((PR14.uint32 shl 14).masked(14 .. 14))
  x.setMask((PR15.uint32 shl 15).masked(15 .. 15))
  x.setMask((PR16.uint32 shl 16).masked(16 .. 16))
  x.setMask((PR17.uint32 shl 17).masked(17 .. 17))
  x.setMask((PR18.uint32 shl 18).masked(18 .. 18))
  x.setMask((PR19.uint32 shl 19).masked(19 .. 19))
  reg.write x.EXTI_INTFR_Fields

template modifyIt*(reg: EXTI_INTFR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func MR0*(r: EXTI_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `MR0=`*(r: var EXTI_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.EXTI_INTENR_Fields

func MR1*(r: EXTI_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `MR1=`*(r: var EXTI_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.EXTI_INTENR_Fields

func MR2*(r: EXTI_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `MR2=`*(r: var EXTI_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.EXTI_INTENR_Fields

func MR3*(r: EXTI_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `MR3=`*(r: var EXTI_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.EXTI_INTENR_Fields

func MR4*(r: EXTI_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `MR4=`*(r: var EXTI_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.EXTI_INTENR_Fields

func MR5*(r: EXTI_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `MR5=`*(r: var EXTI_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.EXTI_INTENR_Fields

func MR6*(r: EXTI_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `MR6=`*(r: var EXTI_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.EXTI_INTENR_Fields

func MR7*(r: EXTI_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `MR7=`*(r: var EXTI_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.EXTI_INTENR_Fields

func MR8*(r: EXTI_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `MR8=`*(r: var EXTI_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.EXTI_INTENR_Fields

func MR9*(r: EXTI_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `MR9=`*(r: var EXTI_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.EXTI_INTENR_Fields

func MR10*(r: EXTI_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `MR10=`*(r: var EXTI_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.EXTI_INTENR_Fields

func MR11*(r: EXTI_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `MR11=`*(r: var EXTI_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.EXTI_INTENR_Fields

func MR12*(r: EXTI_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `MR12=`*(r: var EXTI_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.EXTI_INTENR_Fields

func MR13*(r: EXTI_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `MR13=`*(r: var EXTI_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.EXTI_INTENR_Fields

func MR14*(r: EXTI_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `MR14=`*(r: var EXTI_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.EXTI_INTENR_Fields

func MR15*(r: EXTI_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `MR15=`*(r: var EXTI_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.EXTI_INTENR_Fields

func MR16*(r: EXTI_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `MR16=`*(r: var EXTI_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.EXTI_INTENR_Fields

func MR17*(r: EXTI_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `MR17=`*(r: var EXTI_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.EXTI_INTENR_Fields

func MR18*(r: EXTI_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `MR18=`*(r: var EXTI_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.EXTI_INTENR_Fields

func MR19*(r: EXTI_INTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `MR19=`*(r: var EXTI_INTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.EXTI_INTENR_Fields

func MR0*(r: EXTI_EVENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `MR0=`*(r: var EXTI_EVENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.EXTI_EVENR_Fields

func MR1*(r: EXTI_EVENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `MR1=`*(r: var EXTI_EVENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.EXTI_EVENR_Fields

func MR2*(r: EXTI_EVENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `MR2=`*(r: var EXTI_EVENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.EXTI_EVENR_Fields

func MR3*(r: EXTI_EVENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `MR3=`*(r: var EXTI_EVENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.EXTI_EVENR_Fields

func MR4*(r: EXTI_EVENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `MR4=`*(r: var EXTI_EVENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.EXTI_EVENR_Fields

func MR5*(r: EXTI_EVENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `MR5=`*(r: var EXTI_EVENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.EXTI_EVENR_Fields

func MR6*(r: EXTI_EVENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `MR6=`*(r: var EXTI_EVENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.EXTI_EVENR_Fields

func MR7*(r: EXTI_EVENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `MR7=`*(r: var EXTI_EVENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.EXTI_EVENR_Fields

func MR8*(r: EXTI_EVENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `MR8=`*(r: var EXTI_EVENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.EXTI_EVENR_Fields

func MR9*(r: EXTI_EVENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `MR9=`*(r: var EXTI_EVENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.EXTI_EVENR_Fields

func MR10*(r: EXTI_EVENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `MR10=`*(r: var EXTI_EVENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.EXTI_EVENR_Fields

func MR11*(r: EXTI_EVENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `MR11=`*(r: var EXTI_EVENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.EXTI_EVENR_Fields

func MR12*(r: EXTI_EVENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `MR12=`*(r: var EXTI_EVENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.EXTI_EVENR_Fields

func MR13*(r: EXTI_EVENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `MR13=`*(r: var EXTI_EVENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.EXTI_EVENR_Fields

func MR14*(r: EXTI_EVENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `MR14=`*(r: var EXTI_EVENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.EXTI_EVENR_Fields

func MR15*(r: EXTI_EVENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `MR15=`*(r: var EXTI_EVENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.EXTI_EVENR_Fields

func MR16*(r: EXTI_EVENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `MR16=`*(r: var EXTI_EVENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.EXTI_EVENR_Fields

func MR17*(r: EXTI_EVENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `MR17=`*(r: var EXTI_EVENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.EXTI_EVENR_Fields

func MR18*(r: EXTI_EVENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `MR18=`*(r: var EXTI_EVENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.EXTI_EVENR_Fields

func MR19*(r: EXTI_EVENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `MR19=`*(r: var EXTI_EVENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.EXTI_EVENR_Fields

func TR0*(r: EXTI_RTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `TR0=`*(r: var EXTI_RTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.EXTI_RTENR_Fields

func TR1*(r: EXTI_RTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `TR1=`*(r: var EXTI_RTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.EXTI_RTENR_Fields

func TR2*(r: EXTI_RTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `TR2=`*(r: var EXTI_RTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.EXTI_RTENR_Fields

func TR3*(r: EXTI_RTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TR3=`*(r: var EXTI_RTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.EXTI_RTENR_Fields

func TR4*(r: EXTI_RTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `TR4=`*(r: var EXTI_RTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.EXTI_RTENR_Fields

func TR5*(r: EXTI_RTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `TR5=`*(r: var EXTI_RTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.EXTI_RTENR_Fields

func TR6*(r: EXTI_RTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `TR6=`*(r: var EXTI_RTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.EXTI_RTENR_Fields

func TR7*(r: EXTI_RTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TR7=`*(r: var EXTI_RTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.EXTI_RTENR_Fields

func TR8*(r: EXTI_RTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `TR8=`*(r: var EXTI_RTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.EXTI_RTENR_Fields

func TR9*(r: EXTI_RTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `TR9=`*(r: var EXTI_RTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.EXTI_RTENR_Fields

func TR10*(r: EXTI_RTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `TR10=`*(r: var EXTI_RTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.EXTI_RTENR_Fields

func TR11*(r: EXTI_RTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `TR11=`*(r: var EXTI_RTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.EXTI_RTENR_Fields

func TR12*(r: EXTI_RTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `TR12=`*(r: var EXTI_RTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.EXTI_RTENR_Fields

func TR13*(r: EXTI_RTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `TR13=`*(r: var EXTI_RTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.EXTI_RTENR_Fields

func TR14*(r: EXTI_RTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `TR14=`*(r: var EXTI_RTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.EXTI_RTENR_Fields

func TR15*(r: EXTI_RTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `TR15=`*(r: var EXTI_RTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.EXTI_RTENR_Fields

func TR16*(r: EXTI_RTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `TR16=`*(r: var EXTI_RTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.EXTI_RTENR_Fields

func TR17*(r: EXTI_RTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `TR17=`*(r: var EXTI_RTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.EXTI_RTENR_Fields

func TR18*(r: EXTI_RTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `TR18=`*(r: var EXTI_RTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.EXTI_RTENR_Fields

func TR19*(r: EXTI_RTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `TR19=`*(r: var EXTI_RTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.EXTI_RTENR_Fields

func TR0*(r: EXTI_FTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `TR0=`*(r: var EXTI_FTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.EXTI_FTENR_Fields

func TR1*(r: EXTI_FTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `TR1=`*(r: var EXTI_FTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.EXTI_FTENR_Fields

func TR2*(r: EXTI_FTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `TR2=`*(r: var EXTI_FTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.EXTI_FTENR_Fields

func TR3*(r: EXTI_FTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TR3=`*(r: var EXTI_FTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.EXTI_FTENR_Fields

func TR4*(r: EXTI_FTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `TR4=`*(r: var EXTI_FTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.EXTI_FTENR_Fields

func TR5*(r: EXTI_FTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `TR5=`*(r: var EXTI_FTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.EXTI_FTENR_Fields

func TR6*(r: EXTI_FTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `TR6=`*(r: var EXTI_FTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.EXTI_FTENR_Fields

func TR7*(r: EXTI_FTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TR7=`*(r: var EXTI_FTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.EXTI_FTENR_Fields

func TR8*(r: EXTI_FTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `TR8=`*(r: var EXTI_FTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.EXTI_FTENR_Fields

func TR9*(r: EXTI_FTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `TR9=`*(r: var EXTI_FTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.EXTI_FTENR_Fields

func TR10*(r: EXTI_FTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `TR10=`*(r: var EXTI_FTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.EXTI_FTENR_Fields

func TR11*(r: EXTI_FTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `TR11=`*(r: var EXTI_FTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.EXTI_FTENR_Fields

func TR12*(r: EXTI_FTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `TR12=`*(r: var EXTI_FTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.EXTI_FTENR_Fields

func TR13*(r: EXTI_FTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `TR13=`*(r: var EXTI_FTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.EXTI_FTENR_Fields

func TR14*(r: EXTI_FTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `TR14=`*(r: var EXTI_FTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.EXTI_FTENR_Fields

func TR15*(r: EXTI_FTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `TR15=`*(r: var EXTI_FTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.EXTI_FTENR_Fields

func TR16*(r: EXTI_FTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `TR16=`*(r: var EXTI_FTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.EXTI_FTENR_Fields

func TR17*(r: EXTI_FTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `TR17=`*(r: var EXTI_FTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.EXTI_FTENR_Fields

func TR18*(r: EXTI_FTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `TR18=`*(r: var EXTI_FTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.EXTI_FTENR_Fields

func TR19*(r: EXTI_FTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `TR19=`*(r: var EXTI_FTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.EXTI_FTENR_Fields

func SWIER0*(r: EXTI_SWIEVR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `SWIER0=`*(r: var EXTI_SWIEVR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.EXTI_SWIEVR_Fields

func SWIER1*(r: EXTI_SWIEVR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `SWIER1=`*(r: var EXTI_SWIEVR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.EXTI_SWIEVR_Fields

func SWIER2*(r: EXTI_SWIEVR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `SWIER2=`*(r: var EXTI_SWIEVR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.EXTI_SWIEVR_Fields

func SWIER3*(r: EXTI_SWIEVR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `SWIER3=`*(r: var EXTI_SWIEVR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.EXTI_SWIEVR_Fields

func SWIER4*(r: EXTI_SWIEVR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `SWIER4=`*(r: var EXTI_SWIEVR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.EXTI_SWIEVR_Fields

func SWIER5*(r: EXTI_SWIEVR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `SWIER5=`*(r: var EXTI_SWIEVR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.EXTI_SWIEVR_Fields

func SWIER6*(r: EXTI_SWIEVR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `SWIER6=`*(r: var EXTI_SWIEVR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.EXTI_SWIEVR_Fields

func SWIER7*(r: EXTI_SWIEVR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `SWIER7=`*(r: var EXTI_SWIEVR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.EXTI_SWIEVR_Fields

func SWIER8*(r: EXTI_SWIEVR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `SWIER8=`*(r: var EXTI_SWIEVR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.EXTI_SWIEVR_Fields

func SWIER9*(r: EXTI_SWIEVR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `SWIER9=`*(r: var EXTI_SWIEVR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.EXTI_SWIEVR_Fields

func SWIER10*(r: EXTI_SWIEVR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `SWIER10=`*(r: var EXTI_SWIEVR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.EXTI_SWIEVR_Fields

func SWIER11*(r: EXTI_SWIEVR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `SWIER11=`*(r: var EXTI_SWIEVR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.EXTI_SWIEVR_Fields

func SWIER12*(r: EXTI_SWIEVR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `SWIER12=`*(r: var EXTI_SWIEVR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.EXTI_SWIEVR_Fields

func SWIER13*(r: EXTI_SWIEVR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `SWIER13=`*(r: var EXTI_SWIEVR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.EXTI_SWIEVR_Fields

func SWIER14*(r: EXTI_SWIEVR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `SWIER14=`*(r: var EXTI_SWIEVR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.EXTI_SWIEVR_Fields

func SWIER15*(r: EXTI_SWIEVR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `SWIER15=`*(r: var EXTI_SWIEVR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.EXTI_SWIEVR_Fields

func SWIER16*(r: EXTI_SWIEVR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `SWIER16=`*(r: var EXTI_SWIEVR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.EXTI_SWIEVR_Fields

func SWIER17*(r: EXTI_SWIEVR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `SWIER17=`*(r: var EXTI_SWIEVR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.EXTI_SWIEVR_Fields

func SWIER18*(r: EXTI_SWIEVR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `SWIER18=`*(r: var EXTI_SWIEVR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.EXTI_SWIEVR_Fields

func SWIER19*(r: EXTI_SWIEVR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `SWIER19=`*(r: var EXTI_SWIEVR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.EXTI_SWIEVR_Fields

func PR0*(r: EXTI_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `PR0=`*(r: var EXTI_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.EXTI_INTFR_Fields

func PR1*(r: EXTI_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `PR1=`*(r: var EXTI_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.EXTI_INTFR_Fields

func PR2*(r: EXTI_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `PR2=`*(r: var EXTI_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.EXTI_INTFR_Fields

func PR3*(r: EXTI_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `PR3=`*(r: var EXTI_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.EXTI_INTFR_Fields

func PR4*(r: EXTI_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `PR4=`*(r: var EXTI_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.EXTI_INTFR_Fields

func PR5*(r: EXTI_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `PR5=`*(r: var EXTI_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.EXTI_INTFR_Fields

func PR6*(r: EXTI_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `PR6=`*(r: var EXTI_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.EXTI_INTFR_Fields

func PR7*(r: EXTI_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `PR7=`*(r: var EXTI_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.EXTI_INTFR_Fields

func PR8*(r: EXTI_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `PR8=`*(r: var EXTI_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.EXTI_INTFR_Fields

func PR9*(r: EXTI_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `PR9=`*(r: var EXTI_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.EXTI_INTFR_Fields

func PR10*(r: EXTI_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `PR10=`*(r: var EXTI_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.EXTI_INTFR_Fields

func PR11*(r: EXTI_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `PR11=`*(r: var EXTI_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.EXTI_INTFR_Fields

func PR12*(r: EXTI_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `PR12=`*(r: var EXTI_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.EXTI_INTFR_Fields

func PR13*(r: EXTI_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `PR13=`*(r: var EXTI_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.EXTI_INTFR_Fields

func PR14*(r: EXTI_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `PR14=`*(r: var EXTI_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.EXTI_INTFR_Fields

func PR15*(r: EXTI_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `PR15=`*(r: var EXTI_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.EXTI_INTFR_Fields

func PR16*(r: EXTI_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `PR16=`*(r: var EXTI_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.EXTI_INTFR_Fields

func PR17*(r: EXTI_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `PR17=`*(r: var EXTI_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.EXTI_INTFR_Fields

func PR18*(r: EXTI_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `PR18=`*(r: var EXTI_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.EXTI_INTFR_Fields

func PR19*(r: EXTI_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `PR19=`*(r: var EXTI_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.EXTI_INTFR_Fields

type
  DMA1_INTFR_Fields* = distinct uint32
  DMA1_INTFCR_Fields* = distinct uint32
  DMA1_CFGR1_Fields* = distinct uint32
  DMA1_CNTR1_Fields* = distinct uint32
  DMA1_CFGR2_Fields* = distinct uint32
  DMA1_CNTR2_Fields* = distinct uint32
  DMA1_CFGR3_Fields* = distinct uint32
  DMA1_CNTR3_Fields* = distinct uint32
  DMA1_CFGR4_Fields* = distinct uint32
  DMA1_CNTR4_Fields* = distinct uint32
  DMA1_CFGR5_Fields* = distinct uint32
  DMA1_CNTR5_Fields* = distinct uint32
  DMA1_CFGR6_Fields* = distinct uint32
  DMA1_CNTR6_Fields* = distinct uint32
  DMA1_CFGR7_Fields* = distinct uint32
  DMA1_CNTR7_Fields* = distinct uint32
  DMA1_CFGR8_Fields* = distinct uint32
  DMA1_CNTR8_Fields* = distinct uint32

proc read*(reg: DMA1_INTFR_Type): DMA1_INTFR_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_INTFR_Fields](reg.loc))

proc read*(reg: static DMA1_INTFR_Type): DMA1_INTFR_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_INTFR_Fields](reg.loc))

proc write*(reg: DMA1_INTFCR_Type, val: DMA1_INTFCR_Fields) {.inline.} =
  volatileStore(cast[ptr DMA1_INTFCR_Fields](reg.loc), val)

proc write*(reg: DMA1_INTFCR_Type, CGIF1: bool = false, CGIF2: bool = false, CGIF3: bool = false, CGIF4: bool = false, CGIF5: bool = false, CGIF6: bool = false, CGIF7: bool = false, CGIF8: bool = false, CTCIF1: bool = false, CTCIF2: bool = false, CTCIF3: bool = false, CTCIF4: bool = false, CTCIF5: bool = false, CTCIF6: bool = false, CTCIF7: bool = false, CTCIF8: bool = false, CHTIF1: bool = false, CHTIF2: bool = false, CHTIF3: bool = false, CHTIF4: bool = false, CHTIF5: bool = false, CHTIF6: bool = false, CHTIF7: bool = false, CHTIF8: bool = false, CTEIF1: bool = false, CTEIF2: bool = false, CTEIF3: bool = false, CTEIF4: bool = false, CTEIF5: bool = false, CTEIF6: bool = false, CTEIF7: bool = false, CTEIF8: bool = false) =
  var x: uint32
  x.setMask((CGIF1.uint32 shl 0).masked(0 .. 0))
  x.setMask((CGIF2.uint32 shl 4).masked(4 .. 4))
  x.setMask((CGIF3.uint32 shl 8).masked(8 .. 8))
  x.setMask((CGIF4.uint32 shl 12).masked(12 .. 12))
  x.setMask((CGIF5.uint32 shl 16).masked(16 .. 16))
  x.setMask((CGIF6.uint32 shl 20).masked(20 .. 20))
  x.setMask((CGIF7.uint32 shl 24).masked(24 .. 24))
  x.setMask((CGIF8.uint32 shl 28).masked(28 .. 28))
  x.setMask((CTCIF1.uint32 shl 1).masked(1 .. 1))
  x.setMask((CTCIF2.uint32 shl 5).masked(5 .. 5))
  x.setMask((CTCIF3.uint32 shl 9).masked(9 .. 9))
  x.setMask((CTCIF4.uint32 shl 13).masked(13 .. 13))
  x.setMask((CTCIF5.uint32 shl 17).masked(17 .. 17))
  x.setMask((CTCIF6.uint32 shl 21).masked(21 .. 21))
  x.setMask((CTCIF7.uint32 shl 25).masked(25 .. 25))
  x.setMask((CTCIF8.uint32 shl 29).masked(29 .. 29))
  x.setMask((CHTIF1.uint32 shl 2).masked(2 .. 2))
  x.setMask((CHTIF2.uint32 shl 6).masked(6 .. 6))
  x.setMask((CHTIF3.uint32 shl 10).masked(10 .. 10))
  x.setMask((CHTIF4.uint32 shl 14).masked(14 .. 14))
  x.setMask((CHTIF5.uint32 shl 18).masked(18 .. 18))
  x.setMask((CHTIF6.uint32 shl 22).masked(22 .. 22))
  x.setMask((CHTIF7.uint32 shl 26).masked(26 .. 26))
  x.setMask((CHTIF8.uint32 shl 30).masked(30 .. 30))
  x.setMask((CTEIF1.uint32 shl 3).masked(3 .. 3))
  x.setMask((CTEIF2.uint32 shl 7).masked(7 .. 7))
  x.setMask((CTEIF3.uint32 shl 11).masked(11 .. 11))
  x.setMask((CTEIF4.uint32 shl 15).masked(15 .. 15))
  x.setMask((CTEIF5.uint32 shl 19).masked(19 .. 19))
  x.setMask((CTEIF6.uint32 shl 23).masked(23 .. 23))
  x.setMask((CTEIF7.uint32 shl 27).masked(27 .. 27))
  x.setMask((CTEIF8.uint32 shl 31).masked(31 .. 31))
  reg.write x.DMA1_INTFCR_Fields

proc read*(reg: DMA1_CFGR1_Type): DMA1_CFGR1_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_CFGR1_Fields](reg.loc))

proc read*(reg: static DMA1_CFGR1_Type): DMA1_CFGR1_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_CFGR1_Fields](reg.loc))

proc write*(reg: DMA1_CFGR1_Type, val: DMA1_CFGR1_Fields) {.inline.} =
  volatileStore(cast[ptr DMA1_CFGR1_Fields](reg.loc), val)

proc write*(reg: DMA1_CFGR1_Type, EN: bool = false, TCIE: bool = false, HTIE: bool = false, TEIE: bool = false, DIR: bool = false, CIRC: bool = false, PINC: bool = false, MINC: bool = false, PSIZE: uint32 = 0, MSIZE: uint32 = 0, PL: uint32 = 0, MEM2MEM: bool = false) =
  var x: uint32
  x.setMask((EN.uint32 shl 0).masked(0 .. 0))
  x.setMask((TCIE.uint32 shl 1).masked(1 .. 1))
  x.setMask((HTIE.uint32 shl 2).masked(2 .. 2))
  x.setMask((TEIE.uint32 shl 3).masked(3 .. 3))
  x.setMask((DIR.uint32 shl 4).masked(4 .. 4))
  x.setMask((CIRC.uint32 shl 5).masked(5 .. 5))
  x.setMask((PINC.uint32 shl 6).masked(6 .. 6))
  x.setMask((MINC.uint32 shl 7).masked(7 .. 7))
  x.setMask((PSIZE shl 8).masked(8 .. 9))
  x.setMask((MSIZE shl 10).masked(10 .. 11))
  x.setMask((PL shl 12).masked(12 .. 13))
  x.setMask((MEM2MEM.uint32 shl 14).masked(14 .. 14))
  reg.write x.DMA1_CFGR1_Fields

template modifyIt*(reg: DMA1_CFGR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA1_CNTR1_Type): DMA1_CNTR1_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_CNTR1_Fields](reg.loc))

proc read*(reg: static DMA1_CNTR1_Type): DMA1_CNTR1_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_CNTR1_Fields](reg.loc))

proc write*(reg: DMA1_CNTR1_Type, val: DMA1_CNTR1_Fields) {.inline.} =
  volatileStore(cast[ptr DMA1_CNTR1_Fields](reg.loc), val)

proc write*(reg: DMA1_CNTR1_Type, NDT: uint32 = 0) =
  var x: uint32
  x.setMask((NDT shl 0).masked(0 .. 15))
  reg.write x.DMA1_CNTR1_Fields

template modifyIt*(reg: DMA1_CNTR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA1_PADDR1_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static DMA1_PADDR1_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA1_PADDR1_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA1_PADDR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA1_MADDR1_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static DMA1_MADDR1_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA1_MADDR1_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA1_MADDR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA1_CFGR2_Type): DMA1_CFGR2_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_CFGR2_Fields](reg.loc))

proc read*(reg: static DMA1_CFGR2_Type): DMA1_CFGR2_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_CFGR2_Fields](reg.loc))

proc write*(reg: DMA1_CFGR2_Type, val: DMA1_CFGR2_Fields) {.inline.} =
  volatileStore(cast[ptr DMA1_CFGR2_Fields](reg.loc), val)

proc write*(reg: DMA1_CFGR2_Type, EN: bool = false, TCIE: bool = false, HTIE: bool = false, TEIE: bool = false, DIR: bool = false, CIRC: bool = false, PINC: bool = false, MINC: bool = false, PSIZE: uint32 = 0, MSIZE: uint32 = 0, PL: uint32 = 0, MEM2MEM: bool = false) =
  var x: uint32
  x.setMask((EN.uint32 shl 0).masked(0 .. 0))
  x.setMask((TCIE.uint32 shl 1).masked(1 .. 1))
  x.setMask((HTIE.uint32 shl 2).masked(2 .. 2))
  x.setMask((TEIE.uint32 shl 3).masked(3 .. 3))
  x.setMask((DIR.uint32 shl 4).masked(4 .. 4))
  x.setMask((CIRC.uint32 shl 5).masked(5 .. 5))
  x.setMask((PINC.uint32 shl 6).masked(6 .. 6))
  x.setMask((MINC.uint32 shl 7).masked(7 .. 7))
  x.setMask((PSIZE shl 8).masked(8 .. 9))
  x.setMask((MSIZE shl 10).masked(10 .. 11))
  x.setMask((PL shl 12).masked(12 .. 13))
  x.setMask((MEM2MEM.uint32 shl 14).masked(14 .. 14))
  reg.write x.DMA1_CFGR2_Fields

template modifyIt*(reg: DMA1_CFGR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA1_CNTR2_Type): DMA1_CNTR2_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_CNTR2_Fields](reg.loc))

proc read*(reg: static DMA1_CNTR2_Type): DMA1_CNTR2_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_CNTR2_Fields](reg.loc))

proc write*(reg: DMA1_CNTR2_Type, val: DMA1_CNTR2_Fields) {.inline.} =
  volatileStore(cast[ptr DMA1_CNTR2_Fields](reg.loc), val)

proc write*(reg: DMA1_CNTR2_Type, NDT: uint32 = 0) =
  var x: uint32
  x.setMask((NDT shl 0).masked(0 .. 15))
  reg.write x.DMA1_CNTR2_Fields

template modifyIt*(reg: DMA1_CNTR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA1_PADDR2_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static DMA1_PADDR2_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA1_PADDR2_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA1_PADDR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA1_MADDR2_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static DMA1_MADDR2_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA1_MADDR2_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA1_MADDR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA1_CFGR3_Type): DMA1_CFGR3_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_CFGR3_Fields](reg.loc))

proc read*(reg: static DMA1_CFGR3_Type): DMA1_CFGR3_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_CFGR3_Fields](reg.loc))

proc write*(reg: DMA1_CFGR3_Type, val: DMA1_CFGR3_Fields) {.inline.} =
  volatileStore(cast[ptr DMA1_CFGR3_Fields](reg.loc), val)

proc write*(reg: DMA1_CFGR3_Type, EN: bool = false, TCIE: bool = false, HTIE: bool = false, TEIE: bool = false, DIR: bool = false, CIRC: bool = false, PINC: bool = false, MINC: bool = false, PSIZE: uint32 = 0, MSIZE: uint32 = 0, PL: uint32 = 0, MEM2MEM: bool = false) =
  var x: uint32
  x.setMask((EN.uint32 shl 0).masked(0 .. 0))
  x.setMask((TCIE.uint32 shl 1).masked(1 .. 1))
  x.setMask((HTIE.uint32 shl 2).masked(2 .. 2))
  x.setMask((TEIE.uint32 shl 3).masked(3 .. 3))
  x.setMask((DIR.uint32 shl 4).masked(4 .. 4))
  x.setMask((CIRC.uint32 shl 5).masked(5 .. 5))
  x.setMask((PINC.uint32 shl 6).masked(6 .. 6))
  x.setMask((MINC.uint32 shl 7).masked(7 .. 7))
  x.setMask((PSIZE shl 8).masked(8 .. 9))
  x.setMask((MSIZE shl 10).masked(10 .. 11))
  x.setMask((PL shl 12).masked(12 .. 13))
  x.setMask((MEM2MEM.uint32 shl 14).masked(14 .. 14))
  reg.write x.DMA1_CFGR3_Fields

template modifyIt*(reg: DMA1_CFGR3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA1_CNTR3_Type): DMA1_CNTR3_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_CNTR3_Fields](reg.loc))

proc read*(reg: static DMA1_CNTR3_Type): DMA1_CNTR3_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_CNTR3_Fields](reg.loc))

proc write*(reg: DMA1_CNTR3_Type, val: DMA1_CNTR3_Fields) {.inline.} =
  volatileStore(cast[ptr DMA1_CNTR3_Fields](reg.loc), val)

proc write*(reg: DMA1_CNTR3_Type, NDT: uint32 = 0) =
  var x: uint32
  x.setMask((NDT shl 0).masked(0 .. 15))
  reg.write x.DMA1_CNTR3_Fields

template modifyIt*(reg: DMA1_CNTR3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA1_PADDR3_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static DMA1_PADDR3_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA1_PADDR3_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA1_PADDR3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA1_MADDR3_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static DMA1_MADDR3_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA1_MADDR3_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA1_MADDR3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA1_CFGR4_Type): DMA1_CFGR4_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_CFGR4_Fields](reg.loc))

proc read*(reg: static DMA1_CFGR4_Type): DMA1_CFGR4_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_CFGR4_Fields](reg.loc))

proc write*(reg: DMA1_CFGR4_Type, val: DMA1_CFGR4_Fields) {.inline.} =
  volatileStore(cast[ptr DMA1_CFGR4_Fields](reg.loc), val)

proc write*(reg: DMA1_CFGR4_Type, EN: bool = false, TCIE: bool = false, HTIE: bool = false, TEIE: bool = false, DIR: bool = false, CIRC: bool = false, PINC: bool = false, MINC: bool = false, PSIZE: uint32 = 0, MSIZE: uint32 = 0, PL: uint32 = 0, MEM2MEM: bool = false) =
  var x: uint32
  x.setMask((EN.uint32 shl 0).masked(0 .. 0))
  x.setMask((TCIE.uint32 shl 1).masked(1 .. 1))
  x.setMask((HTIE.uint32 shl 2).masked(2 .. 2))
  x.setMask((TEIE.uint32 shl 3).masked(3 .. 3))
  x.setMask((DIR.uint32 shl 4).masked(4 .. 4))
  x.setMask((CIRC.uint32 shl 5).masked(5 .. 5))
  x.setMask((PINC.uint32 shl 6).masked(6 .. 6))
  x.setMask((MINC.uint32 shl 7).masked(7 .. 7))
  x.setMask((PSIZE shl 8).masked(8 .. 9))
  x.setMask((MSIZE shl 10).masked(10 .. 11))
  x.setMask((PL shl 12).masked(12 .. 13))
  x.setMask((MEM2MEM.uint32 shl 14).masked(14 .. 14))
  reg.write x.DMA1_CFGR4_Fields

template modifyIt*(reg: DMA1_CFGR4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA1_CNTR4_Type): DMA1_CNTR4_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_CNTR4_Fields](reg.loc))

proc read*(reg: static DMA1_CNTR4_Type): DMA1_CNTR4_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_CNTR4_Fields](reg.loc))

proc write*(reg: DMA1_CNTR4_Type, val: DMA1_CNTR4_Fields) {.inline.} =
  volatileStore(cast[ptr DMA1_CNTR4_Fields](reg.loc), val)

proc write*(reg: DMA1_CNTR4_Type, NDT: uint32 = 0) =
  var x: uint32
  x.setMask((NDT shl 0).masked(0 .. 15))
  reg.write x.DMA1_CNTR4_Fields

template modifyIt*(reg: DMA1_CNTR4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA1_PADDR4_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static DMA1_PADDR4_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA1_PADDR4_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA1_PADDR4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA1_MADDR4_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static DMA1_MADDR4_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA1_MADDR4_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA1_MADDR4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA1_CFGR5_Type): DMA1_CFGR5_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_CFGR5_Fields](reg.loc))

proc read*(reg: static DMA1_CFGR5_Type): DMA1_CFGR5_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_CFGR5_Fields](reg.loc))

proc write*(reg: DMA1_CFGR5_Type, val: DMA1_CFGR5_Fields) {.inline.} =
  volatileStore(cast[ptr DMA1_CFGR5_Fields](reg.loc), val)

proc write*(reg: DMA1_CFGR5_Type, EN: bool = false, TCIE: bool = false, HTIE: bool = false, TEIE: bool = false, DIR: bool = false, CIRC: bool = false, PINC: bool = false, MINC: bool = false, PSIZE: uint32 = 0, MSIZE: uint32 = 0, PL: uint32 = 0, MEM2MEM: bool = false) =
  var x: uint32
  x.setMask((EN.uint32 shl 0).masked(0 .. 0))
  x.setMask((TCIE.uint32 shl 1).masked(1 .. 1))
  x.setMask((HTIE.uint32 shl 2).masked(2 .. 2))
  x.setMask((TEIE.uint32 shl 3).masked(3 .. 3))
  x.setMask((DIR.uint32 shl 4).masked(4 .. 4))
  x.setMask((CIRC.uint32 shl 5).masked(5 .. 5))
  x.setMask((PINC.uint32 shl 6).masked(6 .. 6))
  x.setMask((MINC.uint32 shl 7).masked(7 .. 7))
  x.setMask((PSIZE shl 8).masked(8 .. 9))
  x.setMask((MSIZE shl 10).masked(10 .. 11))
  x.setMask((PL shl 12).masked(12 .. 13))
  x.setMask((MEM2MEM.uint32 shl 14).masked(14 .. 14))
  reg.write x.DMA1_CFGR5_Fields

template modifyIt*(reg: DMA1_CFGR5_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA1_CNTR5_Type): DMA1_CNTR5_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_CNTR5_Fields](reg.loc))

proc read*(reg: static DMA1_CNTR5_Type): DMA1_CNTR5_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_CNTR5_Fields](reg.loc))

proc write*(reg: DMA1_CNTR5_Type, val: DMA1_CNTR5_Fields) {.inline.} =
  volatileStore(cast[ptr DMA1_CNTR5_Fields](reg.loc), val)

proc write*(reg: DMA1_CNTR5_Type, NDT: uint32 = 0) =
  var x: uint32
  x.setMask((NDT shl 0).masked(0 .. 15))
  reg.write x.DMA1_CNTR5_Fields

template modifyIt*(reg: DMA1_CNTR5_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA1_PADDR5_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static DMA1_PADDR5_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA1_PADDR5_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA1_PADDR5_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA1_MADDR5_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static DMA1_MADDR5_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA1_MADDR5_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA1_MADDR5_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA1_CFGR6_Type): DMA1_CFGR6_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_CFGR6_Fields](reg.loc))

proc read*(reg: static DMA1_CFGR6_Type): DMA1_CFGR6_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_CFGR6_Fields](reg.loc))

proc write*(reg: DMA1_CFGR6_Type, val: DMA1_CFGR6_Fields) {.inline.} =
  volatileStore(cast[ptr DMA1_CFGR6_Fields](reg.loc), val)

proc write*(reg: DMA1_CFGR6_Type, EN: bool = false, TCIE: bool = false, HTIE: bool = false, TEIE: bool = false, DIR: bool = false, CIRC: bool = false, PINC: bool = false, MINC: bool = false, PSIZE: uint32 = 0, MSIZE: uint32 = 0, PL: uint32 = 0, MEM2MEM: bool = false) =
  var x: uint32
  x.setMask((EN.uint32 shl 0).masked(0 .. 0))
  x.setMask((TCIE.uint32 shl 1).masked(1 .. 1))
  x.setMask((HTIE.uint32 shl 2).masked(2 .. 2))
  x.setMask((TEIE.uint32 shl 3).masked(3 .. 3))
  x.setMask((DIR.uint32 shl 4).masked(4 .. 4))
  x.setMask((CIRC.uint32 shl 5).masked(5 .. 5))
  x.setMask((PINC.uint32 shl 6).masked(6 .. 6))
  x.setMask((MINC.uint32 shl 7).masked(7 .. 7))
  x.setMask((PSIZE shl 8).masked(8 .. 9))
  x.setMask((MSIZE shl 10).masked(10 .. 11))
  x.setMask((PL shl 12).masked(12 .. 13))
  x.setMask((MEM2MEM.uint32 shl 14).masked(14 .. 14))
  reg.write x.DMA1_CFGR6_Fields

template modifyIt*(reg: DMA1_CFGR6_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA1_CNTR6_Type): DMA1_CNTR6_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_CNTR6_Fields](reg.loc))

proc read*(reg: static DMA1_CNTR6_Type): DMA1_CNTR6_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_CNTR6_Fields](reg.loc))

proc write*(reg: DMA1_CNTR6_Type, val: DMA1_CNTR6_Fields) {.inline.} =
  volatileStore(cast[ptr DMA1_CNTR6_Fields](reg.loc), val)

proc write*(reg: DMA1_CNTR6_Type, NDT: uint32 = 0) =
  var x: uint32
  x.setMask((NDT shl 0).masked(0 .. 15))
  reg.write x.DMA1_CNTR6_Fields

template modifyIt*(reg: DMA1_CNTR6_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA1_PADDR6_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static DMA1_PADDR6_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA1_PADDR6_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA1_PADDR6_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA1_MADDR6_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static DMA1_MADDR6_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA1_MADDR6_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA1_MADDR6_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA1_CFGR7_Type): DMA1_CFGR7_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_CFGR7_Fields](reg.loc))

proc read*(reg: static DMA1_CFGR7_Type): DMA1_CFGR7_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_CFGR7_Fields](reg.loc))

proc write*(reg: DMA1_CFGR7_Type, val: DMA1_CFGR7_Fields) {.inline.} =
  volatileStore(cast[ptr DMA1_CFGR7_Fields](reg.loc), val)

proc write*(reg: DMA1_CFGR7_Type, EN: bool = false, TCIE: bool = false, HTIE: bool = false, TEIE: bool = false, DIR: bool = false, CIRC: bool = false, PINC: bool = false, MINC: bool = false, PSIZE: uint32 = 0, MSIZE: uint32 = 0, PL: uint32 = 0, MEM2MEM: bool = false) =
  var x: uint32
  x.setMask((EN.uint32 shl 0).masked(0 .. 0))
  x.setMask((TCIE.uint32 shl 1).masked(1 .. 1))
  x.setMask((HTIE.uint32 shl 2).masked(2 .. 2))
  x.setMask((TEIE.uint32 shl 3).masked(3 .. 3))
  x.setMask((DIR.uint32 shl 4).masked(4 .. 4))
  x.setMask((CIRC.uint32 shl 5).masked(5 .. 5))
  x.setMask((PINC.uint32 shl 6).masked(6 .. 6))
  x.setMask((MINC.uint32 shl 7).masked(7 .. 7))
  x.setMask((PSIZE shl 8).masked(8 .. 9))
  x.setMask((MSIZE shl 10).masked(10 .. 11))
  x.setMask((PL shl 12).masked(12 .. 13))
  x.setMask((MEM2MEM.uint32 shl 14).masked(14 .. 14))
  reg.write x.DMA1_CFGR7_Fields

template modifyIt*(reg: DMA1_CFGR7_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA1_CNTR7_Type): DMA1_CNTR7_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_CNTR7_Fields](reg.loc))

proc read*(reg: static DMA1_CNTR7_Type): DMA1_CNTR7_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_CNTR7_Fields](reg.loc))

proc write*(reg: DMA1_CNTR7_Type, val: DMA1_CNTR7_Fields) {.inline.} =
  volatileStore(cast[ptr DMA1_CNTR7_Fields](reg.loc), val)

proc write*(reg: DMA1_CNTR7_Type, NDT: uint32 = 0) =
  var x: uint32
  x.setMask((NDT shl 0).masked(0 .. 15))
  reg.write x.DMA1_CNTR7_Fields

template modifyIt*(reg: DMA1_CNTR7_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA1_PADDR7_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static DMA1_PADDR7_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA1_PADDR7_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA1_PADDR7_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA1_MADDR7_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static DMA1_MADDR7_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA1_MADDR7_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA1_MADDR7_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA1_CFGR8_Type): DMA1_CFGR8_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_CFGR8_Fields](reg.loc))

proc read*(reg: static DMA1_CFGR8_Type): DMA1_CFGR8_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_CFGR8_Fields](reg.loc))

proc write*(reg: DMA1_CFGR8_Type, val: DMA1_CFGR8_Fields) {.inline.} =
  volatileStore(cast[ptr DMA1_CFGR8_Fields](reg.loc), val)

proc write*(reg: DMA1_CFGR8_Type, EN: bool = false, TCIE: bool = false, HTIE: bool = false, TEIE: bool = false, DIR: bool = false, CIRC: bool = false, PINC: bool = false, MINC: bool = false, PSIZE: uint32 = 0, MSIZE: uint32 = 0, PL: uint32 = 0, MEM2MEM: bool = false) =
  var x: uint32
  x.setMask((EN.uint32 shl 0).masked(0 .. 0))
  x.setMask((TCIE.uint32 shl 1).masked(1 .. 1))
  x.setMask((HTIE.uint32 shl 2).masked(2 .. 2))
  x.setMask((TEIE.uint32 shl 3).masked(3 .. 3))
  x.setMask((DIR.uint32 shl 4).masked(4 .. 4))
  x.setMask((CIRC.uint32 shl 5).masked(5 .. 5))
  x.setMask((PINC.uint32 shl 6).masked(6 .. 6))
  x.setMask((MINC.uint32 shl 7).masked(7 .. 7))
  x.setMask((PSIZE shl 8).masked(8 .. 9))
  x.setMask((MSIZE shl 10).masked(10 .. 11))
  x.setMask((PL shl 12).masked(12 .. 13))
  x.setMask((MEM2MEM.uint32 shl 14).masked(14 .. 14))
  reg.write x.DMA1_CFGR8_Fields

template modifyIt*(reg: DMA1_CFGR8_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA1_CNTR8_Type): DMA1_CNTR8_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_CNTR8_Fields](reg.loc))

proc read*(reg: static DMA1_CNTR8_Type): DMA1_CNTR8_Fields {.inline.} =
  volatileLoad(cast[ptr DMA1_CNTR8_Fields](reg.loc))

proc write*(reg: DMA1_CNTR8_Type, val: DMA1_CNTR8_Fields) {.inline.} =
  volatileStore(cast[ptr DMA1_CNTR8_Fields](reg.loc), val)

proc write*(reg: DMA1_CNTR8_Type, NDT: uint32 = 0) =
  var x: uint32
  x.setMask((NDT shl 0).masked(0 .. 15))
  reg.write x.DMA1_CNTR8_Fields

template modifyIt*(reg: DMA1_CNTR8_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA1_PADDR8_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static DMA1_PADDR8_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA1_PADDR8_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA1_PADDR8_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA1_MADDR8_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static DMA1_MADDR8_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA1_MADDR8_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA1_MADDR8_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func GIF1*(r: DMA1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func TCIF1*(r: DMA1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func HTIF1*(r: DMA1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func TEIF1*(r: DMA1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

func GIF2*(r: DMA1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

func TCIF2*(r: DMA1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

func HTIF2*(r: DMA1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

func TEIF2*(r: DMA1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func GIF3*(r: DMA1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

func TCIF3*(r: DMA1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

func HTIF3*(r: DMA1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

func TEIF3*(r: DMA1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

func GIF4*(r: DMA1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

func TCIF4*(r: DMA1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

func HTIF4*(r: DMA1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

func TEIF4*(r: DMA1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

func GIF5*(r: DMA1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

func TCIF5*(r: DMA1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

func HTIF5*(r: DMA1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

func TEIF5*(r: DMA1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

func GIF6*(r: DMA1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

func TCIF6*(r: DMA1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

func HTIF6*(r: DMA1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

func TEIF6*(r: DMA1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

func GIF7*(r: DMA1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

func TCIF7*(r: DMA1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

func HTIF7*(r: DMA1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

func TEIF7*(r: DMA1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

func GIF8*(r: DMA1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

func TCIF8*(r: DMA1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

func HTIF8*(r: DMA1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

func TEIF8*(r: DMA1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `CGIF1=`*(r: var DMA1_INTFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.DMA1_INTFCR_Fields

proc `CGIF2=`*(r: var DMA1_INTFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.DMA1_INTFCR_Fields

proc `CGIF3=`*(r: var DMA1_INTFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.DMA1_INTFCR_Fields

proc `CGIF4=`*(r: var DMA1_INTFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.DMA1_INTFCR_Fields

proc `CGIF5=`*(r: var DMA1_INTFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.DMA1_INTFCR_Fields

proc `CGIF6=`*(r: var DMA1_INTFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.DMA1_INTFCR_Fields

proc `CGIF7=`*(r: var DMA1_INTFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.DMA1_INTFCR_Fields

proc `CGIF8=`*(r: var DMA1_INTFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.DMA1_INTFCR_Fields

proc `CTCIF1=`*(r: var DMA1_INTFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.DMA1_INTFCR_Fields

proc `CTCIF2=`*(r: var DMA1_INTFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.DMA1_INTFCR_Fields

proc `CTCIF3=`*(r: var DMA1_INTFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.DMA1_INTFCR_Fields

proc `CTCIF4=`*(r: var DMA1_INTFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.DMA1_INTFCR_Fields

proc `CTCIF5=`*(r: var DMA1_INTFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.DMA1_INTFCR_Fields

proc `CTCIF6=`*(r: var DMA1_INTFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.DMA1_INTFCR_Fields

proc `CTCIF7=`*(r: var DMA1_INTFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.DMA1_INTFCR_Fields

proc `CTCIF8=`*(r: var DMA1_INTFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.DMA1_INTFCR_Fields

proc `CHTIF1=`*(r: var DMA1_INTFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DMA1_INTFCR_Fields

proc `CHTIF2=`*(r: var DMA1_INTFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.DMA1_INTFCR_Fields

proc `CHTIF3=`*(r: var DMA1_INTFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.DMA1_INTFCR_Fields

proc `CHTIF4=`*(r: var DMA1_INTFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.DMA1_INTFCR_Fields

proc `CHTIF5=`*(r: var DMA1_INTFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.DMA1_INTFCR_Fields

proc `CHTIF6=`*(r: var DMA1_INTFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.DMA1_INTFCR_Fields

proc `CHTIF7=`*(r: var DMA1_INTFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.DMA1_INTFCR_Fields

proc `CHTIF8=`*(r: var DMA1_INTFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.DMA1_INTFCR_Fields

proc `CTEIF1=`*(r: var DMA1_INTFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.DMA1_INTFCR_Fields

proc `CTEIF2=`*(r: var DMA1_INTFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.DMA1_INTFCR_Fields

proc `CTEIF3=`*(r: var DMA1_INTFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.DMA1_INTFCR_Fields

proc `CTEIF4=`*(r: var DMA1_INTFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.DMA1_INTFCR_Fields

proc `CTEIF5=`*(r: var DMA1_INTFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.DMA1_INTFCR_Fields

proc `CTEIF6=`*(r: var DMA1_INTFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.DMA1_INTFCR_Fields

proc `CTEIF7=`*(r: var DMA1_INTFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.DMA1_INTFCR_Fields

proc `CTEIF8=`*(r: var DMA1_INTFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.DMA1_INTFCR_Fields

func EN*(r: DMA1_CFGR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `EN=`*(r: var DMA1_CFGR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.DMA1_CFGR1_Fields

func TCIE*(r: DMA1_CFGR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `TCIE=`*(r: var DMA1_CFGR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.DMA1_CFGR1_Fields

func HTIE*(r: DMA1_CFGR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `HTIE=`*(r: var DMA1_CFGR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DMA1_CFGR1_Fields

func TEIE*(r: DMA1_CFGR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TEIE=`*(r: var DMA1_CFGR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.DMA1_CFGR1_Fields

func DIR*(r: DMA1_CFGR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `DIR=`*(r: var DMA1_CFGR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.DMA1_CFGR1_Fields

func CIRC*(r: DMA1_CFGR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `CIRC=`*(r: var DMA1_CFGR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.DMA1_CFGR1_Fields

func PINC*(r: DMA1_CFGR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `PINC=`*(r: var DMA1_CFGR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.DMA1_CFGR1_Fields

func MINC*(r: DMA1_CFGR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `MINC=`*(r: var DMA1_CFGR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.DMA1_CFGR1_Fields

func PSIZE*(r: DMA1_CFGR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `PSIZE=`*(r: var DMA1_CFGR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.DMA1_CFGR1_Fields

func MSIZE*(r: DMA1_CFGR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `MSIZE=`*(r: var DMA1_CFGR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.DMA1_CFGR1_Fields

func PL*(r: DMA1_CFGR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 13)

proc `PL=`*(r: var DMA1_CFGR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.DMA1_CFGR1_Fields

func MEM2MEM*(r: DMA1_CFGR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `MEM2MEM=`*(r: var DMA1_CFGR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.DMA1_CFGR1_Fields

func NDT*(r: DMA1_CNTR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `NDT=`*(r: var DMA1_CNTR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.DMA1_CNTR1_Fields

func EN*(r: DMA1_CFGR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `EN=`*(r: var DMA1_CFGR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.DMA1_CFGR2_Fields

func TCIE*(r: DMA1_CFGR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `TCIE=`*(r: var DMA1_CFGR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.DMA1_CFGR2_Fields

func HTIE*(r: DMA1_CFGR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `HTIE=`*(r: var DMA1_CFGR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DMA1_CFGR2_Fields

func TEIE*(r: DMA1_CFGR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TEIE=`*(r: var DMA1_CFGR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.DMA1_CFGR2_Fields

func DIR*(r: DMA1_CFGR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `DIR=`*(r: var DMA1_CFGR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.DMA1_CFGR2_Fields

func CIRC*(r: DMA1_CFGR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `CIRC=`*(r: var DMA1_CFGR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.DMA1_CFGR2_Fields

func PINC*(r: DMA1_CFGR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `PINC=`*(r: var DMA1_CFGR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.DMA1_CFGR2_Fields

func MINC*(r: DMA1_CFGR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `MINC=`*(r: var DMA1_CFGR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.DMA1_CFGR2_Fields

func PSIZE*(r: DMA1_CFGR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `PSIZE=`*(r: var DMA1_CFGR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.DMA1_CFGR2_Fields

func MSIZE*(r: DMA1_CFGR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `MSIZE=`*(r: var DMA1_CFGR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.DMA1_CFGR2_Fields

func PL*(r: DMA1_CFGR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 13)

proc `PL=`*(r: var DMA1_CFGR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.DMA1_CFGR2_Fields

func MEM2MEM*(r: DMA1_CFGR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `MEM2MEM=`*(r: var DMA1_CFGR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.DMA1_CFGR2_Fields

func NDT*(r: DMA1_CNTR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `NDT=`*(r: var DMA1_CNTR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.DMA1_CNTR2_Fields

func EN*(r: DMA1_CFGR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `EN=`*(r: var DMA1_CFGR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.DMA1_CFGR3_Fields

func TCIE*(r: DMA1_CFGR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `TCIE=`*(r: var DMA1_CFGR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.DMA1_CFGR3_Fields

func HTIE*(r: DMA1_CFGR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `HTIE=`*(r: var DMA1_CFGR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DMA1_CFGR3_Fields

func TEIE*(r: DMA1_CFGR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TEIE=`*(r: var DMA1_CFGR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.DMA1_CFGR3_Fields

func DIR*(r: DMA1_CFGR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `DIR=`*(r: var DMA1_CFGR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.DMA1_CFGR3_Fields

func CIRC*(r: DMA1_CFGR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `CIRC=`*(r: var DMA1_CFGR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.DMA1_CFGR3_Fields

func PINC*(r: DMA1_CFGR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `PINC=`*(r: var DMA1_CFGR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.DMA1_CFGR3_Fields

func MINC*(r: DMA1_CFGR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `MINC=`*(r: var DMA1_CFGR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.DMA1_CFGR3_Fields

func PSIZE*(r: DMA1_CFGR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `PSIZE=`*(r: var DMA1_CFGR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.DMA1_CFGR3_Fields

func MSIZE*(r: DMA1_CFGR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `MSIZE=`*(r: var DMA1_CFGR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.DMA1_CFGR3_Fields

func PL*(r: DMA1_CFGR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 13)

proc `PL=`*(r: var DMA1_CFGR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.DMA1_CFGR3_Fields

func MEM2MEM*(r: DMA1_CFGR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `MEM2MEM=`*(r: var DMA1_CFGR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.DMA1_CFGR3_Fields

func NDT*(r: DMA1_CNTR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `NDT=`*(r: var DMA1_CNTR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.DMA1_CNTR3_Fields

func EN*(r: DMA1_CFGR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `EN=`*(r: var DMA1_CFGR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.DMA1_CFGR4_Fields

func TCIE*(r: DMA1_CFGR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `TCIE=`*(r: var DMA1_CFGR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.DMA1_CFGR4_Fields

func HTIE*(r: DMA1_CFGR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `HTIE=`*(r: var DMA1_CFGR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DMA1_CFGR4_Fields

func TEIE*(r: DMA1_CFGR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TEIE=`*(r: var DMA1_CFGR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.DMA1_CFGR4_Fields

func DIR*(r: DMA1_CFGR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `DIR=`*(r: var DMA1_CFGR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.DMA1_CFGR4_Fields

func CIRC*(r: DMA1_CFGR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `CIRC=`*(r: var DMA1_CFGR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.DMA1_CFGR4_Fields

func PINC*(r: DMA1_CFGR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `PINC=`*(r: var DMA1_CFGR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.DMA1_CFGR4_Fields

func MINC*(r: DMA1_CFGR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `MINC=`*(r: var DMA1_CFGR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.DMA1_CFGR4_Fields

func PSIZE*(r: DMA1_CFGR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `PSIZE=`*(r: var DMA1_CFGR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.DMA1_CFGR4_Fields

func MSIZE*(r: DMA1_CFGR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `MSIZE=`*(r: var DMA1_CFGR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.DMA1_CFGR4_Fields

func PL*(r: DMA1_CFGR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 13)

proc `PL=`*(r: var DMA1_CFGR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.DMA1_CFGR4_Fields

func MEM2MEM*(r: DMA1_CFGR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `MEM2MEM=`*(r: var DMA1_CFGR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.DMA1_CFGR4_Fields

func NDT*(r: DMA1_CNTR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `NDT=`*(r: var DMA1_CNTR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.DMA1_CNTR4_Fields

func EN*(r: DMA1_CFGR5_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `EN=`*(r: var DMA1_CFGR5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.DMA1_CFGR5_Fields

func TCIE*(r: DMA1_CFGR5_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `TCIE=`*(r: var DMA1_CFGR5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.DMA1_CFGR5_Fields

func HTIE*(r: DMA1_CFGR5_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `HTIE=`*(r: var DMA1_CFGR5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DMA1_CFGR5_Fields

func TEIE*(r: DMA1_CFGR5_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TEIE=`*(r: var DMA1_CFGR5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.DMA1_CFGR5_Fields

func DIR*(r: DMA1_CFGR5_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `DIR=`*(r: var DMA1_CFGR5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.DMA1_CFGR5_Fields

func CIRC*(r: DMA1_CFGR5_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `CIRC=`*(r: var DMA1_CFGR5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.DMA1_CFGR5_Fields

func PINC*(r: DMA1_CFGR5_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `PINC=`*(r: var DMA1_CFGR5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.DMA1_CFGR5_Fields

func MINC*(r: DMA1_CFGR5_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `MINC=`*(r: var DMA1_CFGR5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.DMA1_CFGR5_Fields

func PSIZE*(r: DMA1_CFGR5_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `PSIZE=`*(r: var DMA1_CFGR5_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.DMA1_CFGR5_Fields

func MSIZE*(r: DMA1_CFGR5_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `MSIZE=`*(r: var DMA1_CFGR5_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.DMA1_CFGR5_Fields

func PL*(r: DMA1_CFGR5_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 13)

proc `PL=`*(r: var DMA1_CFGR5_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.DMA1_CFGR5_Fields

func MEM2MEM*(r: DMA1_CFGR5_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `MEM2MEM=`*(r: var DMA1_CFGR5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.DMA1_CFGR5_Fields

func NDT*(r: DMA1_CNTR5_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `NDT=`*(r: var DMA1_CNTR5_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.DMA1_CNTR5_Fields

func EN*(r: DMA1_CFGR6_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `EN=`*(r: var DMA1_CFGR6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.DMA1_CFGR6_Fields

func TCIE*(r: DMA1_CFGR6_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `TCIE=`*(r: var DMA1_CFGR6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.DMA1_CFGR6_Fields

func HTIE*(r: DMA1_CFGR6_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `HTIE=`*(r: var DMA1_CFGR6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DMA1_CFGR6_Fields

func TEIE*(r: DMA1_CFGR6_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TEIE=`*(r: var DMA1_CFGR6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.DMA1_CFGR6_Fields

func DIR*(r: DMA1_CFGR6_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `DIR=`*(r: var DMA1_CFGR6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.DMA1_CFGR6_Fields

func CIRC*(r: DMA1_CFGR6_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `CIRC=`*(r: var DMA1_CFGR6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.DMA1_CFGR6_Fields

func PINC*(r: DMA1_CFGR6_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `PINC=`*(r: var DMA1_CFGR6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.DMA1_CFGR6_Fields

func MINC*(r: DMA1_CFGR6_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `MINC=`*(r: var DMA1_CFGR6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.DMA1_CFGR6_Fields

func PSIZE*(r: DMA1_CFGR6_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `PSIZE=`*(r: var DMA1_CFGR6_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.DMA1_CFGR6_Fields

func MSIZE*(r: DMA1_CFGR6_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `MSIZE=`*(r: var DMA1_CFGR6_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.DMA1_CFGR6_Fields

func PL*(r: DMA1_CFGR6_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 13)

proc `PL=`*(r: var DMA1_CFGR6_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.DMA1_CFGR6_Fields

func MEM2MEM*(r: DMA1_CFGR6_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `MEM2MEM=`*(r: var DMA1_CFGR6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.DMA1_CFGR6_Fields

func NDT*(r: DMA1_CNTR6_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `NDT=`*(r: var DMA1_CNTR6_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.DMA1_CNTR6_Fields

func EN*(r: DMA1_CFGR7_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `EN=`*(r: var DMA1_CFGR7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.DMA1_CFGR7_Fields

func TCIE*(r: DMA1_CFGR7_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `TCIE=`*(r: var DMA1_CFGR7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.DMA1_CFGR7_Fields

func HTIE*(r: DMA1_CFGR7_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `HTIE=`*(r: var DMA1_CFGR7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DMA1_CFGR7_Fields

func TEIE*(r: DMA1_CFGR7_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TEIE=`*(r: var DMA1_CFGR7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.DMA1_CFGR7_Fields

func DIR*(r: DMA1_CFGR7_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `DIR=`*(r: var DMA1_CFGR7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.DMA1_CFGR7_Fields

func CIRC*(r: DMA1_CFGR7_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `CIRC=`*(r: var DMA1_CFGR7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.DMA1_CFGR7_Fields

func PINC*(r: DMA1_CFGR7_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `PINC=`*(r: var DMA1_CFGR7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.DMA1_CFGR7_Fields

func MINC*(r: DMA1_CFGR7_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `MINC=`*(r: var DMA1_CFGR7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.DMA1_CFGR7_Fields

func PSIZE*(r: DMA1_CFGR7_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `PSIZE=`*(r: var DMA1_CFGR7_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.DMA1_CFGR7_Fields

func MSIZE*(r: DMA1_CFGR7_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `MSIZE=`*(r: var DMA1_CFGR7_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.DMA1_CFGR7_Fields

func PL*(r: DMA1_CFGR7_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 13)

proc `PL=`*(r: var DMA1_CFGR7_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.DMA1_CFGR7_Fields

func MEM2MEM*(r: DMA1_CFGR7_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `MEM2MEM=`*(r: var DMA1_CFGR7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.DMA1_CFGR7_Fields

func NDT*(r: DMA1_CNTR7_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `NDT=`*(r: var DMA1_CNTR7_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.DMA1_CNTR7_Fields

func EN*(r: DMA1_CFGR8_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `EN=`*(r: var DMA1_CFGR8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.DMA1_CFGR8_Fields

func TCIE*(r: DMA1_CFGR8_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `TCIE=`*(r: var DMA1_CFGR8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.DMA1_CFGR8_Fields

func HTIE*(r: DMA1_CFGR8_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `HTIE=`*(r: var DMA1_CFGR8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DMA1_CFGR8_Fields

func TEIE*(r: DMA1_CFGR8_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TEIE=`*(r: var DMA1_CFGR8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.DMA1_CFGR8_Fields

func DIR*(r: DMA1_CFGR8_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `DIR=`*(r: var DMA1_CFGR8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.DMA1_CFGR8_Fields

func CIRC*(r: DMA1_CFGR8_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `CIRC=`*(r: var DMA1_CFGR8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.DMA1_CFGR8_Fields

func PINC*(r: DMA1_CFGR8_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `PINC=`*(r: var DMA1_CFGR8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.DMA1_CFGR8_Fields

func MINC*(r: DMA1_CFGR8_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `MINC=`*(r: var DMA1_CFGR8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.DMA1_CFGR8_Fields

func PSIZE*(r: DMA1_CFGR8_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `PSIZE=`*(r: var DMA1_CFGR8_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.DMA1_CFGR8_Fields

func MSIZE*(r: DMA1_CFGR8_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `MSIZE=`*(r: var DMA1_CFGR8_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.DMA1_CFGR8_Fields

func PL*(r: DMA1_CFGR8_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 13)

proc `PL=`*(r: var DMA1_CFGR8_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.DMA1_CFGR8_Fields

func MEM2MEM*(r: DMA1_CFGR8_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `MEM2MEM=`*(r: var DMA1_CFGR8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.DMA1_CFGR8_Fields

func NDT*(r: DMA1_CNTR8_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `NDT=`*(r: var DMA1_CNTR8_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.DMA1_CNTR8_Fields

type
  RTC_CTLRH_Fields* = distinct uint32
  RTC_CTLRL_Fields* = distinct uint32
  RTC_PSCRH_Fields* = distinct uint32
  RTC_PSCRL_Fields* = distinct uint32
  RTC_DIVH_Fields* = distinct uint32
  RTC_DIVL_Fields* = distinct uint32
  RTC_CNTH_Fields* = distinct uint32
  RTC_CNTL_Fields* = distinct uint32
  RTC_ALRMH_Fields* = distinct uint32
  RTC_ALRML_Fields* = distinct uint32

proc read*(reg: RTC_CTLRH_Type): RTC_CTLRH_Fields {.inline.} =
  volatileLoad(cast[ptr RTC_CTLRH_Fields](reg.loc))

proc read*(reg: static RTC_CTLRH_Type): RTC_CTLRH_Fields {.inline.} =
  volatileLoad(cast[ptr RTC_CTLRH_Fields](reg.loc))

proc write*(reg: RTC_CTLRH_Type, val: RTC_CTLRH_Fields) {.inline.} =
  volatileStore(cast[ptr RTC_CTLRH_Fields](reg.loc), val)

proc write*(reg: RTC_CTLRH_Type, SECIE: bool = false, ALRIE: bool = false, OWIE: bool = false) =
  var x: uint32
  x.setMask((SECIE.uint32 shl 0).masked(0 .. 0))
  x.setMask((ALRIE.uint32 shl 1).masked(1 .. 1))
  x.setMask((OWIE.uint32 shl 2).masked(2 .. 2))
  reg.write x.RTC_CTLRH_Fields

template modifyIt*(reg: RTC_CTLRH_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RTC_CTLRL_Type): RTC_CTLRL_Fields {.inline.} =
  volatileLoad(cast[ptr RTC_CTLRL_Fields](reg.loc))

proc read*(reg: static RTC_CTLRL_Type): RTC_CTLRL_Fields {.inline.} =
  volatileLoad(cast[ptr RTC_CTLRL_Fields](reg.loc))

proc write*(reg: RTC_CTLRL_Type, val: RTC_CTLRL_Fields) {.inline.} =
  volatileStore(cast[ptr RTC_CTLRL_Fields](reg.loc), val)

proc write*(reg: RTC_CTLRL_Type, SECF: bool = false, ALRF: bool = false, OWF: bool = false, RSF: bool = false, CNF: bool = false) =
  var x: uint32
  x.setMask((SECF.uint32 shl 0).masked(0 .. 0))
  x.setMask((ALRF.uint32 shl 1).masked(1 .. 1))
  x.setMask((OWF.uint32 shl 2).masked(2 .. 2))
  x.setMask((RSF.uint32 shl 3).masked(3 .. 3))
  x.setMask((CNF.uint32 shl 4).masked(4 .. 4))
  reg.write x.RTC_CTLRL_Fields

template modifyIt*(reg: RTC_CTLRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc write*(reg: RTC_PSCRH_Type, val: RTC_PSCRH_Fields) {.inline.} =
  volatileStore(cast[ptr RTC_PSCRH_Fields](reg.loc), val)

proc write*(reg: RTC_PSCRH_Type, PRLH: uint32 = 0) =
  var x: uint32
  x.setMask((PRLH shl 0).masked(0 .. 3))
  reg.write x.RTC_PSCRH_Fields

proc write*(reg: RTC_PSCRL_Type, val: RTC_PSCRL_Fields) {.inline.} =
  volatileStore(cast[ptr RTC_PSCRL_Fields](reg.loc), val)

proc write*(reg: RTC_PSCRL_Type, PRLL: uint32 = 32768) =
  var x: uint32
  x.setMask((PRLL shl 0).masked(0 .. 15))
  reg.write x.RTC_PSCRL_Fields

proc read*(reg: RTC_DIVH_Type): RTC_DIVH_Fields {.inline.} =
  volatileLoad(cast[ptr RTC_DIVH_Fields](reg.loc))

proc read*(reg: static RTC_DIVH_Type): RTC_DIVH_Fields {.inline.} =
  volatileLoad(cast[ptr RTC_DIVH_Fields](reg.loc))

proc read*(reg: RTC_DIVL_Type): RTC_DIVL_Fields {.inline.} =
  volatileLoad(cast[ptr RTC_DIVL_Fields](reg.loc))

proc read*(reg: static RTC_DIVL_Type): RTC_DIVL_Fields {.inline.} =
  volatileLoad(cast[ptr RTC_DIVL_Fields](reg.loc))

proc read*(reg: RTC_CNTH_Type): RTC_CNTH_Fields {.inline.} =
  volatileLoad(cast[ptr RTC_CNTH_Fields](reg.loc))

proc read*(reg: static RTC_CNTH_Type): RTC_CNTH_Fields {.inline.} =
  volatileLoad(cast[ptr RTC_CNTH_Fields](reg.loc))

proc write*(reg: RTC_CNTH_Type, val: RTC_CNTH_Fields) {.inline.} =
  volatileStore(cast[ptr RTC_CNTH_Fields](reg.loc), val)

proc write*(reg: RTC_CNTH_Type, CNTH: uint32 = 0) =
  var x: uint32
  x.setMask((CNTH shl 0).masked(0 .. 15))
  reg.write x.RTC_CNTH_Fields

template modifyIt*(reg: RTC_CNTH_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RTC_CNTL_Type): RTC_CNTL_Fields {.inline.} =
  volatileLoad(cast[ptr RTC_CNTL_Fields](reg.loc))

proc read*(reg: static RTC_CNTL_Type): RTC_CNTL_Fields {.inline.} =
  volatileLoad(cast[ptr RTC_CNTL_Fields](reg.loc))

proc write*(reg: RTC_CNTL_Type, val: RTC_CNTL_Fields) {.inline.} =
  volatileStore(cast[ptr RTC_CNTL_Fields](reg.loc), val)

proc write*(reg: RTC_CNTL_Type, CNTL: uint32 = 0) =
  var x: uint32
  x.setMask((CNTL shl 0).masked(0 .. 15))
  reg.write x.RTC_CNTL_Fields

template modifyIt*(reg: RTC_CNTL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc write*(reg: RTC_ALRMH_Type, val: RTC_ALRMH_Fields) {.inline.} =
  volatileStore(cast[ptr RTC_ALRMH_Fields](reg.loc), val)

proc write*(reg: RTC_ALRMH_Type, ALRH: uint32 = 65535) =
  var x: uint32
  x.setMask((ALRH shl 0).masked(0 .. 15))
  reg.write x.RTC_ALRMH_Fields

proc write*(reg: RTC_ALRML_Type, val: RTC_ALRML_Fields) {.inline.} =
  volatileStore(cast[ptr RTC_ALRML_Fields](reg.loc), val)

proc write*(reg: RTC_ALRML_Type, ALRL: uint32 = 65535) =
  var x: uint32
  x.setMask((ALRL shl 0).masked(0 .. 15))
  reg.write x.RTC_ALRML_Fields

func SECIE*(r: RTC_CTLRH_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `SECIE=`*(r: var RTC_CTLRH_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.RTC_CTLRH_Fields

func ALRIE*(r: RTC_CTLRH_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `ALRIE=`*(r: var RTC_CTLRH_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.RTC_CTLRH_Fields

func OWIE*(r: RTC_CTLRH_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `OWIE=`*(r: var RTC_CTLRH_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.RTC_CTLRH_Fields

func SECF*(r: RTC_CTLRL_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `SECF=`*(r: var RTC_CTLRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.RTC_CTLRL_Fields

func ALRF*(r: RTC_CTLRL_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `ALRF=`*(r: var RTC_CTLRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.RTC_CTLRL_Fields

func OWF*(r: RTC_CTLRL_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `OWF=`*(r: var RTC_CTLRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.RTC_CTLRL_Fields

func RSF*(r: RTC_CTLRL_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `RSF=`*(r: var RTC_CTLRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.RTC_CTLRL_Fields

func CNF*(r: RTC_CTLRL_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `CNF=`*(r: var RTC_CTLRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.RTC_CTLRL_Fields

func RTOFF*(r: RTC_CTLRL_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `PRLH=`*(r: var RTC_PSCRH_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.RTC_PSCRH_Fields

proc `PRLL=`*(r: var RTC_PSCRL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.RTC_PSCRL_Fields

func DIVH*(r: RTC_DIVH_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

func DIVL*(r: RTC_DIVL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func CNTH*(r: RTC_CNTH_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CNTH=`*(r: var RTC_CNTH_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.RTC_CNTH_Fields

func CNTL*(r: RTC_CNTL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CNTL=`*(r: var RTC_CNTL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.RTC_CNTL_Fields

proc `ALRH=`*(r: var RTC_ALRMH_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.RTC_ALRMH_Fields

proc `ALRL=`*(r: var RTC_ALRML_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.RTC_ALRML_Fields

type
  BKP_DATAR1_Fields* = distinct uint32
  BKP_DATAR2_Fields* = distinct uint32
  BKP_DATAR3_Fields* = distinct uint32
  BKP_DATAR4_Fields* = distinct uint32
  BKP_DATAR5_Fields* = distinct uint32
  BKP_DATAR6_Fields* = distinct uint32
  BKP_DATAR7_Fields* = distinct uint32
  BKP_DATAR8_Fields* = distinct uint32
  BKP_DATAR9_Fields* = distinct uint32
  BKP_DATAR10_Fields* = distinct uint32
  BKP_DATAR11_Fields* = distinct uint32
  BKP_DATAR12_Fields* = distinct uint32
  BKP_DATAR13_Fields* = distinct uint32
  BKP_DATAR14_Fields* = distinct uint32
  BKP_DATAR15_Fields* = distinct uint32
  BKP_DATAR16_Fields* = distinct uint32
  BKP_DATAR17_Fields* = distinct uint32
  BKP_DATAR18_Fields* = distinct uint32
  BKP_DATAR19_Fields* = distinct uint32
  BKP_DATAR20_Fields* = distinct uint32
  BKP_DATAR21_Fields* = distinct uint32
  BKP_DATAR22_Fields* = distinct uint32
  BKP_DATAR23_Fields* = distinct uint32
  BKP_DATAR24_Fields* = distinct uint32
  BKP_DATAR25_Fields* = distinct uint32
  BKP_DATAR26_Fields* = distinct uint32
  BKP_DATAR27_Fields* = distinct uint32
  BKP_DATAR28_Fields* = distinct uint32
  BKP_DATAR29_Fields* = distinct uint32
  BKP_DATAR30_Fields* = distinct uint32
  BKP_DATAR31_Fields* = distinct uint32
  BKP_DATAR32_Fields* = distinct uint32
  BKP_DATAR33_Fields* = distinct uint32
  BKP_DATAR34_Fields* = distinct uint32
  BKP_DATAR35_Fields* = distinct uint32
  BKP_DATAR36_Fields* = distinct uint32
  BKP_DATAR37_Fields* = distinct uint32
  BKP_DATAR38_Fields* = distinct uint32
  BKP_DATAR39_Fields* = distinct uint32
  BKP_DATAR40_Fields* = distinct uint32
  BKP_DATAR41_Fields* = distinct uint32
  BKP_DATAR42_Fields* = distinct uint32
  BKP_OCTLR_Fields* = distinct uint32
  BKP_TPCTLR_Fields* = distinct uint32
  BKP_TPCSR_Fields* = distinct uint32

proc read*(reg: BKP_DATAR1_Type): BKP_DATAR1_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR1_Fields](reg.loc))

proc read*(reg: static BKP_DATAR1_Type): BKP_DATAR1_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR1_Fields](reg.loc))

proc write*(reg: BKP_DATAR1_Type, val: BKP_DATAR1_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR1_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR1_Type, D1: uint32 = 0) =
  var x: uint32
  x.setMask((D1 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR1_Fields

template modifyIt*(reg: BKP_DATAR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR2_Type): BKP_DATAR2_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR2_Fields](reg.loc))

proc read*(reg: static BKP_DATAR2_Type): BKP_DATAR2_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR2_Fields](reg.loc))

proc write*(reg: BKP_DATAR2_Type, val: BKP_DATAR2_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR2_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR2_Type, D2: uint32 = 0) =
  var x: uint32
  x.setMask((D2 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR2_Fields

template modifyIt*(reg: BKP_DATAR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR3_Type): BKP_DATAR3_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR3_Fields](reg.loc))

proc read*(reg: static BKP_DATAR3_Type): BKP_DATAR3_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR3_Fields](reg.loc))

proc write*(reg: BKP_DATAR3_Type, val: BKP_DATAR3_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR3_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR3_Type, D3: uint32 = 0) =
  var x: uint32
  x.setMask((D3 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR3_Fields

template modifyIt*(reg: BKP_DATAR3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR4_Type): BKP_DATAR4_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR4_Fields](reg.loc))

proc read*(reg: static BKP_DATAR4_Type): BKP_DATAR4_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR4_Fields](reg.loc))

proc write*(reg: BKP_DATAR4_Type, val: BKP_DATAR4_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR4_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR4_Type, D4: uint32 = 0) =
  var x: uint32
  x.setMask((D4 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR4_Fields

template modifyIt*(reg: BKP_DATAR4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR5_Type): BKP_DATAR5_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR5_Fields](reg.loc))

proc read*(reg: static BKP_DATAR5_Type): BKP_DATAR5_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR5_Fields](reg.loc))

proc write*(reg: BKP_DATAR5_Type, val: BKP_DATAR5_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR5_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR5_Type, D5: uint32 = 0) =
  var x: uint32
  x.setMask((D5 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR5_Fields

template modifyIt*(reg: BKP_DATAR5_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR6_Type): BKP_DATAR6_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR6_Fields](reg.loc))

proc read*(reg: static BKP_DATAR6_Type): BKP_DATAR6_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR6_Fields](reg.loc))

proc write*(reg: BKP_DATAR6_Type, val: BKP_DATAR6_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR6_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR6_Type, D6: uint32 = 0) =
  var x: uint32
  x.setMask((D6 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR6_Fields

template modifyIt*(reg: BKP_DATAR6_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR7_Type): BKP_DATAR7_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR7_Fields](reg.loc))

proc read*(reg: static BKP_DATAR7_Type): BKP_DATAR7_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR7_Fields](reg.loc))

proc write*(reg: BKP_DATAR7_Type, val: BKP_DATAR7_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR7_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR7_Type, D7: uint32 = 0) =
  var x: uint32
  x.setMask((D7 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR7_Fields

template modifyIt*(reg: BKP_DATAR7_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR8_Type): BKP_DATAR8_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR8_Fields](reg.loc))

proc read*(reg: static BKP_DATAR8_Type): BKP_DATAR8_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR8_Fields](reg.loc))

proc write*(reg: BKP_DATAR8_Type, val: BKP_DATAR8_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR8_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR8_Type, D8: uint32 = 0) =
  var x: uint32
  x.setMask((D8 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR8_Fields

template modifyIt*(reg: BKP_DATAR8_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR9_Type): BKP_DATAR9_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR9_Fields](reg.loc))

proc read*(reg: static BKP_DATAR9_Type): BKP_DATAR9_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR9_Fields](reg.loc))

proc write*(reg: BKP_DATAR9_Type, val: BKP_DATAR9_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR9_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR9_Type, D9: uint32 = 0) =
  var x: uint32
  x.setMask((D9 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR9_Fields

template modifyIt*(reg: BKP_DATAR9_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR10_Type): BKP_DATAR10_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR10_Fields](reg.loc))

proc read*(reg: static BKP_DATAR10_Type): BKP_DATAR10_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR10_Fields](reg.loc))

proc write*(reg: BKP_DATAR10_Type, val: BKP_DATAR10_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR10_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR10_Type, D10: uint32 = 0) =
  var x: uint32
  x.setMask((D10 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR10_Fields

template modifyIt*(reg: BKP_DATAR10_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR11_Type): BKP_DATAR11_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR11_Fields](reg.loc))

proc read*(reg: static BKP_DATAR11_Type): BKP_DATAR11_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR11_Fields](reg.loc))

proc write*(reg: BKP_DATAR11_Type, val: BKP_DATAR11_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR11_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR11_Type, DR11: uint32 = 0) =
  var x: uint32
  x.setMask((DR11 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR11_Fields

template modifyIt*(reg: BKP_DATAR11_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR12_Type): BKP_DATAR12_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR12_Fields](reg.loc))

proc read*(reg: static BKP_DATAR12_Type): BKP_DATAR12_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR12_Fields](reg.loc))

proc write*(reg: BKP_DATAR12_Type, val: BKP_DATAR12_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR12_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR12_Type, DR12: uint32 = 0) =
  var x: uint32
  x.setMask((DR12 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR12_Fields

template modifyIt*(reg: BKP_DATAR12_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR13_Type): BKP_DATAR13_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR13_Fields](reg.loc))

proc read*(reg: static BKP_DATAR13_Type): BKP_DATAR13_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR13_Fields](reg.loc))

proc write*(reg: BKP_DATAR13_Type, val: BKP_DATAR13_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR13_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR13_Type, DR13: uint32 = 0) =
  var x: uint32
  x.setMask((DR13 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR13_Fields

template modifyIt*(reg: BKP_DATAR13_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR14_Type): BKP_DATAR14_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR14_Fields](reg.loc))

proc read*(reg: static BKP_DATAR14_Type): BKP_DATAR14_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR14_Fields](reg.loc))

proc write*(reg: BKP_DATAR14_Type, val: BKP_DATAR14_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR14_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR14_Type, D14: uint32 = 0) =
  var x: uint32
  x.setMask((D14 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR14_Fields

template modifyIt*(reg: BKP_DATAR14_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR15_Type): BKP_DATAR15_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR15_Fields](reg.loc))

proc read*(reg: static BKP_DATAR15_Type): BKP_DATAR15_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR15_Fields](reg.loc))

proc write*(reg: BKP_DATAR15_Type, val: BKP_DATAR15_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR15_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR15_Type, D15: uint32 = 0) =
  var x: uint32
  x.setMask((D15 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR15_Fields

template modifyIt*(reg: BKP_DATAR15_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR16_Type): BKP_DATAR16_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR16_Fields](reg.loc))

proc read*(reg: static BKP_DATAR16_Type): BKP_DATAR16_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR16_Fields](reg.loc))

proc write*(reg: BKP_DATAR16_Type, val: BKP_DATAR16_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR16_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR16_Type, D16: uint32 = 0) =
  var x: uint32
  x.setMask((D16 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR16_Fields

template modifyIt*(reg: BKP_DATAR16_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR17_Type): BKP_DATAR17_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR17_Fields](reg.loc))

proc read*(reg: static BKP_DATAR17_Type): BKP_DATAR17_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR17_Fields](reg.loc))

proc write*(reg: BKP_DATAR17_Type, val: BKP_DATAR17_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR17_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR17_Type, D17: uint32 = 0) =
  var x: uint32
  x.setMask((D17 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR17_Fields

template modifyIt*(reg: BKP_DATAR17_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR18_Type): BKP_DATAR18_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR18_Fields](reg.loc))

proc read*(reg: static BKP_DATAR18_Type): BKP_DATAR18_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR18_Fields](reg.loc))

proc write*(reg: BKP_DATAR18_Type, val: BKP_DATAR18_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR18_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR18_Type, D18: uint32 = 0) =
  var x: uint32
  x.setMask((D18 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR18_Fields

template modifyIt*(reg: BKP_DATAR18_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR19_Type): BKP_DATAR19_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR19_Fields](reg.loc))

proc read*(reg: static BKP_DATAR19_Type): BKP_DATAR19_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR19_Fields](reg.loc))

proc write*(reg: BKP_DATAR19_Type, val: BKP_DATAR19_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR19_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR19_Type, D19: uint32 = 0) =
  var x: uint32
  x.setMask((D19 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR19_Fields

template modifyIt*(reg: BKP_DATAR19_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR20_Type): BKP_DATAR20_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR20_Fields](reg.loc))

proc read*(reg: static BKP_DATAR20_Type): BKP_DATAR20_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR20_Fields](reg.loc))

proc write*(reg: BKP_DATAR20_Type, val: BKP_DATAR20_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR20_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR20_Type, D20: uint32 = 0) =
  var x: uint32
  x.setMask((D20 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR20_Fields

template modifyIt*(reg: BKP_DATAR20_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR21_Type): BKP_DATAR21_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR21_Fields](reg.loc))

proc read*(reg: static BKP_DATAR21_Type): BKP_DATAR21_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR21_Fields](reg.loc))

proc write*(reg: BKP_DATAR21_Type, val: BKP_DATAR21_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR21_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR21_Type, D21: uint32 = 0) =
  var x: uint32
  x.setMask((D21 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR21_Fields

template modifyIt*(reg: BKP_DATAR21_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR22_Type): BKP_DATAR22_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR22_Fields](reg.loc))

proc read*(reg: static BKP_DATAR22_Type): BKP_DATAR22_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR22_Fields](reg.loc))

proc write*(reg: BKP_DATAR22_Type, val: BKP_DATAR22_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR22_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR22_Type, D22: uint32 = 0) =
  var x: uint32
  x.setMask((D22 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR22_Fields

template modifyIt*(reg: BKP_DATAR22_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR23_Type): BKP_DATAR23_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR23_Fields](reg.loc))

proc read*(reg: static BKP_DATAR23_Type): BKP_DATAR23_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR23_Fields](reg.loc))

proc write*(reg: BKP_DATAR23_Type, val: BKP_DATAR23_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR23_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR23_Type, D23: uint32 = 0) =
  var x: uint32
  x.setMask((D23 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR23_Fields

template modifyIt*(reg: BKP_DATAR23_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR24_Type): BKP_DATAR24_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR24_Fields](reg.loc))

proc read*(reg: static BKP_DATAR24_Type): BKP_DATAR24_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR24_Fields](reg.loc))

proc write*(reg: BKP_DATAR24_Type, val: BKP_DATAR24_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR24_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR24_Type, D24: uint32 = 0) =
  var x: uint32
  x.setMask((D24 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR24_Fields

template modifyIt*(reg: BKP_DATAR24_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR25_Type): BKP_DATAR25_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR25_Fields](reg.loc))

proc read*(reg: static BKP_DATAR25_Type): BKP_DATAR25_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR25_Fields](reg.loc))

proc write*(reg: BKP_DATAR25_Type, val: BKP_DATAR25_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR25_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR25_Type, D25: uint32 = 0) =
  var x: uint32
  x.setMask((D25 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR25_Fields

template modifyIt*(reg: BKP_DATAR25_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR26_Type): BKP_DATAR26_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR26_Fields](reg.loc))

proc read*(reg: static BKP_DATAR26_Type): BKP_DATAR26_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR26_Fields](reg.loc))

proc write*(reg: BKP_DATAR26_Type, val: BKP_DATAR26_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR26_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR26_Type, D26: uint32 = 0) =
  var x: uint32
  x.setMask((D26 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR26_Fields

template modifyIt*(reg: BKP_DATAR26_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR27_Type): BKP_DATAR27_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR27_Fields](reg.loc))

proc read*(reg: static BKP_DATAR27_Type): BKP_DATAR27_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR27_Fields](reg.loc))

proc write*(reg: BKP_DATAR27_Type, val: BKP_DATAR27_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR27_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR27_Type, D27: uint32 = 0) =
  var x: uint32
  x.setMask((D27 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR27_Fields

template modifyIt*(reg: BKP_DATAR27_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR28_Type): BKP_DATAR28_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR28_Fields](reg.loc))

proc read*(reg: static BKP_DATAR28_Type): BKP_DATAR28_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR28_Fields](reg.loc))

proc write*(reg: BKP_DATAR28_Type, val: BKP_DATAR28_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR28_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR28_Type, D28: uint32 = 0) =
  var x: uint32
  x.setMask((D28 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR28_Fields

template modifyIt*(reg: BKP_DATAR28_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR29_Type): BKP_DATAR29_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR29_Fields](reg.loc))

proc read*(reg: static BKP_DATAR29_Type): BKP_DATAR29_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR29_Fields](reg.loc))

proc write*(reg: BKP_DATAR29_Type, val: BKP_DATAR29_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR29_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR29_Type, D29: uint32 = 0) =
  var x: uint32
  x.setMask((D29 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR29_Fields

template modifyIt*(reg: BKP_DATAR29_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR30_Type): BKP_DATAR30_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR30_Fields](reg.loc))

proc read*(reg: static BKP_DATAR30_Type): BKP_DATAR30_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR30_Fields](reg.loc))

proc write*(reg: BKP_DATAR30_Type, val: BKP_DATAR30_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR30_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR30_Type, D30: uint32 = 0) =
  var x: uint32
  x.setMask((D30 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR30_Fields

template modifyIt*(reg: BKP_DATAR30_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR31_Type): BKP_DATAR31_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR31_Fields](reg.loc))

proc read*(reg: static BKP_DATAR31_Type): BKP_DATAR31_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR31_Fields](reg.loc))

proc write*(reg: BKP_DATAR31_Type, val: BKP_DATAR31_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR31_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR31_Type, D31: uint32 = 0) =
  var x: uint32
  x.setMask((D31 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR31_Fields

template modifyIt*(reg: BKP_DATAR31_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR32_Type): BKP_DATAR32_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR32_Fields](reg.loc))

proc read*(reg: static BKP_DATAR32_Type): BKP_DATAR32_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR32_Fields](reg.loc))

proc write*(reg: BKP_DATAR32_Type, val: BKP_DATAR32_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR32_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR32_Type, D32: uint32 = 0) =
  var x: uint32
  x.setMask((D32 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR32_Fields

template modifyIt*(reg: BKP_DATAR32_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR33_Type): BKP_DATAR33_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR33_Fields](reg.loc))

proc read*(reg: static BKP_DATAR33_Type): BKP_DATAR33_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR33_Fields](reg.loc))

proc write*(reg: BKP_DATAR33_Type, val: BKP_DATAR33_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR33_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR33_Type, D33: uint32 = 0) =
  var x: uint32
  x.setMask((D33 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR33_Fields

template modifyIt*(reg: BKP_DATAR33_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR34_Type): BKP_DATAR34_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR34_Fields](reg.loc))

proc read*(reg: static BKP_DATAR34_Type): BKP_DATAR34_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR34_Fields](reg.loc))

proc write*(reg: BKP_DATAR34_Type, val: BKP_DATAR34_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR34_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR34_Type, D34: uint32 = 0) =
  var x: uint32
  x.setMask((D34 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR34_Fields

template modifyIt*(reg: BKP_DATAR34_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR35_Type): BKP_DATAR35_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR35_Fields](reg.loc))

proc read*(reg: static BKP_DATAR35_Type): BKP_DATAR35_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR35_Fields](reg.loc))

proc write*(reg: BKP_DATAR35_Type, val: BKP_DATAR35_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR35_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR35_Type, D35: uint32 = 0) =
  var x: uint32
  x.setMask((D35 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR35_Fields

template modifyIt*(reg: BKP_DATAR35_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR36_Type): BKP_DATAR36_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR36_Fields](reg.loc))

proc read*(reg: static BKP_DATAR36_Type): BKP_DATAR36_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR36_Fields](reg.loc))

proc write*(reg: BKP_DATAR36_Type, val: BKP_DATAR36_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR36_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR36_Type, D36: uint32 = 0) =
  var x: uint32
  x.setMask((D36 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR36_Fields

template modifyIt*(reg: BKP_DATAR36_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR37_Type): BKP_DATAR37_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR37_Fields](reg.loc))

proc read*(reg: static BKP_DATAR37_Type): BKP_DATAR37_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR37_Fields](reg.loc))

proc write*(reg: BKP_DATAR37_Type, val: BKP_DATAR37_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR37_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR37_Type, D37: uint32 = 0) =
  var x: uint32
  x.setMask((D37 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR37_Fields

template modifyIt*(reg: BKP_DATAR37_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR38_Type): BKP_DATAR38_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR38_Fields](reg.loc))

proc read*(reg: static BKP_DATAR38_Type): BKP_DATAR38_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR38_Fields](reg.loc))

proc write*(reg: BKP_DATAR38_Type, val: BKP_DATAR38_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR38_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR38_Type, D38: uint32 = 0) =
  var x: uint32
  x.setMask((D38 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR38_Fields

template modifyIt*(reg: BKP_DATAR38_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR39_Type): BKP_DATAR39_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR39_Fields](reg.loc))

proc read*(reg: static BKP_DATAR39_Type): BKP_DATAR39_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR39_Fields](reg.loc))

proc write*(reg: BKP_DATAR39_Type, val: BKP_DATAR39_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR39_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR39_Type, D39: uint32 = 0) =
  var x: uint32
  x.setMask((D39 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR39_Fields

template modifyIt*(reg: BKP_DATAR39_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR40_Type): BKP_DATAR40_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR40_Fields](reg.loc))

proc read*(reg: static BKP_DATAR40_Type): BKP_DATAR40_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR40_Fields](reg.loc))

proc write*(reg: BKP_DATAR40_Type, val: BKP_DATAR40_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR40_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR40_Type, D40: uint32 = 0) =
  var x: uint32
  x.setMask((D40 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR40_Fields

template modifyIt*(reg: BKP_DATAR40_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR41_Type): BKP_DATAR41_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR41_Fields](reg.loc))

proc read*(reg: static BKP_DATAR41_Type): BKP_DATAR41_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR41_Fields](reg.loc))

proc write*(reg: BKP_DATAR41_Type, val: BKP_DATAR41_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR41_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR41_Type, D41: uint32 = 0) =
  var x: uint32
  x.setMask((D41 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR41_Fields

template modifyIt*(reg: BKP_DATAR41_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_DATAR42_Type): BKP_DATAR42_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR42_Fields](reg.loc))

proc read*(reg: static BKP_DATAR42_Type): BKP_DATAR42_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_DATAR42_Fields](reg.loc))

proc write*(reg: BKP_DATAR42_Type, val: BKP_DATAR42_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_DATAR42_Fields](reg.loc), val)

proc write*(reg: BKP_DATAR42_Type, D42: uint32 = 0) =
  var x: uint32
  x.setMask((D42 shl 0).masked(0 .. 15))
  reg.write x.BKP_DATAR42_Fields

template modifyIt*(reg: BKP_DATAR42_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_OCTLR_Type): BKP_OCTLR_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_OCTLR_Fields](reg.loc))

proc read*(reg: static BKP_OCTLR_Type): BKP_OCTLR_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_OCTLR_Fields](reg.loc))

proc write*(reg: BKP_OCTLR_Type, val: BKP_OCTLR_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_OCTLR_Fields](reg.loc), val)

proc write*(reg: BKP_OCTLR_Type, CAL: uint32 = 0, CCO: bool = false, ASOE: bool = false, ASOS: bool = false) =
  var x: uint32
  x.setMask((CAL shl 0).masked(0 .. 6))
  x.setMask((CCO.uint32 shl 7).masked(7 .. 7))
  x.setMask((ASOE.uint32 shl 8).masked(8 .. 8))
  x.setMask((ASOS.uint32 shl 9).masked(9 .. 9))
  reg.write x.BKP_OCTLR_Fields

template modifyIt*(reg: BKP_OCTLR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_TPCTLR_Type): BKP_TPCTLR_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_TPCTLR_Fields](reg.loc))

proc read*(reg: static BKP_TPCTLR_Type): BKP_TPCTLR_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_TPCTLR_Fields](reg.loc))

proc write*(reg: BKP_TPCTLR_Type, val: BKP_TPCTLR_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_TPCTLR_Fields](reg.loc), val)

proc write*(reg: BKP_TPCTLR_Type, TPE: bool = false, TPAL: bool = false) =
  var x: uint32
  x.setMask((TPE.uint32 shl 0).masked(0 .. 0))
  x.setMask((TPAL.uint32 shl 1).masked(1 .. 1))
  reg.write x.BKP_TPCTLR_Fields

template modifyIt*(reg: BKP_TPCTLR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: BKP_TPCSR_Type): BKP_TPCSR_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_TPCSR_Fields](reg.loc))

proc read*(reg: static BKP_TPCSR_Type): BKP_TPCSR_Fields {.inline.} =
  volatileLoad(cast[ptr BKP_TPCSR_Fields](reg.loc))

proc write*(reg: BKP_TPCSR_Type, val: BKP_TPCSR_Fields) {.inline.} =
  volatileStore(cast[ptr BKP_TPCSR_Fields](reg.loc), val)

proc write*(reg: BKP_TPCSR_Type, CTE: bool = false, CTI: bool = false, TPIE: bool = false) =
  var x: uint32
  x.setMask((CTE.uint32 shl 0).masked(0 .. 0))
  x.setMask((CTI.uint32 shl 1).masked(1 .. 1))
  x.setMask((TPIE.uint32 shl 2).masked(2 .. 2))
  reg.write x.BKP_TPCSR_Fields

template modifyIt*(reg: BKP_TPCSR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func D1*(r: BKP_DATAR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D1=`*(r: var BKP_DATAR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR1_Fields

func D2*(r: BKP_DATAR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D2=`*(r: var BKP_DATAR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR2_Fields

func D3*(r: BKP_DATAR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D3=`*(r: var BKP_DATAR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR3_Fields

func D4*(r: BKP_DATAR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D4=`*(r: var BKP_DATAR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR4_Fields

func D5*(r: BKP_DATAR5_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D5=`*(r: var BKP_DATAR5_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR5_Fields

func D6*(r: BKP_DATAR6_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D6=`*(r: var BKP_DATAR6_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR6_Fields

func D7*(r: BKP_DATAR7_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D7=`*(r: var BKP_DATAR7_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR7_Fields

func D8*(r: BKP_DATAR8_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D8=`*(r: var BKP_DATAR8_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR8_Fields

func D9*(r: BKP_DATAR9_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D9=`*(r: var BKP_DATAR9_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR9_Fields

func D10*(r: BKP_DATAR10_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D10=`*(r: var BKP_DATAR10_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR10_Fields

func DR11*(r: BKP_DATAR11_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `DR11=`*(r: var BKP_DATAR11_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR11_Fields

func DR12*(r: BKP_DATAR12_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `DR12=`*(r: var BKP_DATAR12_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR12_Fields

func DR13*(r: BKP_DATAR13_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `DR13=`*(r: var BKP_DATAR13_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR13_Fields

func D14*(r: BKP_DATAR14_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D14=`*(r: var BKP_DATAR14_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR14_Fields

func D15*(r: BKP_DATAR15_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D15=`*(r: var BKP_DATAR15_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR15_Fields

func D16*(r: BKP_DATAR16_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D16=`*(r: var BKP_DATAR16_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR16_Fields

func D17*(r: BKP_DATAR17_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D17=`*(r: var BKP_DATAR17_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR17_Fields

func D18*(r: BKP_DATAR18_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D18=`*(r: var BKP_DATAR18_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR18_Fields

func D19*(r: BKP_DATAR19_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D19=`*(r: var BKP_DATAR19_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR19_Fields

func D20*(r: BKP_DATAR20_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D20=`*(r: var BKP_DATAR20_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR20_Fields

func D21*(r: BKP_DATAR21_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D21=`*(r: var BKP_DATAR21_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR21_Fields

func D22*(r: BKP_DATAR22_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D22=`*(r: var BKP_DATAR22_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR22_Fields

func D23*(r: BKP_DATAR23_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D23=`*(r: var BKP_DATAR23_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR23_Fields

func D24*(r: BKP_DATAR24_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D24=`*(r: var BKP_DATAR24_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR24_Fields

func D25*(r: BKP_DATAR25_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D25=`*(r: var BKP_DATAR25_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR25_Fields

func D26*(r: BKP_DATAR26_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D26=`*(r: var BKP_DATAR26_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR26_Fields

func D27*(r: BKP_DATAR27_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D27=`*(r: var BKP_DATAR27_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR27_Fields

func D28*(r: BKP_DATAR28_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D28=`*(r: var BKP_DATAR28_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR28_Fields

func D29*(r: BKP_DATAR29_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D29=`*(r: var BKP_DATAR29_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR29_Fields

func D30*(r: BKP_DATAR30_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D30=`*(r: var BKP_DATAR30_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR30_Fields

func D31*(r: BKP_DATAR31_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D31=`*(r: var BKP_DATAR31_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR31_Fields

func D32*(r: BKP_DATAR32_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D32=`*(r: var BKP_DATAR32_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR32_Fields

func D33*(r: BKP_DATAR33_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D33=`*(r: var BKP_DATAR33_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR33_Fields

func D34*(r: BKP_DATAR34_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D34=`*(r: var BKP_DATAR34_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR34_Fields

func D35*(r: BKP_DATAR35_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D35=`*(r: var BKP_DATAR35_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR35_Fields

func D36*(r: BKP_DATAR36_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D36=`*(r: var BKP_DATAR36_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR36_Fields

func D37*(r: BKP_DATAR37_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D37=`*(r: var BKP_DATAR37_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR37_Fields

func D38*(r: BKP_DATAR38_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D38=`*(r: var BKP_DATAR38_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR38_Fields

func D39*(r: BKP_DATAR39_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D39=`*(r: var BKP_DATAR39_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR39_Fields

func D40*(r: BKP_DATAR40_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D40=`*(r: var BKP_DATAR40_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR40_Fields

func D41*(r: BKP_DATAR41_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D41=`*(r: var BKP_DATAR41_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR41_Fields

func D42*(r: BKP_DATAR42_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `D42=`*(r: var BKP_DATAR42_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.BKP_DATAR42_Fields

func CAL*(r: BKP_OCTLR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 6)

proc `CAL=`*(r: var BKP_OCTLR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 6)
  tmp.setMask((val shl 0).masked(0 .. 6))
  r = tmp.BKP_OCTLR_Fields

func CCO*(r: BKP_OCTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `CCO=`*(r: var BKP_OCTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.BKP_OCTLR_Fields

func ASOE*(r: BKP_OCTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `ASOE=`*(r: var BKP_OCTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.BKP_OCTLR_Fields

func ASOS*(r: BKP_OCTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `ASOS=`*(r: var BKP_OCTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.BKP_OCTLR_Fields

func TPE*(r: BKP_TPCTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `TPE=`*(r: var BKP_TPCTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.BKP_TPCTLR_Fields

func TPAL*(r: BKP_TPCTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `TPAL=`*(r: var BKP_TPCTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.BKP_TPCTLR_Fields

proc `CTE=`*(r: var BKP_TPCSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.BKP_TPCSR_Fields

proc `CTI=`*(r: var BKP_TPCSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.BKP_TPCSR_Fields

func TPIE*(r: BKP_TPCSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `TPIE=`*(r: var BKP_TPCSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.BKP_TPCSR_Fields

func TEF*(r: BKP_TPCSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

func TIF*(r: BKP_TPCSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

type
  IWDG_CTLR_Fields* = distinct uint32
  IWDG_PSCR_Fields* = distinct uint32
  IWDG_RLDR_Fields* = distinct uint32
  IWDG_STATR_Fields* = distinct uint32

proc write*(reg: IWDG_CTLR_Type, val: IWDG_CTLR_Fields) {.inline.} =
  volatileStore(cast[ptr IWDG_CTLR_Fields](reg.loc), val)

proc write*(reg: IWDG_CTLR_Type, KEY: uint32 = 0) =
  var x: uint32
  x.setMask((KEY shl 0).masked(0 .. 15))
  reg.write x.IWDG_CTLR_Fields

proc read*(reg: IWDG_PSCR_Type): IWDG_PSCR_Fields {.inline.} =
  volatileLoad(cast[ptr IWDG_PSCR_Fields](reg.loc))

proc read*(reg: static IWDG_PSCR_Type): IWDG_PSCR_Fields {.inline.} =
  volatileLoad(cast[ptr IWDG_PSCR_Fields](reg.loc))

proc write*(reg: IWDG_PSCR_Type, val: IWDG_PSCR_Fields) {.inline.} =
  volatileStore(cast[ptr IWDG_PSCR_Fields](reg.loc), val)

proc write*(reg: IWDG_PSCR_Type, PR: uint32 = 0) =
  var x: uint32
  x.setMask((PR shl 0).masked(0 .. 2))
  reg.write x.IWDG_PSCR_Fields

template modifyIt*(reg: IWDG_PSCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: IWDG_RLDR_Type): IWDG_RLDR_Fields {.inline.} =
  volatileLoad(cast[ptr IWDG_RLDR_Fields](reg.loc))

proc read*(reg: static IWDG_RLDR_Type): IWDG_RLDR_Fields {.inline.} =
  volatileLoad(cast[ptr IWDG_RLDR_Fields](reg.loc))

proc write*(reg: IWDG_RLDR_Type, val: IWDG_RLDR_Fields) {.inline.} =
  volatileStore(cast[ptr IWDG_RLDR_Fields](reg.loc), val)

proc write*(reg: IWDG_RLDR_Type, RL: uint32 = 4095) =
  var x: uint32
  x.setMask((RL shl 0).masked(0 .. 11))
  reg.write x.IWDG_RLDR_Fields

template modifyIt*(reg: IWDG_RLDR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: IWDG_STATR_Type): IWDG_STATR_Fields {.inline.} =
  volatileLoad(cast[ptr IWDG_STATR_Fields](reg.loc))

proc read*(reg: static IWDG_STATR_Type): IWDG_STATR_Fields {.inline.} =
  volatileLoad(cast[ptr IWDG_STATR_Fields](reg.loc))

proc `KEY=`*(r: var IWDG_CTLR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.IWDG_CTLR_Fields

func PR*(r: IWDG_PSCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 2)

proc `PR=`*(r: var IWDG_PSCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 2)
  tmp.setMask((val shl 0).masked(0 .. 2))
  r = tmp.IWDG_PSCR_Fields

func RL*(r: IWDG_RLDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

proc `RL=`*(r: var IWDG_RLDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 11)
  tmp.setMask((val shl 0).masked(0 .. 11))
  r = tmp.IWDG_RLDR_Fields

func PVU*(r: IWDG_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func RVU*(r: IWDG_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

type
  WWDG_CTLR_Fields* = distinct uint32
  WWDG_CFGR_Fields* = distinct uint32
  WWDG_STATR_Fields* = distinct uint32

proc read*(reg: WWDG_CTLR_Type): WWDG_CTLR_Fields {.inline.} =
  volatileLoad(cast[ptr WWDG_CTLR_Fields](reg.loc))

proc read*(reg: static WWDG_CTLR_Type): WWDG_CTLR_Fields {.inline.} =
  volatileLoad(cast[ptr WWDG_CTLR_Fields](reg.loc))

proc write*(reg: WWDG_CTLR_Type, val: WWDG_CTLR_Fields) {.inline.} =
  volatileStore(cast[ptr WWDG_CTLR_Fields](reg.loc), val)

proc write*(reg: WWDG_CTLR_Type, T: uint32 = 127, WDGA: bool = false) =
  var x: uint32
  x.setMask((T shl 0).masked(0 .. 6))
  x.setMask((WDGA.uint32 shl 7).masked(7 .. 7))
  reg.write x.WWDG_CTLR_Fields

template modifyIt*(reg: WWDG_CTLR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: WWDG_CFGR_Type): WWDG_CFGR_Fields {.inline.} =
  volatileLoad(cast[ptr WWDG_CFGR_Fields](reg.loc))

proc read*(reg: static WWDG_CFGR_Type): WWDG_CFGR_Fields {.inline.} =
  volatileLoad(cast[ptr WWDG_CFGR_Fields](reg.loc))

proc write*(reg: WWDG_CFGR_Type, val: WWDG_CFGR_Fields) {.inline.} =
  volatileStore(cast[ptr WWDG_CFGR_Fields](reg.loc), val)

proc write*(reg: WWDG_CFGR_Type, W: uint32 = 127, WDGTB: uint32 = 0, EWI: bool = false) =
  var x: uint32
  x.setMask((W shl 0).masked(0 .. 6))
  x.setMask((WDGTB shl 7).masked(7 .. 8))
  x.setMask((EWI.uint32 shl 9).masked(9 .. 9))
  reg.write x.WWDG_CFGR_Fields

template modifyIt*(reg: WWDG_CFGR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: WWDG_STATR_Type): WWDG_STATR_Fields {.inline.} =
  volatileLoad(cast[ptr WWDG_STATR_Fields](reg.loc))

proc read*(reg: static WWDG_STATR_Type): WWDG_STATR_Fields {.inline.} =
  volatileLoad(cast[ptr WWDG_STATR_Fields](reg.loc))

proc write*(reg: WWDG_STATR_Type, val: WWDG_STATR_Fields) {.inline.} =
  volatileStore(cast[ptr WWDG_STATR_Fields](reg.loc), val)

proc write*(reg: WWDG_STATR_Type, WEIF: bool = false) =
  var x: uint32
  x.setMask((WEIF.uint32 shl 0).masked(0 .. 0))
  reg.write x.WWDG_STATR_Fields

template modifyIt*(reg: WWDG_STATR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func T*(r: WWDG_CTLR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 6)

proc `T=`*(r: var WWDG_CTLR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 6)
  tmp.setMask((val shl 0).masked(0 .. 6))
  r = tmp.WWDG_CTLR_Fields

func WDGA*(r: WWDG_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `WDGA=`*(r: var WWDG_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.WWDG_CTLR_Fields

func W*(r: WWDG_CFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 6)

proc `W=`*(r: var WWDG_CFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 6)
  tmp.setMask((val shl 0).masked(0 .. 6))
  r = tmp.WWDG_CFGR_Fields

func WDGTB*(r: WWDG_CFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(7 .. 8)

proc `WDGTB=`*(r: var WWDG_CFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 8)
  tmp.setMask((val shl 7).masked(7 .. 8))
  r = tmp.WWDG_CFGR_Fields

func EWI*(r: WWDG_CFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `EWI=`*(r: var WWDG_CFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.WWDG_CFGR_Fields

func WEIF*(r: WWDG_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `WEIF=`*(r: var WWDG_STATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.WWDG_STATR_Fields

type
  TIM1_CTLR1_Fields* = distinct uint32
  TIM1_CTLR2_Fields* = distinct uint32
  TIM1_SMCFGR_Fields* = distinct uint32
  TIM1_DMAINTENR_Fields* = distinct uint32
  TIM1_INTFR_Fields* = distinct uint32
  TIM1_SWEVGR_Fields* = distinct uint32
  TIM1_CHCTLR1_Output_Fields* = distinct uint32
  TIM1_CHCTLR1_Input_Fields* = distinct uint32
  TIM1_CHCTLR2_Output_Fields* = distinct uint32
  TIM1_CHCTLR2_Input_Fields* = distinct uint32
  TIM1_CCER_Fields* = distinct uint32
  TIM1_CNT_Fields* = distinct uint32
  TIM1_PSC_Fields* = distinct uint32
  TIM1_ATRLR_Fields* = distinct uint32
  TIM1_RPTCR_Fields* = distinct uint32
  TIM1_CH1CVR_Fields* = distinct uint32
  TIM1_CH2CVR_Fields* = distinct uint32
  TIM1_CH3CVR_Fields* = distinct uint32
  TIM1_CH4CVR_Fields* = distinct uint32
  TIM1_BDTR_Fields* = distinct uint32
  TIM1_DMACFGR_Fields* = distinct uint32
  TIM1_DMAADR_Fields* = distinct uint32

proc read*(reg: TIM1_CTLR1_Type): TIM1_CTLR1_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CTLR1_Fields](reg.loc))

proc read*(reg: static TIM1_CTLR1_Type): TIM1_CTLR1_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CTLR1_Fields](reg.loc))

proc write*(reg: TIM1_CTLR1_Type, val: TIM1_CTLR1_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_CTLR1_Fields](reg.loc), val)

proc write*(reg: TIM1_CTLR1_Type, CKD: uint32 = 0, ARPE: bool = false, CMS: uint32 = 0, DIR: bool = false, OPM: bool = false, URS: bool = false, UDIS: bool = false, CEN: bool = false) =
  var x: uint32
  x.setMask((CKD shl 8).masked(8 .. 9))
  x.setMask((ARPE.uint32 shl 7).masked(7 .. 7))
  x.setMask((CMS shl 5).masked(5 .. 6))
  x.setMask((DIR.uint32 shl 4).masked(4 .. 4))
  x.setMask((OPM.uint32 shl 3).masked(3 .. 3))
  x.setMask((URS.uint32 shl 2).masked(2 .. 2))
  x.setMask((UDIS.uint32 shl 1).masked(1 .. 1))
  x.setMask((CEN.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM1_CTLR1_Fields

template modifyIt*(reg: TIM1_CTLR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_CTLR2_Type): TIM1_CTLR2_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CTLR2_Fields](reg.loc))

proc read*(reg: static TIM1_CTLR2_Type): TIM1_CTLR2_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CTLR2_Fields](reg.loc))

proc write*(reg: TIM1_CTLR2_Type, val: TIM1_CTLR2_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_CTLR2_Fields](reg.loc), val)

proc write*(reg: TIM1_CTLR2_Type, OIS4: bool = false, OIS3N: bool = false, OIS3: bool = false, OIS2N: bool = false, OIS2: bool = false, OIS1N: bool = false, OIS1: bool = false, TI1S: bool = false, MMS: uint32 = 0, CCDS: bool = false, CCUS: bool = false, CCPC: bool = false) =
  var x: uint32
  x.setMask((OIS4.uint32 shl 14).masked(14 .. 14))
  x.setMask((OIS3N.uint32 shl 13).masked(13 .. 13))
  x.setMask((OIS3.uint32 shl 12).masked(12 .. 12))
  x.setMask((OIS2N.uint32 shl 11).masked(11 .. 11))
  x.setMask((OIS2.uint32 shl 10).masked(10 .. 10))
  x.setMask((OIS1N.uint32 shl 9).masked(9 .. 9))
  x.setMask((OIS1.uint32 shl 8).masked(8 .. 8))
  x.setMask((TI1S.uint32 shl 7).masked(7 .. 7))
  x.setMask((MMS shl 4).masked(4 .. 6))
  x.setMask((CCDS.uint32 shl 3).masked(3 .. 3))
  x.setMask((CCUS.uint32 shl 2).masked(2 .. 2))
  x.setMask((CCPC.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM1_CTLR2_Fields

template modifyIt*(reg: TIM1_CTLR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_SMCFGR_Type): TIM1_SMCFGR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_SMCFGR_Fields](reg.loc))

proc read*(reg: static TIM1_SMCFGR_Type): TIM1_SMCFGR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_SMCFGR_Fields](reg.loc))

proc write*(reg: TIM1_SMCFGR_Type, val: TIM1_SMCFGR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_SMCFGR_Fields](reg.loc), val)

proc write*(reg: TIM1_SMCFGR_Type, ETP: bool = false, ECE: bool = false, ETPS: uint32 = 0, ETF: uint32 = 0, MSM: bool = false, TS: uint32 = 0, SMS: uint32 = 0) =
  var x: uint32
  x.setMask((ETP.uint32 shl 15).masked(15 .. 15))
  x.setMask((ECE.uint32 shl 14).masked(14 .. 14))
  x.setMask((ETPS shl 12).masked(12 .. 13))
  x.setMask((ETF shl 8).masked(8 .. 11))
  x.setMask((MSM.uint32 shl 7).masked(7 .. 7))
  x.setMask((TS shl 4).masked(4 .. 6))
  x.setMask((SMS shl 0).masked(0 .. 2))
  reg.write x.TIM1_SMCFGR_Fields

template modifyIt*(reg: TIM1_SMCFGR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_DMAINTENR_Type): TIM1_DMAINTENR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_DMAINTENR_Fields](reg.loc))

proc read*(reg: static TIM1_DMAINTENR_Type): TIM1_DMAINTENR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_DMAINTENR_Fields](reg.loc))

proc write*(reg: TIM1_DMAINTENR_Type, val: TIM1_DMAINTENR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_DMAINTENR_Fields](reg.loc), val)

proc write*(reg: TIM1_DMAINTENR_Type, TDE: bool = false, COMDE: bool = false, CC4DE: bool = false, CC3DE: bool = false, CC2DE: bool = false, CC1DE: bool = false, UDE: bool = false, BIE: bool = false, TIE: bool = false, COMIE: bool = false, CC4IE: bool = false, CC3IE: bool = false, CC2IE: bool = false, CC1IE: bool = false, UIE: bool = false) =
  var x: uint32
  x.setMask((TDE.uint32 shl 14).masked(14 .. 14))
  x.setMask((COMDE.uint32 shl 13).masked(13 .. 13))
  x.setMask((CC4DE.uint32 shl 12).masked(12 .. 12))
  x.setMask((CC3DE.uint32 shl 11).masked(11 .. 11))
  x.setMask((CC2DE.uint32 shl 10).masked(10 .. 10))
  x.setMask((CC1DE.uint32 shl 9).masked(9 .. 9))
  x.setMask((UDE.uint32 shl 8).masked(8 .. 8))
  x.setMask((BIE.uint32 shl 7).masked(7 .. 7))
  x.setMask((TIE.uint32 shl 6).masked(6 .. 6))
  x.setMask((COMIE.uint32 shl 5).masked(5 .. 5))
  x.setMask((CC4IE.uint32 shl 4).masked(4 .. 4))
  x.setMask((CC3IE.uint32 shl 3).masked(3 .. 3))
  x.setMask((CC2IE.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC1IE.uint32 shl 1).masked(1 .. 1))
  x.setMask((UIE.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM1_DMAINTENR_Fields

template modifyIt*(reg: TIM1_DMAINTENR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_INTFR_Type): TIM1_INTFR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_INTFR_Fields](reg.loc))

proc read*(reg: static TIM1_INTFR_Type): TIM1_INTFR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_INTFR_Fields](reg.loc))

proc write*(reg: TIM1_INTFR_Type, val: TIM1_INTFR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_INTFR_Fields](reg.loc), val)

proc write*(reg: TIM1_INTFR_Type, CC4OF: bool = false, CC3OF: bool = false, CC2OF: bool = false, CC1OF: bool = false, BIF: bool = false, TIF: bool = false, COMIF: bool = false, CC4IF: bool = false, CC3IF: bool = false, CC2IF: bool = false, CC1IF: bool = false, UIF: bool = false) =
  var x: uint32
  x.setMask((CC4OF.uint32 shl 12).masked(12 .. 12))
  x.setMask((CC3OF.uint32 shl 11).masked(11 .. 11))
  x.setMask((CC2OF.uint32 shl 10).masked(10 .. 10))
  x.setMask((CC1OF.uint32 shl 9).masked(9 .. 9))
  x.setMask((BIF.uint32 shl 7).masked(7 .. 7))
  x.setMask((TIF.uint32 shl 6).masked(6 .. 6))
  x.setMask((COMIF.uint32 shl 5).masked(5 .. 5))
  x.setMask((CC4IF.uint32 shl 4).masked(4 .. 4))
  x.setMask((CC3IF.uint32 shl 3).masked(3 .. 3))
  x.setMask((CC2IF.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC1IF.uint32 shl 1).masked(1 .. 1))
  x.setMask((UIF.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM1_INTFR_Fields

template modifyIt*(reg: TIM1_INTFR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc write*(reg: TIM1_SWEVGR_Type, val: TIM1_SWEVGR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_SWEVGR_Fields](reg.loc), val)

proc write*(reg: TIM1_SWEVGR_Type, BG: bool = false, TG: bool = false, COMG: bool = false, CC4G: bool = false, CC3G: bool = false, CC2G: bool = false, CC1G: bool = false, UG: bool = false) =
  var x: uint32
  x.setMask((BG.uint32 shl 7).masked(7 .. 7))
  x.setMask((TG.uint32 shl 6).masked(6 .. 6))
  x.setMask((COMG.uint32 shl 5).masked(5 .. 5))
  x.setMask((CC4G.uint32 shl 4).masked(4 .. 4))
  x.setMask((CC3G.uint32 shl 3).masked(3 .. 3))
  x.setMask((CC2G.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC1G.uint32 shl 1).masked(1 .. 1))
  x.setMask((UG.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM1_SWEVGR_Fields

proc read*(reg: TIM1_CHCTLR1_Output_Type): TIM1_CHCTLR1_Output_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CHCTLR1_Output_Fields](reg.loc))

proc read*(reg: static TIM1_CHCTLR1_Output_Type): TIM1_CHCTLR1_Output_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CHCTLR1_Output_Fields](reg.loc))

proc write*(reg: TIM1_CHCTLR1_Output_Type, val: TIM1_CHCTLR1_Output_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_CHCTLR1_Output_Fields](reg.loc), val)

proc write*(reg: TIM1_CHCTLR1_Output_Type, OC2CE: bool = false, OC2M: uint32 = 0, OC2PE: bool = false, OC2FE: bool = false, CC2S: uint32 = 0, OC1CE: bool = false, OC1M: uint32 = 0, OC1PE: bool = false, OC1FE: bool = false, CC1S: uint32 = 0) =
  var x: uint32
  x.setMask((OC2CE.uint32 shl 15).masked(15 .. 15))
  x.setMask((OC2M shl 12).masked(12 .. 14))
  x.setMask((OC2PE.uint32 shl 11).masked(11 .. 11))
  x.setMask((OC2FE.uint32 shl 10).masked(10 .. 10))
  x.setMask((CC2S shl 8).masked(8 .. 9))
  x.setMask((OC1CE.uint32 shl 7).masked(7 .. 7))
  x.setMask((OC1M shl 4).masked(4 .. 6))
  x.setMask((OC1PE.uint32 shl 3).masked(3 .. 3))
  x.setMask((OC1FE.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC1S shl 0).masked(0 .. 1))
  reg.write x.TIM1_CHCTLR1_Output_Fields

template modifyIt*(reg: TIM1_CHCTLR1_Output_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_CHCTLR1_Input_Type): TIM1_CHCTLR1_Input_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CHCTLR1_Input_Fields](reg.loc))

proc read*(reg: static TIM1_CHCTLR1_Input_Type): TIM1_CHCTLR1_Input_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CHCTLR1_Input_Fields](reg.loc))

proc write*(reg: TIM1_CHCTLR1_Input_Type, val: TIM1_CHCTLR1_Input_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_CHCTLR1_Input_Fields](reg.loc), val)

proc write*(reg: TIM1_CHCTLR1_Input_Type, IC2F: uint32 = 0, IC2PCS: uint32 = 0, CC2S: uint32 = 0, IC1F: uint32 = 0, IC1PSC: uint32 = 0, CC1S: uint32 = 0) =
  var x: uint32
  x.setMask((IC2F shl 12).masked(12 .. 15))
  x.setMask((IC2PCS shl 10).masked(10 .. 11))
  x.setMask((CC2S shl 8).masked(8 .. 9))
  x.setMask((IC1F shl 4).masked(4 .. 7))
  x.setMask((IC1PSC shl 2).masked(2 .. 3))
  x.setMask((CC1S shl 0).masked(0 .. 1))
  reg.write x.TIM1_CHCTLR1_Input_Fields

template modifyIt*(reg: TIM1_CHCTLR1_Input_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_CHCTLR2_Output_Type): TIM1_CHCTLR2_Output_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CHCTLR2_Output_Fields](reg.loc))

proc read*(reg: static TIM1_CHCTLR2_Output_Type): TIM1_CHCTLR2_Output_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CHCTLR2_Output_Fields](reg.loc))

proc write*(reg: TIM1_CHCTLR2_Output_Type, val: TIM1_CHCTLR2_Output_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_CHCTLR2_Output_Fields](reg.loc), val)

proc write*(reg: TIM1_CHCTLR2_Output_Type, OC4CE: bool = false, OC4M: uint32 = 0, OC4PE: bool = false, OC4FE: bool = false, CC4S: uint32 = 0, OC3CE: bool = false, OC3M: uint32 = 0, OC3PE: bool = false, OC3FE: bool = false, CC3S: uint32 = 0) =
  var x: uint32
  x.setMask((OC4CE.uint32 shl 15).masked(15 .. 15))
  x.setMask((OC4M shl 12).masked(12 .. 14))
  x.setMask((OC4PE.uint32 shl 11).masked(11 .. 11))
  x.setMask((OC4FE.uint32 shl 10).masked(10 .. 10))
  x.setMask((CC4S shl 8).masked(8 .. 9))
  x.setMask((OC3CE.uint32 shl 7).masked(7 .. 7))
  x.setMask((OC3M shl 4).masked(4 .. 6))
  x.setMask((OC3PE.uint32 shl 3).masked(3 .. 3))
  x.setMask((OC3FE.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC3S shl 0).masked(0 .. 1))
  reg.write x.TIM1_CHCTLR2_Output_Fields

template modifyIt*(reg: TIM1_CHCTLR2_Output_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_CHCTLR2_Input_Type): TIM1_CHCTLR2_Input_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CHCTLR2_Input_Fields](reg.loc))

proc read*(reg: static TIM1_CHCTLR2_Input_Type): TIM1_CHCTLR2_Input_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CHCTLR2_Input_Fields](reg.loc))

proc write*(reg: TIM1_CHCTLR2_Input_Type, val: TIM1_CHCTLR2_Input_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_CHCTLR2_Input_Fields](reg.loc), val)

proc write*(reg: TIM1_CHCTLR2_Input_Type, IC4F: uint32 = 0, IC4PSC: uint32 = 0, CC4S: uint32 = 0, IC3F: uint32 = 0, IC3PSC: uint32 = 0, CC3S: uint32 = 0) =
  var x: uint32
  x.setMask((IC4F shl 12).masked(12 .. 15))
  x.setMask((IC4PSC shl 10).masked(10 .. 11))
  x.setMask((CC4S shl 8).masked(8 .. 9))
  x.setMask((IC3F shl 4).masked(4 .. 7))
  x.setMask((IC3PSC shl 2).masked(2 .. 3))
  x.setMask((CC3S shl 0).masked(0 .. 1))
  reg.write x.TIM1_CHCTLR2_Input_Fields

template modifyIt*(reg: TIM1_CHCTLR2_Input_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_CCER_Type): TIM1_CCER_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CCER_Fields](reg.loc))

proc read*(reg: static TIM1_CCER_Type): TIM1_CCER_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CCER_Fields](reg.loc))

proc write*(reg: TIM1_CCER_Type, val: TIM1_CCER_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_CCER_Fields](reg.loc), val)

proc write*(reg: TIM1_CCER_Type, CC4P: bool = false, CC4E: bool = false, CC3NP: bool = false, CC3NE: bool = false, CC3P: bool = false, CC3E: bool = false, CC2NP: bool = false, CC2NE: bool = false, CC2P: bool = false, CC2E: bool = false, CC1NP: bool = false, CC1NE: bool = false, CC1P: bool = false, CC1E: bool = false) =
  var x: uint32
  x.setMask((CC4P.uint32 shl 13).masked(13 .. 13))
  x.setMask((CC4E.uint32 shl 12).masked(12 .. 12))
  x.setMask((CC3NP.uint32 shl 11).masked(11 .. 11))
  x.setMask((CC3NE.uint32 shl 10).masked(10 .. 10))
  x.setMask((CC3P.uint32 shl 9).masked(9 .. 9))
  x.setMask((CC3E.uint32 shl 8).masked(8 .. 8))
  x.setMask((CC2NP.uint32 shl 7).masked(7 .. 7))
  x.setMask((CC2NE.uint32 shl 6).masked(6 .. 6))
  x.setMask((CC2P.uint32 shl 5).masked(5 .. 5))
  x.setMask((CC2E.uint32 shl 4).masked(4 .. 4))
  x.setMask((CC1NP.uint32 shl 3).masked(3 .. 3))
  x.setMask((CC1NE.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC1P.uint32 shl 1).masked(1 .. 1))
  x.setMask((CC1E.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM1_CCER_Fields

template modifyIt*(reg: TIM1_CCER_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_CNT_Type): TIM1_CNT_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CNT_Fields](reg.loc))

proc read*(reg: static TIM1_CNT_Type): TIM1_CNT_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CNT_Fields](reg.loc))

proc write*(reg: TIM1_CNT_Type, val: TIM1_CNT_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_CNT_Fields](reg.loc), val)

proc write*(reg: TIM1_CNT_Type, CNT: uint32 = 0) =
  var x: uint32
  x.setMask((CNT shl 0).masked(0 .. 15))
  reg.write x.TIM1_CNT_Fields

template modifyIt*(reg: TIM1_CNT_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_PSC_Type): TIM1_PSC_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_PSC_Fields](reg.loc))

proc read*(reg: static TIM1_PSC_Type): TIM1_PSC_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_PSC_Fields](reg.loc))

proc write*(reg: TIM1_PSC_Type, val: TIM1_PSC_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_PSC_Fields](reg.loc), val)

proc write*(reg: TIM1_PSC_Type, PSC: uint32 = 0) =
  var x: uint32
  x.setMask((PSC shl 0).masked(0 .. 15))
  reg.write x.TIM1_PSC_Fields

template modifyIt*(reg: TIM1_PSC_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_ATRLR_Type): TIM1_ATRLR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_ATRLR_Fields](reg.loc))

proc read*(reg: static TIM1_ATRLR_Type): TIM1_ATRLR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_ATRLR_Fields](reg.loc))

proc write*(reg: TIM1_ATRLR_Type, val: TIM1_ATRLR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_ATRLR_Fields](reg.loc), val)

proc write*(reg: TIM1_ATRLR_Type, ATRLR: uint32 = 0) =
  var x: uint32
  x.setMask((ATRLR shl 0).masked(0 .. 15))
  reg.write x.TIM1_ATRLR_Fields

template modifyIt*(reg: TIM1_ATRLR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_RPTCR_Type): TIM1_RPTCR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_RPTCR_Fields](reg.loc))

proc read*(reg: static TIM1_RPTCR_Type): TIM1_RPTCR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_RPTCR_Fields](reg.loc))

proc write*(reg: TIM1_RPTCR_Type, val: TIM1_RPTCR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_RPTCR_Fields](reg.loc), val)

proc write*(reg: TIM1_RPTCR_Type, RPTCR: uint32 = 0) =
  var x: uint32
  x.setMask((RPTCR shl 0).masked(0 .. 7))
  reg.write x.TIM1_RPTCR_Fields

template modifyIt*(reg: TIM1_RPTCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_CH1CVR_Type): TIM1_CH1CVR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CH1CVR_Fields](reg.loc))

proc read*(reg: static TIM1_CH1CVR_Type): TIM1_CH1CVR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CH1CVR_Fields](reg.loc))

proc write*(reg: TIM1_CH1CVR_Type, val: TIM1_CH1CVR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_CH1CVR_Fields](reg.loc), val)

proc write*(reg: TIM1_CH1CVR_Type, CH1CVR: uint32 = 0) =
  var x: uint32
  x.setMask((CH1CVR shl 0).masked(0 .. 15))
  reg.write x.TIM1_CH1CVR_Fields

template modifyIt*(reg: TIM1_CH1CVR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_CH2CVR_Type): TIM1_CH2CVR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CH2CVR_Fields](reg.loc))

proc read*(reg: static TIM1_CH2CVR_Type): TIM1_CH2CVR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CH2CVR_Fields](reg.loc))

proc write*(reg: TIM1_CH2CVR_Type, val: TIM1_CH2CVR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_CH2CVR_Fields](reg.loc), val)

proc write*(reg: TIM1_CH2CVR_Type, CH2CVR: uint32 = 0) =
  var x: uint32
  x.setMask((CH2CVR shl 0).masked(0 .. 15))
  reg.write x.TIM1_CH2CVR_Fields

template modifyIt*(reg: TIM1_CH2CVR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_CH3CVR_Type): TIM1_CH3CVR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CH3CVR_Fields](reg.loc))

proc read*(reg: static TIM1_CH3CVR_Type): TIM1_CH3CVR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CH3CVR_Fields](reg.loc))

proc write*(reg: TIM1_CH3CVR_Type, val: TIM1_CH3CVR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_CH3CVR_Fields](reg.loc), val)

proc write*(reg: TIM1_CH3CVR_Type, CH3CVR: uint32 = 0) =
  var x: uint32
  x.setMask((CH3CVR shl 0).masked(0 .. 15))
  reg.write x.TIM1_CH3CVR_Fields

template modifyIt*(reg: TIM1_CH3CVR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_CH4CVR_Type): TIM1_CH4CVR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CH4CVR_Fields](reg.loc))

proc read*(reg: static TIM1_CH4CVR_Type): TIM1_CH4CVR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CH4CVR_Fields](reg.loc))

proc write*(reg: TIM1_CH4CVR_Type, val: TIM1_CH4CVR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_CH4CVR_Fields](reg.loc), val)

proc write*(reg: TIM1_CH4CVR_Type, CH4CVR: uint32 = 0) =
  var x: uint32
  x.setMask((CH4CVR shl 0).masked(0 .. 15))
  reg.write x.TIM1_CH4CVR_Fields

template modifyIt*(reg: TIM1_CH4CVR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_BDTR_Type): TIM1_BDTR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_BDTR_Fields](reg.loc))

proc read*(reg: static TIM1_BDTR_Type): TIM1_BDTR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_BDTR_Fields](reg.loc))

proc write*(reg: TIM1_BDTR_Type, val: TIM1_BDTR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_BDTR_Fields](reg.loc), val)

proc write*(reg: TIM1_BDTR_Type, MOE: bool = false, AOE: bool = false, BKP: bool = false, BKE: bool = false, OSSR: bool = false, OSSI: bool = false, LOCK: uint32 = 0, DTG: uint32 = 0) =
  var x: uint32
  x.setMask((MOE.uint32 shl 15).masked(15 .. 15))
  x.setMask((AOE.uint32 shl 14).masked(14 .. 14))
  x.setMask((BKP.uint32 shl 13).masked(13 .. 13))
  x.setMask((BKE.uint32 shl 12).masked(12 .. 12))
  x.setMask((OSSR.uint32 shl 11).masked(11 .. 11))
  x.setMask((OSSI.uint32 shl 10).masked(10 .. 10))
  x.setMask((LOCK shl 8).masked(8 .. 9))
  x.setMask((DTG shl 0).masked(0 .. 7))
  reg.write x.TIM1_BDTR_Fields

template modifyIt*(reg: TIM1_BDTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_DMACFGR_Type): TIM1_DMACFGR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_DMACFGR_Fields](reg.loc))

proc read*(reg: static TIM1_DMACFGR_Type): TIM1_DMACFGR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_DMACFGR_Fields](reg.loc))

proc write*(reg: TIM1_DMACFGR_Type, val: TIM1_DMACFGR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_DMACFGR_Fields](reg.loc), val)

proc write*(reg: TIM1_DMACFGR_Type, DBL: uint32 = 0, DBA: uint32 = 0) =
  var x: uint32
  x.setMask((DBL shl 8).masked(8 .. 12))
  x.setMask((DBA shl 0).masked(0 .. 4))
  reg.write x.TIM1_DMACFGR_Fields

template modifyIt*(reg: TIM1_DMACFGR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_DMAADR_Type): TIM1_DMAADR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_DMAADR_Fields](reg.loc))

proc read*(reg: static TIM1_DMAADR_Type): TIM1_DMAADR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_DMAADR_Fields](reg.loc))

proc write*(reg: TIM1_DMAADR_Type, val: TIM1_DMAADR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_DMAADR_Fields](reg.loc), val)

proc write*(reg: TIM1_DMAADR_Type, DMAADR: uint32 = 0) =
  var x: uint32
  x.setMask((DMAADR shl 0).masked(0 .. 15))
  reg.write x.TIM1_DMAADR_Fields

template modifyIt*(reg: TIM1_DMAADR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func CKD*(r: TIM1_CTLR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CKD=`*(r: var TIM1_CTLR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM1_CTLR1_Fields

func ARPE*(r: TIM1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `ARPE=`*(r: var TIM1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM1_CTLR1_Fields

func CMS*(r: TIM1_CTLR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(5 .. 6)

proc `CMS=`*(r: var TIM1_CTLR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 6)
  tmp.setMask((val shl 5).masked(5 .. 6))
  r = tmp.TIM1_CTLR1_Fields

func DIR*(r: TIM1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `DIR=`*(r: var TIM1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.TIM1_CTLR1_Fields

func OPM*(r: TIM1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `OPM=`*(r: var TIM1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM1_CTLR1_Fields

func URS*(r: TIM1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `URS=`*(r: var TIM1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM1_CTLR1_Fields

func UDIS*(r: TIM1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `UDIS=`*(r: var TIM1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM1_CTLR1_Fields

func CEN*(r: TIM1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CEN=`*(r: var TIM1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM1_CTLR1_Fields

func OIS4*(r: TIM1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `OIS4=`*(r: var TIM1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.TIM1_CTLR2_Fields

func OIS3N*(r: TIM1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `OIS3N=`*(r: var TIM1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.TIM1_CTLR2_Fields

func OIS3*(r: TIM1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `OIS3=`*(r: var TIM1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.TIM1_CTLR2_Fields

func OIS2N*(r: TIM1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `OIS2N=`*(r: var TIM1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM1_CTLR2_Fields

func OIS2*(r: TIM1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `OIS2=`*(r: var TIM1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.TIM1_CTLR2_Fields

func OIS1N*(r: TIM1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `OIS1N=`*(r: var TIM1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.TIM1_CTLR2_Fields

func OIS1*(r: TIM1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `OIS1=`*(r: var TIM1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.TIM1_CTLR2_Fields

func TI1S*(r: TIM1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TI1S=`*(r: var TIM1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM1_CTLR2_Fields

func MMS*(r: TIM1_CTLR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `MMS=`*(r: var TIM1_CTLR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.TIM1_CTLR2_Fields

func CCDS*(r: TIM1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CCDS=`*(r: var TIM1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM1_CTLR2_Fields

func CCUS*(r: TIM1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `CCUS=`*(r: var TIM1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM1_CTLR2_Fields

func CCPC*(r: TIM1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CCPC=`*(r: var TIM1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM1_CTLR2_Fields

func ETP*(r: TIM1_SMCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `ETP=`*(r: var TIM1_SMCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.TIM1_SMCFGR_Fields

func ECE*(r: TIM1_SMCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `ECE=`*(r: var TIM1_SMCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.TIM1_SMCFGR_Fields

func ETPS*(r: TIM1_SMCFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 13)

proc `ETPS=`*(r: var TIM1_SMCFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.TIM1_SMCFGR_Fields

func ETF*(r: TIM1_SMCFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

proc `ETF=`*(r: var TIM1_SMCFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 11)
  tmp.setMask((val shl 8).masked(8 .. 11))
  r = tmp.TIM1_SMCFGR_Fields

func MSM*(r: TIM1_SMCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `MSM=`*(r: var TIM1_SMCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM1_SMCFGR_Fields

func TS*(r: TIM1_SMCFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `TS=`*(r: var TIM1_SMCFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.TIM1_SMCFGR_Fields

func SMS*(r: TIM1_SMCFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 2)

proc `SMS=`*(r: var TIM1_SMCFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 2)
  tmp.setMask((val shl 0).masked(0 .. 2))
  r = tmp.TIM1_SMCFGR_Fields

func TDE*(r: TIM1_DMAINTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `TDE=`*(r: var TIM1_DMAINTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.TIM1_DMAINTENR_Fields

func COMDE*(r: TIM1_DMAINTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `COMDE=`*(r: var TIM1_DMAINTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.TIM1_DMAINTENR_Fields

func CC4DE*(r: TIM1_DMAINTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `CC4DE=`*(r: var TIM1_DMAINTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.TIM1_DMAINTENR_Fields

func CC3DE*(r: TIM1_DMAINTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `CC3DE=`*(r: var TIM1_DMAINTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM1_DMAINTENR_Fields

func CC2DE*(r: TIM1_DMAINTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `CC2DE=`*(r: var TIM1_DMAINTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.TIM1_DMAINTENR_Fields

func CC1DE*(r: TIM1_DMAINTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `CC1DE=`*(r: var TIM1_DMAINTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.TIM1_DMAINTENR_Fields

func UDE*(r: TIM1_DMAINTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `UDE=`*(r: var TIM1_DMAINTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.TIM1_DMAINTENR_Fields

func BIE*(r: TIM1_DMAINTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `BIE=`*(r: var TIM1_DMAINTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM1_DMAINTENR_Fields

func TIE*(r: TIM1_DMAINTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `TIE=`*(r: var TIM1_DMAINTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.TIM1_DMAINTENR_Fields

func COMIE*(r: TIM1_DMAINTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `COMIE=`*(r: var TIM1_DMAINTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.TIM1_DMAINTENR_Fields

func CC4IE*(r: TIM1_DMAINTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `CC4IE=`*(r: var TIM1_DMAINTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.TIM1_DMAINTENR_Fields

func CC3IE*(r: TIM1_DMAINTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CC3IE=`*(r: var TIM1_DMAINTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM1_DMAINTENR_Fields

func CC2IE*(r: TIM1_DMAINTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `CC2IE=`*(r: var TIM1_DMAINTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM1_DMAINTENR_Fields

func CC1IE*(r: TIM1_DMAINTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CC1IE=`*(r: var TIM1_DMAINTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM1_DMAINTENR_Fields

func UIE*(r: TIM1_DMAINTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `UIE=`*(r: var TIM1_DMAINTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM1_DMAINTENR_Fields

func CC4OF*(r: TIM1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `CC4OF=`*(r: var TIM1_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.TIM1_INTFR_Fields

func CC3OF*(r: TIM1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `CC3OF=`*(r: var TIM1_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM1_INTFR_Fields

func CC2OF*(r: TIM1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `CC2OF=`*(r: var TIM1_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.TIM1_INTFR_Fields

func CC1OF*(r: TIM1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `CC1OF=`*(r: var TIM1_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.TIM1_INTFR_Fields

func BIF*(r: TIM1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `BIF=`*(r: var TIM1_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM1_INTFR_Fields

func TIF*(r: TIM1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `TIF=`*(r: var TIM1_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.TIM1_INTFR_Fields

func COMIF*(r: TIM1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `COMIF=`*(r: var TIM1_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.TIM1_INTFR_Fields

func CC4IF*(r: TIM1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `CC4IF=`*(r: var TIM1_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.TIM1_INTFR_Fields

func CC3IF*(r: TIM1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CC3IF=`*(r: var TIM1_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM1_INTFR_Fields

func CC2IF*(r: TIM1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `CC2IF=`*(r: var TIM1_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM1_INTFR_Fields

func CC1IF*(r: TIM1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CC1IF=`*(r: var TIM1_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM1_INTFR_Fields

func UIF*(r: TIM1_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `UIF=`*(r: var TIM1_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM1_INTFR_Fields

proc `BG=`*(r: var TIM1_SWEVGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM1_SWEVGR_Fields

proc `TG=`*(r: var TIM1_SWEVGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.TIM1_SWEVGR_Fields

proc `COMG=`*(r: var TIM1_SWEVGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.TIM1_SWEVGR_Fields

proc `CC4G=`*(r: var TIM1_SWEVGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.TIM1_SWEVGR_Fields

proc `CC3G=`*(r: var TIM1_SWEVGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM1_SWEVGR_Fields

proc `CC2G=`*(r: var TIM1_SWEVGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM1_SWEVGR_Fields

proc `CC1G=`*(r: var TIM1_SWEVGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM1_SWEVGR_Fields

proc `UG=`*(r: var TIM1_SWEVGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM1_SWEVGR_Fields

func OC2CE*(r: TIM1_CHCTLR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `OC2CE=`*(r: var TIM1_CHCTLR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.TIM1_CHCTLR1_Output_Fields

func OC2M*(r: TIM1_CHCTLR1_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 14)

proc `OC2M=`*(r: var TIM1_CHCTLR1_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 14)
  tmp.setMask((val shl 12).masked(12 .. 14))
  r = tmp.TIM1_CHCTLR1_Output_Fields

func OC2PE*(r: TIM1_CHCTLR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `OC2PE=`*(r: var TIM1_CHCTLR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM1_CHCTLR1_Output_Fields

func OC2FE*(r: TIM1_CHCTLR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `OC2FE=`*(r: var TIM1_CHCTLR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.TIM1_CHCTLR1_Output_Fields

func CC2S*(r: TIM1_CHCTLR1_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CC2S=`*(r: var TIM1_CHCTLR1_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM1_CHCTLR1_Output_Fields

func OC1CE*(r: TIM1_CHCTLR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `OC1CE=`*(r: var TIM1_CHCTLR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM1_CHCTLR1_Output_Fields

func OC1M*(r: TIM1_CHCTLR1_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `OC1M=`*(r: var TIM1_CHCTLR1_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.TIM1_CHCTLR1_Output_Fields

func OC1PE*(r: TIM1_CHCTLR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `OC1PE=`*(r: var TIM1_CHCTLR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM1_CHCTLR1_Output_Fields

func OC1FE*(r: TIM1_CHCTLR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `OC1FE=`*(r: var TIM1_CHCTLR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM1_CHCTLR1_Output_Fields

func CC1S*(r: TIM1_CHCTLR1_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `CC1S=`*(r: var TIM1_CHCTLR1_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.TIM1_CHCTLR1_Output_Fields

func IC2F*(r: TIM1_CHCTLR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 15)

proc `IC2F=`*(r: var TIM1_CHCTLR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 15)
  tmp.setMask((val shl 12).masked(12 .. 15))
  r = tmp.TIM1_CHCTLR1_Input_Fields

func IC2PCS*(r: TIM1_CHCTLR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `IC2PCS=`*(r: var TIM1_CHCTLR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.TIM1_CHCTLR1_Input_Fields

func CC2S*(r: TIM1_CHCTLR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CC2S=`*(r: var TIM1_CHCTLR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM1_CHCTLR1_Input_Fields

func IC1F*(r: TIM1_CHCTLR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `IC1F=`*(r: var TIM1_CHCTLR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.TIM1_CHCTLR1_Input_Fields

func IC1PSC*(r: TIM1_CHCTLR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `IC1PSC=`*(r: var TIM1_CHCTLR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.TIM1_CHCTLR1_Input_Fields

func CC1S*(r: TIM1_CHCTLR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `CC1S=`*(r: var TIM1_CHCTLR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.TIM1_CHCTLR1_Input_Fields

func OC4CE*(r: TIM1_CHCTLR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `OC4CE=`*(r: var TIM1_CHCTLR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.TIM1_CHCTLR2_Output_Fields

func OC4M*(r: TIM1_CHCTLR2_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 14)

proc `OC4M=`*(r: var TIM1_CHCTLR2_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 14)
  tmp.setMask((val shl 12).masked(12 .. 14))
  r = tmp.TIM1_CHCTLR2_Output_Fields

func OC4PE*(r: TIM1_CHCTLR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `OC4PE=`*(r: var TIM1_CHCTLR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM1_CHCTLR2_Output_Fields

func OC4FE*(r: TIM1_CHCTLR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `OC4FE=`*(r: var TIM1_CHCTLR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.TIM1_CHCTLR2_Output_Fields

func CC4S*(r: TIM1_CHCTLR2_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CC4S=`*(r: var TIM1_CHCTLR2_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM1_CHCTLR2_Output_Fields

func OC3CE*(r: TIM1_CHCTLR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `OC3CE=`*(r: var TIM1_CHCTLR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM1_CHCTLR2_Output_Fields

func OC3M*(r: TIM1_CHCTLR2_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `OC3M=`*(r: var TIM1_CHCTLR2_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.TIM1_CHCTLR2_Output_Fields

func OC3PE*(r: TIM1_CHCTLR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `OC3PE=`*(r: var TIM1_CHCTLR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM1_CHCTLR2_Output_Fields

func OC3FE*(r: TIM1_CHCTLR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `OC3FE=`*(r: var TIM1_CHCTLR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM1_CHCTLR2_Output_Fields

func CC3S*(r: TIM1_CHCTLR2_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `CC3S=`*(r: var TIM1_CHCTLR2_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.TIM1_CHCTLR2_Output_Fields

func IC4F*(r: TIM1_CHCTLR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 15)

proc `IC4F=`*(r: var TIM1_CHCTLR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 15)
  tmp.setMask((val shl 12).masked(12 .. 15))
  r = tmp.TIM1_CHCTLR2_Input_Fields

func IC4PSC*(r: TIM1_CHCTLR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `IC4PSC=`*(r: var TIM1_CHCTLR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.TIM1_CHCTLR2_Input_Fields

func CC4S*(r: TIM1_CHCTLR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CC4S=`*(r: var TIM1_CHCTLR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM1_CHCTLR2_Input_Fields

func IC3F*(r: TIM1_CHCTLR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `IC3F=`*(r: var TIM1_CHCTLR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.TIM1_CHCTLR2_Input_Fields

func IC3PSC*(r: TIM1_CHCTLR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `IC3PSC=`*(r: var TIM1_CHCTLR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.TIM1_CHCTLR2_Input_Fields

func CC3S*(r: TIM1_CHCTLR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `CC3S=`*(r: var TIM1_CHCTLR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.TIM1_CHCTLR2_Input_Fields

func CC4P*(r: TIM1_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `CC4P=`*(r: var TIM1_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.TIM1_CCER_Fields

func CC4E*(r: TIM1_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `CC4E=`*(r: var TIM1_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.TIM1_CCER_Fields

func CC3NP*(r: TIM1_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `CC3NP=`*(r: var TIM1_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM1_CCER_Fields

func CC3NE*(r: TIM1_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `CC3NE=`*(r: var TIM1_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.TIM1_CCER_Fields

func CC3P*(r: TIM1_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `CC3P=`*(r: var TIM1_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.TIM1_CCER_Fields

func CC3E*(r: TIM1_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `CC3E=`*(r: var TIM1_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.TIM1_CCER_Fields

func CC2NP*(r: TIM1_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `CC2NP=`*(r: var TIM1_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM1_CCER_Fields

func CC2NE*(r: TIM1_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `CC2NE=`*(r: var TIM1_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.TIM1_CCER_Fields

func CC2P*(r: TIM1_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `CC2P=`*(r: var TIM1_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.TIM1_CCER_Fields

func CC2E*(r: TIM1_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `CC2E=`*(r: var TIM1_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.TIM1_CCER_Fields

func CC1NP*(r: TIM1_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CC1NP=`*(r: var TIM1_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM1_CCER_Fields

func CC1NE*(r: TIM1_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `CC1NE=`*(r: var TIM1_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM1_CCER_Fields

func CC1P*(r: TIM1_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CC1P=`*(r: var TIM1_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM1_CCER_Fields

func CC1E*(r: TIM1_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CC1E=`*(r: var TIM1_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM1_CCER_Fields

func CNT*(r: TIM1_CNT_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CNT=`*(r: var TIM1_CNT_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM1_CNT_Fields

func PSC*(r: TIM1_PSC_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `PSC=`*(r: var TIM1_PSC_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM1_PSC_Fields

func ATRLR*(r: TIM1_ATRLR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `ATRLR=`*(r: var TIM1_ATRLR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM1_ATRLR_Fields

func RPTCR*(r: TIM1_RPTCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `RPTCR=`*(r: var TIM1_RPTCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.TIM1_RPTCR_Fields

func CH1CVR*(r: TIM1_CH1CVR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CH1CVR=`*(r: var TIM1_CH1CVR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM1_CH1CVR_Fields

func CH2CVR*(r: TIM1_CH2CVR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CH2CVR=`*(r: var TIM1_CH2CVR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM1_CH2CVR_Fields

func CH3CVR*(r: TIM1_CH3CVR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CH3CVR=`*(r: var TIM1_CH3CVR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM1_CH3CVR_Fields

func CH4CVR*(r: TIM1_CH4CVR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CH4CVR=`*(r: var TIM1_CH4CVR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM1_CH4CVR_Fields

func MOE*(r: TIM1_BDTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `MOE=`*(r: var TIM1_BDTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.TIM1_BDTR_Fields

func AOE*(r: TIM1_BDTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `AOE=`*(r: var TIM1_BDTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.TIM1_BDTR_Fields

func BKPField*(r: TIM1_BDTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `BKPField=`*(r: var TIM1_BDTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.TIM1_BDTR_Fields

func BKE*(r: TIM1_BDTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `BKE=`*(r: var TIM1_BDTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.TIM1_BDTR_Fields

func OSSR*(r: TIM1_BDTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `OSSR=`*(r: var TIM1_BDTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM1_BDTR_Fields

func OSSI*(r: TIM1_BDTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `OSSI=`*(r: var TIM1_BDTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.TIM1_BDTR_Fields

func LOCK*(r: TIM1_BDTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `LOCK=`*(r: var TIM1_BDTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM1_BDTR_Fields

func DTG*(r: TIM1_BDTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `DTG=`*(r: var TIM1_BDTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.TIM1_BDTR_Fields

func DBL*(r: TIM1_DMACFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 12)

proc `DBL=`*(r: var TIM1_DMACFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 12)
  tmp.setMask((val shl 8).masked(8 .. 12))
  r = tmp.TIM1_DMACFGR_Fields

func DBA*(r: TIM1_DMACFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 4)

proc `DBA=`*(r: var TIM1_DMACFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 4)
  tmp.setMask((val shl 0).masked(0 .. 4))
  r = tmp.TIM1_DMACFGR_Fields

func DMAADR*(r: TIM1_DMAADR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `DMAADR=`*(r: var TIM1_DMAADR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM1_DMAADR_Fields

type
  TIM2_CTLR1_Fields* = distinct uint32
  TIM2_CTLR2_Fields* = distinct uint32
  TIM2_SMCFGR_Fields* = distinct uint32
  TIM2_DMAINTENR_Fields* = distinct uint32
  TIM2_INTFR_Fields* = distinct uint32
  TIM2_SWEVGR_Fields* = distinct uint32
  TIM2_CHCTLR1_Output_Fields* = distinct uint32
  TIM2_CHCTLR1_Input_Fields* = distinct uint32
  TIM2_CHCTLR2_Output_Fields* = distinct uint32
  TIM2_CHCTLR2_Input_Fields* = distinct uint32
  TIM2_CCER_Fields* = distinct uint32
  TIM2_CNT_Fields* = distinct uint32
  TIM2_PSC_Fields* = distinct uint32
  TIM2_ATRLR_Fields* = distinct uint32
  TIM2_CH1CVR_Fields* = distinct uint32
  TIM2_CH2CVR_Fields* = distinct uint32
  TIM2_CH3CVR_Fields* = distinct uint32
  TIM2_CH4CVR_Fields* = distinct uint32
  TIM2_DMACFGR_Fields* = distinct uint32
  TIM2_DMAADR_Fields* = distinct uint32

proc read*(reg: TIM2_CTLR1_Type): TIM2_CTLR1_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CTLR1_Fields](reg.loc))

proc read*(reg: static TIM2_CTLR1_Type): TIM2_CTLR1_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CTLR1_Fields](reg.loc))

proc write*(reg: TIM2_CTLR1_Type, val: TIM2_CTLR1_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_CTLR1_Fields](reg.loc), val)

proc write*(reg: TIM2_CTLR1_Type, CKD: uint32 = 0, ARPE: bool = false, CMS: uint32 = 0, DIR: bool = false, OPM: bool = false, URS: bool = false, UDIS: bool = false, CEN: bool = false) =
  var x: uint32
  x.setMask((CKD shl 8).masked(8 .. 9))
  x.setMask((ARPE.uint32 shl 7).masked(7 .. 7))
  x.setMask((CMS shl 5).masked(5 .. 6))
  x.setMask((DIR.uint32 shl 4).masked(4 .. 4))
  x.setMask((OPM.uint32 shl 3).masked(3 .. 3))
  x.setMask((URS.uint32 shl 2).masked(2 .. 2))
  x.setMask((UDIS.uint32 shl 1).masked(1 .. 1))
  x.setMask((CEN.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM2_CTLR1_Fields

template modifyIt*(reg: TIM2_CTLR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_CTLR2_Type): TIM2_CTLR2_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CTLR2_Fields](reg.loc))

proc read*(reg: static TIM2_CTLR2_Type): TIM2_CTLR2_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CTLR2_Fields](reg.loc))

proc write*(reg: TIM2_CTLR2_Type, val: TIM2_CTLR2_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_CTLR2_Fields](reg.loc), val)

proc write*(reg: TIM2_CTLR2_Type, TI1S: bool = false, MMS: uint32 = 0, CCDS: bool = false, CCUS: bool = false, CCPC: bool = false) =
  var x: uint32
  x.setMask((TI1S.uint32 shl 7).masked(7 .. 7))
  x.setMask((MMS shl 4).masked(4 .. 6))
  x.setMask((CCDS.uint32 shl 3).masked(3 .. 3))
  x.setMask((CCUS.uint32 shl 2).masked(2 .. 2))
  x.setMask((CCPC.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM2_CTLR2_Fields

template modifyIt*(reg: TIM2_CTLR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_SMCFGR_Type): TIM2_SMCFGR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_SMCFGR_Fields](reg.loc))

proc read*(reg: static TIM2_SMCFGR_Type): TIM2_SMCFGR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_SMCFGR_Fields](reg.loc))

proc write*(reg: TIM2_SMCFGR_Type, val: TIM2_SMCFGR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_SMCFGR_Fields](reg.loc), val)

proc write*(reg: TIM2_SMCFGR_Type, ETP: bool = false, ECE: bool = false, ETPS: uint32 = 0, ETF: uint32 = 0, MSM: bool = false, TS: uint32 = 0, SMS: uint32 = 0) =
  var x: uint32
  x.setMask((ETP.uint32 shl 15).masked(15 .. 15))
  x.setMask((ECE.uint32 shl 14).masked(14 .. 14))
  x.setMask((ETPS shl 12).masked(12 .. 13))
  x.setMask((ETF shl 8).masked(8 .. 11))
  x.setMask((MSM.uint32 shl 7).masked(7 .. 7))
  x.setMask((TS shl 4).masked(4 .. 6))
  x.setMask((SMS shl 0).masked(0 .. 2))
  reg.write x.TIM2_SMCFGR_Fields

template modifyIt*(reg: TIM2_SMCFGR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_DMAINTENR_Type): TIM2_DMAINTENR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_DMAINTENR_Fields](reg.loc))

proc read*(reg: static TIM2_DMAINTENR_Type): TIM2_DMAINTENR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_DMAINTENR_Fields](reg.loc))

proc write*(reg: TIM2_DMAINTENR_Type, val: TIM2_DMAINTENR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_DMAINTENR_Fields](reg.loc), val)

proc write*(reg: TIM2_DMAINTENR_Type, TDE: bool = false, COMDE: bool = false, CC4DE: bool = false, CC3DE: bool = false, CC2DE: bool = false, CC1DE: bool = false, UDE: bool = false, TIE: bool = false, CC4IE: bool = false, CC3IE: bool = false, CC2IE: bool = false, CC1IE: bool = false, UIE: bool = false) =
  var x: uint32
  x.setMask((TDE.uint32 shl 14).masked(14 .. 14))
  x.setMask((COMDE.uint32 shl 13).masked(13 .. 13))
  x.setMask((CC4DE.uint32 shl 12).masked(12 .. 12))
  x.setMask((CC3DE.uint32 shl 11).masked(11 .. 11))
  x.setMask((CC2DE.uint32 shl 10).masked(10 .. 10))
  x.setMask((CC1DE.uint32 shl 9).masked(9 .. 9))
  x.setMask((UDE.uint32 shl 8).masked(8 .. 8))
  x.setMask((TIE.uint32 shl 6).masked(6 .. 6))
  x.setMask((CC4IE.uint32 shl 4).masked(4 .. 4))
  x.setMask((CC3IE.uint32 shl 3).masked(3 .. 3))
  x.setMask((CC2IE.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC1IE.uint32 shl 1).masked(1 .. 1))
  x.setMask((UIE.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM2_DMAINTENR_Fields

template modifyIt*(reg: TIM2_DMAINTENR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_INTFR_Type): TIM2_INTFR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_INTFR_Fields](reg.loc))

proc read*(reg: static TIM2_INTFR_Type): TIM2_INTFR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_INTFR_Fields](reg.loc))

proc write*(reg: TIM2_INTFR_Type, val: TIM2_INTFR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_INTFR_Fields](reg.loc), val)

proc write*(reg: TIM2_INTFR_Type, CC4OF: bool = false, CC3OF: bool = false, CC2OF: bool = false, CC1OF: bool = false, TIF: bool = false, CC4IF: bool = false, CC3IF: bool = false, CC2IF: bool = false, CC1IF: bool = false, UIF: bool = false) =
  var x: uint32
  x.setMask((CC4OF.uint32 shl 12).masked(12 .. 12))
  x.setMask((CC3OF.uint32 shl 11).masked(11 .. 11))
  x.setMask((CC2OF.uint32 shl 10).masked(10 .. 10))
  x.setMask((CC1OF.uint32 shl 9).masked(9 .. 9))
  x.setMask((TIF.uint32 shl 6).masked(6 .. 6))
  x.setMask((CC4IF.uint32 shl 4).masked(4 .. 4))
  x.setMask((CC3IF.uint32 shl 3).masked(3 .. 3))
  x.setMask((CC2IF.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC1IF.uint32 shl 1).masked(1 .. 1))
  x.setMask((UIF.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM2_INTFR_Fields

template modifyIt*(reg: TIM2_INTFR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc write*(reg: TIM2_SWEVGR_Type, val: TIM2_SWEVGR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_SWEVGR_Fields](reg.loc), val)

proc write*(reg: TIM2_SWEVGR_Type, BG: bool = false, TG: bool = false, COMG: bool = false, CC4G: bool = false, CC3G: bool = false, CC2G: bool = false, CC1G: bool = false, UG: bool = false) =
  var x: uint32
  x.setMask((BG.uint32 shl 7).masked(7 .. 7))
  x.setMask((TG.uint32 shl 6).masked(6 .. 6))
  x.setMask((COMG.uint32 shl 5).masked(5 .. 5))
  x.setMask((CC4G.uint32 shl 4).masked(4 .. 4))
  x.setMask((CC3G.uint32 shl 3).masked(3 .. 3))
  x.setMask((CC2G.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC1G.uint32 shl 1).masked(1 .. 1))
  x.setMask((UG.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM2_SWEVGR_Fields

proc read*(reg: TIM2_CHCTLR1_Output_Type): TIM2_CHCTLR1_Output_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CHCTLR1_Output_Fields](reg.loc))

proc read*(reg: static TIM2_CHCTLR1_Output_Type): TIM2_CHCTLR1_Output_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CHCTLR1_Output_Fields](reg.loc))

proc write*(reg: TIM2_CHCTLR1_Output_Type, val: TIM2_CHCTLR1_Output_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_CHCTLR1_Output_Fields](reg.loc), val)

proc write*(reg: TIM2_CHCTLR1_Output_Type, OC2CE: bool = false, OC2M: uint32 = 0, OC2PE: bool = false, OC2FE: bool = false, CC2S: uint32 = 0, OC1CE: bool = false, OC1M: uint32 = 0, OC1PE: bool = false, OC1FE: bool = false, CC1S: uint32 = 0) =
  var x: uint32
  x.setMask((OC2CE.uint32 shl 15).masked(15 .. 15))
  x.setMask((OC2M shl 12).masked(12 .. 14))
  x.setMask((OC2PE.uint32 shl 11).masked(11 .. 11))
  x.setMask((OC2FE.uint32 shl 10).masked(10 .. 10))
  x.setMask((CC2S shl 8).masked(8 .. 9))
  x.setMask((OC1CE.uint32 shl 7).masked(7 .. 7))
  x.setMask((OC1M shl 4).masked(4 .. 6))
  x.setMask((OC1PE.uint32 shl 3).masked(3 .. 3))
  x.setMask((OC1FE.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC1S shl 0).masked(0 .. 1))
  reg.write x.TIM2_CHCTLR1_Output_Fields

template modifyIt*(reg: TIM2_CHCTLR1_Output_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_CHCTLR1_Input_Type): TIM2_CHCTLR1_Input_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CHCTLR1_Input_Fields](reg.loc))

proc read*(reg: static TIM2_CHCTLR1_Input_Type): TIM2_CHCTLR1_Input_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CHCTLR1_Input_Fields](reg.loc))

proc write*(reg: TIM2_CHCTLR1_Input_Type, val: TIM2_CHCTLR1_Input_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_CHCTLR1_Input_Fields](reg.loc), val)

proc write*(reg: TIM2_CHCTLR1_Input_Type, IC2F: uint32 = 0, IC2PSC: uint32 = 0, CC2S: uint32 = 0, IC1F: uint32 = 0, IC1PSC: uint32 = 0, CC1S: uint32 = 0) =
  var x: uint32
  x.setMask((IC2F shl 12).masked(12 .. 15))
  x.setMask((IC2PSC shl 10).masked(10 .. 11))
  x.setMask((CC2S shl 8).masked(8 .. 9))
  x.setMask((IC1F shl 4).masked(4 .. 7))
  x.setMask((IC1PSC shl 2).masked(2 .. 3))
  x.setMask((CC1S shl 0).masked(0 .. 1))
  reg.write x.TIM2_CHCTLR1_Input_Fields

template modifyIt*(reg: TIM2_CHCTLR1_Input_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_CHCTLR2_Output_Type): TIM2_CHCTLR2_Output_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CHCTLR2_Output_Fields](reg.loc))

proc read*(reg: static TIM2_CHCTLR2_Output_Type): TIM2_CHCTLR2_Output_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CHCTLR2_Output_Fields](reg.loc))

proc write*(reg: TIM2_CHCTLR2_Output_Type, val: TIM2_CHCTLR2_Output_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_CHCTLR2_Output_Fields](reg.loc), val)

proc write*(reg: TIM2_CHCTLR2_Output_Type, OC4CE: bool = false, OC4M: uint32 = 0, OC4PE: bool = false, OC4FE: bool = false, CC4S: uint32 = 0, OC3CE: bool = false, OC3M: uint32 = 0, OC3PE: bool = false, OC3FE: bool = false, CC3S: uint32 = 0) =
  var x: uint32
  x.setMask((OC4CE.uint32 shl 15).masked(15 .. 15))
  x.setMask((OC4M shl 12).masked(12 .. 14))
  x.setMask((OC4PE.uint32 shl 11).masked(11 .. 11))
  x.setMask((OC4FE.uint32 shl 10).masked(10 .. 10))
  x.setMask((CC4S shl 8).masked(8 .. 9))
  x.setMask((OC3CE.uint32 shl 7).masked(7 .. 7))
  x.setMask((OC3M shl 4).masked(4 .. 6))
  x.setMask((OC3PE.uint32 shl 3).masked(3 .. 3))
  x.setMask((OC3FE.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC3S shl 0).masked(0 .. 1))
  reg.write x.TIM2_CHCTLR2_Output_Fields

template modifyIt*(reg: TIM2_CHCTLR2_Output_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_CHCTLR2_Input_Type): TIM2_CHCTLR2_Input_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CHCTLR2_Input_Fields](reg.loc))

proc read*(reg: static TIM2_CHCTLR2_Input_Type): TIM2_CHCTLR2_Input_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CHCTLR2_Input_Fields](reg.loc))

proc write*(reg: TIM2_CHCTLR2_Input_Type, val: TIM2_CHCTLR2_Input_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_CHCTLR2_Input_Fields](reg.loc), val)

proc write*(reg: TIM2_CHCTLR2_Input_Type, IC4F: uint32 = 0, IC4PSC: uint32 = 0, CC4S: uint32 = 0, IC3F: uint32 = 0, IC3PSC: uint32 = 0, CC3S: uint32 = 0) =
  var x: uint32
  x.setMask((IC4F shl 12).masked(12 .. 15))
  x.setMask((IC4PSC shl 10).masked(10 .. 11))
  x.setMask((CC4S shl 8).masked(8 .. 9))
  x.setMask((IC3F shl 4).masked(4 .. 7))
  x.setMask((IC3PSC shl 2).masked(2 .. 3))
  x.setMask((CC3S shl 0).masked(0 .. 1))
  reg.write x.TIM2_CHCTLR2_Input_Fields

template modifyIt*(reg: TIM2_CHCTLR2_Input_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_CCER_Type): TIM2_CCER_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CCER_Fields](reg.loc))

proc read*(reg: static TIM2_CCER_Type): TIM2_CCER_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CCER_Fields](reg.loc))

proc write*(reg: TIM2_CCER_Type, val: TIM2_CCER_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_CCER_Fields](reg.loc), val)

proc write*(reg: TIM2_CCER_Type, CC4P: bool = false, CC4E: bool = false, CC3P: bool = false, CC3E: bool = false, CC2P: bool = false, CC2E: bool = false, CC1P: bool = false, CC1E: bool = false) =
  var x: uint32
  x.setMask((CC4P.uint32 shl 13).masked(13 .. 13))
  x.setMask((CC4E.uint32 shl 12).masked(12 .. 12))
  x.setMask((CC3P.uint32 shl 9).masked(9 .. 9))
  x.setMask((CC3E.uint32 shl 8).masked(8 .. 8))
  x.setMask((CC2P.uint32 shl 5).masked(5 .. 5))
  x.setMask((CC2E.uint32 shl 4).masked(4 .. 4))
  x.setMask((CC1P.uint32 shl 1).masked(1 .. 1))
  x.setMask((CC1E.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM2_CCER_Fields

template modifyIt*(reg: TIM2_CCER_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_CNT_Type): TIM2_CNT_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CNT_Fields](reg.loc))

proc read*(reg: static TIM2_CNT_Type): TIM2_CNT_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CNT_Fields](reg.loc))

proc write*(reg: TIM2_CNT_Type, val: TIM2_CNT_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_CNT_Fields](reg.loc), val)

proc write*(reg: TIM2_CNT_Type, CNT: uint32 = 0) =
  var x: uint32
  x.setMask((CNT shl 0).masked(0 .. 15))
  reg.write x.TIM2_CNT_Fields

template modifyIt*(reg: TIM2_CNT_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_PSC_Type): TIM2_PSC_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_PSC_Fields](reg.loc))

proc read*(reg: static TIM2_PSC_Type): TIM2_PSC_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_PSC_Fields](reg.loc))

proc write*(reg: TIM2_PSC_Type, val: TIM2_PSC_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_PSC_Fields](reg.loc), val)

proc write*(reg: TIM2_PSC_Type, PSC: uint32 = 0) =
  var x: uint32
  x.setMask((PSC shl 0).masked(0 .. 15))
  reg.write x.TIM2_PSC_Fields

template modifyIt*(reg: TIM2_PSC_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_ATRLR_Type): TIM2_ATRLR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_ATRLR_Fields](reg.loc))

proc read*(reg: static TIM2_ATRLR_Type): TIM2_ATRLR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_ATRLR_Fields](reg.loc))

proc write*(reg: TIM2_ATRLR_Type, val: TIM2_ATRLR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_ATRLR_Fields](reg.loc), val)

proc write*(reg: TIM2_ATRLR_Type, ATRLR: uint32 = 0) =
  var x: uint32
  x.setMask((ATRLR shl 0).masked(0 .. 15))
  reg.write x.TIM2_ATRLR_Fields

template modifyIt*(reg: TIM2_ATRLR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_CH1CVR_Type): TIM2_CH1CVR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CH1CVR_Fields](reg.loc))

proc read*(reg: static TIM2_CH1CVR_Type): TIM2_CH1CVR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CH1CVR_Fields](reg.loc))

proc write*(reg: TIM2_CH1CVR_Type, val: TIM2_CH1CVR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_CH1CVR_Fields](reg.loc), val)

proc write*(reg: TIM2_CH1CVR_Type, CH1CVR: uint32 = 0) =
  var x: uint32
  x.setMask((CH1CVR shl 0).masked(0 .. 15))
  reg.write x.TIM2_CH1CVR_Fields

template modifyIt*(reg: TIM2_CH1CVR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_CH2CVR_Type): TIM2_CH2CVR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CH2CVR_Fields](reg.loc))

proc read*(reg: static TIM2_CH2CVR_Type): TIM2_CH2CVR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CH2CVR_Fields](reg.loc))

proc write*(reg: TIM2_CH2CVR_Type, val: TIM2_CH2CVR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_CH2CVR_Fields](reg.loc), val)

proc write*(reg: TIM2_CH2CVR_Type, CH2CVR: uint32 = 0) =
  var x: uint32
  x.setMask((CH2CVR shl 0).masked(0 .. 15))
  reg.write x.TIM2_CH2CVR_Fields

template modifyIt*(reg: TIM2_CH2CVR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_CH3CVR_Type): TIM2_CH3CVR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CH3CVR_Fields](reg.loc))

proc read*(reg: static TIM2_CH3CVR_Type): TIM2_CH3CVR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CH3CVR_Fields](reg.loc))

proc write*(reg: TIM2_CH3CVR_Type, val: TIM2_CH3CVR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_CH3CVR_Fields](reg.loc), val)

proc write*(reg: TIM2_CH3CVR_Type, CH3CVR: uint32 = 0) =
  var x: uint32
  x.setMask((CH3CVR shl 0).masked(0 .. 15))
  reg.write x.TIM2_CH3CVR_Fields

template modifyIt*(reg: TIM2_CH3CVR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_CH4CVR_Type): TIM2_CH4CVR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CH4CVR_Fields](reg.loc))

proc read*(reg: static TIM2_CH4CVR_Type): TIM2_CH4CVR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CH4CVR_Fields](reg.loc))

proc write*(reg: TIM2_CH4CVR_Type, val: TIM2_CH4CVR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_CH4CVR_Fields](reg.loc), val)

proc write*(reg: TIM2_CH4CVR_Type, CH4CVR: uint32 = 0) =
  var x: uint32
  x.setMask((CH4CVR shl 0).masked(0 .. 15))
  reg.write x.TIM2_CH4CVR_Fields

template modifyIt*(reg: TIM2_CH4CVR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_DMACFGR_Type): TIM2_DMACFGR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_DMACFGR_Fields](reg.loc))

proc read*(reg: static TIM2_DMACFGR_Type): TIM2_DMACFGR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_DMACFGR_Fields](reg.loc))

proc write*(reg: TIM2_DMACFGR_Type, val: TIM2_DMACFGR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_DMACFGR_Fields](reg.loc), val)

proc write*(reg: TIM2_DMACFGR_Type, DBL: uint32 = 0, DBA: uint32 = 0) =
  var x: uint32
  x.setMask((DBL shl 8).masked(8 .. 12))
  x.setMask((DBA shl 0).masked(0 .. 4))
  reg.write x.TIM2_DMACFGR_Fields

template modifyIt*(reg: TIM2_DMACFGR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_DMAADR_Type): TIM2_DMAADR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_DMAADR_Fields](reg.loc))

proc read*(reg: static TIM2_DMAADR_Type): TIM2_DMAADR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_DMAADR_Fields](reg.loc))

proc write*(reg: TIM2_DMAADR_Type, val: TIM2_DMAADR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_DMAADR_Fields](reg.loc), val)

proc write*(reg: TIM2_DMAADR_Type, DMAADR: uint32 = 0) =
  var x: uint32
  x.setMask((DMAADR shl 0).masked(0 .. 15))
  reg.write x.TIM2_DMAADR_Fields

template modifyIt*(reg: TIM2_DMAADR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func CKD*(r: TIM2_CTLR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CKD=`*(r: var TIM2_CTLR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM2_CTLR1_Fields

func ARPE*(r: TIM2_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `ARPE=`*(r: var TIM2_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM2_CTLR1_Fields

func CMS*(r: TIM2_CTLR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(5 .. 6)

proc `CMS=`*(r: var TIM2_CTLR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 6)
  tmp.setMask((val shl 5).masked(5 .. 6))
  r = tmp.TIM2_CTLR1_Fields

func DIR*(r: TIM2_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `DIR=`*(r: var TIM2_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.TIM2_CTLR1_Fields

func OPM*(r: TIM2_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `OPM=`*(r: var TIM2_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM2_CTLR1_Fields

func URS*(r: TIM2_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `URS=`*(r: var TIM2_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM2_CTLR1_Fields

func UDIS*(r: TIM2_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `UDIS=`*(r: var TIM2_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM2_CTLR1_Fields

func CEN*(r: TIM2_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CEN=`*(r: var TIM2_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM2_CTLR1_Fields

func TI1S*(r: TIM2_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TI1S=`*(r: var TIM2_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM2_CTLR2_Fields

func MMS*(r: TIM2_CTLR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `MMS=`*(r: var TIM2_CTLR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.TIM2_CTLR2_Fields

func CCDS*(r: TIM2_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CCDS=`*(r: var TIM2_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM2_CTLR2_Fields

func CCUS*(r: TIM2_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `CCUS=`*(r: var TIM2_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM2_CTLR2_Fields

func CCPC*(r: TIM2_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CCPC=`*(r: var TIM2_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM2_CTLR2_Fields

func ETP*(r: TIM2_SMCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `ETP=`*(r: var TIM2_SMCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.TIM2_SMCFGR_Fields

func ECE*(r: TIM2_SMCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `ECE=`*(r: var TIM2_SMCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.TIM2_SMCFGR_Fields

func ETPS*(r: TIM2_SMCFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 13)

proc `ETPS=`*(r: var TIM2_SMCFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.TIM2_SMCFGR_Fields

func ETF*(r: TIM2_SMCFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

proc `ETF=`*(r: var TIM2_SMCFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 11)
  tmp.setMask((val shl 8).masked(8 .. 11))
  r = tmp.TIM2_SMCFGR_Fields

func MSM*(r: TIM2_SMCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `MSM=`*(r: var TIM2_SMCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM2_SMCFGR_Fields

func TS*(r: TIM2_SMCFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `TS=`*(r: var TIM2_SMCFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.TIM2_SMCFGR_Fields

func SMS*(r: TIM2_SMCFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 2)

proc `SMS=`*(r: var TIM2_SMCFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 2)
  tmp.setMask((val shl 0).masked(0 .. 2))
  r = tmp.TIM2_SMCFGR_Fields

func TDE*(r: TIM2_DMAINTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `TDE=`*(r: var TIM2_DMAINTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.TIM2_DMAINTENR_Fields

func COMDE*(r: TIM2_DMAINTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `COMDE=`*(r: var TIM2_DMAINTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.TIM2_DMAINTENR_Fields

func CC4DE*(r: TIM2_DMAINTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `CC4DE=`*(r: var TIM2_DMAINTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.TIM2_DMAINTENR_Fields

func CC3DE*(r: TIM2_DMAINTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `CC3DE=`*(r: var TIM2_DMAINTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM2_DMAINTENR_Fields

func CC2DE*(r: TIM2_DMAINTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `CC2DE=`*(r: var TIM2_DMAINTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.TIM2_DMAINTENR_Fields

func CC1DE*(r: TIM2_DMAINTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `CC1DE=`*(r: var TIM2_DMAINTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.TIM2_DMAINTENR_Fields

func UDE*(r: TIM2_DMAINTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `UDE=`*(r: var TIM2_DMAINTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.TIM2_DMAINTENR_Fields

func TIE*(r: TIM2_DMAINTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `TIE=`*(r: var TIM2_DMAINTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.TIM2_DMAINTENR_Fields

func CC4IE*(r: TIM2_DMAINTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `CC4IE=`*(r: var TIM2_DMAINTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.TIM2_DMAINTENR_Fields

func CC3IE*(r: TIM2_DMAINTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CC3IE=`*(r: var TIM2_DMAINTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM2_DMAINTENR_Fields

func CC2IE*(r: TIM2_DMAINTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `CC2IE=`*(r: var TIM2_DMAINTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM2_DMAINTENR_Fields

func CC1IE*(r: TIM2_DMAINTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CC1IE=`*(r: var TIM2_DMAINTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM2_DMAINTENR_Fields

func UIE*(r: TIM2_DMAINTENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `UIE=`*(r: var TIM2_DMAINTENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM2_DMAINTENR_Fields

func CC4OF*(r: TIM2_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `CC4OF=`*(r: var TIM2_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.TIM2_INTFR_Fields

func CC3OF*(r: TIM2_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `CC3OF=`*(r: var TIM2_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM2_INTFR_Fields

func CC2OF*(r: TIM2_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `CC2OF=`*(r: var TIM2_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.TIM2_INTFR_Fields

func CC1OF*(r: TIM2_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `CC1OF=`*(r: var TIM2_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.TIM2_INTFR_Fields

func TIF*(r: TIM2_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `TIF=`*(r: var TIM2_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.TIM2_INTFR_Fields

func CC4IF*(r: TIM2_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `CC4IF=`*(r: var TIM2_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.TIM2_INTFR_Fields

func CC3IF*(r: TIM2_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CC3IF=`*(r: var TIM2_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM2_INTFR_Fields

func CC2IF*(r: TIM2_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `CC2IF=`*(r: var TIM2_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM2_INTFR_Fields

func CC1IF*(r: TIM2_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CC1IF=`*(r: var TIM2_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM2_INTFR_Fields

func UIF*(r: TIM2_INTFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `UIF=`*(r: var TIM2_INTFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM2_INTFR_Fields

proc `BG=`*(r: var TIM2_SWEVGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM2_SWEVGR_Fields

proc `TG=`*(r: var TIM2_SWEVGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.TIM2_SWEVGR_Fields

proc `COMG=`*(r: var TIM2_SWEVGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.TIM2_SWEVGR_Fields

proc `CC4G=`*(r: var TIM2_SWEVGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.TIM2_SWEVGR_Fields

proc `CC3G=`*(r: var TIM2_SWEVGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM2_SWEVGR_Fields

proc `CC2G=`*(r: var TIM2_SWEVGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM2_SWEVGR_Fields

proc `CC1G=`*(r: var TIM2_SWEVGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM2_SWEVGR_Fields

proc `UG=`*(r: var TIM2_SWEVGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM2_SWEVGR_Fields

func OC2CE*(r: TIM2_CHCTLR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `OC2CE=`*(r: var TIM2_CHCTLR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.TIM2_CHCTLR1_Output_Fields

func OC2M*(r: TIM2_CHCTLR1_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 14)

proc `OC2M=`*(r: var TIM2_CHCTLR1_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 14)
  tmp.setMask((val shl 12).masked(12 .. 14))
  r = tmp.TIM2_CHCTLR1_Output_Fields

func OC2PE*(r: TIM2_CHCTLR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `OC2PE=`*(r: var TIM2_CHCTLR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM2_CHCTLR1_Output_Fields

func OC2FE*(r: TIM2_CHCTLR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `OC2FE=`*(r: var TIM2_CHCTLR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.TIM2_CHCTLR1_Output_Fields

func CC2S*(r: TIM2_CHCTLR1_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CC2S=`*(r: var TIM2_CHCTLR1_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM2_CHCTLR1_Output_Fields

func OC1CE*(r: TIM2_CHCTLR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `OC1CE=`*(r: var TIM2_CHCTLR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM2_CHCTLR1_Output_Fields

func OC1M*(r: TIM2_CHCTLR1_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `OC1M=`*(r: var TIM2_CHCTLR1_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.TIM2_CHCTLR1_Output_Fields

func OC1PE*(r: TIM2_CHCTLR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `OC1PE=`*(r: var TIM2_CHCTLR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM2_CHCTLR1_Output_Fields

func OC1FE*(r: TIM2_CHCTLR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `OC1FE=`*(r: var TIM2_CHCTLR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM2_CHCTLR1_Output_Fields

func CC1S*(r: TIM2_CHCTLR1_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `CC1S=`*(r: var TIM2_CHCTLR1_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.TIM2_CHCTLR1_Output_Fields

func IC2F*(r: TIM2_CHCTLR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 15)

proc `IC2F=`*(r: var TIM2_CHCTLR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 15)
  tmp.setMask((val shl 12).masked(12 .. 15))
  r = tmp.TIM2_CHCTLR1_Input_Fields

func IC2PSC*(r: TIM2_CHCTLR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `IC2PSC=`*(r: var TIM2_CHCTLR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.TIM2_CHCTLR1_Input_Fields

func CC2S*(r: TIM2_CHCTLR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CC2S=`*(r: var TIM2_CHCTLR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM2_CHCTLR1_Input_Fields

func IC1F*(r: TIM2_CHCTLR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `IC1F=`*(r: var TIM2_CHCTLR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.TIM2_CHCTLR1_Input_Fields

func IC1PSC*(r: TIM2_CHCTLR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `IC1PSC=`*(r: var TIM2_CHCTLR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.TIM2_CHCTLR1_Input_Fields

func CC1S*(r: TIM2_CHCTLR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `CC1S=`*(r: var TIM2_CHCTLR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.TIM2_CHCTLR1_Input_Fields

func OC4CE*(r: TIM2_CHCTLR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `OC4CE=`*(r: var TIM2_CHCTLR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.TIM2_CHCTLR2_Output_Fields

func OC4M*(r: TIM2_CHCTLR2_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 14)

proc `OC4M=`*(r: var TIM2_CHCTLR2_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 14)
  tmp.setMask((val shl 12).masked(12 .. 14))
  r = tmp.TIM2_CHCTLR2_Output_Fields

func OC4PE*(r: TIM2_CHCTLR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `OC4PE=`*(r: var TIM2_CHCTLR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM2_CHCTLR2_Output_Fields

func OC4FE*(r: TIM2_CHCTLR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `OC4FE=`*(r: var TIM2_CHCTLR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.TIM2_CHCTLR2_Output_Fields

func CC4S*(r: TIM2_CHCTLR2_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CC4S=`*(r: var TIM2_CHCTLR2_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM2_CHCTLR2_Output_Fields

func OC3CE*(r: TIM2_CHCTLR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `OC3CE=`*(r: var TIM2_CHCTLR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM2_CHCTLR2_Output_Fields

func OC3M*(r: TIM2_CHCTLR2_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `OC3M=`*(r: var TIM2_CHCTLR2_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.TIM2_CHCTLR2_Output_Fields

func OC3PE*(r: TIM2_CHCTLR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `OC3PE=`*(r: var TIM2_CHCTLR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM2_CHCTLR2_Output_Fields

func OC3FE*(r: TIM2_CHCTLR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `OC3FE=`*(r: var TIM2_CHCTLR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM2_CHCTLR2_Output_Fields

func CC3S*(r: TIM2_CHCTLR2_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `CC3S=`*(r: var TIM2_CHCTLR2_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.TIM2_CHCTLR2_Output_Fields

func IC4F*(r: TIM2_CHCTLR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 15)

proc `IC4F=`*(r: var TIM2_CHCTLR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 15)
  tmp.setMask((val shl 12).masked(12 .. 15))
  r = tmp.TIM2_CHCTLR2_Input_Fields

func IC4PSC*(r: TIM2_CHCTLR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `IC4PSC=`*(r: var TIM2_CHCTLR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.TIM2_CHCTLR2_Input_Fields

func CC4S*(r: TIM2_CHCTLR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CC4S=`*(r: var TIM2_CHCTLR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM2_CHCTLR2_Input_Fields

func IC3F*(r: TIM2_CHCTLR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `IC3F=`*(r: var TIM2_CHCTLR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.TIM2_CHCTLR2_Input_Fields

func IC3PSC*(r: TIM2_CHCTLR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `IC3PSC=`*(r: var TIM2_CHCTLR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.TIM2_CHCTLR2_Input_Fields

func CC3S*(r: TIM2_CHCTLR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `CC3S=`*(r: var TIM2_CHCTLR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.TIM2_CHCTLR2_Input_Fields

func CC4P*(r: TIM2_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `CC4P=`*(r: var TIM2_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.TIM2_CCER_Fields

func CC4E*(r: TIM2_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `CC4E=`*(r: var TIM2_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.TIM2_CCER_Fields

func CC3P*(r: TIM2_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `CC3P=`*(r: var TIM2_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.TIM2_CCER_Fields

func CC3E*(r: TIM2_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `CC3E=`*(r: var TIM2_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.TIM2_CCER_Fields

func CC2P*(r: TIM2_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `CC2P=`*(r: var TIM2_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.TIM2_CCER_Fields

func CC2E*(r: TIM2_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `CC2E=`*(r: var TIM2_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.TIM2_CCER_Fields

func CC1P*(r: TIM2_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CC1P=`*(r: var TIM2_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM2_CCER_Fields

func CC1E*(r: TIM2_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CC1E=`*(r: var TIM2_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM2_CCER_Fields

func CNT*(r: TIM2_CNT_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CNT=`*(r: var TIM2_CNT_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM2_CNT_Fields

func PSC*(r: TIM2_PSC_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `PSC=`*(r: var TIM2_PSC_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM2_PSC_Fields

func ATRLR*(r: TIM2_ATRLR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `ATRLR=`*(r: var TIM2_ATRLR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM2_ATRLR_Fields

func CH1CVR*(r: TIM2_CH1CVR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CH1CVR=`*(r: var TIM2_CH1CVR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM2_CH1CVR_Fields

func CH2CVR*(r: TIM2_CH2CVR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CH2CVR=`*(r: var TIM2_CH2CVR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM2_CH2CVR_Fields

func CH3CVR*(r: TIM2_CH3CVR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CH3CVR=`*(r: var TIM2_CH3CVR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM2_CH3CVR_Fields

func CH4CVR*(r: TIM2_CH4CVR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CH4CVR=`*(r: var TIM2_CH4CVR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM2_CH4CVR_Fields

func DBL*(r: TIM2_DMACFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 12)

proc `DBL=`*(r: var TIM2_DMACFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 12)
  tmp.setMask((val shl 8).masked(8 .. 12))
  r = tmp.TIM2_DMACFGR_Fields

func DBA*(r: TIM2_DMACFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 4)

proc `DBA=`*(r: var TIM2_DMACFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 4)
  tmp.setMask((val shl 0).masked(0 .. 4))
  r = tmp.TIM2_DMACFGR_Fields

func DMAADR*(r: TIM2_DMAADR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `DMAADR=`*(r: var TIM2_DMAADR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM2_DMAADR_Fields

type
  I2C1_CTLR1_Fields* = distinct uint32
  I2C1_CTLR2_Fields* = distinct uint32
  I2C1_OADDR1_Fields* = distinct uint32
  I2C1_OADDR2_Fields* = distinct uint32
  I2C1_DATAR_Fields* = distinct uint32
  I2C1_STAR1_Fields* = distinct uint32
  I2C1_STAR2_Fields* = distinct uint32
  I2C1_CKCFGR_Fields* = distinct uint32
  I2C1_RTR_Fields* = distinct uint32

proc read*(reg: I2C1_CTLR1_Type): I2C1_CTLR1_Fields {.inline.} =
  volatileLoad(cast[ptr I2C1_CTLR1_Fields](reg.loc))

proc read*(reg: static I2C1_CTLR1_Type): I2C1_CTLR1_Fields {.inline.} =
  volatileLoad(cast[ptr I2C1_CTLR1_Fields](reg.loc))

proc write*(reg: I2C1_CTLR1_Type, val: I2C1_CTLR1_Fields) {.inline.} =
  volatileStore(cast[ptr I2C1_CTLR1_Fields](reg.loc), val)

proc write*(reg: I2C1_CTLR1_Type, SWRST: bool = false, ALERT: bool = false, PEC: bool = false, POS: bool = false, ACK: bool = false, STOP: bool = false, START: bool = false, NOSTRETCH: bool = false, ENGC: bool = false, ENPEC: bool = false, ENARP: bool = false, SMBTYPE: bool = false, SMBUS: bool = false, PE: bool = false) =
  var x: uint32
  x.setMask((SWRST.uint32 shl 15).masked(15 .. 15))
  x.setMask((ALERT.uint32 shl 13).masked(13 .. 13))
  x.setMask((PEC.uint32 shl 12).masked(12 .. 12))
  x.setMask((POS.uint32 shl 11).masked(11 .. 11))
  x.setMask((ACK.uint32 shl 10).masked(10 .. 10))
  x.setMask((STOP.uint32 shl 9).masked(9 .. 9))
  x.setMask((START.uint32 shl 8).masked(8 .. 8))
  x.setMask((NOSTRETCH.uint32 shl 7).masked(7 .. 7))
  x.setMask((ENGC.uint32 shl 6).masked(6 .. 6))
  x.setMask((ENPEC.uint32 shl 5).masked(5 .. 5))
  x.setMask((ENARP.uint32 shl 4).masked(4 .. 4))
  x.setMask((SMBTYPE.uint32 shl 3).masked(3 .. 3))
  x.setMask((SMBUS.uint32 shl 1).masked(1 .. 1))
  x.setMask((PE.uint32 shl 0).masked(0 .. 0))
  reg.write x.I2C1_CTLR1_Fields

template modifyIt*(reg: I2C1_CTLR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: I2C1_CTLR2_Type): I2C1_CTLR2_Fields {.inline.} =
  volatileLoad(cast[ptr I2C1_CTLR2_Fields](reg.loc))

proc read*(reg: static I2C1_CTLR2_Type): I2C1_CTLR2_Fields {.inline.} =
  volatileLoad(cast[ptr I2C1_CTLR2_Fields](reg.loc))

proc write*(reg: I2C1_CTLR2_Type, val: I2C1_CTLR2_Fields) {.inline.} =
  volatileStore(cast[ptr I2C1_CTLR2_Fields](reg.loc), val)

proc write*(reg: I2C1_CTLR2_Type, LAST: bool = false, DMAEN: bool = false, ITBUFEN: bool = false, ITEVTEN: bool = false, ITERREN: bool = false, FREQ: uint32 = 0) =
  var x: uint32
  x.setMask((LAST.uint32 shl 12).masked(12 .. 12))
  x.setMask((DMAEN.uint32 shl 11).masked(11 .. 11))
  x.setMask((ITBUFEN.uint32 shl 10).masked(10 .. 10))
  x.setMask((ITEVTEN.uint32 shl 9).masked(9 .. 9))
  x.setMask((ITERREN.uint32 shl 8).masked(8 .. 8))
  x.setMask((FREQ shl 0).masked(0 .. 5))
  reg.write x.I2C1_CTLR2_Fields

template modifyIt*(reg: I2C1_CTLR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: I2C1_OADDR1_Type): I2C1_OADDR1_Fields {.inline.} =
  volatileLoad(cast[ptr I2C1_OADDR1_Fields](reg.loc))

proc read*(reg: static I2C1_OADDR1_Type): I2C1_OADDR1_Fields {.inline.} =
  volatileLoad(cast[ptr I2C1_OADDR1_Fields](reg.loc))

proc write*(reg: I2C1_OADDR1_Type, val: I2C1_OADDR1_Fields) {.inline.} =
  volatileStore(cast[ptr I2C1_OADDR1_Fields](reg.loc), val)

proc write*(reg: I2C1_OADDR1_Type, ADDMODE: bool = false, MUST1: bool = false, ADD9_8: uint32 = 0, ADD7_1: uint32 = 0, ADD0: bool = false) =
  var x: uint32
  x.setMask((ADDMODE.uint32 shl 15).masked(15 .. 15))
  x.setMask((MUST1.uint32 shl 14).masked(14 .. 14))
  x.setMask((ADD9_8 shl 8).masked(8 .. 9))
  x.setMask((ADD7_1 shl 1).masked(1 .. 7))
  x.setMask((ADD0.uint32 shl 0).masked(0 .. 0))
  reg.write x.I2C1_OADDR1_Fields

template modifyIt*(reg: I2C1_OADDR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: I2C1_OADDR2_Type): I2C1_OADDR2_Fields {.inline.} =
  volatileLoad(cast[ptr I2C1_OADDR2_Fields](reg.loc))

proc read*(reg: static I2C1_OADDR2_Type): I2C1_OADDR2_Fields {.inline.} =
  volatileLoad(cast[ptr I2C1_OADDR2_Fields](reg.loc))

proc write*(reg: I2C1_OADDR2_Type, val: I2C1_OADDR2_Fields) {.inline.} =
  volatileStore(cast[ptr I2C1_OADDR2_Fields](reg.loc), val)

proc write*(reg: I2C1_OADDR2_Type, ADD2: uint32 = 0, ENDUAL: bool = false) =
  var x: uint32
  x.setMask((ADD2 shl 1).masked(1 .. 7))
  x.setMask((ENDUAL.uint32 shl 0).masked(0 .. 0))
  reg.write x.I2C1_OADDR2_Fields

template modifyIt*(reg: I2C1_OADDR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: I2C1_DATAR_Type): I2C1_DATAR_Fields {.inline.} =
  volatileLoad(cast[ptr I2C1_DATAR_Fields](reg.loc))

proc read*(reg: static I2C1_DATAR_Type): I2C1_DATAR_Fields {.inline.} =
  volatileLoad(cast[ptr I2C1_DATAR_Fields](reg.loc))

proc write*(reg: I2C1_DATAR_Type, val: I2C1_DATAR_Fields) {.inline.} =
  volatileStore(cast[ptr I2C1_DATAR_Fields](reg.loc), val)

proc write*(reg: I2C1_DATAR_Type, DATAR: uint32 = 0) =
  var x: uint32
  x.setMask((DATAR shl 0).masked(0 .. 7))
  reg.write x.I2C1_DATAR_Fields

template modifyIt*(reg: I2C1_DATAR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: I2C1_STAR1_Type): I2C1_STAR1_Fields {.inline.} =
  volatileLoad(cast[ptr I2C1_STAR1_Fields](reg.loc))

proc read*(reg: static I2C1_STAR1_Type): I2C1_STAR1_Fields {.inline.} =
  volatileLoad(cast[ptr I2C1_STAR1_Fields](reg.loc))

proc write*(reg: I2C1_STAR1_Type, val: I2C1_STAR1_Fields) {.inline.} =
  volatileStore(cast[ptr I2C1_STAR1_Fields](reg.loc), val)

proc write*(reg: I2C1_STAR1_Type, SMBALERT: bool = false, TIMEOUT: bool = false, PECERR: bool = false, OVR: bool = false, AF: bool = false, ARLO: bool = false, BERR: bool = false) =
  var x: uint32
  x.setMask((SMBALERT.uint32 shl 15).masked(15 .. 15))
  x.setMask((TIMEOUT.uint32 shl 14).masked(14 .. 14))
  x.setMask((PECERR.uint32 shl 12).masked(12 .. 12))
  x.setMask((OVR.uint32 shl 11).masked(11 .. 11))
  x.setMask((AF.uint32 shl 10).masked(10 .. 10))
  x.setMask((ARLO.uint32 shl 9).masked(9 .. 9))
  x.setMask((BERR.uint32 shl 8).masked(8 .. 8))
  reg.write x.I2C1_STAR1_Fields

template modifyIt*(reg: I2C1_STAR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: I2C1_STAR2_Type): I2C1_STAR2_Fields {.inline.} =
  volatileLoad(cast[ptr I2C1_STAR2_Fields](reg.loc))

proc read*(reg: static I2C1_STAR2_Type): I2C1_STAR2_Fields {.inline.} =
  volatileLoad(cast[ptr I2C1_STAR2_Fields](reg.loc))

proc read*(reg: I2C1_CKCFGR_Type): I2C1_CKCFGR_Fields {.inline.} =
  volatileLoad(cast[ptr I2C1_CKCFGR_Fields](reg.loc))

proc read*(reg: static I2C1_CKCFGR_Type): I2C1_CKCFGR_Fields {.inline.} =
  volatileLoad(cast[ptr I2C1_CKCFGR_Fields](reg.loc))

proc write*(reg: I2C1_CKCFGR_Type, val: I2C1_CKCFGR_Fields) {.inline.} =
  volatileStore(cast[ptr I2C1_CKCFGR_Fields](reg.loc), val)

proc write*(reg: I2C1_CKCFGR_Type, F_S: bool = false, DUTY: bool = false, CCR: uint32 = 0) =
  var x: uint32
  x.setMask((F_S.uint32 shl 15).masked(15 .. 15))
  x.setMask((DUTY.uint32 shl 14).masked(14 .. 14))
  x.setMask((CCR shl 0).masked(0 .. 11))
  reg.write x.I2C1_CKCFGR_Fields

template modifyIt*(reg: I2C1_CKCFGR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: I2C1_RTR_Type): I2C1_RTR_Fields {.inline.} =
  volatileLoad(cast[ptr I2C1_RTR_Fields](reg.loc))

proc read*(reg: static I2C1_RTR_Type): I2C1_RTR_Fields {.inline.} =
  volatileLoad(cast[ptr I2C1_RTR_Fields](reg.loc))

proc write*(reg: I2C1_RTR_Type, val: I2C1_RTR_Fields) {.inline.} =
  volatileStore(cast[ptr I2C1_RTR_Fields](reg.loc), val)

proc write*(reg: I2C1_RTR_Type, TRISE: uint32 = 2) =
  var x: uint32
  x.setMask((TRISE shl 0).masked(0 .. 5))
  reg.write x.I2C1_RTR_Fields

template modifyIt*(reg: I2C1_RTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func SWRST*(r: I2C1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `SWRST=`*(r: var I2C1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.I2C1_CTLR1_Fields

func ALERT*(r: I2C1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `ALERT=`*(r: var I2C1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.I2C1_CTLR1_Fields

func PEC*(r: I2C1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `PEC=`*(r: var I2C1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.I2C1_CTLR1_Fields

func POS*(r: I2C1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `POS=`*(r: var I2C1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.I2C1_CTLR1_Fields

func ACK*(r: I2C1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `ACK=`*(r: var I2C1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.I2C1_CTLR1_Fields

func STOP*(r: I2C1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `STOP=`*(r: var I2C1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.I2C1_CTLR1_Fields

func START*(r: I2C1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `START=`*(r: var I2C1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.I2C1_CTLR1_Fields

func NOSTRETCH*(r: I2C1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `NOSTRETCH=`*(r: var I2C1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.I2C1_CTLR1_Fields

func ENGC*(r: I2C1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `ENGC=`*(r: var I2C1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.I2C1_CTLR1_Fields

func ENPEC*(r: I2C1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ENPEC=`*(r: var I2C1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.I2C1_CTLR1_Fields

func ENARP*(r: I2C1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `ENARP=`*(r: var I2C1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.I2C1_CTLR1_Fields

func SMBTYPE*(r: I2C1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `SMBTYPE=`*(r: var I2C1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.I2C1_CTLR1_Fields

func SMBUS*(r: I2C1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `SMBUS=`*(r: var I2C1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.I2C1_CTLR1_Fields

func PE*(r: I2C1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `PE=`*(r: var I2C1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.I2C1_CTLR1_Fields

func LAST*(r: I2C1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `LAST=`*(r: var I2C1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.I2C1_CTLR2_Fields

func DMAEN*(r: I2C1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `DMAEN=`*(r: var I2C1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.I2C1_CTLR2_Fields

func ITBUFEN*(r: I2C1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `ITBUFEN=`*(r: var I2C1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.I2C1_CTLR2_Fields

func ITEVTEN*(r: I2C1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `ITEVTEN=`*(r: var I2C1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.I2C1_CTLR2_Fields

func ITERREN*(r: I2C1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `ITERREN=`*(r: var I2C1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.I2C1_CTLR2_Fields

func FREQ*(r: I2C1_CTLR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 5)

proc `FREQ=`*(r: var I2C1_CTLR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 5)
  tmp.setMask((val shl 0).masked(0 .. 5))
  r = tmp.I2C1_CTLR2_Fields

func ADDMODE*(r: I2C1_OADDR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `ADDMODE=`*(r: var I2C1_OADDR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.I2C1_OADDR1_Fields

func MUST1*(r: I2C1_OADDR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `MUST1=`*(r: var I2C1_OADDR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.I2C1_OADDR1_Fields

func ADD9_8*(r: I2C1_OADDR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `ADD9_8=`*(r: var I2C1_OADDR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.I2C1_OADDR1_Fields

func ADD7_1*(r: I2C1_OADDR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(1 .. 7)

proc `ADD7_1=`*(r: var I2C1_OADDR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 7)
  tmp.setMask((val shl 1).masked(1 .. 7))
  r = tmp.I2C1_OADDR1_Fields

func ADD0*(r: I2C1_OADDR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `ADD0=`*(r: var I2C1_OADDR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.I2C1_OADDR1_Fields

func ADD2*(r: I2C1_OADDR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(1 .. 7)

proc `ADD2=`*(r: var I2C1_OADDR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 7)
  tmp.setMask((val shl 1).masked(1 .. 7))
  r = tmp.I2C1_OADDR2_Fields

func ENDUAL*(r: I2C1_OADDR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `ENDUAL=`*(r: var I2C1_OADDR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.I2C1_OADDR2_Fields

func DATAR*(r: I2C1_DATAR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `DATAR=`*(r: var I2C1_DATAR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.I2C1_DATAR_Fields

func SMBALERT*(r: I2C1_STAR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `SMBALERT=`*(r: var I2C1_STAR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.I2C1_STAR1_Fields

func TIMEOUT*(r: I2C1_STAR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `TIMEOUT=`*(r: var I2C1_STAR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.I2C1_STAR1_Fields

func PECERR*(r: I2C1_STAR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `PECERR=`*(r: var I2C1_STAR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.I2C1_STAR1_Fields

func OVR*(r: I2C1_STAR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `OVR=`*(r: var I2C1_STAR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.I2C1_STAR1_Fields

func AF*(r: I2C1_STAR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `AF=`*(r: var I2C1_STAR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.I2C1_STAR1_Fields

func ARLO*(r: I2C1_STAR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `ARLO=`*(r: var I2C1_STAR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.I2C1_STAR1_Fields

func BERR*(r: I2C1_STAR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BERR=`*(r: var I2C1_STAR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.I2C1_STAR1_Fields

func TxE*(r: I2C1_STAR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func RxNE*(r: I2C1_STAR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

func STOPF*(r: I2C1_STAR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

func ADD10*(r: I2C1_STAR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

func BTF*(r: I2C1_STAR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func ADDRx*(r: I2C1_STAR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func SB*(r: I2C1_STAR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func PEC*(r: I2C1_STAR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

func DUALF*(r: I2C1_STAR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func SMBHOST*(r: I2C1_STAR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

func SMBDEFAULT*(r: I2C1_STAR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

func GENCALL*(r: I2C1_STAR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

func TRA*(r: I2C1_STAR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func BUSY*(r: I2C1_STAR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func MSL*(r: I2C1_STAR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func F_S*(r: I2C1_CKCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `F_S=`*(r: var I2C1_CKCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.I2C1_CKCFGR_Fields

func DUTY*(r: I2C1_CKCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `DUTY=`*(r: var I2C1_CKCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.I2C1_CKCFGR_Fields

func CCR*(r: I2C1_CKCFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

proc `CCR=`*(r: var I2C1_CKCFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 11)
  tmp.setMask((val shl 0).masked(0 .. 11))
  r = tmp.I2C1_CKCFGR_Fields

func TRISE*(r: I2C1_RTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 5)

proc `TRISE=`*(r: var I2C1_RTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 5)
  tmp.setMask((val shl 0).masked(0 .. 5))
  r = tmp.I2C1_RTR_Fields

type
  SPI1_CTLR1_Fields* = distinct uint32
  SPI1_CTLR2_Fields* = distinct uint32
  SPI1_STATR_Fields* = distinct uint32
  SPI1_DATAR_Fields* = distinct uint32
  SPI1_CRCR_Fields* = distinct uint32
  SPI1_RCRCR_Fields* = distinct uint32
  SPI1_TCRCR_Fields* = distinct uint32
  SPI1_SPI_I2S_CFGR_Fields* = distinct uint32
  SPI1_HSCR_Fields* = distinct uint32

proc read*(reg: SPI1_CTLR1_Type): SPI1_CTLR1_Fields {.inline.} =
  volatileLoad(cast[ptr SPI1_CTLR1_Fields](reg.loc))

proc read*(reg: static SPI1_CTLR1_Type): SPI1_CTLR1_Fields {.inline.} =
  volatileLoad(cast[ptr SPI1_CTLR1_Fields](reg.loc))

proc write*(reg: SPI1_CTLR1_Type, val: SPI1_CTLR1_Fields) {.inline.} =
  volatileStore(cast[ptr SPI1_CTLR1_Fields](reg.loc), val)

proc write*(reg: SPI1_CTLR1_Type, BIDIMODE: bool = false, BIDIOE: bool = false, CRCEN: bool = false, CRCNEXT: bool = false, DFF: bool = false, RXONLY: bool = false, SSM: bool = false, SSI: bool = false, LSBFIRST: bool = false, SPE: bool = false, BR: uint32 = 0, MSTR: bool = false, CPOL: bool = false, CPHA: bool = false) =
  var x: uint32
  x.setMask((BIDIMODE.uint32 shl 15).masked(15 .. 15))
  x.setMask((BIDIOE.uint32 shl 14).masked(14 .. 14))
  x.setMask((CRCEN.uint32 shl 13).masked(13 .. 13))
  x.setMask((CRCNEXT.uint32 shl 12).masked(12 .. 12))
  x.setMask((DFF.uint32 shl 11).masked(11 .. 11))
  x.setMask((RXONLY.uint32 shl 10).masked(10 .. 10))
  x.setMask((SSM.uint32 shl 9).masked(9 .. 9))
  x.setMask((SSI.uint32 shl 8).masked(8 .. 8))
  x.setMask((LSBFIRST.uint32 shl 7).masked(7 .. 7))
  x.setMask((SPE.uint32 shl 6).masked(6 .. 6))
  x.setMask((BR shl 3).masked(3 .. 5))
  x.setMask((MSTR.uint32 shl 2).masked(2 .. 2))
  x.setMask((CPOL.uint32 shl 1).masked(1 .. 1))
  x.setMask((CPHA.uint32 shl 0).masked(0 .. 0))
  reg.write x.SPI1_CTLR1_Fields

template modifyIt*(reg: SPI1_CTLR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SPI1_CTLR2_Type): SPI1_CTLR2_Fields {.inline.} =
  volatileLoad(cast[ptr SPI1_CTLR2_Fields](reg.loc))

proc read*(reg: static SPI1_CTLR2_Type): SPI1_CTLR2_Fields {.inline.} =
  volatileLoad(cast[ptr SPI1_CTLR2_Fields](reg.loc))

proc write*(reg: SPI1_CTLR2_Type, val: SPI1_CTLR2_Fields) {.inline.} =
  volatileStore(cast[ptr SPI1_CTLR2_Fields](reg.loc), val)

proc write*(reg: SPI1_CTLR2_Type, TXEIE: bool = false, RXNEIE: bool = false, ERRIE: bool = false, SSOE: bool = false, TXDMAEN: bool = false, RXDMAEN: bool = false) =
  var x: uint32
  x.setMask((TXEIE.uint32 shl 7).masked(7 .. 7))
  x.setMask((RXNEIE.uint32 shl 6).masked(6 .. 6))
  x.setMask((ERRIE.uint32 shl 5).masked(5 .. 5))
  x.setMask((SSOE.uint32 shl 2).masked(2 .. 2))
  x.setMask((TXDMAEN.uint32 shl 1).masked(1 .. 1))
  x.setMask((RXDMAEN.uint32 shl 0).masked(0 .. 0))
  reg.write x.SPI1_CTLR2_Fields

template modifyIt*(reg: SPI1_CTLR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SPI1_STATR_Type): SPI1_STATR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI1_STATR_Fields](reg.loc))

proc read*(reg: static SPI1_STATR_Type): SPI1_STATR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI1_STATR_Fields](reg.loc))

proc write*(reg: SPI1_STATR_Type, val: SPI1_STATR_Fields) {.inline.} =
  volatileStore(cast[ptr SPI1_STATR_Fields](reg.loc), val)

proc write*(reg: SPI1_STATR_Type, OVR: bool = false, CRCERR: bool = false) =
  var x: uint32
  x.setMask((OVR.uint32 shl 6).masked(6 .. 6))
  x.setMask((CRCERR.uint32 shl 4).masked(4 .. 4))
  reg.write x.SPI1_STATR_Fields

template modifyIt*(reg: SPI1_STATR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SPI1_DATAR_Type): SPI1_DATAR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI1_DATAR_Fields](reg.loc))

proc read*(reg: static SPI1_DATAR_Type): SPI1_DATAR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI1_DATAR_Fields](reg.loc))

proc write*(reg: SPI1_DATAR_Type, val: SPI1_DATAR_Fields) {.inline.} =
  volatileStore(cast[ptr SPI1_DATAR_Fields](reg.loc), val)

proc write*(reg: SPI1_DATAR_Type, DATAR: uint32 = 0) =
  var x: uint32
  x.setMask((DATAR shl 0).masked(0 .. 15))
  reg.write x.SPI1_DATAR_Fields

template modifyIt*(reg: SPI1_DATAR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SPI1_CRCR_Type): SPI1_CRCR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI1_CRCR_Fields](reg.loc))

proc read*(reg: static SPI1_CRCR_Type): SPI1_CRCR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI1_CRCR_Fields](reg.loc))

proc write*(reg: SPI1_CRCR_Type, val: SPI1_CRCR_Fields) {.inline.} =
  volatileStore(cast[ptr SPI1_CRCR_Fields](reg.loc), val)

proc write*(reg: SPI1_CRCR_Type, CRCPOLY: uint32 = 7) =
  var x: uint32
  x.setMask((CRCPOLY shl 0).masked(0 .. 15))
  reg.write x.SPI1_CRCR_Fields

template modifyIt*(reg: SPI1_CRCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SPI1_RCRCR_Type): SPI1_RCRCR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI1_RCRCR_Fields](reg.loc))

proc read*(reg: static SPI1_RCRCR_Type): SPI1_RCRCR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI1_RCRCR_Fields](reg.loc))

proc read*(reg: SPI1_TCRCR_Type): SPI1_TCRCR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI1_TCRCR_Fields](reg.loc))

proc read*(reg: static SPI1_TCRCR_Type): SPI1_TCRCR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI1_TCRCR_Fields](reg.loc))

proc read*(reg: SPI1_SPI_I2S_CFGR_Type): SPI1_SPI_I2S_CFGR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI1_SPI_I2S_CFGR_Fields](reg.loc))

proc read*(reg: static SPI1_SPI_I2S_CFGR_Type): SPI1_SPI_I2S_CFGR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI1_SPI_I2S_CFGR_Fields](reg.loc))

proc write*(reg: SPI1_SPI_I2S_CFGR_Type, val: SPI1_SPI_I2S_CFGR_Fields) {.inline.} =
  volatileStore(cast[ptr SPI1_SPI_I2S_CFGR_Fields](reg.loc), val)

proc write*(reg: SPI1_SPI_I2S_CFGR_Type, CHLEN: bool = false, DATLEN: uint32 = 0, CKPOL: bool = false, I2SSTD: uint32 = 0, PCMSYNC: bool = false, I2SCFG: uint32 = 0, I2SE: bool = false, I2SMOD: bool = false) =
  var x: uint32
  x.setMask((CHLEN.uint32 shl 0).masked(0 .. 0))
  x.setMask((DATLEN shl 1).masked(1 .. 2))
  x.setMask((CKPOL.uint32 shl 3).masked(3 .. 3))
  x.setMask((I2SSTD shl 4).masked(4 .. 5))
  x.setMask((PCMSYNC.uint32 shl 7).masked(7 .. 7))
  x.setMask((I2SCFG shl 8).masked(8 .. 9))
  x.setMask((I2SE.uint32 shl 10).masked(10 .. 10))
  x.setMask((I2SMOD.uint32 shl 11).masked(11 .. 11))
  reg.write x.SPI1_SPI_I2S_CFGR_Fields

template modifyIt*(reg: SPI1_SPI_I2S_CFGR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SPI1_HSCR_Type): SPI1_HSCR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI1_HSCR_Fields](reg.loc))

proc read*(reg: static SPI1_HSCR_Type): SPI1_HSCR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI1_HSCR_Fields](reg.loc))

proc write*(reg: SPI1_HSCR_Type, val: SPI1_HSCR_Fields) {.inline.} =
  volatileStore(cast[ptr SPI1_HSCR_Fields](reg.loc), val)

proc write*(reg: SPI1_HSCR_Type, HSRXEN: bool = false) =
  var x: uint32
  x.setMask((HSRXEN.uint32 shl 0).masked(0 .. 0))
  reg.write x.SPI1_HSCR_Fields

template modifyIt*(reg: SPI1_HSCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func BIDIMODE*(r: SPI1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `BIDIMODE=`*(r: var SPI1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.SPI1_CTLR1_Fields

func BIDIOE*(r: SPI1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `BIDIOE=`*(r: var SPI1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.SPI1_CTLR1_Fields

func CRCEN*(r: SPI1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `CRCEN=`*(r: var SPI1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.SPI1_CTLR1_Fields

func CRCNEXT*(r: SPI1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `CRCNEXT=`*(r: var SPI1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.SPI1_CTLR1_Fields

func DFF*(r: SPI1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `DFF=`*(r: var SPI1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.SPI1_CTLR1_Fields

func RXONLY*(r: SPI1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `RXONLY=`*(r: var SPI1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.SPI1_CTLR1_Fields

func SSM*(r: SPI1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `SSM=`*(r: var SPI1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.SPI1_CTLR1_Fields

func SSI*(r: SPI1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `SSI=`*(r: var SPI1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.SPI1_CTLR1_Fields

func LSBFIRST*(r: SPI1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `LSBFIRST=`*(r: var SPI1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.SPI1_CTLR1_Fields

func SPE*(r: SPI1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `SPE=`*(r: var SPI1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.SPI1_CTLR1_Fields

func BR*(r: SPI1_CTLR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 5)

proc `BR=`*(r: var SPI1_CTLR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 5)
  tmp.setMask((val shl 3).masked(3 .. 5))
  r = tmp.SPI1_CTLR1_Fields

func MSTR*(r: SPI1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `MSTR=`*(r: var SPI1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.SPI1_CTLR1_Fields

func CPOL*(r: SPI1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CPOL=`*(r: var SPI1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.SPI1_CTLR1_Fields

func CPHA*(r: SPI1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CPHA=`*(r: var SPI1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.SPI1_CTLR1_Fields

func TXEIE*(r: SPI1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXEIE=`*(r: var SPI1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.SPI1_CTLR2_Fields

func RXNEIE*(r: SPI1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `RXNEIE=`*(r: var SPI1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.SPI1_CTLR2_Fields

func ERRIE*(r: SPI1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ERRIE=`*(r: var SPI1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.SPI1_CTLR2_Fields

func SSOE*(r: SPI1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `SSOE=`*(r: var SPI1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.SPI1_CTLR2_Fields

func TXDMAEN*(r: SPI1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `TXDMAEN=`*(r: var SPI1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.SPI1_CTLR2_Fields

func RXDMAEN*(r: SPI1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `RXDMAEN=`*(r: var SPI1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.SPI1_CTLR2_Fields

func BSY*(r: SPI1_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func OVR*(r: SPI1_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `OVR=`*(r: var SPI1_STATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.SPI1_STATR_Fields

func MODF*(r: SPI1_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

func CRCERR*(r: SPI1_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `CRCERR=`*(r: var SPI1_STATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.SPI1_STATR_Fields

func CHSID*(r: SPI1_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func UDR*(r: SPI1_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

func TXE*(r: SPI1_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func RXNE*(r: SPI1_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func DATAR*(r: SPI1_DATAR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `DATAR=`*(r: var SPI1_DATAR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.SPI1_DATAR_Fields

func CRCPOLY*(r: SPI1_CRCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CRCPOLY=`*(r: var SPI1_CRCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.SPI1_CRCR_Fields

func RXCRC*(r: SPI1_RCRCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func TXCRC*(r: SPI1_TCRCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func CHLEN*(r: SPI1_SPI_I2S_CFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CHLEN=`*(r: var SPI1_SPI_I2S_CFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.SPI1_SPI_I2S_CFGR_Fields

func DATLEN*(r: SPI1_SPI_I2S_CFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(1 .. 2)

proc `DATLEN=`*(r: var SPI1_SPI_I2S_CFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 2)
  tmp.setMask((val shl 1).masked(1 .. 2))
  r = tmp.SPI1_SPI_I2S_CFGR_Fields

func CKPOL*(r: SPI1_SPI_I2S_CFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CKPOL=`*(r: var SPI1_SPI_I2S_CFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.SPI1_SPI_I2S_CFGR_Fields

func I2SSTD*(r: SPI1_SPI_I2S_CFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 5)

proc `I2SSTD=`*(r: var SPI1_SPI_I2S_CFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.SPI1_SPI_I2S_CFGR_Fields

func PCMSYNC*(r: SPI1_SPI_I2S_CFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `PCMSYNC=`*(r: var SPI1_SPI_I2S_CFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.SPI1_SPI_I2S_CFGR_Fields

func I2SCFG*(r: SPI1_SPI_I2S_CFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `I2SCFG=`*(r: var SPI1_SPI_I2S_CFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.SPI1_SPI_I2S_CFGR_Fields

func I2SE*(r: SPI1_SPI_I2S_CFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `I2SE=`*(r: var SPI1_SPI_I2S_CFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.SPI1_SPI_I2S_CFGR_Fields

func I2SMOD*(r: SPI1_SPI_I2S_CFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `I2SMOD=`*(r: var SPI1_SPI_I2S_CFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.SPI1_SPI_I2S_CFGR_Fields

func HSRXEN*(r: SPI1_HSCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `HSRXEN=`*(r: var SPI1_HSCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.SPI1_HSCR_Fields

type
  SPI2_CTLR1_Fields* = distinct uint32
  SPI2_CTLR2_Fields* = distinct uint32
  SPI2_STATR_Fields* = distinct uint32
  SPI2_DATAR_Fields* = distinct uint32
  SPI2_CRCR_Fields* = distinct uint32
  SPI2_RCRCR_Fields* = distinct uint32
  SPI2_TCRCR_Fields* = distinct uint32
  SPI2_I2SCFGR_Fields* = distinct uint32
  SPI2_I2SPR_Fields* = distinct uint32
  SPI2_HSCR_Fields* = distinct uint32

proc read*(reg: SPI2_CTLR1_Type): SPI2_CTLR1_Fields {.inline.} =
  volatileLoad(cast[ptr SPI2_CTLR1_Fields](reg.loc))

proc read*(reg: static SPI2_CTLR1_Type): SPI2_CTLR1_Fields {.inline.} =
  volatileLoad(cast[ptr SPI2_CTLR1_Fields](reg.loc))

proc write*(reg: SPI2_CTLR1_Type, val: SPI2_CTLR1_Fields) {.inline.} =
  volatileStore(cast[ptr SPI2_CTLR1_Fields](reg.loc), val)

proc write*(reg: SPI2_CTLR1_Type, BIDIMODE: bool = false, BIDIOE: bool = false, CRCEN: bool = false, CRCNEXT: bool = false, DFF: bool = false, RXONLY: bool = false, SSM: bool = false, SSI: bool = false, LSBFIRST: bool = false, SPE: bool = false, BR: uint32 = 0, MSTR: bool = false, CPOL: bool = false, CPHA: bool = false) =
  var x: uint32
  x.setMask((BIDIMODE.uint32 shl 15).masked(15 .. 15))
  x.setMask((BIDIOE.uint32 shl 14).masked(14 .. 14))
  x.setMask((CRCEN.uint32 shl 13).masked(13 .. 13))
  x.setMask((CRCNEXT.uint32 shl 12).masked(12 .. 12))
  x.setMask((DFF.uint32 shl 11).masked(11 .. 11))
  x.setMask((RXONLY.uint32 shl 10).masked(10 .. 10))
  x.setMask((SSM.uint32 shl 9).masked(9 .. 9))
  x.setMask((SSI.uint32 shl 8).masked(8 .. 8))
  x.setMask((LSBFIRST.uint32 shl 7).masked(7 .. 7))
  x.setMask((SPE.uint32 shl 6).masked(6 .. 6))
  x.setMask((BR shl 3).masked(3 .. 5))
  x.setMask((MSTR.uint32 shl 2).masked(2 .. 2))
  x.setMask((CPOL.uint32 shl 1).masked(1 .. 1))
  x.setMask((CPHA.uint32 shl 0).masked(0 .. 0))
  reg.write x.SPI2_CTLR1_Fields

template modifyIt*(reg: SPI2_CTLR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SPI2_CTLR2_Type): SPI2_CTLR2_Fields {.inline.} =
  volatileLoad(cast[ptr SPI2_CTLR2_Fields](reg.loc))

proc read*(reg: static SPI2_CTLR2_Type): SPI2_CTLR2_Fields {.inline.} =
  volatileLoad(cast[ptr SPI2_CTLR2_Fields](reg.loc))

proc write*(reg: SPI2_CTLR2_Type, val: SPI2_CTLR2_Fields) {.inline.} =
  volatileStore(cast[ptr SPI2_CTLR2_Fields](reg.loc), val)

proc write*(reg: SPI2_CTLR2_Type, TXEIE: bool = false, RXNEIE: bool = false, ERRIE: bool = false, SSOE: bool = false, TXDMAEN: bool = false, RXDMAEN: bool = false) =
  var x: uint32
  x.setMask((TXEIE.uint32 shl 7).masked(7 .. 7))
  x.setMask((RXNEIE.uint32 shl 6).masked(6 .. 6))
  x.setMask((ERRIE.uint32 shl 5).masked(5 .. 5))
  x.setMask((SSOE.uint32 shl 2).masked(2 .. 2))
  x.setMask((TXDMAEN.uint32 shl 1).masked(1 .. 1))
  x.setMask((RXDMAEN.uint32 shl 0).masked(0 .. 0))
  reg.write x.SPI2_CTLR2_Fields

template modifyIt*(reg: SPI2_CTLR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SPI2_STATR_Type): SPI2_STATR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI2_STATR_Fields](reg.loc))

proc read*(reg: static SPI2_STATR_Type): SPI2_STATR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI2_STATR_Fields](reg.loc))

proc write*(reg: SPI2_STATR_Type, val: SPI2_STATR_Fields) {.inline.} =
  volatileStore(cast[ptr SPI2_STATR_Fields](reg.loc), val)

proc write*(reg: SPI2_STATR_Type, CRCERR: bool = false) =
  var x: uint32
  x.setMask((CRCERR.uint32 shl 4).masked(4 .. 4))
  reg.write x.SPI2_STATR_Fields

template modifyIt*(reg: SPI2_STATR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SPI2_DATAR_Type): SPI2_DATAR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI2_DATAR_Fields](reg.loc))

proc read*(reg: static SPI2_DATAR_Type): SPI2_DATAR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI2_DATAR_Fields](reg.loc))

proc write*(reg: SPI2_DATAR_Type, val: SPI2_DATAR_Fields) {.inline.} =
  volatileStore(cast[ptr SPI2_DATAR_Fields](reg.loc), val)

proc write*(reg: SPI2_DATAR_Type, DATAR: uint32 = 0) =
  var x: uint32
  x.setMask((DATAR shl 0).masked(0 .. 15))
  reg.write x.SPI2_DATAR_Fields

template modifyIt*(reg: SPI2_DATAR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SPI2_CRCR_Type): SPI2_CRCR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI2_CRCR_Fields](reg.loc))

proc read*(reg: static SPI2_CRCR_Type): SPI2_CRCR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI2_CRCR_Fields](reg.loc))

proc write*(reg: SPI2_CRCR_Type, val: SPI2_CRCR_Fields) {.inline.} =
  volatileStore(cast[ptr SPI2_CRCR_Fields](reg.loc), val)

proc write*(reg: SPI2_CRCR_Type, CRCPOLY: uint32 = 7) =
  var x: uint32
  x.setMask((CRCPOLY shl 0).masked(0 .. 15))
  reg.write x.SPI2_CRCR_Fields

template modifyIt*(reg: SPI2_CRCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SPI2_RCRCR_Type): SPI2_RCRCR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI2_RCRCR_Fields](reg.loc))

proc read*(reg: static SPI2_RCRCR_Type): SPI2_RCRCR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI2_RCRCR_Fields](reg.loc))

proc read*(reg: SPI2_TCRCR_Type): SPI2_TCRCR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI2_TCRCR_Fields](reg.loc))

proc read*(reg: static SPI2_TCRCR_Type): SPI2_TCRCR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI2_TCRCR_Fields](reg.loc))

proc read*(reg: SPI2_I2SCFGR_Type): SPI2_I2SCFGR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI2_I2SCFGR_Fields](reg.loc))

proc read*(reg: static SPI2_I2SCFGR_Type): SPI2_I2SCFGR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI2_I2SCFGR_Fields](reg.loc))

proc write*(reg: SPI2_I2SCFGR_Type, val: SPI2_I2SCFGR_Fields) {.inline.} =
  volatileStore(cast[ptr SPI2_I2SCFGR_Fields](reg.loc), val)

proc write*(reg: SPI2_I2SCFGR_Type, I2SMOD: bool = false, I2SE: bool = false, I2SCFG: uint32 = 0, PCMSYNC: bool = false, I2SSTD: uint32 = 0, CKPOL: bool = false, DATLEN: uint32 = 0, CHLEN: bool = false) =
  var x: uint32
  x.setMask((I2SMOD.uint32 shl 11).masked(11 .. 11))
  x.setMask((I2SE.uint32 shl 10).masked(10 .. 10))
  x.setMask((I2SCFG shl 8).masked(8 .. 9))
  x.setMask((PCMSYNC.uint32 shl 7).masked(7 .. 7))
  x.setMask((I2SSTD shl 4).masked(4 .. 5))
  x.setMask((CKPOL.uint32 shl 3).masked(3 .. 3))
  x.setMask((DATLEN shl 1).masked(1 .. 2))
  x.setMask((CHLEN.uint32 shl 0).masked(0 .. 0))
  reg.write x.SPI2_I2SCFGR_Fields

template modifyIt*(reg: SPI2_I2SCFGR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SPI2_I2SPR_Type): SPI2_I2SPR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI2_I2SPR_Fields](reg.loc))

proc read*(reg: static SPI2_I2SPR_Type): SPI2_I2SPR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI2_I2SPR_Fields](reg.loc))

proc write*(reg: SPI2_I2SPR_Type, val: SPI2_I2SPR_Fields) {.inline.} =
  volatileStore(cast[ptr SPI2_I2SPR_Fields](reg.loc), val)

proc write*(reg: SPI2_I2SPR_Type, MCKOE: bool = false, ODD: bool = false, I2SDIV: uint32 = 10) =
  var x: uint32
  x.setMask((MCKOE.uint32 shl 9).masked(9 .. 9))
  x.setMask((ODD.uint32 shl 8).masked(8 .. 8))
  x.setMask((I2SDIV shl 0).masked(0 .. 7))
  reg.write x.SPI2_I2SPR_Fields

template modifyIt*(reg: SPI2_I2SPR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SPI2_HSCR_Type): SPI2_HSCR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI2_HSCR_Fields](reg.loc))

proc read*(reg: static SPI2_HSCR_Type): SPI2_HSCR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI2_HSCR_Fields](reg.loc))

proc write*(reg: SPI2_HSCR_Type, val: SPI2_HSCR_Fields) {.inline.} =
  volatileStore(cast[ptr SPI2_HSCR_Fields](reg.loc), val)

proc write*(reg: SPI2_HSCR_Type, HSRXEN: bool = false) =
  var x: uint32
  x.setMask((HSRXEN.uint32 shl 0).masked(0 .. 0))
  reg.write x.SPI2_HSCR_Fields

template modifyIt*(reg: SPI2_HSCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func BIDIMODE*(r: SPI2_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `BIDIMODE=`*(r: var SPI2_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.SPI2_CTLR1_Fields

func BIDIOE*(r: SPI2_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `BIDIOE=`*(r: var SPI2_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.SPI2_CTLR1_Fields

func CRCEN*(r: SPI2_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `CRCEN=`*(r: var SPI2_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.SPI2_CTLR1_Fields

func CRCNEXT*(r: SPI2_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `CRCNEXT=`*(r: var SPI2_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.SPI2_CTLR1_Fields

func DFF*(r: SPI2_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `DFF=`*(r: var SPI2_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.SPI2_CTLR1_Fields

func RXONLY*(r: SPI2_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `RXONLY=`*(r: var SPI2_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.SPI2_CTLR1_Fields

func SSM*(r: SPI2_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `SSM=`*(r: var SPI2_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.SPI2_CTLR1_Fields

func SSI*(r: SPI2_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `SSI=`*(r: var SPI2_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.SPI2_CTLR1_Fields

func LSBFIRST*(r: SPI2_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `LSBFIRST=`*(r: var SPI2_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.SPI2_CTLR1_Fields

func SPE*(r: SPI2_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `SPE=`*(r: var SPI2_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.SPI2_CTLR1_Fields

func BR*(r: SPI2_CTLR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 5)

proc `BR=`*(r: var SPI2_CTLR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 5)
  tmp.setMask((val shl 3).masked(3 .. 5))
  r = tmp.SPI2_CTLR1_Fields

func MSTR*(r: SPI2_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `MSTR=`*(r: var SPI2_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.SPI2_CTLR1_Fields

func CPOL*(r: SPI2_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CPOL=`*(r: var SPI2_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.SPI2_CTLR1_Fields

func CPHA*(r: SPI2_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CPHA=`*(r: var SPI2_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.SPI2_CTLR1_Fields

func TXEIE*(r: SPI2_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXEIE=`*(r: var SPI2_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.SPI2_CTLR2_Fields

func RXNEIE*(r: SPI2_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `RXNEIE=`*(r: var SPI2_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.SPI2_CTLR2_Fields

func ERRIE*(r: SPI2_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ERRIE=`*(r: var SPI2_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.SPI2_CTLR2_Fields

func SSOE*(r: SPI2_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `SSOE=`*(r: var SPI2_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.SPI2_CTLR2_Fields

func TXDMAEN*(r: SPI2_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `TXDMAEN=`*(r: var SPI2_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.SPI2_CTLR2_Fields

func RXDMAEN*(r: SPI2_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `RXDMAEN=`*(r: var SPI2_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.SPI2_CTLR2_Fields

func BSY*(r: SPI2_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func OVR*(r: SPI2_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

func MODF*(r: SPI2_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

func CRCERR*(r: SPI2_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `CRCERR=`*(r: var SPI2_STATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.SPI2_STATR_Fields

func TXE*(r: SPI2_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func RXNE*(r: SPI2_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func DATAR*(r: SPI2_DATAR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `DATAR=`*(r: var SPI2_DATAR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.SPI2_DATAR_Fields

func CRCPOLY*(r: SPI2_CRCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CRCPOLY=`*(r: var SPI2_CRCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.SPI2_CRCR_Fields

func RXCRC*(r: SPI2_RCRCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func TXCRC*(r: SPI2_TCRCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func I2SMOD*(r: SPI2_I2SCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `I2SMOD=`*(r: var SPI2_I2SCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.SPI2_I2SCFGR_Fields

func I2SE*(r: SPI2_I2SCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `I2SE=`*(r: var SPI2_I2SCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.SPI2_I2SCFGR_Fields

func I2SCFG*(r: SPI2_I2SCFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `I2SCFG=`*(r: var SPI2_I2SCFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.SPI2_I2SCFGR_Fields

func PCMSYNC*(r: SPI2_I2SCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `PCMSYNC=`*(r: var SPI2_I2SCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.SPI2_I2SCFGR_Fields

func I2SSTD*(r: SPI2_I2SCFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 5)

proc `I2SSTD=`*(r: var SPI2_I2SCFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.SPI2_I2SCFGR_Fields

func CKPOL*(r: SPI2_I2SCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CKPOL=`*(r: var SPI2_I2SCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.SPI2_I2SCFGR_Fields

func DATLEN*(r: SPI2_I2SCFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(1 .. 2)

proc `DATLEN=`*(r: var SPI2_I2SCFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 2)
  tmp.setMask((val shl 1).masked(1 .. 2))
  r = tmp.SPI2_I2SCFGR_Fields

func CHLEN*(r: SPI2_I2SCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CHLEN=`*(r: var SPI2_I2SCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.SPI2_I2SCFGR_Fields

func MCKOE*(r: SPI2_I2SPR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `MCKOE=`*(r: var SPI2_I2SPR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.SPI2_I2SPR_Fields

func ODD*(r: SPI2_I2SPR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `ODD=`*(r: var SPI2_I2SPR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.SPI2_I2SPR_Fields

func I2SDIV*(r: SPI2_I2SPR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `I2SDIV=`*(r: var SPI2_I2SPR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.SPI2_I2SPR_Fields

func HSRXEN*(r: SPI2_HSCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `HSRXEN=`*(r: var SPI2_HSCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.SPI2_HSCR_Fields

type
  USART1_STATR_Fields* = distinct uint32
  USART1_DATAR_Fields* = distinct uint32
  USART1_BRR_Fields* = distinct uint32
  USART1_CTLR1_Fields* = distinct uint32
  USART1_CTLR2_Fields* = distinct uint32
  USART1_CTLR3_Fields* = distinct uint32
  USART1_GPR_Fields* = distinct uint32

proc read*(reg: USART1_STATR_Type): USART1_STATR_Fields {.inline.} =
  volatileLoad(cast[ptr USART1_STATR_Fields](reg.loc))

proc read*(reg: static USART1_STATR_Type): USART1_STATR_Fields {.inline.} =
  volatileLoad(cast[ptr USART1_STATR_Fields](reg.loc))

proc write*(reg: USART1_STATR_Type, val: USART1_STATR_Fields) {.inline.} =
  volatileStore(cast[ptr USART1_STATR_Fields](reg.loc), val)

proc write*(reg: USART1_STATR_Type, CTS: bool = false, LBD: bool = false, TC: bool = true, RXNE: bool = false) =
  var x: uint32
  x.setMask((CTS.uint32 shl 9).masked(9 .. 9))
  x.setMask((LBD.uint32 shl 8).masked(8 .. 8))
  x.setMask((TC.uint32 shl 6).masked(6 .. 6))
  x.setMask((RXNE.uint32 shl 5).masked(5 .. 5))
  reg.write x.USART1_STATR_Fields

template modifyIt*(reg: USART1_STATR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USART1_DATAR_Type): USART1_DATAR_Fields {.inline.} =
  volatileLoad(cast[ptr USART1_DATAR_Fields](reg.loc))

proc read*(reg: static USART1_DATAR_Type): USART1_DATAR_Fields {.inline.} =
  volatileLoad(cast[ptr USART1_DATAR_Fields](reg.loc))

proc write*(reg: USART1_DATAR_Type, val: USART1_DATAR_Fields) {.inline.} =
  volatileStore(cast[ptr USART1_DATAR_Fields](reg.loc), val)

proc write*(reg: USART1_DATAR_Type, DR: uint32 = 0) =
  var x: uint32
  x.setMask((DR shl 0).masked(0 .. 8))
  reg.write x.USART1_DATAR_Fields

template modifyIt*(reg: USART1_DATAR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USART1_BRR_Type): USART1_BRR_Fields {.inline.} =
  volatileLoad(cast[ptr USART1_BRR_Fields](reg.loc))

proc read*(reg: static USART1_BRR_Type): USART1_BRR_Fields {.inline.} =
  volatileLoad(cast[ptr USART1_BRR_Fields](reg.loc))

proc write*(reg: USART1_BRR_Type, val: USART1_BRR_Fields) {.inline.} =
  volatileStore(cast[ptr USART1_BRR_Fields](reg.loc), val)

proc write*(reg: USART1_BRR_Type, DIV_Mantissa: uint32 = 0, DIV_Fraction: uint32 = 0) =
  var x: uint32
  x.setMask((DIV_Mantissa shl 4).masked(4 .. 15))
  x.setMask((DIV_Fraction shl 0).masked(0 .. 3))
  reg.write x.USART1_BRR_Fields

template modifyIt*(reg: USART1_BRR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USART1_CTLR1_Type): USART1_CTLR1_Fields {.inline.} =
  volatileLoad(cast[ptr USART1_CTLR1_Fields](reg.loc))

proc read*(reg: static USART1_CTLR1_Type): USART1_CTLR1_Fields {.inline.} =
  volatileLoad(cast[ptr USART1_CTLR1_Fields](reg.loc))

proc write*(reg: USART1_CTLR1_Type, val: USART1_CTLR1_Fields) {.inline.} =
  volatileStore(cast[ptr USART1_CTLR1_Fields](reg.loc), val)

proc write*(reg: USART1_CTLR1_Type, UE: bool = false, M: bool = false, WAKE: bool = false, PCE: bool = false, PS: bool = false, PEIE: bool = false, TXEIE: bool = false, TCIE: bool = false, RXNEIE: bool = false, IDLEIE: bool = false, TE: bool = false, RE: bool = false, RWU: bool = false, SBK: bool = false) =
  var x: uint32
  x.setMask((UE.uint32 shl 13).masked(13 .. 13))
  x.setMask((M.uint32 shl 12).masked(12 .. 12))
  x.setMask((WAKE.uint32 shl 11).masked(11 .. 11))
  x.setMask((PCE.uint32 shl 10).masked(10 .. 10))
  x.setMask((PS.uint32 shl 9).masked(9 .. 9))
  x.setMask((PEIE.uint32 shl 8).masked(8 .. 8))
  x.setMask((TXEIE.uint32 shl 7).masked(7 .. 7))
  x.setMask((TCIE.uint32 shl 6).masked(6 .. 6))
  x.setMask((RXNEIE.uint32 shl 5).masked(5 .. 5))
  x.setMask((IDLEIE.uint32 shl 4).masked(4 .. 4))
  x.setMask((TE.uint32 shl 3).masked(3 .. 3))
  x.setMask((RE.uint32 shl 2).masked(2 .. 2))
  x.setMask((RWU.uint32 shl 1).masked(1 .. 1))
  x.setMask((SBK.uint32 shl 0).masked(0 .. 0))
  reg.write x.USART1_CTLR1_Fields

template modifyIt*(reg: USART1_CTLR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USART1_CTLR2_Type): USART1_CTLR2_Fields {.inline.} =
  volatileLoad(cast[ptr USART1_CTLR2_Fields](reg.loc))

proc read*(reg: static USART1_CTLR2_Type): USART1_CTLR2_Fields {.inline.} =
  volatileLoad(cast[ptr USART1_CTLR2_Fields](reg.loc))

proc write*(reg: USART1_CTLR2_Type, val: USART1_CTLR2_Fields) {.inline.} =
  volatileStore(cast[ptr USART1_CTLR2_Fields](reg.loc), val)

proc write*(reg: USART1_CTLR2_Type, LINEN: bool = false, STOP: uint32 = 0, CLKEN: bool = false, CPOL: bool = false, CPHA: bool = false, LBCL: bool = false, LBDIE: bool = false, LBDL: bool = false, ADD: uint32 = 0) =
  var x: uint32
  x.setMask((LINEN.uint32 shl 14).masked(14 .. 14))
  x.setMask((STOP shl 12).masked(12 .. 13))
  x.setMask((CLKEN.uint32 shl 11).masked(11 .. 11))
  x.setMask((CPOL.uint32 shl 10).masked(10 .. 10))
  x.setMask((CPHA.uint32 shl 9).masked(9 .. 9))
  x.setMask((LBCL.uint32 shl 8).masked(8 .. 8))
  x.setMask((LBDIE.uint32 shl 6).masked(6 .. 6))
  x.setMask((LBDL.uint32 shl 5).masked(5 .. 5))
  x.setMask((ADD shl 0).masked(0 .. 3))
  reg.write x.USART1_CTLR2_Fields

template modifyIt*(reg: USART1_CTLR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USART1_CTLR3_Type): USART1_CTLR3_Fields {.inline.} =
  volatileLoad(cast[ptr USART1_CTLR3_Fields](reg.loc))

proc read*(reg: static USART1_CTLR3_Type): USART1_CTLR3_Fields {.inline.} =
  volatileLoad(cast[ptr USART1_CTLR3_Fields](reg.loc))

proc write*(reg: USART1_CTLR3_Type, val: USART1_CTLR3_Fields) {.inline.} =
  volatileStore(cast[ptr USART1_CTLR3_Fields](reg.loc), val)

proc write*(reg: USART1_CTLR3_Type, CTSIE: bool = false, CTSE: bool = false, RTSE: bool = false, DMAT: bool = false, DMAR: bool = false, SCEN: bool = false, NACK: bool = false, HDSEL: bool = false, IRLP: bool = false, IREN: bool = false, EIE: bool = false) =
  var x: uint32
  x.setMask((CTSIE.uint32 shl 10).masked(10 .. 10))
  x.setMask((CTSE.uint32 shl 9).masked(9 .. 9))
  x.setMask((RTSE.uint32 shl 8).masked(8 .. 8))
  x.setMask((DMAT.uint32 shl 7).masked(7 .. 7))
  x.setMask((DMAR.uint32 shl 6).masked(6 .. 6))
  x.setMask((SCEN.uint32 shl 5).masked(5 .. 5))
  x.setMask((NACK.uint32 shl 4).masked(4 .. 4))
  x.setMask((HDSEL.uint32 shl 3).masked(3 .. 3))
  x.setMask((IRLP.uint32 shl 2).masked(2 .. 2))
  x.setMask((IREN.uint32 shl 1).masked(1 .. 1))
  x.setMask((EIE.uint32 shl 0).masked(0 .. 0))
  reg.write x.USART1_CTLR3_Fields

template modifyIt*(reg: USART1_CTLR3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USART1_GPR_Type): USART1_GPR_Fields {.inline.} =
  volatileLoad(cast[ptr USART1_GPR_Fields](reg.loc))

proc read*(reg: static USART1_GPR_Type): USART1_GPR_Fields {.inline.} =
  volatileLoad(cast[ptr USART1_GPR_Fields](reg.loc))

proc write*(reg: USART1_GPR_Type, val: USART1_GPR_Fields) {.inline.} =
  volatileStore(cast[ptr USART1_GPR_Fields](reg.loc), val)

proc write*(reg: USART1_GPR_Type, GT: uint32 = 0, PSC: uint32 = 0) =
  var x: uint32
  x.setMask((GT shl 8).masked(8 .. 15))
  x.setMask((PSC shl 0).masked(0 .. 7))
  reg.write x.USART1_GPR_Fields

template modifyIt*(reg: USART1_GPR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func CTS*(r: USART1_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `CTS=`*(r: var USART1_STATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.USART1_STATR_Fields

func LBD*(r: USART1_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `LBD=`*(r: var USART1_STATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.USART1_STATR_Fields

func TXE*(r: USART1_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func TC*(r: USART1_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `TC=`*(r: var USART1_STATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.USART1_STATR_Fields

func RXNE*(r: USART1_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `RXNE=`*(r: var USART1_STATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.USART1_STATR_Fields

func IDLE*(r: USART1_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

func ORE*(r: USART1_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

func NE*(r: USART1_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func FE*(r: USART1_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func PE*(r: USART1_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func DR*(r: USART1_DATAR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 8)

proc `DR=`*(r: var USART1_DATAR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 8)
  tmp.setMask((val shl 0).masked(0 .. 8))
  r = tmp.USART1_DATAR_Fields

func DIV_Mantissa*(r: USART1_BRR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 15)

proc `DIV_Mantissa=`*(r: var USART1_BRR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 15)
  tmp.setMask((val shl 4).masked(4 .. 15))
  r = tmp.USART1_BRR_Fields

func DIV_Fraction*(r: USART1_BRR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `DIV_Fraction=`*(r: var USART1_BRR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.USART1_BRR_Fields

func UE*(r: USART1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `UE=`*(r: var USART1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.USART1_CTLR1_Fields

func M*(r: USART1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `M=`*(r: var USART1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.USART1_CTLR1_Fields

func WAKE*(r: USART1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `WAKE=`*(r: var USART1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.USART1_CTLR1_Fields

func PCE*(r: USART1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `PCE=`*(r: var USART1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.USART1_CTLR1_Fields

func PS*(r: USART1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `PS=`*(r: var USART1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.USART1_CTLR1_Fields

func PEIE*(r: USART1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `PEIE=`*(r: var USART1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.USART1_CTLR1_Fields

func TXEIE*(r: USART1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXEIE=`*(r: var USART1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.USART1_CTLR1_Fields

func TCIE*(r: USART1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `TCIE=`*(r: var USART1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.USART1_CTLR1_Fields

func RXNEIE*(r: USART1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `RXNEIE=`*(r: var USART1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.USART1_CTLR1_Fields

func IDLEIE*(r: USART1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `IDLEIE=`*(r: var USART1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.USART1_CTLR1_Fields

func TE*(r: USART1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TE=`*(r: var USART1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.USART1_CTLR1_Fields

func RE*(r: USART1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `RE=`*(r: var USART1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.USART1_CTLR1_Fields

func RWU*(r: USART1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `RWU=`*(r: var USART1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.USART1_CTLR1_Fields

func SBK*(r: USART1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `SBK=`*(r: var USART1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.USART1_CTLR1_Fields

func LINEN*(r: USART1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `LINEN=`*(r: var USART1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.USART1_CTLR2_Fields

func STOP*(r: USART1_CTLR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 13)

proc `STOP=`*(r: var USART1_CTLR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.USART1_CTLR2_Fields

func CLKEN*(r: USART1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `CLKEN=`*(r: var USART1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.USART1_CTLR2_Fields

func CPOL*(r: USART1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `CPOL=`*(r: var USART1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.USART1_CTLR2_Fields

func CPHA*(r: USART1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `CPHA=`*(r: var USART1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.USART1_CTLR2_Fields

func LBCL*(r: USART1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `LBCL=`*(r: var USART1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.USART1_CTLR2_Fields

func LBDIE*(r: USART1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `LBDIE=`*(r: var USART1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.USART1_CTLR2_Fields

func LBDL*(r: USART1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `LBDL=`*(r: var USART1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.USART1_CTLR2_Fields

func ADD*(r: USART1_CTLR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `ADD=`*(r: var USART1_CTLR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.USART1_CTLR2_Fields

func CTSIE*(r: USART1_CTLR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `CTSIE=`*(r: var USART1_CTLR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.USART1_CTLR3_Fields

func CTSE*(r: USART1_CTLR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `CTSE=`*(r: var USART1_CTLR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.USART1_CTLR3_Fields

func RTSE*(r: USART1_CTLR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `RTSE=`*(r: var USART1_CTLR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.USART1_CTLR3_Fields

func DMAT*(r: USART1_CTLR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `DMAT=`*(r: var USART1_CTLR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.USART1_CTLR3_Fields

func DMAR*(r: USART1_CTLR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `DMAR=`*(r: var USART1_CTLR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.USART1_CTLR3_Fields

func SCEN*(r: USART1_CTLR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `SCEN=`*(r: var USART1_CTLR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.USART1_CTLR3_Fields

func NACK*(r: USART1_CTLR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NACK=`*(r: var USART1_CTLR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.USART1_CTLR3_Fields

func HDSEL*(r: USART1_CTLR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `HDSEL=`*(r: var USART1_CTLR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.USART1_CTLR3_Fields

func IRLP*(r: USART1_CTLR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `IRLP=`*(r: var USART1_CTLR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.USART1_CTLR3_Fields

func IREN*(r: USART1_CTLR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `IREN=`*(r: var USART1_CTLR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.USART1_CTLR3_Fields

func EIE*(r: USART1_CTLR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `EIE=`*(r: var USART1_CTLR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.USART1_CTLR3_Fields

func GT*(r: USART1_GPR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `GT=`*(r: var USART1_GPR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.USART1_GPR_Fields

func PSC*(r: USART1_GPR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `PSC=`*(r: var USART1_GPR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.USART1_GPR_Fields

type
  ADC1_STATR_Fields* = distinct uint32
  ADC1_CTLR1_Fields* = distinct uint32
  ADC1_CTLR2_Fields* = distinct uint32
  ADC1_SAMPTR1_CHARGE1_Fields* = distinct uint32
  ADC1_SAMPTR2_CHARGE2_Fields* = distinct uint32
  ADC1_IOFR1_Fields* = distinct uint32
  ADC1_IOFR2_Fields* = distinct uint32
  ADC1_IOFR3_Fields* = distinct uint32
  ADC1_IOFR4_Fields* = distinct uint32
  ADC1_WDHTR_Fields* = distinct uint32
  ADC1_WDLTR_Fields* = distinct uint32
  ADC1_RSQR1_Fields* = distinct uint32
  ADC1_RSQR2_Fields* = distinct uint32
  ADC1_RSQR3_CHANNEL_Fields* = distinct uint32
  ADC1_ISQR_Fields* = distinct uint32
  ADC1_IDATAR1_CHGOFFSET_Fields* = distinct uint32
  ADC1_IDATAR2_Fields* = distinct uint32
  ADC1_IDATAR3_Fields* = distinct uint32
  ADC1_IDATAR4_Fields* = distinct uint32
  ADC1_RDATAR_DR_ACT_DCG_Fields* = distinct uint32

proc read*(reg: ADC1_STATR_Type): ADC1_STATR_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_STATR_Fields](reg.loc))

proc read*(reg: static ADC1_STATR_Type): ADC1_STATR_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_STATR_Fields](reg.loc))

proc write*(reg: ADC1_STATR_Type, val: ADC1_STATR_Fields) {.inline.} =
  volatileStore(cast[ptr ADC1_STATR_Fields](reg.loc), val)

proc write*(reg: ADC1_STATR_Type, STRT: bool = false, JSTRT: bool = false, JEOC: bool = false, EOC: bool = false, AWD: bool = false) =
  var x: uint32
  x.setMask((STRT.uint32 shl 4).masked(4 .. 4))
  x.setMask((JSTRT.uint32 shl 3).masked(3 .. 3))
  x.setMask((JEOC.uint32 shl 2).masked(2 .. 2))
  x.setMask((EOC.uint32 shl 1).masked(1 .. 1))
  x.setMask((AWD.uint32 shl 0).masked(0 .. 0))
  reg.write x.ADC1_STATR_Fields

template modifyIt*(reg: ADC1_STATR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC1_CTLR1_Type): ADC1_CTLR1_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_CTLR1_Fields](reg.loc))

proc read*(reg: static ADC1_CTLR1_Type): ADC1_CTLR1_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_CTLR1_Fields](reg.loc))

proc write*(reg: ADC1_CTLR1_Type, val: ADC1_CTLR1_Fields) {.inline.} =
  volatileStore(cast[ptr ADC1_CTLR1_Fields](reg.loc), val)

proc write*(reg: ADC1_CTLR1_Type, PGA: uint32 = 0, BUFEN: bool = false, TKITUNE: bool = false, TKEYEN: bool = false, AWDEN: bool = false, JAWDEN: bool = false, DUALMOD: uint32 = 0, DISCNUM: uint32 = 0, JDISCEN: bool = false, DISCEN: bool = false, JAUTO: bool = false, AWDSGL: bool = false, SCAN: bool = false, JEOCIE: bool = false, AWDIE: bool = false, EOCIE: bool = false, AWDCH: uint32 = 0) =
  var x: uint32
  x.setMask((PGA shl 27).masked(27 .. 28))
  x.setMask((BUFEN.uint32 shl 26).masked(26 .. 26))
  x.setMask((TKITUNE.uint32 shl 25).masked(25 .. 25))
  x.setMask((TKEYEN.uint32 shl 24).masked(24 .. 24))
  x.setMask((AWDEN.uint32 shl 23).masked(23 .. 23))
  x.setMask((JAWDEN.uint32 shl 22).masked(22 .. 22))
  x.setMask((DUALMOD shl 16).masked(16 .. 19))
  x.setMask((DISCNUM shl 13).masked(13 .. 15))
  x.setMask((JDISCEN.uint32 shl 12).masked(12 .. 12))
  x.setMask((DISCEN.uint32 shl 11).masked(11 .. 11))
  x.setMask((JAUTO.uint32 shl 10).masked(10 .. 10))
  x.setMask((AWDSGL.uint32 shl 9).masked(9 .. 9))
  x.setMask((SCAN.uint32 shl 8).masked(8 .. 8))
  x.setMask((JEOCIE.uint32 shl 7).masked(7 .. 7))
  x.setMask((AWDIE.uint32 shl 6).masked(6 .. 6))
  x.setMask((EOCIE.uint32 shl 5).masked(5 .. 5))
  x.setMask((AWDCH shl 0).masked(0 .. 4))
  reg.write x.ADC1_CTLR1_Fields

template modifyIt*(reg: ADC1_CTLR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC1_CTLR2_Type): ADC1_CTLR2_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_CTLR2_Fields](reg.loc))

proc read*(reg: static ADC1_CTLR2_Type): ADC1_CTLR2_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_CTLR2_Fields](reg.loc))

proc write*(reg: ADC1_CTLR2_Type, val: ADC1_CTLR2_Fields) {.inline.} =
  volatileStore(cast[ptr ADC1_CTLR2_Fields](reg.loc), val)

proc write*(reg: ADC1_CTLR2_Type, TSVREFE: bool = false, SWSTART: bool = false, JSWSTART: bool = false, EXTTRIG: bool = false, EXTSEL: uint32 = 0, JEXTTRIG: bool = false, JEXTSEL: uint32 = 0, ALIGN: bool = false, DMA: bool = false, RSTCAL: bool = false, CAL: bool = false, CONT: bool = false, ADON: bool = false) =
  var x: uint32
  x.setMask((TSVREFE.uint32 shl 23).masked(23 .. 23))
  x.setMask((SWSTART.uint32 shl 22).masked(22 .. 22))
  x.setMask((JSWSTART.uint32 shl 21).masked(21 .. 21))
  x.setMask((EXTTRIG.uint32 shl 20).masked(20 .. 20))
  x.setMask((EXTSEL shl 17).masked(17 .. 19))
  x.setMask((JEXTTRIG.uint32 shl 15).masked(15 .. 15))
  x.setMask((JEXTSEL shl 12).masked(12 .. 14))
  x.setMask((ALIGN.uint32 shl 11).masked(11 .. 11))
  x.setMask((DMA.uint32 shl 8).masked(8 .. 8))
  x.setMask((RSTCAL.uint32 shl 3).masked(3 .. 3))
  x.setMask((CAL.uint32 shl 2).masked(2 .. 2))
  x.setMask((CONT.uint32 shl 1).masked(1 .. 1))
  x.setMask((ADON.uint32 shl 0).masked(0 .. 0))
  reg.write x.ADC1_CTLR2_Fields

template modifyIt*(reg: ADC1_CTLR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC1_SAMPTR1_CHARGE1_Type): ADC1_SAMPTR1_CHARGE1_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_SAMPTR1_CHARGE1_Fields](reg.loc))

proc read*(reg: static ADC1_SAMPTR1_CHARGE1_Type): ADC1_SAMPTR1_CHARGE1_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_SAMPTR1_CHARGE1_Fields](reg.loc))

proc write*(reg: ADC1_SAMPTR1_CHARGE1_Type, val: ADC1_SAMPTR1_CHARGE1_Fields) {.inline.} =
  volatileStore(cast[ptr ADC1_SAMPTR1_CHARGE1_Fields](reg.loc), val)

proc write*(reg: ADC1_SAMPTR1_CHARGE1_Type, SMP10_TKCG10: uint32 = 0, SMP11_TKCG11: uint32 = 0, SMP12_TKCG12: uint32 = 0, SMP13_TKCG13: uint32 = 0, SMP14_TKCG14: uint32 = 0, SMP15_TKCG15: uint32 = 0, SMP16_TKCG16: uint32 = 0, SMP17_TKCG17: uint32 = 0) =
  var x: uint32
  x.setMask((SMP10_TKCG10 shl 0).masked(0 .. 2))
  x.setMask((SMP11_TKCG11 shl 3).masked(3 .. 5))
  x.setMask((SMP12_TKCG12 shl 6).masked(6 .. 8))
  x.setMask((SMP13_TKCG13 shl 9).masked(9 .. 11))
  x.setMask((SMP14_TKCG14 shl 12).masked(12 .. 14))
  x.setMask((SMP15_TKCG15 shl 15).masked(15 .. 17))
  x.setMask((SMP16_TKCG16 shl 18).masked(18 .. 20))
  x.setMask((SMP17_TKCG17 shl 21).masked(21 .. 23))
  reg.write x.ADC1_SAMPTR1_CHARGE1_Fields

template modifyIt*(reg: ADC1_SAMPTR1_CHARGE1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC1_SAMPTR2_CHARGE2_Type): ADC1_SAMPTR2_CHARGE2_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_SAMPTR2_CHARGE2_Fields](reg.loc))

proc read*(reg: static ADC1_SAMPTR2_CHARGE2_Type): ADC1_SAMPTR2_CHARGE2_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_SAMPTR2_CHARGE2_Fields](reg.loc))

proc write*(reg: ADC1_SAMPTR2_CHARGE2_Type, val: ADC1_SAMPTR2_CHARGE2_Fields) {.inline.} =
  volatileStore(cast[ptr ADC1_SAMPTR2_CHARGE2_Fields](reg.loc), val)

proc write*(reg: ADC1_SAMPTR2_CHARGE2_Type, SMP0_TKCG0: uint32 = 0, SMP1_TKCG1: uint32 = 0, SMP2_TKCG2: uint32 = 0, SMP3_TKCG3: uint32 = 0, SMP4_TKCG4: uint32 = 0, SMP5_TKCG5: uint32 = 0, SMP6_TKCG6: uint32 = 0, SMP7_TKCG7: uint32 = 0, SMP8_TKCG8: uint32 = 0, SMP9_TKCG9: uint32 = 0) =
  var x: uint32
  x.setMask((SMP0_TKCG0 shl 0).masked(0 .. 2))
  x.setMask((SMP1_TKCG1 shl 3).masked(3 .. 5))
  x.setMask((SMP2_TKCG2 shl 6).masked(6 .. 8))
  x.setMask((SMP3_TKCG3 shl 9).masked(9 .. 11))
  x.setMask((SMP4_TKCG4 shl 12).masked(12 .. 14))
  x.setMask((SMP5_TKCG5 shl 15).masked(15 .. 17))
  x.setMask((SMP6_TKCG6 shl 18).masked(18 .. 20))
  x.setMask((SMP7_TKCG7 shl 21).masked(21 .. 23))
  x.setMask((SMP8_TKCG8 shl 24).masked(24 .. 26))
  x.setMask((SMP9_TKCG9 shl 27).masked(27 .. 29))
  reg.write x.ADC1_SAMPTR2_CHARGE2_Fields

template modifyIt*(reg: ADC1_SAMPTR2_CHARGE2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC1_IOFR1_Type): ADC1_IOFR1_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_IOFR1_Fields](reg.loc))

proc read*(reg: static ADC1_IOFR1_Type): ADC1_IOFR1_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_IOFR1_Fields](reg.loc))

proc write*(reg: ADC1_IOFR1_Type, val: ADC1_IOFR1_Fields) {.inline.} =
  volatileStore(cast[ptr ADC1_IOFR1_Fields](reg.loc), val)

proc write*(reg: ADC1_IOFR1_Type, JOFFSET1: uint32 = 0) =
  var x: uint32
  x.setMask((JOFFSET1 shl 0).masked(0 .. 11))
  reg.write x.ADC1_IOFR1_Fields

template modifyIt*(reg: ADC1_IOFR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC1_IOFR2_Type): ADC1_IOFR2_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_IOFR2_Fields](reg.loc))

proc read*(reg: static ADC1_IOFR2_Type): ADC1_IOFR2_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_IOFR2_Fields](reg.loc))

proc write*(reg: ADC1_IOFR2_Type, val: ADC1_IOFR2_Fields) {.inline.} =
  volatileStore(cast[ptr ADC1_IOFR2_Fields](reg.loc), val)

proc write*(reg: ADC1_IOFR2_Type, JOFFSET2: uint32 = 0) =
  var x: uint32
  x.setMask((JOFFSET2 shl 0).masked(0 .. 11))
  reg.write x.ADC1_IOFR2_Fields

template modifyIt*(reg: ADC1_IOFR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC1_IOFR3_Type): ADC1_IOFR3_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_IOFR3_Fields](reg.loc))

proc read*(reg: static ADC1_IOFR3_Type): ADC1_IOFR3_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_IOFR3_Fields](reg.loc))

proc write*(reg: ADC1_IOFR3_Type, val: ADC1_IOFR3_Fields) {.inline.} =
  volatileStore(cast[ptr ADC1_IOFR3_Fields](reg.loc), val)

proc write*(reg: ADC1_IOFR3_Type, JOFFSET3: uint32 = 0) =
  var x: uint32
  x.setMask((JOFFSET3 shl 0).masked(0 .. 11))
  reg.write x.ADC1_IOFR3_Fields

template modifyIt*(reg: ADC1_IOFR3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC1_IOFR4_Type): ADC1_IOFR4_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_IOFR4_Fields](reg.loc))

proc read*(reg: static ADC1_IOFR4_Type): ADC1_IOFR4_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_IOFR4_Fields](reg.loc))

proc write*(reg: ADC1_IOFR4_Type, val: ADC1_IOFR4_Fields) {.inline.} =
  volatileStore(cast[ptr ADC1_IOFR4_Fields](reg.loc), val)

proc write*(reg: ADC1_IOFR4_Type, JOFFSET4: uint32 = 0) =
  var x: uint32
  x.setMask((JOFFSET4 shl 0).masked(0 .. 11))
  reg.write x.ADC1_IOFR4_Fields

template modifyIt*(reg: ADC1_IOFR4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC1_WDHTR_Type): ADC1_WDHTR_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_WDHTR_Fields](reg.loc))

proc read*(reg: static ADC1_WDHTR_Type): ADC1_WDHTR_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_WDHTR_Fields](reg.loc))

proc write*(reg: ADC1_WDHTR_Type, val: ADC1_WDHTR_Fields) {.inline.} =
  volatileStore(cast[ptr ADC1_WDHTR_Fields](reg.loc), val)

proc write*(reg: ADC1_WDHTR_Type, HT: uint32 = 0) =
  var x: uint32
  x.setMask((HT shl 0).masked(0 .. 11))
  reg.write x.ADC1_WDHTR_Fields

template modifyIt*(reg: ADC1_WDHTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC1_WDLTR_Type): ADC1_WDLTR_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_WDLTR_Fields](reg.loc))

proc read*(reg: static ADC1_WDLTR_Type): ADC1_WDLTR_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_WDLTR_Fields](reg.loc))

proc write*(reg: ADC1_WDLTR_Type, val: ADC1_WDLTR_Fields) {.inline.} =
  volatileStore(cast[ptr ADC1_WDLTR_Fields](reg.loc), val)

proc write*(reg: ADC1_WDLTR_Type, LT: uint32 = 0) =
  var x: uint32
  x.setMask((LT shl 0).masked(0 .. 11))
  reg.write x.ADC1_WDLTR_Fields

template modifyIt*(reg: ADC1_WDLTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC1_RSQR1_Type): ADC1_RSQR1_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_RSQR1_Fields](reg.loc))

proc read*(reg: static ADC1_RSQR1_Type): ADC1_RSQR1_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_RSQR1_Fields](reg.loc))

proc write*(reg: ADC1_RSQR1_Type, val: ADC1_RSQR1_Fields) {.inline.} =
  volatileStore(cast[ptr ADC1_RSQR1_Fields](reg.loc), val)

proc write*(reg: ADC1_RSQR1_Type, L: uint32 = 0, SQ16: uint32 = 0, SQ15: uint32 = 0, SQ14: uint32 = 0, SQ13: uint32 = 0) =
  var x: uint32
  x.setMask((L shl 20).masked(20 .. 23))
  x.setMask((SQ16 shl 15).masked(15 .. 19))
  x.setMask((SQ15 shl 10).masked(10 .. 14))
  x.setMask((SQ14 shl 5).masked(5 .. 9))
  x.setMask((SQ13 shl 0).masked(0 .. 4))
  reg.write x.ADC1_RSQR1_Fields

template modifyIt*(reg: ADC1_RSQR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC1_RSQR2_Type): ADC1_RSQR2_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_RSQR2_Fields](reg.loc))

proc read*(reg: static ADC1_RSQR2_Type): ADC1_RSQR2_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_RSQR2_Fields](reg.loc))

proc write*(reg: ADC1_RSQR2_Type, val: ADC1_RSQR2_Fields) {.inline.} =
  volatileStore(cast[ptr ADC1_RSQR2_Fields](reg.loc), val)

proc write*(reg: ADC1_RSQR2_Type, SQ12: uint32 = 0, SQ11: uint32 = 0, SQ10: uint32 = 0, SQ9: uint32 = 0, SQ8: uint32 = 0, SQ7: uint32 = 0) =
  var x: uint32
  x.setMask((SQ12 shl 25).masked(25 .. 29))
  x.setMask((SQ11 shl 20).masked(20 .. 24))
  x.setMask((SQ10 shl 15).masked(15 .. 19))
  x.setMask((SQ9 shl 10).masked(10 .. 14))
  x.setMask((SQ8 shl 5).masked(5 .. 9))
  x.setMask((SQ7 shl 0).masked(0 .. 4))
  reg.write x.ADC1_RSQR2_Fields

template modifyIt*(reg: ADC1_RSQR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC1_RSQR3_CHANNEL_Type): ADC1_RSQR3_CHANNEL_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_RSQR3_CHANNEL_Fields](reg.loc))

proc read*(reg: static ADC1_RSQR3_CHANNEL_Type): ADC1_RSQR3_CHANNEL_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_RSQR3_CHANNEL_Fields](reg.loc))

proc write*(reg: ADC1_RSQR3_CHANNEL_Type, val: ADC1_RSQR3_CHANNEL_Fields) {.inline.} =
  volatileStore(cast[ptr ADC1_RSQR3_CHANNEL_Fields](reg.loc), val)

proc write*(reg: ADC1_RSQR3_CHANNEL_Type, SQ6: uint32 = 0, SQ5: uint32 = 0, SQ4: uint32 = 0, SQ3: uint32 = 0, SQ2: uint32 = 0, SQ1_CHSEL: uint32 = 0) =
  var x: uint32
  x.setMask((SQ6 shl 25).masked(25 .. 29))
  x.setMask((SQ5 shl 20).masked(20 .. 24))
  x.setMask((SQ4 shl 15).masked(15 .. 19))
  x.setMask((SQ3 shl 10).masked(10 .. 14))
  x.setMask((SQ2 shl 5).masked(5 .. 9))
  x.setMask((SQ1_CHSEL shl 0).masked(0 .. 4))
  reg.write x.ADC1_RSQR3_CHANNEL_Fields

template modifyIt*(reg: ADC1_RSQR3_CHANNEL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC1_ISQR_Type): ADC1_ISQR_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_ISQR_Fields](reg.loc))

proc read*(reg: static ADC1_ISQR_Type): ADC1_ISQR_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_ISQR_Fields](reg.loc))

proc write*(reg: ADC1_ISQR_Type, val: ADC1_ISQR_Fields) {.inline.} =
  volatileStore(cast[ptr ADC1_ISQR_Fields](reg.loc), val)

proc write*(reg: ADC1_ISQR_Type, JL: uint32 = 0, JSQ4: uint32 = 0, JSQ3: uint32 = 0, JSQ2: uint32 = 0, JSQ1: uint32 = 0) =
  var x: uint32
  x.setMask((JL shl 20).masked(20 .. 21))
  x.setMask((JSQ4 shl 15).masked(15 .. 19))
  x.setMask((JSQ3 shl 10).masked(10 .. 14))
  x.setMask((JSQ2 shl 5).masked(5 .. 9))
  x.setMask((JSQ1 shl 0).masked(0 .. 4))
  reg.write x.ADC1_ISQR_Fields

template modifyIt*(reg: ADC1_ISQR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC1_IDATAR1_CHGOFFSET_Type): ADC1_IDATAR1_CHGOFFSET_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_IDATAR1_CHGOFFSET_Fields](reg.loc))

proc read*(reg: static ADC1_IDATAR1_CHGOFFSET_Type): ADC1_IDATAR1_CHGOFFSET_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_IDATAR1_CHGOFFSET_Fields](reg.loc))

proc read*(reg: ADC1_IDATAR2_Type): ADC1_IDATAR2_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_IDATAR2_Fields](reg.loc))

proc read*(reg: static ADC1_IDATAR2_Type): ADC1_IDATAR2_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_IDATAR2_Fields](reg.loc))

proc read*(reg: ADC1_IDATAR3_Type): ADC1_IDATAR3_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_IDATAR3_Fields](reg.loc))

proc read*(reg: static ADC1_IDATAR3_Type): ADC1_IDATAR3_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_IDATAR3_Fields](reg.loc))

proc read*(reg: ADC1_IDATAR4_Type): ADC1_IDATAR4_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_IDATAR4_Fields](reg.loc))

proc read*(reg: static ADC1_IDATAR4_Type): ADC1_IDATAR4_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_IDATAR4_Fields](reg.loc))

proc read*(reg: ADC1_RDATAR_DR_ACT_DCG_Type): ADC1_RDATAR_DR_ACT_DCG_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_RDATAR_DR_ACT_DCG_Fields](reg.loc))

proc read*(reg: static ADC1_RDATAR_DR_ACT_DCG_Type): ADC1_RDATAR_DR_ACT_DCG_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_RDATAR_DR_ACT_DCG_Fields](reg.loc))

proc write*(reg: ADC1_RDATAR_DR_ACT_DCG_Type, val: ADC1_RDATAR_DR_ACT_DCG_Fields) {.inline.} =
  volatileStore(cast[ptr ADC1_RDATAR_DR_ACT_DCG_Fields](reg.loc), val)

proc write*(reg: ADC1_RDATAR_DR_ACT_DCG_Type, DATA0_7_TKACT_DCG: uint32 = 0, DATA8_15: uint32 = 0) =
  var x: uint32
  x.setMask((DATA0_7_TKACT_DCG shl 0).masked(0 .. 7))
  x.setMask((DATA8_15 shl 8).masked(8 .. 15))
  reg.write x.ADC1_RDATAR_DR_ACT_DCG_Fields

template modifyIt*(reg: ADC1_RDATAR_DR_ACT_DCG_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func STRT*(r: ADC1_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `STRT=`*(r: var ADC1_STATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.ADC1_STATR_Fields

func JSTRT*(r: ADC1_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `JSTRT=`*(r: var ADC1_STATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.ADC1_STATR_Fields

func JEOC*(r: ADC1_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `JEOC=`*(r: var ADC1_STATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.ADC1_STATR_Fields

func EOC*(r: ADC1_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `EOC=`*(r: var ADC1_STATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.ADC1_STATR_Fields

func AWD*(r: ADC1_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `AWD=`*(r: var ADC1_STATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.ADC1_STATR_Fields

func PGA*(r: ADC1_CTLR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(27 .. 28)

proc `PGA=`*(r: var ADC1_CTLR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 28)
  tmp.setMask((val shl 27).masked(27 .. 28))
  r = tmp.ADC1_CTLR1_Fields

func BUFEN*(r: ADC1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `BUFEN=`*(r: var ADC1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.ADC1_CTLR1_Fields

func TKITUNE*(r: ADC1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `TKITUNE=`*(r: var ADC1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.ADC1_CTLR1_Fields

func TKEYEN*(r: ADC1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `TKEYEN=`*(r: var ADC1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.ADC1_CTLR1_Fields

func AWDEN*(r: ADC1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `AWDEN=`*(r: var ADC1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.ADC1_CTLR1_Fields

func JAWDEN*(r: ADC1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `JAWDEN=`*(r: var ADC1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.ADC1_CTLR1_Fields

func DUALMOD*(r: ADC1_CTLR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 19)

proc `DUALMOD=`*(r: var ADC1_CTLR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 19)
  tmp.setMask((val shl 16).masked(16 .. 19))
  r = tmp.ADC1_CTLR1_Fields

func DISCNUM*(r: ADC1_CTLR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(13 .. 15)

proc `DISCNUM=`*(r: var ADC1_CTLR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 15)
  tmp.setMask((val shl 13).masked(13 .. 15))
  r = tmp.ADC1_CTLR1_Fields

func JDISCEN*(r: ADC1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `JDISCEN=`*(r: var ADC1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.ADC1_CTLR1_Fields

func DISCEN*(r: ADC1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `DISCEN=`*(r: var ADC1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.ADC1_CTLR1_Fields

func JAUTO*(r: ADC1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `JAUTO=`*(r: var ADC1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.ADC1_CTLR1_Fields

func AWDSGL*(r: ADC1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `AWDSGL=`*(r: var ADC1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.ADC1_CTLR1_Fields

func SCAN*(r: ADC1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `SCAN=`*(r: var ADC1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.ADC1_CTLR1_Fields

func JEOCIE*(r: ADC1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `JEOCIE=`*(r: var ADC1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.ADC1_CTLR1_Fields

func AWDIE*(r: ADC1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `AWDIE=`*(r: var ADC1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.ADC1_CTLR1_Fields

func EOCIE*(r: ADC1_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `EOCIE=`*(r: var ADC1_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.ADC1_CTLR1_Fields

func AWDCH*(r: ADC1_CTLR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 4)

proc `AWDCH=`*(r: var ADC1_CTLR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 4)
  tmp.setMask((val shl 0).masked(0 .. 4))
  r = tmp.ADC1_CTLR1_Fields

func TSVREFE*(r: ADC1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `TSVREFE=`*(r: var ADC1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.ADC1_CTLR2_Fields

func SWSTART*(r: ADC1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `SWSTART=`*(r: var ADC1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.ADC1_CTLR2_Fields

func JSWSTART*(r: ADC1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `JSWSTART=`*(r: var ADC1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.ADC1_CTLR2_Fields

func EXTTRIG*(r: ADC1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `EXTTRIG=`*(r: var ADC1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.ADC1_CTLR2_Fields

func EXTSEL*(r: ADC1_CTLR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(17 .. 19)

proc `EXTSEL=`*(r: var ADC1_CTLR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 19)
  tmp.setMask((val shl 17).masked(17 .. 19))
  r = tmp.ADC1_CTLR2_Fields

func JEXTTRIG*(r: ADC1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `JEXTTRIG=`*(r: var ADC1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.ADC1_CTLR2_Fields

func JEXTSEL*(r: ADC1_CTLR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 14)

proc `JEXTSEL=`*(r: var ADC1_CTLR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 14)
  tmp.setMask((val shl 12).masked(12 .. 14))
  r = tmp.ADC1_CTLR2_Fields

func ALIGN*(r: ADC1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `ALIGN=`*(r: var ADC1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.ADC1_CTLR2_Fields

func DMA*(r: ADC1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `DMA=`*(r: var ADC1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.ADC1_CTLR2_Fields

func RSTCAL*(r: ADC1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `RSTCAL=`*(r: var ADC1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.ADC1_CTLR2_Fields

func CAL*(r: ADC1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `CAL=`*(r: var ADC1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.ADC1_CTLR2_Fields

func CONT*(r: ADC1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CONT=`*(r: var ADC1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.ADC1_CTLR2_Fields

func ADON*(r: ADC1_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `ADON=`*(r: var ADC1_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.ADC1_CTLR2_Fields

func SMP10_TKCG10*(r: ADC1_SAMPTR1_CHARGE1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 2)

proc `SMP10_TKCG10=`*(r: var ADC1_SAMPTR1_CHARGE1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 2)
  tmp.setMask((val shl 0).masked(0 .. 2))
  r = tmp.ADC1_SAMPTR1_CHARGE1_Fields

func SMP11_TKCG11*(r: ADC1_SAMPTR1_CHARGE1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 5)

proc `SMP11_TKCG11=`*(r: var ADC1_SAMPTR1_CHARGE1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 5)
  tmp.setMask((val shl 3).masked(3 .. 5))
  r = tmp.ADC1_SAMPTR1_CHARGE1_Fields

func SMP12_TKCG12*(r: ADC1_SAMPTR1_CHARGE1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 8)

proc `SMP12_TKCG12=`*(r: var ADC1_SAMPTR1_CHARGE1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 8)
  tmp.setMask((val shl 6).masked(6 .. 8))
  r = tmp.ADC1_SAMPTR1_CHARGE1_Fields

func SMP13_TKCG13*(r: ADC1_SAMPTR1_CHARGE1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(9 .. 11)

proc `SMP13_TKCG13=`*(r: var ADC1_SAMPTR1_CHARGE1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 11)
  tmp.setMask((val shl 9).masked(9 .. 11))
  r = tmp.ADC1_SAMPTR1_CHARGE1_Fields

func SMP14_TKCG14*(r: ADC1_SAMPTR1_CHARGE1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 14)

proc `SMP14_TKCG14=`*(r: var ADC1_SAMPTR1_CHARGE1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 14)
  tmp.setMask((val shl 12).masked(12 .. 14))
  r = tmp.ADC1_SAMPTR1_CHARGE1_Fields

func SMP15_TKCG15*(r: ADC1_SAMPTR1_CHARGE1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(15 .. 17)

proc `SMP15_TKCG15=`*(r: var ADC1_SAMPTR1_CHARGE1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 17)
  tmp.setMask((val shl 15).masked(15 .. 17))
  r = tmp.ADC1_SAMPTR1_CHARGE1_Fields

func SMP16_TKCG16*(r: ADC1_SAMPTR1_CHARGE1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 20)

proc `SMP16_TKCG16=`*(r: var ADC1_SAMPTR1_CHARGE1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 20)
  tmp.setMask((val shl 18).masked(18 .. 20))
  r = tmp.ADC1_SAMPTR1_CHARGE1_Fields

func SMP17_TKCG17*(r: ADC1_SAMPTR1_CHARGE1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(21 .. 23)

proc `SMP17_TKCG17=`*(r: var ADC1_SAMPTR1_CHARGE1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 23)
  tmp.setMask((val shl 21).masked(21 .. 23))
  r = tmp.ADC1_SAMPTR1_CHARGE1_Fields

func SMP0_TKCG0*(r: ADC1_SAMPTR2_CHARGE2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 2)

proc `SMP0_TKCG0=`*(r: var ADC1_SAMPTR2_CHARGE2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 2)
  tmp.setMask((val shl 0).masked(0 .. 2))
  r = tmp.ADC1_SAMPTR2_CHARGE2_Fields

func SMP1_TKCG1*(r: ADC1_SAMPTR2_CHARGE2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 5)

proc `SMP1_TKCG1=`*(r: var ADC1_SAMPTR2_CHARGE2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 5)
  tmp.setMask((val shl 3).masked(3 .. 5))
  r = tmp.ADC1_SAMPTR2_CHARGE2_Fields

func SMP2_TKCG2*(r: ADC1_SAMPTR2_CHARGE2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 8)

proc `SMP2_TKCG2=`*(r: var ADC1_SAMPTR2_CHARGE2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 8)
  tmp.setMask((val shl 6).masked(6 .. 8))
  r = tmp.ADC1_SAMPTR2_CHARGE2_Fields

func SMP3_TKCG3*(r: ADC1_SAMPTR2_CHARGE2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(9 .. 11)

proc `SMP3_TKCG3=`*(r: var ADC1_SAMPTR2_CHARGE2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 11)
  tmp.setMask((val shl 9).masked(9 .. 11))
  r = tmp.ADC1_SAMPTR2_CHARGE2_Fields

func SMP4_TKCG4*(r: ADC1_SAMPTR2_CHARGE2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 14)

proc `SMP4_TKCG4=`*(r: var ADC1_SAMPTR2_CHARGE2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 14)
  tmp.setMask((val shl 12).masked(12 .. 14))
  r = tmp.ADC1_SAMPTR2_CHARGE2_Fields

func SMP5_TKCG5*(r: ADC1_SAMPTR2_CHARGE2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(15 .. 17)

proc `SMP5_TKCG5=`*(r: var ADC1_SAMPTR2_CHARGE2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 17)
  tmp.setMask((val shl 15).masked(15 .. 17))
  r = tmp.ADC1_SAMPTR2_CHARGE2_Fields

func SMP6_TKCG6*(r: ADC1_SAMPTR2_CHARGE2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 20)

proc `SMP6_TKCG6=`*(r: var ADC1_SAMPTR2_CHARGE2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 20)
  tmp.setMask((val shl 18).masked(18 .. 20))
  r = tmp.ADC1_SAMPTR2_CHARGE2_Fields

func SMP7_TKCG7*(r: ADC1_SAMPTR2_CHARGE2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(21 .. 23)

proc `SMP7_TKCG7=`*(r: var ADC1_SAMPTR2_CHARGE2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 23)
  tmp.setMask((val shl 21).masked(21 .. 23))
  r = tmp.ADC1_SAMPTR2_CHARGE2_Fields

func SMP8_TKCG8*(r: ADC1_SAMPTR2_CHARGE2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 26)

proc `SMP8_TKCG8=`*(r: var ADC1_SAMPTR2_CHARGE2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 26)
  tmp.setMask((val shl 24).masked(24 .. 26))
  r = tmp.ADC1_SAMPTR2_CHARGE2_Fields

func SMP9_TKCG9*(r: ADC1_SAMPTR2_CHARGE2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(27 .. 29)

proc `SMP9_TKCG9=`*(r: var ADC1_SAMPTR2_CHARGE2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 29)
  tmp.setMask((val shl 27).masked(27 .. 29))
  r = tmp.ADC1_SAMPTR2_CHARGE2_Fields

func JOFFSET1*(r: ADC1_IOFR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

proc `JOFFSET1=`*(r: var ADC1_IOFR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 11)
  tmp.setMask((val shl 0).masked(0 .. 11))
  r = tmp.ADC1_IOFR1_Fields

func JOFFSET2*(r: ADC1_IOFR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

proc `JOFFSET2=`*(r: var ADC1_IOFR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 11)
  tmp.setMask((val shl 0).masked(0 .. 11))
  r = tmp.ADC1_IOFR2_Fields

func JOFFSET3*(r: ADC1_IOFR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

proc `JOFFSET3=`*(r: var ADC1_IOFR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 11)
  tmp.setMask((val shl 0).masked(0 .. 11))
  r = tmp.ADC1_IOFR3_Fields

func JOFFSET4*(r: ADC1_IOFR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

proc `JOFFSET4=`*(r: var ADC1_IOFR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 11)
  tmp.setMask((val shl 0).masked(0 .. 11))
  r = tmp.ADC1_IOFR4_Fields

func HT*(r: ADC1_WDHTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

proc `HT=`*(r: var ADC1_WDHTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 11)
  tmp.setMask((val shl 0).masked(0 .. 11))
  r = tmp.ADC1_WDHTR_Fields

func LT*(r: ADC1_WDLTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

proc `LT=`*(r: var ADC1_WDLTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 11)
  tmp.setMask((val shl 0).masked(0 .. 11))
  r = tmp.ADC1_WDLTR_Fields

func L*(r: ADC1_RSQR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 23)

proc `L=`*(r: var ADC1_RSQR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 23)
  tmp.setMask((val shl 20).masked(20 .. 23))
  r = tmp.ADC1_RSQR1_Fields

func SQ16*(r: ADC1_RSQR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(15 .. 19)

proc `SQ16=`*(r: var ADC1_RSQR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 19)
  tmp.setMask((val shl 15).masked(15 .. 19))
  r = tmp.ADC1_RSQR1_Fields

func SQ15*(r: ADC1_RSQR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 14)

proc `SQ15=`*(r: var ADC1_RSQR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 14)
  tmp.setMask((val shl 10).masked(10 .. 14))
  r = tmp.ADC1_RSQR1_Fields

func SQ14*(r: ADC1_RSQR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(5 .. 9)

proc `SQ14=`*(r: var ADC1_RSQR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 9)
  tmp.setMask((val shl 5).masked(5 .. 9))
  r = tmp.ADC1_RSQR1_Fields

func SQ13*(r: ADC1_RSQR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 4)

proc `SQ13=`*(r: var ADC1_RSQR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 4)
  tmp.setMask((val shl 0).masked(0 .. 4))
  r = tmp.ADC1_RSQR1_Fields

func SQ12*(r: ADC1_RSQR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(25 .. 29)

proc `SQ12=`*(r: var ADC1_RSQR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 29)
  tmp.setMask((val shl 25).masked(25 .. 29))
  r = tmp.ADC1_RSQR2_Fields

func SQ11*(r: ADC1_RSQR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 24)

proc `SQ11=`*(r: var ADC1_RSQR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 24)
  tmp.setMask((val shl 20).masked(20 .. 24))
  r = tmp.ADC1_RSQR2_Fields

func SQ10*(r: ADC1_RSQR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(15 .. 19)

proc `SQ10=`*(r: var ADC1_RSQR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 19)
  tmp.setMask((val shl 15).masked(15 .. 19))
  r = tmp.ADC1_RSQR2_Fields

func SQ9*(r: ADC1_RSQR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 14)

proc `SQ9=`*(r: var ADC1_RSQR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 14)
  tmp.setMask((val shl 10).masked(10 .. 14))
  r = tmp.ADC1_RSQR2_Fields

func SQ8*(r: ADC1_RSQR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(5 .. 9)

proc `SQ8=`*(r: var ADC1_RSQR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 9)
  tmp.setMask((val shl 5).masked(5 .. 9))
  r = tmp.ADC1_RSQR2_Fields

func SQ7*(r: ADC1_RSQR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 4)

proc `SQ7=`*(r: var ADC1_RSQR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 4)
  tmp.setMask((val shl 0).masked(0 .. 4))
  r = tmp.ADC1_RSQR2_Fields

func SQ6*(r: ADC1_RSQR3_CHANNEL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(25 .. 29)

proc `SQ6=`*(r: var ADC1_RSQR3_CHANNEL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 29)
  tmp.setMask((val shl 25).masked(25 .. 29))
  r = tmp.ADC1_RSQR3_CHANNEL_Fields

func SQ5*(r: ADC1_RSQR3_CHANNEL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 24)

proc `SQ5=`*(r: var ADC1_RSQR3_CHANNEL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 24)
  tmp.setMask((val shl 20).masked(20 .. 24))
  r = tmp.ADC1_RSQR3_CHANNEL_Fields

func SQ4*(r: ADC1_RSQR3_CHANNEL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(15 .. 19)

proc `SQ4=`*(r: var ADC1_RSQR3_CHANNEL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 19)
  tmp.setMask((val shl 15).masked(15 .. 19))
  r = tmp.ADC1_RSQR3_CHANNEL_Fields

func SQ3*(r: ADC1_RSQR3_CHANNEL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 14)

proc `SQ3=`*(r: var ADC1_RSQR3_CHANNEL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 14)
  tmp.setMask((val shl 10).masked(10 .. 14))
  r = tmp.ADC1_RSQR3_CHANNEL_Fields

func SQ2*(r: ADC1_RSQR3_CHANNEL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(5 .. 9)

proc `SQ2=`*(r: var ADC1_RSQR3_CHANNEL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 9)
  tmp.setMask((val shl 5).masked(5 .. 9))
  r = tmp.ADC1_RSQR3_CHANNEL_Fields

func SQ1_CHSEL*(r: ADC1_RSQR3_CHANNEL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 4)

proc `SQ1_CHSEL=`*(r: var ADC1_RSQR3_CHANNEL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 4)
  tmp.setMask((val shl 0).masked(0 .. 4))
  r = tmp.ADC1_RSQR3_CHANNEL_Fields

func JL*(r: ADC1_ISQR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `JL=`*(r: var ADC1_ISQR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.ADC1_ISQR_Fields

func JSQ4*(r: ADC1_ISQR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(15 .. 19)

proc `JSQ4=`*(r: var ADC1_ISQR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 19)
  tmp.setMask((val shl 15).masked(15 .. 19))
  r = tmp.ADC1_ISQR_Fields

func JSQ3*(r: ADC1_ISQR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 14)

proc `JSQ3=`*(r: var ADC1_ISQR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 14)
  tmp.setMask((val shl 10).masked(10 .. 14))
  r = tmp.ADC1_ISQR_Fields

func JSQ2*(r: ADC1_ISQR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(5 .. 9)

proc `JSQ2=`*(r: var ADC1_ISQR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 9)
  tmp.setMask((val shl 5).masked(5 .. 9))
  r = tmp.ADC1_ISQR_Fields

func JSQ1*(r: ADC1_ISQR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 4)

proc `JSQ1=`*(r: var ADC1_ISQR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 4)
  tmp.setMask((val shl 0).masked(0 .. 4))
  r = tmp.ADC1_ISQR_Fields

func IDATA0_7_TKCGOFFSET*(r: ADC1_IDATAR1_CHGOFFSET_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

func IDATA8_15*(r: ADC1_IDATAR1_CHGOFFSET_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

func JDATA*(r: ADC1_IDATAR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func JDATA*(r: ADC1_IDATAR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func JDATA*(r: ADC1_IDATAR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func DATA0_7_TKACT_DCG*(r: ADC1_RDATAR_DR_ACT_DCG_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `DATA0_7_TKACT_DCG=`*(r: var ADC1_RDATAR_DR_ACT_DCG_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.ADC1_RDATAR_DR_ACT_DCG_Fields

func DATA8_15*(r: ADC1_RDATAR_DR_ACT_DCG_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `DATA8_15=`*(r: var ADC1_RDATAR_DR_ACT_DCG_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.ADC1_RDATAR_DR_ACT_DCG_Fields

type
  ADC2_STATR_Fields* = distinct uint32
  ADC2_CTLR1_Fields* = distinct uint32
  ADC2_CTLR2_Fields* = distinct uint32
  ADC2_SAMPTR1_CHARGE1_Fields* = distinct uint32
  ADC2_SAMPTR2_CHARGE2_Fields* = distinct uint32
  ADC2_IOFR1_Fields* = distinct uint32
  ADC2_IOFR2_Fields* = distinct uint32
  ADC2_IOFR3_Fields* = distinct uint32
  ADC2_IOFR4_Fields* = distinct uint32
  ADC2_WDHTR_Fields* = distinct uint32
  ADC2_WDLTR_Fields* = distinct uint32
  ADC2_RSQR1_Fields* = distinct uint32
  ADC2_RSQR2_Fields* = distinct uint32
  ADC2_RSQR3_CHANNEL_Fields* = distinct uint32
  ADC2_ISQR_Fields* = distinct uint32
  ADC2_IDATAR1_CHGOFFSET_Fields* = distinct uint32
  ADC2_IDATAR2_Fields* = distinct uint32
  ADC2_IDATAR3_Fields* = distinct uint32
  ADC2_IDATAR4_Fields* = distinct uint32
  ADC2_RDATAR_DR_ACT_DCG_Fields* = distinct uint32

proc read*(reg: ADC2_STATR_Type): ADC2_STATR_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_STATR_Fields](reg.loc))

proc read*(reg: static ADC2_STATR_Type): ADC2_STATR_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_STATR_Fields](reg.loc))

proc write*(reg: ADC2_STATR_Type, val: ADC2_STATR_Fields) {.inline.} =
  volatileStore(cast[ptr ADC2_STATR_Fields](reg.loc), val)

proc write*(reg: ADC2_STATR_Type, STRT: bool = false, JSTRT: bool = false, JEOC: bool = false, EOC: bool = false, AWD: bool = false) =
  var x: uint32
  x.setMask((STRT.uint32 shl 4).masked(4 .. 4))
  x.setMask((JSTRT.uint32 shl 3).masked(3 .. 3))
  x.setMask((JEOC.uint32 shl 2).masked(2 .. 2))
  x.setMask((EOC.uint32 shl 1).masked(1 .. 1))
  x.setMask((AWD.uint32 shl 0).masked(0 .. 0))
  reg.write x.ADC2_STATR_Fields

template modifyIt*(reg: ADC2_STATR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC2_CTLR1_Type): ADC2_CTLR1_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_CTLR1_Fields](reg.loc))

proc read*(reg: static ADC2_CTLR1_Type): ADC2_CTLR1_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_CTLR1_Fields](reg.loc))

proc write*(reg: ADC2_CTLR1_Type, val: ADC2_CTLR1_Fields) {.inline.} =
  volatileStore(cast[ptr ADC2_CTLR1_Fields](reg.loc), val)

proc write*(reg: ADC2_CTLR1_Type, PGA: uint32 = 0, BUFEN: bool = false, TKITUNE: bool = false, TKEYEN: bool = false, AWDEN: bool = false, JAWDEN: bool = false, DUALMOD: uint32 = 0, DISCNUM: uint32 = 0, JDISCEN: bool = false, DISCEN: bool = false, JAUTO: bool = false, AWDSGL: bool = false, SCAN: bool = false, JEOCIE: bool = false, AWDIE: bool = false, EOCIE: bool = false, AWDCH: uint32 = 0) =
  var x: uint32
  x.setMask((PGA shl 27).masked(27 .. 28))
  x.setMask((BUFEN.uint32 shl 26).masked(26 .. 26))
  x.setMask((TKITUNE.uint32 shl 25).masked(25 .. 25))
  x.setMask((TKEYEN.uint32 shl 24).masked(24 .. 24))
  x.setMask((AWDEN.uint32 shl 23).masked(23 .. 23))
  x.setMask((JAWDEN.uint32 shl 22).masked(22 .. 22))
  x.setMask((DUALMOD shl 16).masked(16 .. 19))
  x.setMask((DISCNUM shl 13).masked(13 .. 15))
  x.setMask((JDISCEN.uint32 shl 12).masked(12 .. 12))
  x.setMask((DISCEN.uint32 shl 11).masked(11 .. 11))
  x.setMask((JAUTO.uint32 shl 10).masked(10 .. 10))
  x.setMask((AWDSGL.uint32 shl 9).masked(9 .. 9))
  x.setMask((SCAN.uint32 shl 8).masked(8 .. 8))
  x.setMask((JEOCIE.uint32 shl 7).masked(7 .. 7))
  x.setMask((AWDIE.uint32 shl 6).masked(6 .. 6))
  x.setMask((EOCIE.uint32 shl 5).masked(5 .. 5))
  x.setMask((AWDCH shl 0).masked(0 .. 4))
  reg.write x.ADC2_CTLR1_Fields

template modifyIt*(reg: ADC2_CTLR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC2_CTLR2_Type): ADC2_CTLR2_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_CTLR2_Fields](reg.loc))

proc read*(reg: static ADC2_CTLR2_Type): ADC2_CTLR2_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_CTLR2_Fields](reg.loc))

proc write*(reg: ADC2_CTLR2_Type, val: ADC2_CTLR2_Fields) {.inline.} =
  volatileStore(cast[ptr ADC2_CTLR2_Fields](reg.loc), val)

proc write*(reg: ADC2_CTLR2_Type, TSVREFE: bool = false, SWSTART: bool = false, JSWSTART: bool = false, EXTTRIG: bool = false, EXTSEL: uint32 = 0, JEXTTRIG: bool = false, JEXTSEL: uint32 = 0, ALIGN: bool = false, DMA: bool = false, RSTCAL: bool = false, CAL: bool = false, CONT: bool = false, ADON: bool = false) =
  var x: uint32
  x.setMask((TSVREFE.uint32 shl 23).masked(23 .. 23))
  x.setMask((SWSTART.uint32 shl 22).masked(22 .. 22))
  x.setMask((JSWSTART.uint32 shl 21).masked(21 .. 21))
  x.setMask((EXTTRIG.uint32 shl 20).masked(20 .. 20))
  x.setMask((EXTSEL shl 17).masked(17 .. 19))
  x.setMask((JEXTTRIG.uint32 shl 15).masked(15 .. 15))
  x.setMask((JEXTSEL shl 12).masked(12 .. 14))
  x.setMask((ALIGN.uint32 shl 11).masked(11 .. 11))
  x.setMask((DMA.uint32 shl 8).masked(8 .. 8))
  x.setMask((RSTCAL.uint32 shl 3).masked(3 .. 3))
  x.setMask((CAL.uint32 shl 2).masked(2 .. 2))
  x.setMask((CONT.uint32 shl 1).masked(1 .. 1))
  x.setMask((ADON.uint32 shl 0).masked(0 .. 0))
  reg.write x.ADC2_CTLR2_Fields

template modifyIt*(reg: ADC2_CTLR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC2_SAMPTR1_CHARGE1_Type): ADC2_SAMPTR1_CHARGE1_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_SAMPTR1_CHARGE1_Fields](reg.loc))

proc read*(reg: static ADC2_SAMPTR1_CHARGE1_Type): ADC2_SAMPTR1_CHARGE1_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_SAMPTR1_CHARGE1_Fields](reg.loc))

proc write*(reg: ADC2_SAMPTR1_CHARGE1_Type, val: ADC2_SAMPTR1_CHARGE1_Fields) {.inline.} =
  volatileStore(cast[ptr ADC2_SAMPTR1_CHARGE1_Fields](reg.loc), val)

proc write*(reg: ADC2_SAMPTR1_CHARGE1_Type, SMP10_TKCG10: uint32 = 0, SMP11_TKCG11: uint32 = 0, SMP12_TKCG12: uint32 = 0, SMP13_TKCG13: uint32 = 0, SMP14_TKCG14: uint32 = 0, SMP15_TKCG15: uint32 = 0, SMP16_TKCG16: uint32 = 0, SMP17_TKCG17: uint32 = 0) =
  var x: uint32
  x.setMask((SMP10_TKCG10 shl 0).masked(0 .. 2))
  x.setMask((SMP11_TKCG11 shl 3).masked(3 .. 5))
  x.setMask((SMP12_TKCG12 shl 6).masked(6 .. 8))
  x.setMask((SMP13_TKCG13 shl 9).masked(9 .. 11))
  x.setMask((SMP14_TKCG14 shl 12).masked(12 .. 14))
  x.setMask((SMP15_TKCG15 shl 15).masked(15 .. 17))
  x.setMask((SMP16_TKCG16 shl 18).masked(18 .. 20))
  x.setMask((SMP17_TKCG17 shl 21).masked(21 .. 23))
  reg.write x.ADC2_SAMPTR1_CHARGE1_Fields

template modifyIt*(reg: ADC2_SAMPTR1_CHARGE1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC2_SAMPTR2_CHARGE2_Type): ADC2_SAMPTR2_CHARGE2_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_SAMPTR2_CHARGE2_Fields](reg.loc))

proc read*(reg: static ADC2_SAMPTR2_CHARGE2_Type): ADC2_SAMPTR2_CHARGE2_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_SAMPTR2_CHARGE2_Fields](reg.loc))

proc write*(reg: ADC2_SAMPTR2_CHARGE2_Type, val: ADC2_SAMPTR2_CHARGE2_Fields) {.inline.} =
  volatileStore(cast[ptr ADC2_SAMPTR2_CHARGE2_Fields](reg.loc), val)

proc write*(reg: ADC2_SAMPTR2_CHARGE2_Type, SMP0_TKCG0: uint32 = 0, SMP1_TKCG1: uint32 = 0, SMP2_TKCG2: uint32 = 0, SMP3_TKCG3: uint32 = 0, SMP4_TKCG4: uint32 = 0, SMP5_TKCG5: uint32 = 0, SMP6_TKCG6: uint32 = 0, SMP7_TKCG7: uint32 = 0, SMP8_TKCG8: uint32 = 0, SMP9_TKCG9: uint32 = 0) =
  var x: uint32
  x.setMask((SMP0_TKCG0 shl 0).masked(0 .. 2))
  x.setMask((SMP1_TKCG1 shl 3).masked(3 .. 5))
  x.setMask((SMP2_TKCG2 shl 6).masked(6 .. 8))
  x.setMask((SMP3_TKCG3 shl 9).masked(9 .. 11))
  x.setMask((SMP4_TKCG4 shl 12).masked(12 .. 14))
  x.setMask((SMP5_TKCG5 shl 15).masked(15 .. 17))
  x.setMask((SMP6_TKCG6 shl 18).masked(18 .. 20))
  x.setMask((SMP7_TKCG7 shl 21).masked(21 .. 23))
  x.setMask((SMP8_TKCG8 shl 24).masked(24 .. 26))
  x.setMask((SMP9_TKCG9 shl 27).masked(27 .. 29))
  reg.write x.ADC2_SAMPTR2_CHARGE2_Fields

template modifyIt*(reg: ADC2_SAMPTR2_CHARGE2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC2_IOFR1_Type): ADC2_IOFR1_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_IOFR1_Fields](reg.loc))

proc read*(reg: static ADC2_IOFR1_Type): ADC2_IOFR1_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_IOFR1_Fields](reg.loc))

proc write*(reg: ADC2_IOFR1_Type, val: ADC2_IOFR1_Fields) {.inline.} =
  volatileStore(cast[ptr ADC2_IOFR1_Fields](reg.loc), val)

proc write*(reg: ADC2_IOFR1_Type, JOFFSET1: uint32 = 0) =
  var x: uint32
  x.setMask((JOFFSET1 shl 0).masked(0 .. 11))
  reg.write x.ADC2_IOFR1_Fields

template modifyIt*(reg: ADC2_IOFR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC2_IOFR2_Type): ADC2_IOFR2_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_IOFR2_Fields](reg.loc))

proc read*(reg: static ADC2_IOFR2_Type): ADC2_IOFR2_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_IOFR2_Fields](reg.loc))

proc write*(reg: ADC2_IOFR2_Type, val: ADC2_IOFR2_Fields) {.inline.} =
  volatileStore(cast[ptr ADC2_IOFR2_Fields](reg.loc), val)

proc write*(reg: ADC2_IOFR2_Type, JOFFSET2: uint32 = 0) =
  var x: uint32
  x.setMask((JOFFSET2 shl 0).masked(0 .. 11))
  reg.write x.ADC2_IOFR2_Fields

template modifyIt*(reg: ADC2_IOFR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC2_IOFR3_Type): ADC2_IOFR3_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_IOFR3_Fields](reg.loc))

proc read*(reg: static ADC2_IOFR3_Type): ADC2_IOFR3_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_IOFR3_Fields](reg.loc))

proc write*(reg: ADC2_IOFR3_Type, val: ADC2_IOFR3_Fields) {.inline.} =
  volatileStore(cast[ptr ADC2_IOFR3_Fields](reg.loc), val)

proc write*(reg: ADC2_IOFR3_Type, JOFFSET3: uint32 = 0) =
  var x: uint32
  x.setMask((JOFFSET3 shl 0).masked(0 .. 11))
  reg.write x.ADC2_IOFR3_Fields

template modifyIt*(reg: ADC2_IOFR3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC2_IOFR4_Type): ADC2_IOFR4_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_IOFR4_Fields](reg.loc))

proc read*(reg: static ADC2_IOFR4_Type): ADC2_IOFR4_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_IOFR4_Fields](reg.loc))

proc write*(reg: ADC2_IOFR4_Type, val: ADC2_IOFR4_Fields) {.inline.} =
  volatileStore(cast[ptr ADC2_IOFR4_Fields](reg.loc), val)

proc write*(reg: ADC2_IOFR4_Type, JOFFSET4: uint32 = 0) =
  var x: uint32
  x.setMask((JOFFSET4 shl 0).masked(0 .. 11))
  reg.write x.ADC2_IOFR4_Fields

template modifyIt*(reg: ADC2_IOFR4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC2_WDHTR_Type): ADC2_WDHTR_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_WDHTR_Fields](reg.loc))

proc read*(reg: static ADC2_WDHTR_Type): ADC2_WDHTR_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_WDHTR_Fields](reg.loc))

proc write*(reg: ADC2_WDHTR_Type, val: ADC2_WDHTR_Fields) {.inline.} =
  volatileStore(cast[ptr ADC2_WDHTR_Fields](reg.loc), val)

proc write*(reg: ADC2_WDHTR_Type, HT: uint32 = 0) =
  var x: uint32
  x.setMask((HT shl 0).masked(0 .. 11))
  reg.write x.ADC2_WDHTR_Fields

template modifyIt*(reg: ADC2_WDHTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC2_WDLTR_Type): ADC2_WDLTR_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_WDLTR_Fields](reg.loc))

proc read*(reg: static ADC2_WDLTR_Type): ADC2_WDLTR_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_WDLTR_Fields](reg.loc))

proc write*(reg: ADC2_WDLTR_Type, val: ADC2_WDLTR_Fields) {.inline.} =
  volatileStore(cast[ptr ADC2_WDLTR_Fields](reg.loc), val)

proc write*(reg: ADC2_WDLTR_Type, LT: uint32 = 0) =
  var x: uint32
  x.setMask((LT shl 0).masked(0 .. 11))
  reg.write x.ADC2_WDLTR_Fields

template modifyIt*(reg: ADC2_WDLTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC2_RSQR1_Type): ADC2_RSQR1_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_RSQR1_Fields](reg.loc))

proc read*(reg: static ADC2_RSQR1_Type): ADC2_RSQR1_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_RSQR1_Fields](reg.loc))

proc write*(reg: ADC2_RSQR1_Type, val: ADC2_RSQR1_Fields) {.inline.} =
  volatileStore(cast[ptr ADC2_RSQR1_Fields](reg.loc), val)

proc write*(reg: ADC2_RSQR1_Type, L: uint32 = 0, SQ16: uint32 = 0, SQ15: uint32 = 0, SQ14: uint32 = 0, SQ13: uint32 = 0) =
  var x: uint32
  x.setMask((L shl 20).masked(20 .. 23))
  x.setMask((SQ16 shl 15).masked(15 .. 19))
  x.setMask((SQ15 shl 10).masked(10 .. 14))
  x.setMask((SQ14 shl 5).masked(5 .. 9))
  x.setMask((SQ13 shl 0).masked(0 .. 4))
  reg.write x.ADC2_RSQR1_Fields

template modifyIt*(reg: ADC2_RSQR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC2_RSQR2_Type): ADC2_RSQR2_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_RSQR2_Fields](reg.loc))

proc read*(reg: static ADC2_RSQR2_Type): ADC2_RSQR2_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_RSQR2_Fields](reg.loc))

proc write*(reg: ADC2_RSQR2_Type, val: ADC2_RSQR2_Fields) {.inline.} =
  volatileStore(cast[ptr ADC2_RSQR2_Fields](reg.loc), val)

proc write*(reg: ADC2_RSQR2_Type, SQ12: uint32 = 0, SQ11: uint32 = 0, SQ10: uint32 = 0, SQ9: uint32 = 0, SQ8: uint32 = 0, SQ7: uint32 = 0) =
  var x: uint32
  x.setMask((SQ12 shl 25).masked(25 .. 29))
  x.setMask((SQ11 shl 20).masked(20 .. 24))
  x.setMask((SQ10 shl 15).masked(15 .. 19))
  x.setMask((SQ9 shl 10).masked(10 .. 14))
  x.setMask((SQ8 shl 5).masked(5 .. 9))
  x.setMask((SQ7 shl 0).masked(0 .. 4))
  reg.write x.ADC2_RSQR2_Fields

template modifyIt*(reg: ADC2_RSQR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC2_RSQR3_CHANNEL_Type): ADC2_RSQR3_CHANNEL_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_RSQR3_CHANNEL_Fields](reg.loc))

proc read*(reg: static ADC2_RSQR3_CHANNEL_Type): ADC2_RSQR3_CHANNEL_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_RSQR3_CHANNEL_Fields](reg.loc))

proc write*(reg: ADC2_RSQR3_CHANNEL_Type, val: ADC2_RSQR3_CHANNEL_Fields) {.inline.} =
  volatileStore(cast[ptr ADC2_RSQR3_CHANNEL_Fields](reg.loc), val)

proc write*(reg: ADC2_RSQR3_CHANNEL_Type, SQ6: uint32 = 0, SQ5: uint32 = 0, SQ4: uint32 = 0, SQ3: uint32 = 0, SQ2: uint32 = 0, SQ1_CHSEL: uint32 = 0) =
  var x: uint32
  x.setMask((SQ6 shl 25).masked(25 .. 29))
  x.setMask((SQ5 shl 20).masked(20 .. 24))
  x.setMask((SQ4 shl 15).masked(15 .. 19))
  x.setMask((SQ3 shl 10).masked(10 .. 14))
  x.setMask((SQ2 shl 5).masked(5 .. 9))
  x.setMask((SQ1_CHSEL shl 0).masked(0 .. 4))
  reg.write x.ADC2_RSQR3_CHANNEL_Fields

template modifyIt*(reg: ADC2_RSQR3_CHANNEL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC2_ISQR_Type): ADC2_ISQR_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_ISQR_Fields](reg.loc))

proc read*(reg: static ADC2_ISQR_Type): ADC2_ISQR_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_ISQR_Fields](reg.loc))

proc write*(reg: ADC2_ISQR_Type, val: ADC2_ISQR_Fields) {.inline.} =
  volatileStore(cast[ptr ADC2_ISQR_Fields](reg.loc), val)

proc write*(reg: ADC2_ISQR_Type, JL: uint32 = 0, JSQ4: uint32 = 0, JSQ3: uint32 = 0, JSQ2: uint32 = 0, JSQ1: uint32 = 0) =
  var x: uint32
  x.setMask((JL shl 20).masked(20 .. 21))
  x.setMask((JSQ4 shl 15).masked(15 .. 19))
  x.setMask((JSQ3 shl 10).masked(10 .. 14))
  x.setMask((JSQ2 shl 5).masked(5 .. 9))
  x.setMask((JSQ1 shl 0).masked(0 .. 4))
  reg.write x.ADC2_ISQR_Fields

template modifyIt*(reg: ADC2_ISQR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC2_IDATAR1_CHGOFFSET_Type): ADC2_IDATAR1_CHGOFFSET_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_IDATAR1_CHGOFFSET_Fields](reg.loc))

proc read*(reg: static ADC2_IDATAR1_CHGOFFSET_Type): ADC2_IDATAR1_CHGOFFSET_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_IDATAR1_CHGOFFSET_Fields](reg.loc))

proc read*(reg: ADC2_IDATAR2_Type): ADC2_IDATAR2_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_IDATAR2_Fields](reg.loc))

proc read*(reg: static ADC2_IDATAR2_Type): ADC2_IDATAR2_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_IDATAR2_Fields](reg.loc))

proc read*(reg: ADC2_IDATAR3_Type): ADC2_IDATAR3_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_IDATAR3_Fields](reg.loc))

proc read*(reg: static ADC2_IDATAR3_Type): ADC2_IDATAR3_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_IDATAR3_Fields](reg.loc))

proc read*(reg: ADC2_IDATAR4_Type): ADC2_IDATAR4_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_IDATAR4_Fields](reg.loc))

proc read*(reg: static ADC2_IDATAR4_Type): ADC2_IDATAR4_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_IDATAR4_Fields](reg.loc))

proc read*(reg: ADC2_RDATAR_DR_ACT_DCG_Type): ADC2_RDATAR_DR_ACT_DCG_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_RDATAR_DR_ACT_DCG_Fields](reg.loc))

proc read*(reg: static ADC2_RDATAR_DR_ACT_DCG_Type): ADC2_RDATAR_DR_ACT_DCG_Fields {.inline.} =
  volatileLoad(cast[ptr ADC2_RDATAR_DR_ACT_DCG_Fields](reg.loc))

proc write*(reg: ADC2_RDATAR_DR_ACT_DCG_Type, val: ADC2_RDATAR_DR_ACT_DCG_Fields) {.inline.} =
  volatileStore(cast[ptr ADC2_RDATAR_DR_ACT_DCG_Fields](reg.loc), val)

proc write*(reg: ADC2_RDATAR_DR_ACT_DCG_Type, DATA0_7_TKACT_DCG: uint32 = 0, DATA8_15: uint32 = 0) =
  var x: uint32
  x.setMask((DATA0_7_TKACT_DCG shl 0).masked(0 .. 7))
  x.setMask((DATA8_15 shl 8).masked(8 .. 15))
  reg.write x.ADC2_RDATAR_DR_ACT_DCG_Fields

template modifyIt*(reg: ADC2_RDATAR_DR_ACT_DCG_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func STRT*(r: ADC2_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `STRT=`*(r: var ADC2_STATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.ADC2_STATR_Fields

func JSTRT*(r: ADC2_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `JSTRT=`*(r: var ADC2_STATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.ADC2_STATR_Fields

func JEOC*(r: ADC2_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `JEOC=`*(r: var ADC2_STATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.ADC2_STATR_Fields

func EOC*(r: ADC2_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `EOC=`*(r: var ADC2_STATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.ADC2_STATR_Fields

func AWD*(r: ADC2_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `AWD=`*(r: var ADC2_STATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.ADC2_STATR_Fields

func PGA*(r: ADC2_CTLR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(27 .. 28)

proc `PGA=`*(r: var ADC2_CTLR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 28)
  tmp.setMask((val shl 27).masked(27 .. 28))
  r = tmp.ADC2_CTLR1_Fields

func BUFEN*(r: ADC2_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `BUFEN=`*(r: var ADC2_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.ADC2_CTLR1_Fields

func TKITUNE*(r: ADC2_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `TKITUNE=`*(r: var ADC2_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.ADC2_CTLR1_Fields

func TKEYEN*(r: ADC2_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `TKEYEN=`*(r: var ADC2_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.ADC2_CTLR1_Fields

func AWDEN*(r: ADC2_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `AWDEN=`*(r: var ADC2_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.ADC2_CTLR1_Fields

func JAWDEN*(r: ADC2_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `JAWDEN=`*(r: var ADC2_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.ADC2_CTLR1_Fields

func DUALMOD*(r: ADC2_CTLR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 19)

proc `DUALMOD=`*(r: var ADC2_CTLR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 19)
  tmp.setMask((val shl 16).masked(16 .. 19))
  r = tmp.ADC2_CTLR1_Fields

func DISCNUM*(r: ADC2_CTLR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(13 .. 15)

proc `DISCNUM=`*(r: var ADC2_CTLR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 15)
  tmp.setMask((val shl 13).masked(13 .. 15))
  r = tmp.ADC2_CTLR1_Fields

func JDISCEN*(r: ADC2_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `JDISCEN=`*(r: var ADC2_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.ADC2_CTLR1_Fields

func DISCEN*(r: ADC2_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `DISCEN=`*(r: var ADC2_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.ADC2_CTLR1_Fields

func JAUTO*(r: ADC2_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `JAUTO=`*(r: var ADC2_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.ADC2_CTLR1_Fields

func AWDSGL*(r: ADC2_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `AWDSGL=`*(r: var ADC2_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.ADC2_CTLR1_Fields

func SCAN*(r: ADC2_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `SCAN=`*(r: var ADC2_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.ADC2_CTLR1_Fields

func JEOCIE*(r: ADC2_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `JEOCIE=`*(r: var ADC2_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.ADC2_CTLR1_Fields

func AWDIE*(r: ADC2_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `AWDIE=`*(r: var ADC2_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.ADC2_CTLR1_Fields

func EOCIE*(r: ADC2_CTLR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `EOCIE=`*(r: var ADC2_CTLR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.ADC2_CTLR1_Fields

func AWDCH*(r: ADC2_CTLR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 4)

proc `AWDCH=`*(r: var ADC2_CTLR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 4)
  tmp.setMask((val shl 0).masked(0 .. 4))
  r = tmp.ADC2_CTLR1_Fields

func TSVREFE*(r: ADC2_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `TSVREFE=`*(r: var ADC2_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.ADC2_CTLR2_Fields

func SWSTART*(r: ADC2_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `SWSTART=`*(r: var ADC2_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.ADC2_CTLR2_Fields

func JSWSTART*(r: ADC2_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `JSWSTART=`*(r: var ADC2_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.ADC2_CTLR2_Fields

func EXTTRIG*(r: ADC2_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `EXTTRIG=`*(r: var ADC2_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.ADC2_CTLR2_Fields

func EXTSEL*(r: ADC2_CTLR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(17 .. 19)

proc `EXTSEL=`*(r: var ADC2_CTLR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 19)
  tmp.setMask((val shl 17).masked(17 .. 19))
  r = tmp.ADC2_CTLR2_Fields

func JEXTTRIG*(r: ADC2_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `JEXTTRIG=`*(r: var ADC2_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.ADC2_CTLR2_Fields

func JEXTSEL*(r: ADC2_CTLR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 14)

proc `JEXTSEL=`*(r: var ADC2_CTLR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 14)
  tmp.setMask((val shl 12).masked(12 .. 14))
  r = tmp.ADC2_CTLR2_Fields

func ALIGN*(r: ADC2_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `ALIGN=`*(r: var ADC2_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.ADC2_CTLR2_Fields

func DMA*(r: ADC2_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `DMA=`*(r: var ADC2_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.ADC2_CTLR2_Fields

func RSTCAL*(r: ADC2_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `RSTCAL=`*(r: var ADC2_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.ADC2_CTLR2_Fields

func CAL*(r: ADC2_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `CAL=`*(r: var ADC2_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.ADC2_CTLR2_Fields

func CONT*(r: ADC2_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CONT=`*(r: var ADC2_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.ADC2_CTLR2_Fields

func ADON*(r: ADC2_CTLR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `ADON=`*(r: var ADC2_CTLR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.ADC2_CTLR2_Fields

func SMP10_TKCG10*(r: ADC2_SAMPTR1_CHARGE1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 2)

proc `SMP10_TKCG10=`*(r: var ADC2_SAMPTR1_CHARGE1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 2)
  tmp.setMask((val shl 0).masked(0 .. 2))
  r = tmp.ADC2_SAMPTR1_CHARGE1_Fields

func SMP11_TKCG11*(r: ADC2_SAMPTR1_CHARGE1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 5)

proc `SMP11_TKCG11=`*(r: var ADC2_SAMPTR1_CHARGE1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 5)
  tmp.setMask((val shl 3).masked(3 .. 5))
  r = tmp.ADC2_SAMPTR1_CHARGE1_Fields

func SMP12_TKCG12*(r: ADC2_SAMPTR1_CHARGE1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 8)

proc `SMP12_TKCG12=`*(r: var ADC2_SAMPTR1_CHARGE1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 8)
  tmp.setMask((val shl 6).masked(6 .. 8))
  r = tmp.ADC2_SAMPTR1_CHARGE1_Fields

func SMP13_TKCG13*(r: ADC2_SAMPTR1_CHARGE1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(9 .. 11)

proc `SMP13_TKCG13=`*(r: var ADC2_SAMPTR1_CHARGE1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 11)
  tmp.setMask((val shl 9).masked(9 .. 11))
  r = tmp.ADC2_SAMPTR1_CHARGE1_Fields

func SMP14_TKCG14*(r: ADC2_SAMPTR1_CHARGE1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 14)

proc `SMP14_TKCG14=`*(r: var ADC2_SAMPTR1_CHARGE1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 14)
  tmp.setMask((val shl 12).masked(12 .. 14))
  r = tmp.ADC2_SAMPTR1_CHARGE1_Fields

func SMP15_TKCG15*(r: ADC2_SAMPTR1_CHARGE1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(15 .. 17)

proc `SMP15_TKCG15=`*(r: var ADC2_SAMPTR1_CHARGE1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 17)
  tmp.setMask((val shl 15).masked(15 .. 17))
  r = tmp.ADC2_SAMPTR1_CHARGE1_Fields

func SMP16_TKCG16*(r: ADC2_SAMPTR1_CHARGE1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 20)

proc `SMP16_TKCG16=`*(r: var ADC2_SAMPTR1_CHARGE1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 20)
  tmp.setMask((val shl 18).masked(18 .. 20))
  r = tmp.ADC2_SAMPTR1_CHARGE1_Fields

func SMP17_TKCG17*(r: ADC2_SAMPTR1_CHARGE1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(21 .. 23)

proc `SMP17_TKCG17=`*(r: var ADC2_SAMPTR1_CHARGE1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 23)
  tmp.setMask((val shl 21).masked(21 .. 23))
  r = tmp.ADC2_SAMPTR1_CHARGE1_Fields

func SMP0_TKCG0*(r: ADC2_SAMPTR2_CHARGE2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 2)

proc `SMP0_TKCG0=`*(r: var ADC2_SAMPTR2_CHARGE2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 2)
  tmp.setMask((val shl 0).masked(0 .. 2))
  r = tmp.ADC2_SAMPTR2_CHARGE2_Fields

func SMP1_TKCG1*(r: ADC2_SAMPTR2_CHARGE2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 5)

proc `SMP1_TKCG1=`*(r: var ADC2_SAMPTR2_CHARGE2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 5)
  tmp.setMask((val shl 3).masked(3 .. 5))
  r = tmp.ADC2_SAMPTR2_CHARGE2_Fields

func SMP2_TKCG2*(r: ADC2_SAMPTR2_CHARGE2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 8)

proc `SMP2_TKCG2=`*(r: var ADC2_SAMPTR2_CHARGE2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 8)
  tmp.setMask((val shl 6).masked(6 .. 8))
  r = tmp.ADC2_SAMPTR2_CHARGE2_Fields

func SMP3_TKCG3*(r: ADC2_SAMPTR2_CHARGE2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(9 .. 11)

proc `SMP3_TKCG3=`*(r: var ADC2_SAMPTR2_CHARGE2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 11)
  tmp.setMask((val shl 9).masked(9 .. 11))
  r = tmp.ADC2_SAMPTR2_CHARGE2_Fields

func SMP4_TKCG4*(r: ADC2_SAMPTR2_CHARGE2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 14)

proc `SMP4_TKCG4=`*(r: var ADC2_SAMPTR2_CHARGE2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 14)
  tmp.setMask((val shl 12).masked(12 .. 14))
  r = tmp.ADC2_SAMPTR2_CHARGE2_Fields

func SMP5_TKCG5*(r: ADC2_SAMPTR2_CHARGE2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(15 .. 17)

proc `SMP5_TKCG5=`*(r: var ADC2_SAMPTR2_CHARGE2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 17)
  tmp.setMask((val shl 15).masked(15 .. 17))
  r = tmp.ADC2_SAMPTR2_CHARGE2_Fields

func SMP6_TKCG6*(r: ADC2_SAMPTR2_CHARGE2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 20)

proc `SMP6_TKCG6=`*(r: var ADC2_SAMPTR2_CHARGE2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 20)
  tmp.setMask((val shl 18).masked(18 .. 20))
  r = tmp.ADC2_SAMPTR2_CHARGE2_Fields

func SMP7_TKCG7*(r: ADC2_SAMPTR2_CHARGE2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(21 .. 23)

proc `SMP7_TKCG7=`*(r: var ADC2_SAMPTR2_CHARGE2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 23)
  tmp.setMask((val shl 21).masked(21 .. 23))
  r = tmp.ADC2_SAMPTR2_CHARGE2_Fields

func SMP8_TKCG8*(r: ADC2_SAMPTR2_CHARGE2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 26)

proc `SMP8_TKCG8=`*(r: var ADC2_SAMPTR2_CHARGE2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 26)
  tmp.setMask((val shl 24).masked(24 .. 26))
  r = tmp.ADC2_SAMPTR2_CHARGE2_Fields

func SMP9_TKCG9*(r: ADC2_SAMPTR2_CHARGE2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(27 .. 29)

proc `SMP9_TKCG9=`*(r: var ADC2_SAMPTR2_CHARGE2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 29)
  tmp.setMask((val shl 27).masked(27 .. 29))
  r = tmp.ADC2_SAMPTR2_CHARGE2_Fields

func JOFFSET1*(r: ADC2_IOFR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

proc `JOFFSET1=`*(r: var ADC2_IOFR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 11)
  tmp.setMask((val shl 0).masked(0 .. 11))
  r = tmp.ADC2_IOFR1_Fields

func JOFFSET2*(r: ADC2_IOFR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

proc `JOFFSET2=`*(r: var ADC2_IOFR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 11)
  tmp.setMask((val shl 0).masked(0 .. 11))
  r = tmp.ADC2_IOFR2_Fields

func JOFFSET3*(r: ADC2_IOFR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

proc `JOFFSET3=`*(r: var ADC2_IOFR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 11)
  tmp.setMask((val shl 0).masked(0 .. 11))
  r = tmp.ADC2_IOFR3_Fields

func JOFFSET4*(r: ADC2_IOFR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

proc `JOFFSET4=`*(r: var ADC2_IOFR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 11)
  tmp.setMask((val shl 0).masked(0 .. 11))
  r = tmp.ADC2_IOFR4_Fields

func HT*(r: ADC2_WDHTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

proc `HT=`*(r: var ADC2_WDHTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 11)
  tmp.setMask((val shl 0).masked(0 .. 11))
  r = tmp.ADC2_WDHTR_Fields

func LT*(r: ADC2_WDLTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

proc `LT=`*(r: var ADC2_WDLTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 11)
  tmp.setMask((val shl 0).masked(0 .. 11))
  r = tmp.ADC2_WDLTR_Fields

func L*(r: ADC2_RSQR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 23)

proc `L=`*(r: var ADC2_RSQR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 23)
  tmp.setMask((val shl 20).masked(20 .. 23))
  r = tmp.ADC2_RSQR1_Fields

func SQ16*(r: ADC2_RSQR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(15 .. 19)

proc `SQ16=`*(r: var ADC2_RSQR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 19)
  tmp.setMask((val shl 15).masked(15 .. 19))
  r = tmp.ADC2_RSQR1_Fields

func SQ15*(r: ADC2_RSQR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 14)

proc `SQ15=`*(r: var ADC2_RSQR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 14)
  tmp.setMask((val shl 10).masked(10 .. 14))
  r = tmp.ADC2_RSQR1_Fields

func SQ14*(r: ADC2_RSQR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(5 .. 9)

proc `SQ14=`*(r: var ADC2_RSQR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 9)
  tmp.setMask((val shl 5).masked(5 .. 9))
  r = tmp.ADC2_RSQR1_Fields

func SQ13*(r: ADC2_RSQR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 4)

proc `SQ13=`*(r: var ADC2_RSQR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 4)
  tmp.setMask((val shl 0).masked(0 .. 4))
  r = tmp.ADC2_RSQR1_Fields

func SQ12*(r: ADC2_RSQR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(25 .. 29)

proc `SQ12=`*(r: var ADC2_RSQR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 29)
  tmp.setMask((val shl 25).masked(25 .. 29))
  r = tmp.ADC2_RSQR2_Fields

func SQ11*(r: ADC2_RSQR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 24)

proc `SQ11=`*(r: var ADC2_RSQR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 24)
  tmp.setMask((val shl 20).masked(20 .. 24))
  r = tmp.ADC2_RSQR2_Fields

func SQ10*(r: ADC2_RSQR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(15 .. 19)

proc `SQ10=`*(r: var ADC2_RSQR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 19)
  tmp.setMask((val shl 15).masked(15 .. 19))
  r = tmp.ADC2_RSQR2_Fields

func SQ9*(r: ADC2_RSQR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 14)

proc `SQ9=`*(r: var ADC2_RSQR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 14)
  tmp.setMask((val shl 10).masked(10 .. 14))
  r = tmp.ADC2_RSQR2_Fields

func SQ8*(r: ADC2_RSQR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(5 .. 9)

proc `SQ8=`*(r: var ADC2_RSQR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 9)
  tmp.setMask((val shl 5).masked(5 .. 9))
  r = tmp.ADC2_RSQR2_Fields

func SQ7*(r: ADC2_RSQR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 4)

proc `SQ7=`*(r: var ADC2_RSQR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 4)
  tmp.setMask((val shl 0).masked(0 .. 4))
  r = tmp.ADC2_RSQR2_Fields

func SQ6*(r: ADC2_RSQR3_CHANNEL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(25 .. 29)

proc `SQ6=`*(r: var ADC2_RSQR3_CHANNEL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 29)
  tmp.setMask((val shl 25).masked(25 .. 29))
  r = tmp.ADC2_RSQR3_CHANNEL_Fields

func SQ5*(r: ADC2_RSQR3_CHANNEL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 24)

proc `SQ5=`*(r: var ADC2_RSQR3_CHANNEL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 24)
  tmp.setMask((val shl 20).masked(20 .. 24))
  r = tmp.ADC2_RSQR3_CHANNEL_Fields

func SQ4*(r: ADC2_RSQR3_CHANNEL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(15 .. 19)

proc `SQ4=`*(r: var ADC2_RSQR3_CHANNEL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 19)
  tmp.setMask((val shl 15).masked(15 .. 19))
  r = tmp.ADC2_RSQR3_CHANNEL_Fields

func SQ3*(r: ADC2_RSQR3_CHANNEL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 14)

proc `SQ3=`*(r: var ADC2_RSQR3_CHANNEL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 14)
  tmp.setMask((val shl 10).masked(10 .. 14))
  r = tmp.ADC2_RSQR3_CHANNEL_Fields

func SQ2*(r: ADC2_RSQR3_CHANNEL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(5 .. 9)

proc `SQ2=`*(r: var ADC2_RSQR3_CHANNEL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 9)
  tmp.setMask((val shl 5).masked(5 .. 9))
  r = tmp.ADC2_RSQR3_CHANNEL_Fields

func SQ1_CHSEL*(r: ADC2_RSQR3_CHANNEL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 4)

proc `SQ1_CHSEL=`*(r: var ADC2_RSQR3_CHANNEL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 4)
  tmp.setMask((val shl 0).masked(0 .. 4))
  r = tmp.ADC2_RSQR3_CHANNEL_Fields

func JL*(r: ADC2_ISQR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `JL=`*(r: var ADC2_ISQR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.ADC2_ISQR_Fields

func JSQ4*(r: ADC2_ISQR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(15 .. 19)

proc `JSQ4=`*(r: var ADC2_ISQR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 19)
  tmp.setMask((val shl 15).masked(15 .. 19))
  r = tmp.ADC2_ISQR_Fields

func JSQ3*(r: ADC2_ISQR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 14)

proc `JSQ3=`*(r: var ADC2_ISQR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 14)
  tmp.setMask((val shl 10).masked(10 .. 14))
  r = tmp.ADC2_ISQR_Fields

func JSQ2*(r: ADC2_ISQR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(5 .. 9)

proc `JSQ2=`*(r: var ADC2_ISQR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 9)
  tmp.setMask((val shl 5).masked(5 .. 9))
  r = tmp.ADC2_ISQR_Fields

func JSQ1*(r: ADC2_ISQR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 4)

proc `JSQ1=`*(r: var ADC2_ISQR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 4)
  tmp.setMask((val shl 0).masked(0 .. 4))
  r = tmp.ADC2_ISQR_Fields

func IDATA0_7_TKCGOFFSET*(r: ADC2_IDATAR1_CHGOFFSET_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

func IDATA8_15*(r: ADC2_IDATAR1_CHGOFFSET_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

func JDATA*(r: ADC2_IDATAR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func JDATA*(r: ADC2_IDATAR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func JDATA*(r: ADC2_IDATAR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func DATA0_7_TKACT_DCG*(r: ADC2_RDATAR_DR_ACT_DCG_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `DATA0_7_TKACT_DCG=`*(r: var ADC2_RDATAR_DR_ACT_DCG_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.ADC2_RDATAR_DR_ACT_DCG_Fields

func DATA8_15*(r: ADC2_RDATAR_DR_ACT_DCG_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `DATA8_15=`*(r: var ADC2_RDATAR_DR_ACT_DCG_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.ADC2_RDATAR_DR_ACT_DCG_Fields

type
  DBG_CFGR1_Fields* = distinct uint32
  DBG_CFGR2_Fields* = distinct uint32

proc read*(reg: DBG_CFGR1_Type): DBG_CFGR1_Fields {.inline.} =
  volatileLoad(cast[ptr DBG_CFGR1_Fields](reg.loc))

proc read*(reg: static DBG_CFGR1_Type): DBG_CFGR1_Fields {.inline.} =
  volatileLoad(cast[ptr DBG_CFGR1_Fields](reg.loc))

proc write*(reg: DBG_CFGR1_Type, val: DBG_CFGR1_Fields) {.inline.} =
  volatileStore(cast[ptr DBG_CFGR1_Fields](reg.loc), val)

proc write*(reg: DBG_CFGR1_Type, DEG_IWDG: bool = false, DEG_WWDG: bool = false, DEG_I2C1: bool = false, DEG_I2C2: bool = false, DEG_TIM1: bool = false, DEG_TIM2: bool = false, DEG_TIM3: bool = false, DEG_TIM4: bool = false) =
  var x: uint32
  x.setMask((DEG_IWDG.uint32 shl 0).masked(0 .. 0))
  x.setMask((DEG_WWDG.uint32 shl 1).masked(1 .. 1))
  x.setMask((DEG_I2C1.uint32 shl 2).masked(2 .. 2))
  x.setMask((DEG_I2C2.uint32 shl 3).masked(3 .. 3))
  x.setMask((DEG_TIM1.uint32 shl 4).masked(4 .. 4))
  x.setMask((DEG_TIM2.uint32 shl 5).masked(5 .. 5))
  x.setMask((DEG_TIM3.uint32 shl 6).masked(6 .. 6))
  x.setMask((DEG_TIM4.uint32 shl 7).masked(7 .. 7))
  reg.write x.DBG_CFGR1_Fields

template modifyIt*(reg: DBG_CFGR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DBG_CFGR2_Type): DBG_CFGR2_Fields {.inline.} =
  volatileLoad(cast[ptr DBG_CFGR2_Fields](reg.loc))

proc read*(reg: static DBG_CFGR2_Type): DBG_CFGR2_Fields {.inline.} =
  volatileLoad(cast[ptr DBG_CFGR2_Fields](reg.loc))

proc write*(reg: DBG_CFGR2_Type, val: DBG_CFGR2_Fields) {.inline.} =
  volatileStore(cast[ptr DBG_CFGR2_Fields](reg.loc), val)

proc write*(reg: DBG_CFGR2_Type, DBG_SLEEP: bool = false, DBG_STOP: bool = false, DBG_STANDBY: bool = false) =
  var x: uint32
  x.setMask((DBG_SLEEP.uint32 shl 0).masked(0 .. 0))
  x.setMask((DBG_STOP.uint32 shl 1).masked(1 .. 1))
  x.setMask((DBG_STANDBY.uint32 shl 2).masked(2 .. 2))
  reg.write x.DBG_CFGR2_Fields

template modifyIt*(reg: DBG_CFGR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func DEG_IWDG*(r: DBG_CFGR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `DEG_IWDG=`*(r: var DBG_CFGR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.DBG_CFGR1_Fields

func DEG_WWDG*(r: DBG_CFGR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `DEG_WWDG=`*(r: var DBG_CFGR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.DBG_CFGR1_Fields

func DEG_I2C1*(r: DBG_CFGR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `DEG_I2C1=`*(r: var DBG_CFGR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DBG_CFGR1_Fields

func DEG_I2C2*(r: DBG_CFGR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `DEG_I2C2=`*(r: var DBG_CFGR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.DBG_CFGR1_Fields

func DEG_TIM1*(r: DBG_CFGR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `DEG_TIM1=`*(r: var DBG_CFGR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.DBG_CFGR1_Fields

func DEG_TIM2*(r: DBG_CFGR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `DEG_TIM2=`*(r: var DBG_CFGR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.DBG_CFGR1_Fields

func DEG_TIM3*(r: DBG_CFGR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `DEG_TIM3=`*(r: var DBG_CFGR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.DBG_CFGR1_Fields

func DEG_TIM4*(r: DBG_CFGR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `DEG_TIM4=`*(r: var DBG_CFGR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.DBG_CFGR1_Fields

func DBG_SLEEP*(r: DBG_CFGR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `DBG_SLEEP=`*(r: var DBG_CFGR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.DBG_CFGR2_Fields

func DBG_STOP*(r: DBG_CFGR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `DBG_STOP=`*(r: var DBG_CFGR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.DBG_CFGR2_Fields

func DBG_STANDBY*(r: DBG_CFGR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `DBG_STANDBY=`*(r: var DBG_CFGR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DBG_CFGR2_Fields

type
  USBHD_USB_CTRL_Fields* = distinct uint8
  USBHD_UHOST_CTRL_Fields* = distinct uint8
  USBHD_USB_INT_EN_Fields* = distinct uint8
  USBHD_USB_DEV_AD_Fields* = distinct uint8
  USBHD_USB_USB_SUSPEND_Fields* = distinct uint8
  USBHD_USB_SPEED_TYPE_Fields* = distinct uint8
  USBHD_USB_MIS_ST_Fields* = distinct uint8
  USBHD_USB_INT_FG_Fields* = distinct uint8
  USBHD_USB_INT_ST_Fields* = distinct uint8
  USBHD_UEP_CONFIG_Fields* = distinct uint32
  USBHD_UEP_TYPE_Fields* = distinct uint32
  USBHD_UEP_BUF_MOD_Fields* = distinct uint32
  USBHD_UEP0_MAX_LEN_Fields* = distinct uint16
  USBHD_UEP1_MAX_LEN_Fields* = distinct uint16
  USBHD_UEP2_MAX_LEN_UH_RX_MAX_LEN_Fields* = distinct uint16
  USBHD_UEP3_MAX_LEN_Fields* = distinct uint16
  USBHD_UEP4_MAX_LEN_Fields* = distinct uint16
  USBHD_UEP5_MAX_LEN_Fields* = distinct uint16
  USBHD_UEP6_MAX_LEN_Fields* = distinct uint16
  USBHD_UEP7_MAX_LEN_Fields* = distinct uint16
  USBHD_UEP8_MAX_LEN_Fields* = distinct uint16
  USBHD_UEP9_MAX_LEN_Fields* = distinct uint16
  USBHD_UEP10_MAX_LEN_Fields* = distinct uint16
  USBHD_UEP11_MAX_LEN_Fields* = distinct uint16
  USBHD_UEP12_MAX_LEN_Fields* = distinct uint16
  USBHD_UEP13_MAX_LEN_Fields* = distinct uint16
  USBHD_UEP14_MAX_LEN_Fields* = distinct uint16
  USBHD_UEP15_MAX_LEN_Fields* = distinct uint16
  USBHD_UEP0_T_LEN_Fields* = distinct uint16
  USBHD_UEP0_T_CTRL_Fields* = distinct uint8
  USBHD_UEP0_R_CTRL_Fields* = distinct uint8
  USBHD_UEP1_T_LEN_Fields* = distinct uint16
  USBHD_UEP1_T_CTRL_Fields* = distinct uint8
  USBHD_UEP1_R_CTRL_Fields* = distinct uint8
  USBHD_UEP2_T_LEN_UH_EP_PID_Fields* = distinct uint16
  USBHD_UEP2_T_CTRL_Fields* = distinct uint8
  USBHD_UEP2_R_CTRL_UH_RX_CTRL_Fields* = distinct uint8
  USBHD_UEP3_T_LEN_UH_TX_LEN_H_Fields* = distinct uint16
  USBHD_UEP3_T_CTRL_UH_TX_CTRL_Fields* = distinct uint8
  USBHD_UEP3_R_CTRL_Fields* = distinct uint8
  USBHD_UEP4_T_LEN_Fields* = distinct uint16
  USBHD_UEP4_T_CTRL_Fields* = distinct uint8
  USBHD_UEP4_R_CTRL_Fields* = distinct uint8
  USBHD_UEP5_T_LEN_Fields* = distinct uint16
  USBHD_UEP5_T_CTRL_Fields* = distinct uint8
  USBHD_UEP5_R_CTRL_Fields* = distinct uint8
  USBHD_UEP6_T_LEN_Fields* = distinct uint16
  USBHD_UEP6_T_CTRL_Fields* = distinct uint8
  USBHD_UEP6_R_CTRL_Fields* = distinct uint8
  USBHD_UEP7_T_LEN_Fields* = distinct uint16
  USBHD_UEP7_T_CTRL_Fields* = distinct uint8
  USBHD_UEP7_R_CTRL_Fields* = distinct uint8
  USBHD_UEP8_T_LEN_Fields* = distinct uint16
  USBHD_UEP8_T_CTRL_Fields* = distinct uint8
  USBHD_UEP8_R_CTRL_Fields* = distinct uint8
  USBHD_UEP9_T_LEN_Fields* = distinct uint16
  USBHD_UEP9_T_CTRL_Fields* = distinct uint8
  USBHD_UEP9_R_CTRL_Fields* = distinct uint8
  USBHD_UEP10_T_LEN_Fields* = distinct uint16
  USBHD_UEP10_T_CTRL_Fields* = distinct uint8
  USBHD_UEP10_R_CTRL_Fields* = distinct uint8
  USBHD_UEP11_T_LEN_Fields* = distinct uint16
  USBHD_UEP11_T_CTRL_Fields* = distinct uint8
  USBHD_UEP11_R_CTRL_Fields* = distinct uint8
  USBHD_UEP12_T_LEN_Fields* = distinct uint16
  USBHD_UEP12_T_CTRL_Fields* = distinct uint8
  USBHD_UEP12_R_CTRL_Fields* = distinct uint8
  USBHD_UEP13_T_LEN_Fields* = distinct uint16
  USBHD_UEP13_T_CTRL_Fields* = distinct uint8
  USBHD_UEP13_R_CTRL_Fields* = distinct uint8
  USBHD_UEP14_T_LEN_Fields* = distinct uint16
  USBHD_UEP14_T_CTRL_Fields* = distinct uint8
  USBHD_UEP14_R_CTRL_Fields* = distinct uint8
  USBHD_UEP15_T_LEN_Fields* = distinct uint16
  USBHD_UEP15_T_CTRL_Fields* = distinct uint8
  USBHD_UEP15_R_CTRL_Fields* = distinct uint8

proc read*(reg: USBHD_USB_CTRL_Type): USBHD_USB_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_USB_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_USB_CTRL_Type): USBHD_USB_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_USB_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_USB_CTRL_Type, val: USBHD_USB_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_USB_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_USB_CTRL_Type, RB_UC_DMA_EN: bool = false, RB_UC_CLR_ALL: bool = true, RB_UC_RESET_SIE: bool = true, RB_UC_INT_BUSY: bool = false, RB_UC_DEV_PU_EN: bool = false, RB_UC_SPEED_TYPE: uint8 = 0, RB_UC_HOST_MODE: bool = false) =
  var x: uint8
  x.setMask((RB_UC_DMA_EN.uint8 shl 0).masked(0 .. 0))
  x.setMask((RB_UC_CLR_ALL.uint8 shl 1).masked(1 .. 1))
  x.setMask((RB_UC_RESET_SIE.uint8 shl 2).masked(2 .. 2))
  x.setMask((RB_UC_INT_BUSY.uint8 shl 3).masked(3 .. 3))
  x.setMask((RB_UC_DEV_PU_EN.uint8 shl 4).masked(4 .. 4))
  x.setMask((RB_UC_SPEED_TYPE shl 5).masked(5 .. 6))
  x.setMask((RB_UC_HOST_MODE.uint8 shl 7).masked(7 .. 7))
  reg.write x.USBHD_USB_CTRL_Fields

template modifyIt*(reg: USBHD_USB_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UHOST_CTRL_Type): USBHD_UHOST_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UHOST_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_UHOST_CTRL_Type): USBHD_UHOST_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UHOST_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_UHOST_CTRL_Type, val: USBHD_UHOST_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UHOST_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_UHOST_CTRL_Type, bUH_TX_BUS_RESET: bool = false, bUH_TX_BUS_SUSPEND: bool = false, bUH_TX_BUS_RESUME: bool = false, bUH_REMOTE_WKUP: bool = false, bUH_PHY_SUSPENDM: bool = false, bUH_SOF_EN: bool = false) =
  var x: uint8
  x.setMask((bUH_TX_BUS_RESET.uint8 shl 0).masked(0 .. 0))
  x.setMask((bUH_TX_BUS_SUSPEND.uint8 shl 1).masked(1 .. 1))
  x.setMask((bUH_TX_BUS_RESUME.uint8 shl 2).masked(2 .. 2))
  x.setMask((bUH_REMOTE_WKUP.uint8 shl 3).masked(3 .. 3))
  x.setMask((bUH_PHY_SUSPENDM.uint8 shl 4).masked(4 .. 4))
  x.setMask((bUH_SOF_EN.uint8 shl 7).masked(7 .. 7))
  reg.write x.USBHD_UHOST_CTRL_Fields

template modifyIt*(reg: USBHD_UHOST_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_USB_INT_EN_Type): USBHD_USB_INT_EN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_USB_INT_EN_Fields](reg.loc))

proc read*(reg: static USBHD_USB_INT_EN_Type): USBHD_USB_INT_EN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_USB_INT_EN_Fields](reg.loc))

proc write*(reg: USBHD_USB_INT_EN_Type, val: USBHD_USB_INT_EN_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_USB_INT_EN_Fields](reg.loc), val)

proc write*(reg: USBHD_USB_INT_EN_Type, RB_UIE_BUS_RST_RB_UIE_DETECT: bool = false, RB_UIE_TRANSFER: bool = false, RB_UIE_SUSPEND: bool = false, RB_UIE_SOF_ACT: bool = false, RB_UIE_FIFO_OV: bool = false, RB_UIE_SETUP_ACT: bool = false, RB_UIE_ISO_ACT: bool = false, RB_UIE_DEV_NAK: bool = false) =
  var x: uint8
  x.setMask((RB_UIE_BUS_RST_RB_UIE_DETECT.uint8 shl 0).masked(0 .. 0))
  x.setMask((RB_UIE_TRANSFER.uint8 shl 1).masked(1 .. 1))
  x.setMask((RB_UIE_SUSPEND.uint8 shl 2).masked(2 .. 2))
  x.setMask((RB_UIE_SOF_ACT.uint8 shl 3).masked(3 .. 3))
  x.setMask((RB_UIE_FIFO_OV.uint8 shl 4).masked(4 .. 4))
  x.setMask((RB_UIE_SETUP_ACT.uint8 shl 5).masked(5 .. 5))
  x.setMask((RB_UIE_ISO_ACT.uint8 shl 6).masked(6 .. 6))
  x.setMask((RB_UIE_DEV_NAK.uint8 shl 7).masked(7 .. 7))
  reg.write x.USBHD_USB_INT_EN_Fields

template modifyIt*(reg: USBHD_USB_INT_EN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_USB_DEV_AD_Type): USBHD_USB_DEV_AD_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_USB_DEV_AD_Fields](reg.loc))

proc read*(reg: static USBHD_USB_DEV_AD_Type): USBHD_USB_DEV_AD_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_USB_DEV_AD_Fields](reg.loc))

proc write*(reg: USBHD_USB_DEV_AD_Type, val: USBHD_USB_DEV_AD_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_USB_DEV_AD_Fields](reg.loc), val)

proc write*(reg: USBHD_USB_DEV_AD_Type, MASK_USB_ADDR: uint8 = 0, RB_UDA_GP_BIT: bool = false) =
  var x: uint8
  x.setMask((MASK_USB_ADDR shl 0).masked(0 .. 6))
  x.setMask((RB_UDA_GP_BIT.uint8 shl 7).masked(7 .. 7))
  reg.write x.USBHD_USB_DEV_AD_Fields

template modifyIt*(reg: USBHD_USB_DEV_AD_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_USB_FRAME_NO_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USBHD_USB_FRAME_NO_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: USBHD_USB_USB_SUSPEND_Type): USBHD_USB_USB_SUSPEND_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_USB_USB_SUSPEND_Fields](reg.loc))

proc read*(reg: static USBHD_USB_USB_SUSPEND_Type): USBHD_USB_USB_SUSPEND_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_USB_USB_SUSPEND_Fields](reg.loc))

proc write*(reg: USBHD_USB_USB_SUSPEND_Type, val: USBHD_USB_USB_SUSPEND_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_USB_USB_SUSPEND_Fields](reg.loc), val)

proc write*(reg: USBHD_USB_USB_SUSPEND_Type, USB_SYS_MOD: uint8 = 0, USB_WAKEUP: bool = false, USB_LINESTATE: uint8 = 0) =
  var x: uint8
  x.setMask((USB_SYS_MOD shl 0).masked(0 .. 1))
  x.setMask((USB_WAKEUP.uint8 shl 2).masked(2 .. 2))
  x.setMask((USB_LINESTATE shl 4).masked(4 .. 5))
  reg.write x.USBHD_USB_USB_SUSPEND_Fields

template modifyIt*(reg: USBHD_USB_USB_SUSPEND_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_USB_SPEED_TYPE_Type): USBHD_USB_SPEED_TYPE_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_USB_SPEED_TYPE_Fields](reg.loc))

proc read*(reg: static USBHD_USB_SPEED_TYPE_Type): USBHD_USB_SPEED_TYPE_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_USB_SPEED_TYPE_Fields](reg.loc))

proc read*(reg: USBHD_USB_MIS_ST_Type): USBHD_USB_MIS_ST_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_USB_MIS_ST_Fields](reg.loc))

proc read*(reg: static USBHD_USB_MIS_ST_Type): USBHD_USB_MIS_ST_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_USB_MIS_ST_Fields](reg.loc))

proc read*(reg: USBHD_USB_INT_FG_Type): USBHD_USB_INT_FG_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_USB_INT_FG_Fields](reg.loc))

proc read*(reg: static USBHD_USB_INT_FG_Type): USBHD_USB_INT_FG_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_USB_INT_FG_Fields](reg.loc))

proc write*(reg: USBHD_USB_INT_FG_Type, val: USBHD_USB_INT_FG_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_USB_INT_FG_Fields](reg.loc), val)

proc write*(reg: USBHD_USB_INT_FG_Type, RB_UIF_BUS_RST: bool = false, RB_UIF_TRANSFER: bool = false, RB_UIF_SUSPEND: bool = false, RB_UIF_HST_SOF: bool = false, RB_UIF_FIFO_OV: bool = false) =
  var x: uint8
  x.setMask((RB_UIF_BUS_RST.uint8 shl 0).masked(0 .. 0))
  x.setMask((RB_UIF_TRANSFER.uint8 shl 1).masked(1 .. 1))
  x.setMask((RB_UIF_SUSPEND.uint8 shl 2).masked(2 .. 2))
  x.setMask((RB_UIF_HST_SOF.uint8 shl 3).masked(3 .. 3))
  x.setMask((RB_UIF_FIFO_OV.uint8 shl 4).masked(4 .. 4))
  reg.write x.USBHD_USB_INT_FG_Fields

template modifyIt*(reg: USBHD_USB_INT_FG_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_USB_INT_ST_Type): USBHD_USB_INT_ST_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_USB_INT_ST_Fields](reg.loc))

proc read*(reg: static USBHD_USB_INT_ST_Type): USBHD_USB_INT_ST_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_USB_INT_ST_Fields](reg.loc))

proc read*(reg: USBHD_USB_RX_LEN_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USBHD_USB_RX_LEN_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: USBHD_UEP_CONFIG_Type): USBHD_UEP_CONFIG_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP_CONFIG_Fields](reg.loc))

proc read*(reg: static USBHD_UEP_CONFIG_Type): USBHD_UEP_CONFIG_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP_CONFIG_Fields](reg.loc))

proc write*(reg: USBHD_UEP_CONFIG_Type, val: USBHD_UEP_CONFIG_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP_CONFIG_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP_CONFIG_Type, bUEP_R_EN_UH_EP_MOD: uint32 = 0, bUEP_T_EN_bUH_TX_EN: uint32 = 0) =
  var x: uint32
  x.setMask((bUEP_R_EN_UH_EP_MOD shl 17).masked(17 .. 31))
  x.setMask((bUEP_T_EN_bUH_TX_EN shl 1).masked(1 .. 15))
  reg.write x.USBHD_UEP_CONFIG_Fields

template modifyIt*(reg: USBHD_UEP_CONFIG_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP_TYPE_Type): USBHD_UEP_TYPE_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP_TYPE_Fields](reg.loc))

proc read*(reg: static USBHD_UEP_TYPE_Type): USBHD_UEP_TYPE_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP_TYPE_Fields](reg.loc))

proc write*(reg: USBHD_UEP_TYPE_Type, val: USBHD_UEP_TYPE_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP_TYPE_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP_TYPE_Type, bUEP_R_TYPE: uint32 = 0, bUEP_T_TYPE: uint32 = 0) =
  var x: uint32
  x.setMask((bUEP_R_TYPE shl 17).masked(17 .. 31))
  x.setMask((bUEP_T_TYPE shl 1).masked(1 .. 15))
  reg.write x.USBHD_UEP_TYPE_Fields

template modifyIt*(reg: USBHD_UEP_TYPE_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP_BUF_MOD_Type): USBHD_UEP_BUF_MOD_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP_BUF_MOD_Fields](reg.loc))

proc read*(reg: static USBHD_UEP_BUF_MOD_Type): USBHD_UEP_BUF_MOD_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP_BUF_MOD_Fields](reg.loc))

proc write*(reg: USBHD_UEP_BUF_MOD_Type, val: USBHD_UEP_BUF_MOD_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP_BUF_MOD_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP_BUF_MOD_Type, bUEP_ISO_BUF_MOD: uint32 = 0, bUEP_BUF_MOD: uint32 = 0) =
  var x: uint32
  x.setMask((bUEP_ISO_BUF_MOD shl 16).masked(16 .. 31))
  x.setMask((bUEP_BUF_MOD shl 0).masked(0 .. 15))
  reg.write x.USBHD_UEP_BUF_MOD_Fields

template modifyIt*(reg: USBHD_UEP_BUF_MOD_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP0_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USBHD_UEP0_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc write*(reg: USBHD_UEP0_DMA_Type, val: uint16) {.inline.} =
  volatileStore(cast[ptr uint16](reg.loc), val)

template modifyIt*(reg: USBHD_UEP0_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP1_RX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USBHD_UEP1_RX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc write*(reg: USBHD_UEP1_RX_DMA_Type, val: uint16) {.inline.} =
  volatileStore(cast[ptr uint16](reg.loc), val)

template modifyIt*(reg: USBHD_UEP1_RX_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP2_RX_DMA_UH_RX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USBHD_UEP2_RX_DMA_UH_RX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc write*(reg: USBHD_UEP2_RX_DMA_UH_RX_DMA_Type, val: uint16) {.inline.} =
  volatileStore(cast[ptr uint16](reg.loc), val)

template modifyIt*(reg: USBHD_UEP2_RX_DMA_UH_RX_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP3_RX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USBHD_UEP3_RX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc write*(reg: USBHD_UEP3_RX_DMA_Type, val: uint16) {.inline.} =
  volatileStore(cast[ptr uint16](reg.loc), val)

template modifyIt*(reg: USBHD_UEP3_RX_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP4_RX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USBHD_UEP4_RX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc write*(reg: USBHD_UEP4_RX_DMA_Type, val: uint16) {.inline.} =
  volatileStore(cast[ptr uint16](reg.loc), val)

template modifyIt*(reg: USBHD_UEP4_RX_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP5_RX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USBHD_UEP5_RX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc write*(reg: USBHD_UEP5_RX_DMA_Type, val: uint16) {.inline.} =
  volatileStore(cast[ptr uint16](reg.loc), val)

template modifyIt*(reg: USBHD_UEP5_RX_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP6_RX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USBHD_UEP6_RX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc write*(reg: USBHD_UEP6_RX_DMA_Type, val: uint16) {.inline.} =
  volatileStore(cast[ptr uint16](reg.loc), val)

template modifyIt*(reg: USBHD_UEP6_RX_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP7_RX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USBHD_UEP7_RX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc write*(reg: USBHD_UEP7_RX_DMA_Type, val: uint16) {.inline.} =
  volatileStore(cast[ptr uint16](reg.loc), val)

template modifyIt*(reg: USBHD_UEP7_RX_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP8_RX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USBHD_UEP8_RX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc write*(reg: USBHD_UEP8_RX_DMA_Type, val: uint16) {.inline.} =
  volatileStore(cast[ptr uint16](reg.loc), val)

template modifyIt*(reg: USBHD_UEP8_RX_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP9_RX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USBHD_UEP9_RX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc write*(reg: USBHD_UEP9_RX_DMA_Type, val: uint16) {.inline.} =
  volatileStore(cast[ptr uint16](reg.loc), val)

template modifyIt*(reg: USBHD_UEP9_RX_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP10_RX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USBHD_UEP10_RX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc write*(reg: USBHD_UEP10_RX_DMA_Type, val: uint16) {.inline.} =
  volatileStore(cast[ptr uint16](reg.loc), val)

template modifyIt*(reg: USBHD_UEP10_RX_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP11_RX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USBHD_UEP11_RX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc write*(reg: USBHD_UEP11_RX_DMA_Type, val: uint16) {.inline.} =
  volatileStore(cast[ptr uint16](reg.loc), val)

template modifyIt*(reg: USBHD_UEP11_RX_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP12_RX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USBHD_UEP12_RX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc write*(reg: USBHD_UEP12_RX_DMA_Type, val: uint16) {.inline.} =
  volatileStore(cast[ptr uint16](reg.loc), val)

template modifyIt*(reg: USBHD_UEP12_RX_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP13_RX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USBHD_UEP13_RX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc write*(reg: USBHD_UEP13_RX_DMA_Type, val: uint16) {.inline.} =
  volatileStore(cast[ptr uint16](reg.loc), val)

template modifyIt*(reg: USBHD_UEP13_RX_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP14_RX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USBHD_UEP14_RX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc write*(reg: USBHD_UEP14_RX_DMA_Type, val: uint16) {.inline.} =
  volatileStore(cast[ptr uint16](reg.loc), val)

template modifyIt*(reg: USBHD_UEP14_RX_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP15_RX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USBHD_UEP15_RX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc write*(reg: USBHD_UEP15_RX_DMA_Type, val: uint16) {.inline.} =
  volatileStore(cast[ptr uint16](reg.loc), val)

template modifyIt*(reg: USBHD_UEP15_RX_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP1_TX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USBHD_UEP1_TX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc write*(reg: USBHD_UEP1_TX_DMA_Type, val: uint16) {.inline.} =
  volatileStore(cast[ptr uint16](reg.loc), val)

template modifyIt*(reg: USBHD_UEP1_TX_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP2_TX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USBHD_UEP2_TX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc write*(reg: USBHD_UEP2_TX_DMA_Type, val: uint16) {.inline.} =
  volatileStore(cast[ptr uint16](reg.loc), val)

template modifyIt*(reg: USBHD_UEP2_TX_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP3_TX_DMA_UH_TX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USBHD_UEP3_TX_DMA_UH_TX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc write*(reg: USBHD_UEP3_TX_DMA_UH_TX_DMA_Type, val: uint16) {.inline.} =
  volatileStore(cast[ptr uint16](reg.loc), val)

template modifyIt*(reg: USBHD_UEP3_TX_DMA_UH_TX_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP4_TX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USBHD_UEP4_TX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc write*(reg: USBHD_UEP4_TX_DMA_Type, val: uint16) {.inline.} =
  volatileStore(cast[ptr uint16](reg.loc), val)

template modifyIt*(reg: USBHD_UEP4_TX_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP5_TX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USBHD_UEP5_TX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc write*(reg: USBHD_UEP5_TX_DMA_Type, val: uint16) {.inline.} =
  volatileStore(cast[ptr uint16](reg.loc), val)

template modifyIt*(reg: USBHD_UEP5_TX_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP6_TX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USBHD_UEP6_TX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc write*(reg: USBHD_UEP6_TX_DMA_Type, val: uint16) {.inline.} =
  volatileStore(cast[ptr uint16](reg.loc), val)

template modifyIt*(reg: USBHD_UEP6_TX_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP7_TX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USBHD_UEP7_TX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc write*(reg: USBHD_UEP7_TX_DMA_Type, val: uint16) {.inline.} =
  volatileStore(cast[ptr uint16](reg.loc), val)

template modifyIt*(reg: USBHD_UEP7_TX_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP8_TX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USBHD_UEP8_TX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc write*(reg: USBHD_UEP8_TX_DMA_Type, val: uint16) {.inline.} =
  volatileStore(cast[ptr uint16](reg.loc), val)

template modifyIt*(reg: USBHD_UEP8_TX_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP9_TX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USBHD_UEP9_TX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc write*(reg: USBHD_UEP9_TX_DMA_Type, val: uint16) {.inline.} =
  volatileStore(cast[ptr uint16](reg.loc), val)

template modifyIt*(reg: USBHD_UEP9_TX_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP10_TX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USBHD_UEP10_TX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc write*(reg: USBHD_UEP10_TX_DMA_Type, val: uint16) {.inline.} =
  volatileStore(cast[ptr uint16](reg.loc), val)

template modifyIt*(reg: USBHD_UEP10_TX_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP11_TX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USBHD_UEP11_TX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc write*(reg: USBHD_UEP11_TX_DMA_Type, val: uint16) {.inline.} =
  volatileStore(cast[ptr uint16](reg.loc), val)

template modifyIt*(reg: USBHD_UEP11_TX_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP12_TX_DMA_UH_SPLIT_DATA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USBHD_UEP12_TX_DMA_UH_SPLIT_DATA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc write*(reg: USBHD_UEP12_TX_DMA_UH_SPLIT_DATA_Type, val: uint16) {.inline.} =
  volatileStore(cast[ptr uint16](reg.loc), val)

template modifyIt*(reg: USBHD_UEP12_TX_DMA_UH_SPLIT_DATA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP13_TX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USBHD_UEP13_TX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc write*(reg: USBHD_UEP13_TX_DMA_Type, val: uint16) {.inline.} =
  volatileStore(cast[ptr uint16](reg.loc), val)

template modifyIt*(reg: USBHD_UEP13_TX_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP14_TX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USBHD_UEP14_TX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc write*(reg: USBHD_UEP14_TX_DMA_Type, val: uint16) {.inline.} =
  volatileStore(cast[ptr uint16](reg.loc), val)

template modifyIt*(reg: USBHD_UEP14_TX_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP15_TX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USBHD_UEP15_TX_DMA_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc write*(reg: USBHD_UEP15_TX_DMA_Type, val: uint16) {.inline.} =
  volatileStore(cast[ptr uint16](reg.loc), val)

template modifyIt*(reg: USBHD_UEP15_TX_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP0_MAX_LEN_Type): USBHD_UEP0_MAX_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP0_MAX_LEN_Fields](reg.loc))

proc read*(reg: static USBHD_UEP0_MAX_LEN_Type): USBHD_UEP0_MAX_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP0_MAX_LEN_Fields](reg.loc))

proc write*(reg: USBHD_UEP0_MAX_LEN_Type, val: USBHD_UEP0_MAX_LEN_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP0_MAX_LEN_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP0_MAX_LEN_Type, UEP0_MAX_LEN: uint16 = 0) =
  var x: uint16
  x.setMask((UEP0_MAX_LEN shl 0).masked(0 .. 10))
  reg.write x.USBHD_UEP0_MAX_LEN_Fields

template modifyIt*(reg: USBHD_UEP0_MAX_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP1_MAX_LEN_Type): USBHD_UEP1_MAX_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP1_MAX_LEN_Fields](reg.loc))

proc read*(reg: static USBHD_UEP1_MAX_LEN_Type): USBHD_UEP1_MAX_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP1_MAX_LEN_Fields](reg.loc))

proc write*(reg: USBHD_UEP1_MAX_LEN_Type, val: USBHD_UEP1_MAX_LEN_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP1_MAX_LEN_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP1_MAX_LEN_Type, UEP1_MAX_LEN: uint16 = 0) =
  var x: uint16
  x.setMask((UEP1_MAX_LEN shl 0).masked(0 .. 10))
  reg.write x.USBHD_UEP1_MAX_LEN_Fields

template modifyIt*(reg: USBHD_UEP1_MAX_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP2_MAX_LEN_UH_RX_MAX_LEN_Type): USBHD_UEP2_MAX_LEN_UH_RX_MAX_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP2_MAX_LEN_UH_RX_MAX_LEN_Fields](reg.loc))

proc read*(reg: static USBHD_UEP2_MAX_LEN_UH_RX_MAX_LEN_Type): USBHD_UEP2_MAX_LEN_UH_RX_MAX_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP2_MAX_LEN_UH_RX_MAX_LEN_Fields](reg.loc))

proc write*(reg: USBHD_UEP2_MAX_LEN_UH_RX_MAX_LEN_Type, val: USBHD_UEP2_MAX_LEN_UH_RX_MAX_LEN_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP2_MAX_LEN_UH_RX_MAX_LEN_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP2_MAX_LEN_UH_RX_MAX_LEN_Type, UEP2_MAX_LEN_UH_RX_MAX_LEN: uint16 = 0) =
  var x: uint16
  x.setMask((UEP2_MAX_LEN_UH_RX_MAX_LEN shl 0).masked(0 .. 10))
  reg.write x.USBHD_UEP2_MAX_LEN_UH_RX_MAX_LEN_Fields

template modifyIt*(reg: USBHD_UEP2_MAX_LEN_UH_RX_MAX_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP3_MAX_LEN_Type): USBHD_UEP3_MAX_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP3_MAX_LEN_Fields](reg.loc))

proc read*(reg: static USBHD_UEP3_MAX_LEN_Type): USBHD_UEP3_MAX_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP3_MAX_LEN_Fields](reg.loc))

proc write*(reg: USBHD_UEP3_MAX_LEN_Type, val: USBHD_UEP3_MAX_LEN_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP3_MAX_LEN_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP3_MAX_LEN_Type, UEP3_MAX_LEN: uint16 = 0) =
  var x: uint16
  x.setMask((UEP3_MAX_LEN shl 0).masked(0 .. 10))
  reg.write x.USBHD_UEP3_MAX_LEN_Fields

template modifyIt*(reg: USBHD_UEP3_MAX_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP4_MAX_LEN_Type): USBHD_UEP4_MAX_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP4_MAX_LEN_Fields](reg.loc))

proc read*(reg: static USBHD_UEP4_MAX_LEN_Type): USBHD_UEP4_MAX_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP4_MAX_LEN_Fields](reg.loc))

proc write*(reg: USBHD_UEP4_MAX_LEN_Type, val: USBHD_UEP4_MAX_LEN_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP4_MAX_LEN_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP4_MAX_LEN_Type, UEP4_MAX_LEN: uint16 = 0) =
  var x: uint16
  x.setMask((UEP4_MAX_LEN shl 0).masked(0 .. 10))
  reg.write x.USBHD_UEP4_MAX_LEN_Fields

template modifyIt*(reg: USBHD_UEP4_MAX_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP5_MAX_LEN_Type): USBHD_UEP5_MAX_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP5_MAX_LEN_Fields](reg.loc))

proc read*(reg: static USBHD_UEP5_MAX_LEN_Type): USBHD_UEP5_MAX_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP5_MAX_LEN_Fields](reg.loc))

proc write*(reg: USBHD_UEP5_MAX_LEN_Type, val: USBHD_UEP5_MAX_LEN_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP5_MAX_LEN_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP5_MAX_LEN_Type, UEP5_MAX_LEN: uint16 = 0) =
  var x: uint16
  x.setMask((UEP5_MAX_LEN shl 0).masked(0 .. 10))
  reg.write x.USBHD_UEP5_MAX_LEN_Fields

template modifyIt*(reg: USBHD_UEP5_MAX_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP6_MAX_LEN_Type): USBHD_UEP6_MAX_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP6_MAX_LEN_Fields](reg.loc))

proc read*(reg: static USBHD_UEP6_MAX_LEN_Type): USBHD_UEP6_MAX_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP6_MAX_LEN_Fields](reg.loc))

proc write*(reg: USBHD_UEP6_MAX_LEN_Type, val: USBHD_UEP6_MAX_LEN_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP6_MAX_LEN_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP6_MAX_LEN_Type, UEP6_MAX_LEN: uint16 = 0) =
  var x: uint16
  x.setMask((UEP6_MAX_LEN shl 0).masked(0 .. 10))
  reg.write x.USBHD_UEP6_MAX_LEN_Fields

template modifyIt*(reg: USBHD_UEP6_MAX_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP7_MAX_LEN_Type): USBHD_UEP7_MAX_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP7_MAX_LEN_Fields](reg.loc))

proc read*(reg: static USBHD_UEP7_MAX_LEN_Type): USBHD_UEP7_MAX_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP7_MAX_LEN_Fields](reg.loc))

proc write*(reg: USBHD_UEP7_MAX_LEN_Type, val: USBHD_UEP7_MAX_LEN_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP7_MAX_LEN_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP7_MAX_LEN_Type, UEP7_MAX_LEN: uint16 = 0) =
  var x: uint16
  x.setMask((UEP7_MAX_LEN shl 0).masked(0 .. 10))
  reg.write x.USBHD_UEP7_MAX_LEN_Fields

template modifyIt*(reg: USBHD_UEP7_MAX_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP8_MAX_LEN_Type): USBHD_UEP8_MAX_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP8_MAX_LEN_Fields](reg.loc))

proc read*(reg: static USBHD_UEP8_MAX_LEN_Type): USBHD_UEP8_MAX_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP8_MAX_LEN_Fields](reg.loc))

proc write*(reg: USBHD_UEP8_MAX_LEN_Type, val: USBHD_UEP8_MAX_LEN_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP8_MAX_LEN_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP8_MAX_LEN_Type, UEP8_MAX_LEN: uint16 = 0) =
  var x: uint16
  x.setMask((UEP8_MAX_LEN shl 0).masked(0 .. 10))
  reg.write x.USBHD_UEP8_MAX_LEN_Fields

template modifyIt*(reg: USBHD_UEP8_MAX_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP9_MAX_LEN_Type): USBHD_UEP9_MAX_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP9_MAX_LEN_Fields](reg.loc))

proc read*(reg: static USBHD_UEP9_MAX_LEN_Type): USBHD_UEP9_MAX_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP9_MAX_LEN_Fields](reg.loc))

proc write*(reg: USBHD_UEP9_MAX_LEN_Type, val: USBHD_UEP9_MAX_LEN_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP9_MAX_LEN_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP9_MAX_LEN_Type, UEP9_MAX_LEN: uint16 = 0) =
  var x: uint16
  x.setMask((UEP9_MAX_LEN shl 0).masked(0 .. 10))
  reg.write x.USBHD_UEP9_MAX_LEN_Fields

template modifyIt*(reg: USBHD_UEP9_MAX_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP10_MAX_LEN_Type): USBHD_UEP10_MAX_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP10_MAX_LEN_Fields](reg.loc))

proc read*(reg: static USBHD_UEP10_MAX_LEN_Type): USBHD_UEP10_MAX_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP10_MAX_LEN_Fields](reg.loc))

proc write*(reg: USBHD_UEP10_MAX_LEN_Type, val: USBHD_UEP10_MAX_LEN_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP10_MAX_LEN_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP10_MAX_LEN_Type, UEP10_MAX_LEN: uint16 = 0) =
  var x: uint16
  x.setMask((UEP10_MAX_LEN shl 0).masked(0 .. 10))
  reg.write x.USBHD_UEP10_MAX_LEN_Fields

template modifyIt*(reg: USBHD_UEP10_MAX_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP11_MAX_LEN_Type): USBHD_UEP11_MAX_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP11_MAX_LEN_Fields](reg.loc))

proc read*(reg: static USBHD_UEP11_MAX_LEN_Type): USBHD_UEP11_MAX_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP11_MAX_LEN_Fields](reg.loc))

proc write*(reg: USBHD_UEP11_MAX_LEN_Type, val: USBHD_UEP11_MAX_LEN_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP11_MAX_LEN_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP11_MAX_LEN_Type, UEP11_MAX_LEN: uint16 = 0) =
  var x: uint16
  x.setMask((UEP11_MAX_LEN shl 0).masked(0 .. 10))
  reg.write x.USBHD_UEP11_MAX_LEN_Fields

template modifyIt*(reg: USBHD_UEP11_MAX_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP12_MAX_LEN_Type): USBHD_UEP12_MAX_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP12_MAX_LEN_Fields](reg.loc))

proc read*(reg: static USBHD_UEP12_MAX_LEN_Type): USBHD_UEP12_MAX_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP12_MAX_LEN_Fields](reg.loc))

proc write*(reg: USBHD_UEP12_MAX_LEN_Type, val: USBHD_UEP12_MAX_LEN_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP12_MAX_LEN_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP12_MAX_LEN_Type, UEP12_MAX_LEN: uint16 = 0) =
  var x: uint16
  x.setMask((UEP12_MAX_LEN shl 0).masked(0 .. 10))
  reg.write x.USBHD_UEP12_MAX_LEN_Fields

template modifyIt*(reg: USBHD_UEP12_MAX_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP13_MAX_LEN_Type): USBHD_UEP13_MAX_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP13_MAX_LEN_Fields](reg.loc))

proc read*(reg: static USBHD_UEP13_MAX_LEN_Type): USBHD_UEP13_MAX_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP13_MAX_LEN_Fields](reg.loc))

proc write*(reg: USBHD_UEP13_MAX_LEN_Type, val: USBHD_UEP13_MAX_LEN_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP13_MAX_LEN_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP13_MAX_LEN_Type, UEP13_MAX_LEN: uint16 = 0) =
  var x: uint16
  x.setMask((UEP13_MAX_LEN shl 0).masked(0 .. 10))
  reg.write x.USBHD_UEP13_MAX_LEN_Fields

template modifyIt*(reg: USBHD_UEP13_MAX_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP14_MAX_LEN_Type): USBHD_UEP14_MAX_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP14_MAX_LEN_Fields](reg.loc))

proc read*(reg: static USBHD_UEP14_MAX_LEN_Type): USBHD_UEP14_MAX_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP14_MAX_LEN_Fields](reg.loc))

proc write*(reg: USBHD_UEP14_MAX_LEN_Type, val: USBHD_UEP14_MAX_LEN_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP14_MAX_LEN_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP14_MAX_LEN_Type, UEP14_MAX_LEN: uint16 = 0) =
  var x: uint16
  x.setMask((UEP14_MAX_LEN shl 0).masked(0 .. 10))
  reg.write x.USBHD_UEP14_MAX_LEN_Fields

template modifyIt*(reg: USBHD_UEP14_MAX_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP15_MAX_LEN_Type): USBHD_UEP15_MAX_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP15_MAX_LEN_Fields](reg.loc))

proc read*(reg: static USBHD_UEP15_MAX_LEN_Type): USBHD_UEP15_MAX_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP15_MAX_LEN_Fields](reg.loc))

proc write*(reg: USBHD_UEP15_MAX_LEN_Type, val: USBHD_UEP15_MAX_LEN_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP15_MAX_LEN_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP15_MAX_LEN_Type, UEP15_MAX_LEN: uint16 = 0) =
  var x: uint16
  x.setMask((UEP15_MAX_LEN shl 0).masked(0 .. 10))
  reg.write x.USBHD_UEP15_MAX_LEN_Fields

template modifyIt*(reg: USBHD_UEP15_MAX_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP0_T_LEN_Type): USBHD_UEP0_T_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP0_T_LEN_Fields](reg.loc))

proc read*(reg: static USBHD_UEP0_T_LEN_Type): USBHD_UEP0_T_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP0_T_LEN_Fields](reg.loc))

proc write*(reg: USBHD_UEP0_T_LEN_Type, val: USBHD_UEP0_T_LEN_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP0_T_LEN_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP0_T_LEN_Type, UEP0_T_LEN: uint16 = 0) =
  var x: uint16
  x.setMask((UEP0_T_LEN shl 0).masked(0 .. 10))
  reg.write x.USBHD_UEP0_T_LEN_Fields

template modifyIt*(reg: USBHD_UEP0_T_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP0_T_CTRL_Type): USBHD_UEP0_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP0_T_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_UEP0_T_CTRL_Type): USBHD_UEP0_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP0_T_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_UEP0_T_CTRL_Type, val: USBHD_UEP0_T_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP0_T_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP0_T_CTRL_Type, MASK_UEP_T_RES: uint8 = 0, MASK_UEP_T_TOG: uint8 = 0, bUEP_T_TOG_AUTO: bool = false) =
  var x: uint8
  x.setMask((MASK_UEP_T_RES shl 0).masked(0 .. 1))
  x.setMask((MASK_UEP_T_TOG shl 3).masked(3 .. 4))
  x.setMask((bUEP_T_TOG_AUTO.uint8 shl 5).masked(5 .. 5))
  reg.write x.USBHD_UEP0_T_CTRL_Fields

template modifyIt*(reg: USBHD_UEP0_T_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP0_R_CTRL_Type): USBHD_UEP0_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP0_R_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_UEP0_R_CTRL_Type): USBHD_UEP0_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP0_R_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_UEP0_R_CTRL_Type, val: USBHD_UEP0_R_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP0_R_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP0_R_CTRL_Type, MASK_UEP_R_RES: uint8 = 0, MASK_UEP_R_TOG: uint8 = 0) =
  var x: uint8
  x.setMask((MASK_UEP_R_RES shl 0).masked(0 .. 1))
  x.setMask((MASK_UEP_R_TOG shl 3).masked(3 .. 4))
  reg.write x.USBHD_UEP0_R_CTRL_Fields

template modifyIt*(reg: USBHD_UEP0_R_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP1_T_LEN_Type): USBHD_UEP1_T_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP1_T_LEN_Fields](reg.loc))

proc read*(reg: static USBHD_UEP1_T_LEN_Type): USBHD_UEP1_T_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP1_T_LEN_Fields](reg.loc))

proc write*(reg: USBHD_UEP1_T_LEN_Type, val: USBHD_UEP1_T_LEN_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP1_T_LEN_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP1_T_LEN_Type, UEP1_T_LEN: uint16 = 0) =
  var x: uint16
  x.setMask((UEP1_T_LEN shl 0).masked(0 .. 10))
  reg.write x.USBHD_UEP1_T_LEN_Fields

template modifyIt*(reg: USBHD_UEP1_T_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP1_T_CTRL_Type): USBHD_UEP1_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP1_T_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_UEP1_T_CTRL_Type): USBHD_UEP1_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP1_T_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_UEP1_T_CTRL_Type, val: USBHD_UEP1_T_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP1_T_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP1_T_CTRL_Type, MASK_UEP_T_RES: uint8 = 0, MASK_UEP_T_TOG: uint8 = 0, bUEP_T_TOG_AUTO: bool = false) =
  var x: uint8
  x.setMask((MASK_UEP_T_RES shl 0).masked(0 .. 1))
  x.setMask((MASK_UEP_T_TOG shl 3).masked(3 .. 4))
  x.setMask((bUEP_T_TOG_AUTO.uint8 shl 5).masked(5 .. 5))
  reg.write x.USBHD_UEP1_T_CTRL_Fields

template modifyIt*(reg: USBHD_UEP1_T_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP1_R_CTRL_Type): USBHD_UEP1_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP1_R_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_UEP1_R_CTRL_Type): USBHD_UEP1_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP1_R_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_UEP1_R_CTRL_Type, val: USBHD_UEP1_R_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP1_R_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP1_R_CTRL_Type, MASK_UEP_R_RES: uint8 = 0, MASK_UEP_R_TOG: uint8 = 0) =
  var x: uint8
  x.setMask((MASK_UEP_R_RES shl 0).masked(0 .. 1))
  x.setMask((MASK_UEP_R_TOG shl 3).masked(3 .. 4))
  reg.write x.USBHD_UEP1_R_CTRL_Fields

template modifyIt*(reg: USBHD_UEP1_R_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP2_T_LEN_UH_EP_PID_Type): USBHD_UEP2_T_LEN_UH_EP_PID_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP2_T_LEN_UH_EP_PID_Fields](reg.loc))

proc read*(reg: static USBHD_UEP2_T_LEN_UH_EP_PID_Type): USBHD_UEP2_T_LEN_UH_EP_PID_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP2_T_LEN_UH_EP_PID_Fields](reg.loc))

proc write*(reg: USBHD_UEP2_T_LEN_UH_EP_PID_Type, val: USBHD_UEP2_T_LEN_UH_EP_PID_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP2_T_LEN_UH_EP_PID_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP2_T_LEN_UH_EP_PID_Type, UEP2_T_LEN_MASK_UH_ENDP_MASK_UH_TOKEN: uint16 = 0) =
  var x: uint16
  x.setMask((UEP2_T_LEN_MASK_UH_ENDP_MASK_UH_TOKEN shl 0).masked(0 .. 10))
  reg.write x.USBHD_UEP2_T_LEN_UH_EP_PID_Fields

template modifyIt*(reg: USBHD_UEP2_T_LEN_UH_EP_PID_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP2_T_CTRL_Type): USBHD_UEP2_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP2_T_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_UEP2_T_CTRL_Type): USBHD_UEP2_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP2_T_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_UEP2_T_CTRL_Type, val: USBHD_UEP2_T_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP2_T_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP2_T_CTRL_Type, MASK_UEP_T_RES: uint8 = 0, MASK_UEP_T_TOG: uint8 = 0, bUEP_T_TOG_AUTO: bool = false) =
  var x: uint8
  x.setMask((MASK_UEP_T_RES shl 0).masked(0 .. 1))
  x.setMask((MASK_UEP_T_TOG shl 3).masked(3 .. 4))
  x.setMask((bUEP_T_TOG_AUTO.uint8 shl 5).masked(5 .. 5))
  reg.write x.USBHD_UEP2_T_CTRL_Fields

template modifyIt*(reg: USBHD_UEP2_T_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP2_R_CTRL_UH_RX_CTRL_Type): USBHD_UEP2_R_CTRL_UH_RX_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP2_R_CTRL_UH_RX_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_UEP2_R_CTRL_UH_RX_CTRL_Type): USBHD_UEP2_R_CTRL_UH_RX_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP2_R_CTRL_UH_RX_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_UEP2_R_CTRL_UH_RX_CTRL_Type, val: USBHD_UEP2_R_CTRL_UH_RX_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP2_R_CTRL_UH_RX_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP2_R_CTRL_UH_RX_CTRL_Type, MASK_UEP_R_RES_MASK_UH_R_RES: uint8 = 0, bUH_R_RES_NO: bool = false, MASK_UEP_R_TOG_MASK_UH_R_TOG: uint8 = 0, bUH_R_DATA_NO: bool = false) =
  var x: uint8
  x.setMask((MASK_UEP_R_RES_MASK_UH_R_RES shl 0).masked(0 .. 1))
  x.setMask((bUH_R_RES_NO.uint8 shl 2).masked(2 .. 2))
  x.setMask((MASK_UEP_R_TOG_MASK_UH_R_TOG shl 3).masked(3 .. 4))
  x.setMask((bUH_R_DATA_NO.uint8 shl 6).masked(6 .. 6))
  reg.write x.USBHD_UEP2_R_CTRL_UH_RX_CTRL_Fields

template modifyIt*(reg: USBHD_UEP2_R_CTRL_UH_RX_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP3_T_LEN_UH_TX_LEN_H_Type): USBHD_UEP3_T_LEN_UH_TX_LEN_H_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP3_T_LEN_UH_TX_LEN_H_Fields](reg.loc))

proc read*(reg: static USBHD_UEP3_T_LEN_UH_TX_LEN_H_Type): USBHD_UEP3_T_LEN_UH_TX_LEN_H_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP3_T_LEN_UH_TX_LEN_H_Fields](reg.loc))

proc write*(reg: USBHD_UEP3_T_LEN_UH_TX_LEN_H_Type, val: USBHD_UEP3_T_LEN_UH_TX_LEN_H_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP3_T_LEN_UH_TX_LEN_H_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP3_T_LEN_UH_TX_LEN_H_Type, UEP3_T_LEN_UH_TX_LEN_H: uint16 = 0) =
  var x: uint16
  x.setMask((UEP3_T_LEN_UH_TX_LEN_H shl 0).masked(0 .. 10))
  reg.write x.USBHD_UEP3_T_LEN_UH_TX_LEN_H_Fields

template modifyIt*(reg: USBHD_UEP3_T_LEN_UH_TX_LEN_H_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP3_T_CTRL_UH_TX_CTRL_Type): USBHD_UEP3_T_CTRL_UH_TX_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP3_T_CTRL_UH_TX_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_UEP3_T_CTRL_UH_TX_CTRL_Type): USBHD_UEP3_T_CTRL_UH_TX_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP3_T_CTRL_UH_TX_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_UEP3_T_CTRL_UH_TX_CTRL_Type, val: USBHD_UEP3_T_CTRL_UH_TX_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP3_T_CTRL_UH_TX_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP3_T_CTRL_UH_TX_CTRL_Type, MASK_UEP_T_RES_MASK_UH_T_RES: uint8 = 0, bUH_T_RES_NO: bool = false, MASK_UEP_T_TOG_MASK_UH_T_TOG: uint8 = 0, bUEP_T_TOG_AUTO_bUH_T_AUTO_TOG: bool = false, bUH_T_DATA_NO: bool = false) =
  var x: uint8
  x.setMask((MASK_UEP_T_RES_MASK_UH_T_RES shl 0).masked(0 .. 1))
  x.setMask((bUH_T_RES_NO.uint8 shl 2).masked(2 .. 2))
  x.setMask((MASK_UEP_T_TOG_MASK_UH_T_TOG shl 3).masked(3 .. 4))
  x.setMask((bUEP_T_TOG_AUTO_bUH_T_AUTO_TOG.uint8 shl 5).masked(5 .. 5))
  x.setMask((bUH_T_DATA_NO.uint8 shl 6).masked(6 .. 6))
  reg.write x.USBHD_UEP3_T_CTRL_UH_TX_CTRL_Fields

template modifyIt*(reg: USBHD_UEP3_T_CTRL_UH_TX_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP3_R_CTRL_Type): USBHD_UEP3_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP3_R_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_UEP3_R_CTRL_Type): USBHD_UEP3_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP3_R_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_UEP3_R_CTRL_Type, val: USBHD_UEP3_R_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP3_R_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP3_R_CTRL_Type, MASK_UEP_R_RES: uint8 = 0, MASK_UEP_R_TOG: uint8 = 0) =
  var x: uint8
  x.setMask((MASK_UEP_R_RES shl 0).masked(0 .. 1))
  x.setMask((MASK_UEP_R_TOG shl 3).masked(3 .. 4))
  reg.write x.USBHD_UEP3_R_CTRL_Fields

template modifyIt*(reg: USBHD_UEP3_R_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP4_T_LEN_Type): USBHD_UEP4_T_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP4_T_LEN_Fields](reg.loc))

proc read*(reg: static USBHD_UEP4_T_LEN_Type): USBHD_UEP4_T_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP4_T_LEN_Fields](reg.loc))

proc write*(reg: USBHD_UEP4_T_LEN_Type, val: USBHD_UEP4_T_LEN_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP4_T_LEN_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP4_T_LEN_Type, UEP4_T_LEN: uint16 = 0) =
  var x: uint16
  x.setMask((UEP4_T_LEN shl 0).masked(0 .. 10))
  reg.write x.USBHD_UEP4_T_LEN_Fields

template modifyIt*(reg: USBHD_UEP4_T_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP4_T_CTRL_Type): USBHD_UEP4_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP4_T_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_UEP4_T_CTRL_Type): USBHD_UEP4_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP4_T_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_UEP4_T_CTRL_Type, val: USBHD_UEP4_T_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP4_T_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP4_T_CTRL_Type, MASK_UEP_T_RES: uint8 = 0, MASK_UEP_T_TOG: uint8 = 0, bUEP_T_TOG_AUTO: bool = false) =
  var x: uint8
  x.setMask((MASK_UEP_T_RES shl 0).masked(0 .. 1))
  x.setMask((MASK_UEP_T_TOG shl 3).masked(3 .. 4))
  x.setMask((bUEP_T_TOG_AUTO.uint8 shl 5).masked(5 .. 5))
  reg.write x.USBHD_UEP4_T_CTRL_Fields

template modifyIt*(reg: USBHD_UEP4_T_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP4_R_CTRL_Type): USBHD_UEP4_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP4_R_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_UEP4_R_CTRL_Type): USBHD_UEP4_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP4_R_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_UEP4_R_CTRL_Type, val: USBHD_UEP4_R_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP4_R_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP4_R_CTRL_Type, MASK_UEP_R_RES: uint8 = 0, MASK_UEP_R_TOG: uint8 = 0) =
  var x: uint8
  x.setMask((MASK_UEP_R_RES shl 0).masked(0 .. 1))
  x.setMask((MASK_UEP_R_TOG shl 3).masked(3 .. 4))
  reg.write x.USBHD_UEP4_R_CTRL_Fields

template modifyIt*(reg: USBHD_UEP4_R_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP5_T_LEN_Type): USBHD_UEP5_T_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP5_T_LEN_Fields](reg.loc))

proc read*(reg: static USBHD_UEP5_T_LEN_Type): USBHD_UEP5_T_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP5_T_LEN_Fields](reg.loc))

proc write*(reg: USBHD_UEP5_T_LEN_Type, val: USBHD_UEP5_T_LEN_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP5_T_LEN_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP5_T_LEN_Type, UEP5_T_LEN: uint16 = 0) =
  var x: uint16
  x.setMask((UEP5_T_LEN shl 0).masked(0 .. 10))
  reg.write x.USBHD_UEP5_T_LEN_Fields

template modifyIt*(reg: USBHD_UEP5_T_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP5_T_CTRL_Type): USBHD_UEP5_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP5_T_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_UEP5_T_CTRL_Type): USBHD_UEP5_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP5_T_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_UEP5_T_CTRL_Type, val: USBHD_UEP5_T_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP5_T_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP5_T_CTRL_Type, MASK_UEP_T_RES: uint8 = 0, MASK_UEP_T_TOG: uint8 = 0, bUEP_T_TOG_AUTO: bool = false) =
  var x: uint8
  x.setMask((MASK_UEP_T_RES shl 0).masked(0 .. 1))
  x.setMask((MASK_UEP_T_TOG shl 3).masked(3 .. 4))
  x.setMask((bUEP_T_TOG_AUTO.uint8 shl 5).masked(5 .. 5))
  reg.write x.USBHD_UEP5_T_CTRL_Fields

template modifyIt*(reg: USBHD_UEP5_T_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP5_R_CTRL_Type): USBHD_UEP5_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP5_R_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_UEP5_R_CTRL_Type): USBHD_UEP5_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP5_R_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_UEP5_R_CTRL_Type, val: USBHD_UEP5_R_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP5_R_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP5_R_CTRL_Type, MASK_UEP_R_RES: uint8 = 0, MASK_UEP_R_TOG: uint8 = 0) =
  var x: uint8
  x.setMask((MASK_UEP_R_RES shl 0).masked(0 .. 1))
  x.setMask((MASK_UEP_R_TOG shl 3).masked(3 .. 4))
  reg.write x.USBHD_UEP5_R_CTRL_Fields

template modifyIt*(reg: USBHD_UEP5_R_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP6_T_LEN_Type): USBHD_UEP6_T_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP6_T_LEN_Fields](reg.loc))

proc read*(reg: static USBHD_UEP6_T_LEN_Type): USBHD_UEP6_T_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP6_T_LEN_Fields](reg.loc))

proc write*(reg: USBHD_UEP6_T_LEN_Type, val: USBHD_UEP6_T_LEN_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP6_T_LEN_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP6_T_LEN_Type, UEP6_T_LEN: uint16 = 0) =
  var x: uint16
  x.setMask((UEP6_T_LEN shl 0).masked(0 .. 10))
  reg.write x.USBHD_UEP6_T_LEN_Fields

template modifyIt*(reg: USBHD_UEP6_T_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP6_T_CTRL_Type): USBHD_UEP6_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP6_T_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_UEP6_T_CTRL_Type): USBHD_UEP6_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP6_T_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_UEP6_T_CTRL_Type, val: USBHD_UEP6_T_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP6_T_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP6_T_CTRL_Type, MASK_UEP_T_RES: uint8 = 0, MASK_UEP_T_TOG: uint8 = 0, bUEP_T_TOG_AUTO: bool = false) =
  var x: uint8
  x.setMask((MASK_UEP_T_RES shl 0).masked(0 .. 1))
  x.setMask((MASK_UEP_T_TOG shl 3).masked(3 .. 4))
  x.setMask((bUEP_T_TOG_AUTO.uint8 shl 5).masked(5 .. 5))
  reg.write x.USBHD_UEP6_T_CTRL_Fields

template modifyIt*(reg: USBHD_UEP6_T_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP6_R_CTRL_Type): USBHD_UEP6_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP6_R_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_UEP6_R_CTRL_Type): USBHD_UEP6_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP6_R_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_UEP6_R_CTRL_Type, val: USBHD_UEP6_R_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP6_R_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP6_R_CTRL_Type, MASK_UEP_R_RES: uint8 = 0, MASK_UEP_R_TOG: uint8 = 0) =
  var x: uint8
  x.setMask((MASK_UEP_R_RES shl 0).masked(0 .. 1))
  x.setMask((MASK_UEP_R_TOG shl 3).masked(3 .. 4))
  reg.write x.USBHD_UEP6_R_CTRL_Fields

template modifyIt*(reg: USBHD_UEP6_R_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP7_T_LEN_Type): USBHD_UEP7_T_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP7_T_LEN_Fields](reg.loc))

proc read*(reg: static USBHD_UEP7_T_LEN_Type): USBHD_UEP7_T_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP7_T_LEN_Fields](reg.loc))

proc write*(reg: USBHD_UEP7_T_LEN_Type, val: USBHD_UEP7_T_LEN_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP7_T_LEN_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP7_T_LEN_Type, UEP7_T_LEN: uint16 = 0) =
  var x: uint16
  x.setMask((UEP7_T_LEN shl 0).masked(0 .. 10))
  reg.write x.USBHD_UEP7_T_LEN_Fields

template modifyIt*(reg: USBHD_UEP7_T_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP7_T_CTRL_Type): USBHD_UEP7_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP7_T_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_UEP7_T_CTRL_Type): USBHD_UEP7_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP7_T_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_UEP7_T_CTRL_Type, val: USBHD_UEP7_T_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP7_T_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP7_T_CTRL_Type, MASK_UEP_T_RES: uint8 = 0, MASK_UEP_T_TOG: uint8 = 0, bUEP_T_TOG_AUTO: bool = false) =
  var x: uint8
  x.setMask((MASK_UEP_T_RES shl 0).masked(0 .. 1))
  x.setMask((MASK_UEP_T_TOG shl 3).masked(3 .. 4))
  x.setMask((bUEP_T_TOG_AUTO.uint8 shl 5).masked(5 .. 5))
  reg.write x.USBHD_UEP7_T_CTRL_Fields

template modifyIt*(reg: USBHD_UEP7_T_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP7_R_CTRL_Type): USBHD_UEP7_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP7_R_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_UEP7_R_CTRL_Type): USBHD_UEP7_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP7_R_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_UEP7_R_CTRL_Type, val: USBHD_UEP7_R_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP7_R_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP7_R_CTRL_Type, MASK_UEP_R_RES: uint8 = 0, MASK_UEP_R_TOG: uint8 = 0) =
  var x: uint8
  x.setMask((MASK_UEP_R_RES shl 0).masked(0 .. 1))
  x.setMask((MASK_UEP_R_TOG shl 3).masked(3 .. 4))
  reg.write x.USBHD_UEP7_R_CTRL_Fields

template modifyIt*(reg: USBHD_UEP7_R_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP8_T_LEN_Type): USBHD_UEP8_T_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP8_T_LEN_Fields](reg.loc))

proc read*(reg: static USBHD_UEP8_T_LEN_Type): USBHD_UEP8_T_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP8_T_LEN_Fields](reg.loc))

proc write*(reg: USBHD_UEP8_T_LEN_Type, val: USBHD_UEP8_T_LEN_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP8_T_LEN_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP8_T_LEN_Type, UEP8_T_LEN: uint16 = 0) =
  var x: uint16
  x.setMask((UEP8_T_LEN shl 0).masked(0 .. 10))
  reg.write x.USBHD_UEP8_T_LEN_Fields

template modifyIt*(reg: USBHD_UEP8_T_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP8_T_CTRL_Type): USBHD_UEP8_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP8_T_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_UEP8_T_CTRL_Type): USBHD_UEP8_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP8_T_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_UEP8_T_CTRL_Type, val: USBHD_UEP8_T_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP8_T_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP8_T_CTRL_Type, MASK_UEP_T_RES: uint8 = 0, MASK_UEP_T_TOG: uint8 = 0, bUEP_T_TOG_AUTO: bool = false) =
  var x: uint8
  x.setMask((MASK_UEP_T_RES shl 0).masked(0 .. 1))
  x.setMask((MASK_UEP_T_TOG shl 3).masked(3 .. 4))
  x.setMask((bUEP_T_TOG_AUTO.uint8 shl 5).masked(5 .. 5))
  reg.write x.USBHD_UEP8_T_CTRL_Fields

template modifyIt*(reg: USBHD_UEP8_T_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP8_R_CTRL_Type): USBHD_UEP8_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP8_R_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_UEP8_R_CTRL_Type): USBHD_UEP8_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP8_R_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_UEP8_R_CTRL_Type, val: USBHD_UEP8_R_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP8_R_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP8_R_CTRL_Type, MASK_UEP_R_RES: uint8 = 0, MASK_UEP_R_TOG: uint8 = 0) =
  var x: uint8
  x.setMask((MASK_UEP_R_RES shl 0).masked(0 .. 1))
  x.setMask((MASK_UEP_R_TOG shl 3).masked(3 .. 4))
  reg.write x.USBHD_UEP8_R_CTRL_Fields

template modifyIt*(reg: USBHD_UEP8_R_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP9_T_LEN_Type): USBHD_UEP9_T_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP9_T_LEN_Fields](reg.loc))

proc read*(reg: static USBHD_UEP9_T_LEN_Type): USBHD_UEP9_T_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP9_T_LEN_Fields](reg.loc))

proc write*(reg: USBHD_UEP9_T_LEN_Type, val: USBHD_UEP9_T_LEN_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP9_T_LEN_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP9_T_LEN_Type, UEP9_T_LEN: uint16 = 0) =
  var x: uint16
  x.setMask((UEP9_T_LEN shl 0).masked(0 .. 10))
  reg.write x.USBHD_UEP9_T_LEN_Fields

template modifyIt*(reg: USBHD_UEP9_T_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP9_T_CTRL_Type): USBHD_UEP9_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP9_T_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_UEP9_T_CTRL_Type): USBHD_UEP9_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP9_T_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_UEP9_T_CTRL_Type, val: USBHD_UEP9_T_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP9_T_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP9_T_CTRL_Type, MASK_UEP_T_RES: uint8 = 0, MASK_UEP_T_TOG: uint8 = 0, bUEP_T_TOG_AUTO: bool = false) =
  var x: uint8
  x.setMask((MASK_UEP_T_RES shl 0).masked(0 .. 1))
  x.setMask((MASK_UEP_T_TOG shl 3).masked(3 .. 4))
  x.setMask((bUEP_T_TOG_AUTO.uint8 shl 5).masked(5 .. 5))
  reg.write x.USBHD_UEP9_T_CTRL_Fields

template modifyIt*(reg: USBHD_UEP9_T_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP9_R_CTRL_Type): USBHD_UEP9_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP9_R_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_UEP9_R_CTRL_Type): USBHD_UEP9_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP9_R_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_UEP9_R_CTRL_Type, val: USBHD_UEP9_R_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP9_R_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP9_R_CTRL_Type, MASK_UEP_R_RES: uint8 = 0, MASK_UEP_R_TOG: uint8 = 0) =
  var x: uint8
  x.setMask((MASK_UEP_R_RES shl 0).masked(0 .. 1))
  x.setMask((MASK_UEP_R_TOG shl 3).masked(3 .. 4))
  reg.write x.USBHD_UEP9_R_CTRL_Fields

template modifyIt*(reg: USBHD_UEP9_R_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP10_T_LEN_Type): USBHD_UEP10_T_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP10_T_LEN_Fields](reg.loc))

proc read*(reg: static USBHD_UEP10_T_LEN_Type): USBHD_UEP10_T_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP10_T_LEN_Fields](reg.loc))

proc write*(reg: USBHD_UEP10_T_LEN_Type, val: USBHD_UEP10_T_LEN_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP10_T_LEN_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP10_T_LEN_Type, UEP10_T_LEN: uint16 = 0) =
  var x: uint16
  x.setMask((UEP10_T_LEN shl 0).masked(0 .. 10))
  reg.write x.USBHD_UEP10_T_LEN_Fields

template modifyIt*(reg: USBHD_UEP10_T_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP10_T_CTRL_Type): USBHD_UEP10_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP10_T_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_UEP10_T_CTRL_Type): USBHD_UEP10_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP10_T_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_UEP10_T_CTRL_Type, val: USBHD_UEP10_T_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP10_T_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP10_T_CTRL_Type, MASK_UEP_T_RES: uint8 = 0, MASK_UEP_T_TOG: uint8 = 0, bUEP_T_TOG_AUTO: bool = false) =
  var x: uint8
  x.setMask((MASK_UEP_T_RES shl 0).masked(0 .. 1))
  x.setMask((MASK_UEP_T_TOG shl 3).masked(3 .. 4))
  x.setMask((bUEP_T_TOG_AUTO.uint8 shl 5).masked(5 .. 5))
  reg.write x.USBHD_UEP10_T_CTRL_Fields

template modifyIt*(reg: USBHD_UEP10_T_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP10_R_CTRL_Type): USBHD_UEP10_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP10_R_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_UEP10_R_CTRL_Type): USBHD_UEP10_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP10_R_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_UEP10_R_CTRL_Type, val: USBHD_UEP10_R_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP10_R_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP10_R_CTRL_Type, MASK_UEP_R_RES: uint8 = 0, MASK_UEP_R_TOG: uint8 = 0) =
  var x: uint8
  x.setMask((MASK_UEP_R_RES shl 0).masked(0 .. 1))
  x.setMask((MASK_UEP_R_TOG shl 3).masked(3 .. 4))
  reg.write x.USBHD_UEP10_R_CTRL_Fields

template modifyIt*(reg: USBHD_UEP10_R_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP11_T_LEN_Type): USBHD_UEP11_T_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP11_T_LEN_Fields](reg.loc))

proc read*(reg: static USBHD_UEP11_T_LEN_Type): USBHD_UEP11_T_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP11_T_LEN_Fields](reg.loc))

proc write*(reg: USBHD_UEP11_T_LEN_Type, val: USBHD_UEP11_T_LEN_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP11_T_LEN_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP11_T_LEN_Type, UEP0_T_LEN: uint16 = 0) =
  var x: uint16
  x.setMask((UEP0_T_LEN shl 0).masked(0 .. 10))
  reg.write x.USBHD_UEP11_T_LEN_Fields

template modifyIt*(reg: USBHD_UEP11_T_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP11_T_CTRL_Type): USBHD_UEP11_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP11_T_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_UEP11_T_CTRL_Type): USBHD_UEP11_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP11_T_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_UEP11_T_CTRL_Type, val: USBHD_UEP11_T_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP11_T_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP11_T_CTRL_Type, MASK_UEP_T_RES: uint8 = 0, MASK_UEP_T_TOG: uint8 = 0, bUEP_T_TOG_AUTO: bool = false) =
  var x: uint8
  x.setMask((MASK_UEP_T_RES shl 0).masked(0 .. 1))
  x.setMask((MASK_UEP_T_TOG shl 3).masked(3 .. 4))
  x.setMask((bUEP_T_TOG_AUTO.uint8 shl 5).masked(5 .. 5))
  reg.write x.USBHD_UEP11_T_CTRL_Fields

template modifyIt*(reg: USBHD_UEP11_T_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP11_R_CTRL_Type): USBHD_UEP11_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP11_R_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_UEP11_R_CTRL_Type): USBHD_UEP11_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP11_R_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_UEP11_R_CTRL_Type, val: USBHD_UEP11_R_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP11_R_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP11_R_CTRL_Type, MASK_UEP_R_RES: uint8 = 0, MASK_UEP_R_TOG: uint8 = 0) =
  var x: uint8
  x.setMask((MASK_UEP_R_RES shl 0).masked(0 .. 1))
  x.setMask((MASK_UEP_R_TOG shl 3).masked(3 .. 4))
  reg.write x.USBHD_UEP11_R_CTRL_Fields

template modifyIt*(reg: USBHD_UEP11_R_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP12_T_LEN_Type): USBHD_UEP12_T_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP12_T_LEN_Fields](reg.loc))

proc read*(reg: static USBHD_UEP12_T_LEN_Type): USBHD_UEP12_T_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP12_T_LEN_Fields](reg.loc))

proc write*(reg: USBHD_UEP12_T_LEN_Type, val: USBHD_UEP12_T_LEN_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP12_T_LEN_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP12_T_LEN_Type, UEP0_T_LEN: uint16 = 0) =
  var x: uint16
  x.setMask((UEP0_T_LEN shl 0).masked(0 .. 10))
  reg.write x.USBHD_UEP12_T_LEN_Fields

template modifyIt*(reg: USBHD_UEP12_T_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP12_T_CTRL_Type): USBHD_UEP12_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP12_T_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_UEP12_T_CTRL_Type): USBHD_UEP12_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP12_T_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_UEP12_T_CTRL_Type, val: USBHD_UEP12_T_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP12_T_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP12_T_CTRL_Type, MASK_UEP_T_RES: uint8 = 0, MASK_UEP_T_TOG: uint8 = 0, bUEP_T_TOG_AUTO: bool = false) =
  var x: uint8
  x.setMask((MASK_UEP_T_RES shl 0).masked(0 .. 1))
  x.setMask((MASK_UEP_T_TOG shl 3).masked(3 .. 4))
  x.setMask((bUEP_T_TOG_AUTO.uint8 shl 5).masked(5 .. 5))
  reg.write x.USBHD_UEP12_T_CTRL_Fields

template modifyIt*(reg: USBHD_UEP12_T_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP12_R_CTRL_Type): USBHD_UEP12_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP12_R_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_UEP12_R_CTRL_Type): USBHD_UEP12_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP12_R_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_UEP12_R_CTRL_Type, val: USBHD_UEP12_R_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP12_R_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP12_R_CTRL_Type, MASK_UEP_R_RES: uint8 = 0, MASK_UEP_R_TOG: uint8 = 0) =
  var x: uint8
  x.setMask((MASK_UEP_R_RES shl 0).masked(0 .. 1))
  x.setMask((MASK_UEP_R_TOG shl 3).masked(3 .. 4))
  reg.write x.USBHD_UEP12_R_CTRL_Fields

template modifyIt*(reg: USBHD_UEP12_R_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP13_T_LEN_Type): USBHD_UEP13_T_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP13_T_LEN_Fields](reg.loc))

proc read*(reg: static USBHD_UEP13_T_LEN_Type): USBHD_UEP13_T_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP13_T_LEN_Fields](reg.loc))

proc write*(reg: USBHD_UEP13_T_LEN_Type, val: USBHD_UEP13_T_LEN_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP13_T_LEN_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP13_T_LEN_Type, UEP13_T_LEN: uint16 = 0) =
  var x: uint16
  x.setMask((UEP13_T_LEN shl 0).masked(0 .. 10))
  reg.write x.USBHD_UEP13_T_LEN_Fields

template modifyIt*(reg: USBHD_UEP13_T_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP13_T_CTRL_Type): USBHD_UEP13_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP13_T_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_UEP13_T_CTRL_Type): USBHD_UEP13_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP13_T_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_UEP13_T_CTRL_Type, val: USBHD_UEP13_T_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP13_T_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP13_T_CTRL_Type, MASK_UEP_T_RES: uint8 = 0, MASK_UEP_T_TOG: uint8 = 0, bUEP_T_TOG_AUTO: bool = false) =
  var x: uint8
  x.setMask((MASK_UEP_T_RES shl 0).masked(0 .. 1))
  x.setMask((MASK_UEP_T_TOG shl 3).masked(3 .. 4))
  x.setMask((bUEP_T_TOG_AUTO.uint8 shl 5).masked(5 .. 5))
  reg.write x.USBHD_UEP13_T_CTRL_Fields

template modifyIt*(reg: USBHD_UEP13_T_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP13_R_CTRL_Type): USBHD_UEP13_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP13_R_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_UEP13_R_CTRL_Type): USBHD_UEP13_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP13_R_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_UEP13_R_CTRL_Type, val: USBHD_UEP13_R_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP13_R_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP13_R_CTRL_Type, MASK_UEP_R_RES: uint8 = 0, MASK_UEP_R_TOG: uint8 = 0) =
  var x: uint8
  x.setMask((MASK_UEP_R_RES shl 0).masked(0 .. 1))
  x.setMask((MASK_UEP_R_TOG shl 3).masked(3 .. 4))
  reg.write x.USBHD_UEP13_R_CTRL_Fields

template modifyIt*(reg: USBHD_UEP13_R_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP14_T_LEN_Type): USBHD_UEP14_T_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP14_T_LEN_Fields](reg.loc))

proc read*(reg: static USBHD_UEP14_T_LEN_Type): USBHD_UEP14_T_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP14_T_LEN_Fields](reg.loc))

proc write*(reg: USBHD_UEP14_T_LEN_Type, val: USBHD_UEP14_T_LEN_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP14_T_LEN_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP14_T_LEN_Type, UEP14_T_LEN: uint16 = 0) =
  var x: uint16
  x.setMask((UEP14_T_LEN shl 0).masked(0 .. 10))
  reg.write x.USBHD_UEP14_T_LEN_Fields

template modifyIt*(reg: USBHD_UEP14_T_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP14_T_CTRL_Type): USBHD_UEP14_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP14_T_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_UEP14_T_CTRL_Type): USBHD_UEP14_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP14_T_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_UEP14_T_CTRL_Type, val: USBHD_UEP14_T_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP14_T_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP14_T_CTRL_Type, MASK_UEP_T_RES: uint8 = 0, MASK_UEP_T_TOG: uint8 = 0, bUEP_T_TOG_AUTO: bool = false) =
  var x: uint8
  x.setMask((MASK_UEP_T_RES shl 0).masked(0 .. 1))
  x.setMask((MASK_UEP_T_TOG shl 3).masked(3 .. 4))
  x.setMask((bUEP_T_TOG_AUTO.uint8 shl 5).masked(5 .. 5))
  reg.write x.USBHD_UEP14_T_CTRL_Fields

template modifyIt*(reg: USBHD_UEP14_T_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP14_R_CTRL_Type): USBHD_UEP14_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP14_R_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_UEP14_R_CTRL_Type): USBHD_UEP14_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP14_R_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_UEP14_R_CTRL_Type, val: USBHD_UEP14_R_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP14_R_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP14_R_CTRL_Type, MASK_UEP_R_RES: uint8 = 0, MASK_UEP_R_TOG: uint8 = 0) =
  var x: uint8
  x.setMask((MASK_UEP_R_RES shl 0).masked(0 .. 1))
  x.setMask((MASK_UEP_R_TOG shl 3).masked(3 .. 4))
  reg.write x.USBHD_UEP14_R_CTRL_Fields

template modifyIt*(reg: USBHD_UEP14_R_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP15_T_LEN_Type): USBHD_UEP15_T_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP15_T_LEN_Fields](reg.loc))

proc read*(reg: static USBHD_UEP15_T_LEN_Type): USBHD_UEP15_T_LEN_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP15_T_LEN_Fields](reg.loc))

proc write*(reg: USBHD_UEP15_T_LEN_Type, val: USBHD_UEP15_T_LEN_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP15_T_LEN_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP15_T_LEN_Type, UEP0_T_LEN: uint16 = 0) =
  var x: uint16
  x.setMask((UEP0_T_LEN shl 0).masked(0 .. 10))
  reg.write x.USBHD_UEP15_T_LEN_Fields

template modifyIt*(reg: USBHD_UEP15_T_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP15_T_CTRL_Type): USBHD_UEP15_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP15_T_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_UEP15_T_CTRL_Type): USBHD_UEP15_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP15_T_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_UEP15_T_CTRL_Type, val: USBHD_UEP15_T_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP15_T_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP15_T_CTRL_Type, MASK_UEP_T_RES: uint8 = 0, MASK_UEP_T_TOG: uint8 = 0, bUEP_T_TOG_AUTO: bool = false) =
  var x: uint8
  x.setMask((MASK_UEP_T_RES shl 0).masked(0 .. 1))
  x.setMask((MASK_UEP_T_TOG shl 3).masked(3 .. 4))
  x.setMask((bUEP_T_TOG_AUTO.uint8 shl 5).masked(5 .. 5))
  reg.write x.USBHD_UEP15_T_CTRL_Fields

template modifyIt*(reg: USBHD_UEP15_T_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USBHD_UEP15_R_CTRL_Type): USBHD_UEP15_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP15_R_CTRL_Fields](reg.loc))

proc read*(reg: static USBHD_UEP15_R_CTRL_Type): USBHD_UEP15_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USBHD_UEP15_R_CTRL_Fields](reg.loc))

proc write*(reg: USBHD_UEP15_R_CTRL_Type, val: USBHD_UEP15_R_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USBHD_UEP15_R_CTRL_Fields](reg.loc), val)

proc write*(reg: USBHD_UEP15_R_CTRL_Type, MASK_UEP_R_RES: uint8 = 0, MASK_UEP_R_TOG: uint8 = 0) =
  var x: uint8
  x.setMask((MASK_UEP_R_RES shl 0).masked(0 .. 1))
  x.setMask((MASK_UEP_R_TOG shl 3).masked(3 .. 4))
  reg.write x.USBHD_UEP15_R_CTRL_Fields

template modifyIt*(reg: USBHD_UEP15_R_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func RB_UC_DMA_EN*(r: USBHD_USB_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(0 .. 0).bool

proc `RB_UC_DMA_EN=`*(r: var USBHD_USB_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint8 shl 0).masked(0 .. 0))
  r = tmp.USBHD_USB_CTRL_Fields

func RB_UC_CLR_ALL*(r: USBHD_USB_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(1 .. 1).bool

proc `RB_UC_CLR_ALL=`*(r: var USBHD_USB_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint8 shl 1).masked(1 .. 1))
  r = tmp.USBHD_USB_CTRL_Fields

func RB_UC_RESET_SIE*(r: USBHD_USB_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(2 .. 2).bool

proc `RB_UC_RESET_SIE=`*(r: var USBHD_USB_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint8 shl 2).masked(2 .. 2))
  r = tmp.USBHD_USB_CTRL_Fields

func RB_UC_INT_BUSY*(r: USBHD_USB_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(3 .. 3).bool

proc `RB_UC_INT_BUSY=`*(r: var USBHD_USB_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint8 shl 3).masked(3 .. 3))
  r = tmp.USBHD_USB_CTRL_Fields

func RB_UC_DEV_PU_EN*(r: USBHD_USB_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(4 .. 4).bool

proc `RB_UC_DEV_PU_EN=`*(r: var USBHD_USB_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint8 shl 4).masked(4 .. 4))
  r = tmp.USBHD_USB_CTRL_Fields

func RB_UC_SPEED_TYPE*(r: USBHD_USB_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(5 .. 6)

proc `RB_UC_SPEED_TYPE=`*(r: var USBHD_USB_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(5 .. 6)
  tmp.setMask((val shl 5).masked(5 .. 6))
  r = tmp.USBHD_USB_CTRL_Fields

func RB_UC_HOST_MODE*(r: USBHD_USB_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(7 .. 7).bool

proc `RB_UC_HOST_MODE=`*(r: var USBHD_USB_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint8 shl 7).masked(7 .. 7))
  r = tmp.USBHD_USB_CTRL_Fields

func bUH_TX_BUS_RESET*(r: USBHD_UHOST_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(0 .. 0).bool

proc `bUH_TX_BUS_RESET=`*(r: var USBHD_UHOST_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint8 shl 0).masked(0 .. 0))
  r = tmp.USBHD_UHOST_CTRL_Fields

func bUH_TX_BUS_SUSPEND*(r: USBHD_UHOST_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(1 .. 1).bool

proc `bUH_TX_BUS_SUSPEND=`*(r: var USBHD_UHOST_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint8 shl 1).masked(1 .. 1))
  r = tmp.USBHD_UHOST_CTRL_Fields

func bUH_TX_BUS_RESUME*(r: USBHD_UHOST_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(2 .. 2).bool

proc `bUH_TX_BUS_RESUME=`*(r: var USBHD_UHOST_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint8 shl 2).masked(2 .. 2))
  r = tmp.USBHD_UHOST_CTRL_Fields

func bUH_REMOTE_WKUP*(r: USBHD_UHOST_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(3 .. 3).bool

proc `bUH_REMOTE_WKUP=`*(r: var USBHD_UHOST_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint8 shl 3).masked(3 .. 3))
  r = tmp.USBHD_UHOST_CTRL_Fields

func bUH_PHY_SUSPENDM*(r: USBHD_UHOST_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(4 .. 4).bool

proc `bUH_PHY_SUSPENDM=`*(r: var USBHD_UHOST_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint8 shl 4).masked(4 .. 4))
  r = tmp.USBHD_UHOST_CTRL_Fields

func bUH_SOF_FREE*(r: USBHD_UHOST_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(6 .. 6).bool

func bUH_SOF_EN*(r: USBHD_UHOST_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(7 .. 7).bool

proc `bUH_SOF_EN=`*(r: var USBHD_UHOST_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint8 shl 7).masked(7 .. 7))
  r = tmp.USBHD_UHOST_CTRL_Fields

func RB_UIE_BUS_RST_RB_UIE_DETECT*(r: USBHD_USB_INT_EN_Fields): bool {.inline.} =
  r.uint8.bitsliced(0 .. 0).bool

proc `RB_UIE_BUS_RST_RB_UIE_DETECT=`*(r: var USBHD_USB_INT_EN_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint8 shl 0).masked(0 .. 0))
  r = tmp.USBHD_USB_INT_EN_Fields

func RB_UIE_TRANSFER*(r: USBHD_USB_INT_EN_Fields): bool {.inline.} =
  r.uint8.bitsliced(1 .. 1).bool

proc `RB_UIE_TRANSFER=`*(r: var USBHD_USB_INT_EN_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint8 shl 1).masked(1 .. 1))
  r = tmp.USBHD_USB_INT_EN_Fields

func RB_UIE_SUSPEND*(r: USBHD_USB_INT_EN_Fields): bool {.inline.} =
  r.uint8.bitsliced(2 .. 2).bool

proc `RB_UIE_SUSPEND=`*(r: var USBHD_USB_INT_EN_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint8 shl 2).masked(2 .. 2))
  r = tmp.USBHD_USB_INT_EN_Fields

func RB_UIE_SOF_ACT*(r: USBHD_USB_INT_EN_Fields): bool {.inline.} =
  r.uint8.bitsliced(3 .. 3).bool

proc `RB_UIE_SOF_ACT=`*(r: var USBHD_USB_INT_EN_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint8 shl 3).masked(3 .. 3))
  r = tmp.USBHD_USB_INT_EN_Fields

func RB_UIE_FIFO_OV*(r: USBHD_USB_INT_EN_Fields): bool {.inline.} =
  r.uint8.bitsliced(4 .. 4).bool

proc `RB_UIE_FIFO_OV=`*(r: var USBHD_USB_INT_EN_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint8 shl 4).masked(4 .. 4))
  r = tmp.USBHD_USB_INT_EN_Fields

func RB_UIE_SETUP_ACT*(r: USBHD_USB_INT_EN_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

proc `RB_UIE_SETUP_ACT=`*(r: var USBHD_USB_INT_EN_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint8 shl 5).masked(5 .. 5))
  r = tmp.USBHD_USB_INT_EN_Fields

func RB_UIE_ISO_ACT*(r: USBHD_USB_INT_EN_Fields): bool {.inline.} =
  r.uint8.bitsliced(6 .. 6).bool

proc `RB_UIE_ISO_ACT=`*(r: var USBHD_USB_INT_EN_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint8 shl 6).masked(6 .. 6))
  r = tmp.USBHD_USB_INT_EN_Fields

func RB_UIE_DEV_NAK*(r: USBHD_USB_INT_EN_Fields): bool {.inline.} =
  r.uint8.bitsliced(7 .. 7).bool

proc `RB_UIE_DEV_NAK=`*(r: var USBHD_USB_INT_EN_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint8 shl 7).masked(7 .. 7))
  r = tmp.USBHD_USB_INT_EN_Fields

func MASK_USB_ADDR*(r: USBHD_USB_DEV_AD_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 6)

proc `MASK_USB_ADDR=`*(r: var USBHD_USB_DEV_AD_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 6)
  tmp.setMask((val shl 0).masked(0 .. 6))
  r = tmp.USBHD_USB_DEV_AD_Fields

func RB_UDA_GP_BIT*(r: USBHD_USB_DEV_AD_Fields): bool {.inline.} =
  r.uint8.bitsliced(7 .. 7).bool

proc `RB_UDA_GP_BIT=`*(r: var USBHD_USB_DEV_AD_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint8 shl 7).masked(7 .. 7))
  r = tmp.USBHD_USB_DEV_AD_Fields

func USB_SYS_MOD*(r: USBHD_USB_USB_SUSPEND_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `USB_SYS_MOD=`*(r: var USBHD_USB_USB_SUSPEND_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USBHD_USB_USB_SUSPEND_Fields

func USB_WAKEUP*(r: USBHD_USB_USB_SUSPEND_Fields): bool {.inline.} =
  r.uint8.bitsliced(2 .. 2).bool

proc `USB_WAKEUP=`*(r: var USBHD_USB_USB_SUSPEND_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint8 shl 2).masked(2 .. 2))
  r = tmp.USBHD_USB_USB_SUSPEND_Fields

func USB_LINESTATE*(r: USBHD_USB_USB_SUSPEND_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(4 .. 5)

proc `USB_LINESTATE=`*(r: var USBHD_USB_USB_SUSPEND_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.USBHD_USB_USB_SUSPEND_Fields

func USB_SPEED_TYPE*(r: USBHD_USB_SPEED_TYPE_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

func RB_UMS_SPLIT_CAN*(r: USBHD_USB_MIS_ST_Fields): bool {.inline.} =
  r.uint8.bitsliced(0 .. 0).bool

func RB_UMS_ATTACH*(r: USBHD_USB_MIS_ST_Fields): bool {.inline.} =
  r.uint8.bitsliced(1 .. 1).bool

func RB_UMS_SUSPEND*(r: USBHD_USB_MIS_ST_Fields): bool {.inline.} =
  r.uint8.bitsliced(2 .. 2).bool

func RB_UMS_BUS_RESET*(r: USBHD_USB_MIS_ST_Fields): bool {.inline.} =
  r.uint8.bitsliced(3 .. 3).bool

func RB_UMS_R_FIFO_RDY*(r: USBHD_USB_MIS_ST_Fields): bool {.inline.} =
  r.uint8.bitsliced(4 .. 4).bool

func RB_UMS_SIE_FREE*(r: USBHD_USB_MIS_ST_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

func RB_UMS_SOF_ACT*(r: USBHD_USB_MIS_ST_Fields): bool {.inline.} =
  r.uint8.bitsliced(6 .. 6).bool

func RB_UMS_SOF_PRES*(r: USBHD_USB_MIS_ST_Fields): bool {.inline.} =
  r.uint8.bitsliced(7 .. 7).bool

func RB_UIF_BUS_RST*(r: USBHD_USB_INT_FG_Fields): bool {.inline.} =
  r.uint8.bitsliced(0 .. 0).bool

proc `RB_UIF_BUS_RST=`*(r: var USBHD_USB_INT_FG_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint8 shl 0).masked(0 .. 0))
  r = tmp.USBHD_USB_INT_FG_Fields

func RB_UIF_TRANSFER*(r: USBHD_USB_INT_FG_Fields): bool {.inline.} =
  r.uint8.bitsliced(1 .. 1).bool

proc `RB_UIF_TRANSFER=`*(r: var USBHD_USB_INT_FG_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint8 shl 1).masked(1 .. 1))
  r = tmp.USBHD_USB_INT_FG_Fields

func RB_UIF_SUSPEND*(r: USBHD_USB_INT_FG_Fields): bool {.inline.} =
  r.uint8.bitsliced(2 .. 2).bool

proc `RB_UIF_SUSPEND=`*(r: var USBHD_USB_INT_FG_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint8 shl 2).masked(2 .. 2))
  r = tmp.USBHD_USB_INT_FG_Fields

func RB_UIF_HST_SOF*(r: USBHD_USB_INT_FG_Fields): bool {.inline.} =
  r.uint8.bitsliced(3 .. 3).bool

proc `RB_UIF_HST_SOF=`*(r: var USBHD_USB_INT_FG_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint8 shl 3).masked(3 .. 3))
  r = tmp.USBHD_USB_INT_FG_Fields

func RB_UIF_FIFO_OV*(r: USBHD_USB_INT_FG_Fields): bool {.inline.} =
  r.uint8.bitsliced(4 .. 4).bool

proc `RB_UIF_FIFO_OV=`*(r: var USBHD_USB_INT_FG_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint8 shl 4).masked(4 .. 4))
  r = tmp.USBHD_USB_INT_FG_Fields

func RB_U_SETUP_ACT*(r: USBHD_USB_INT_FG_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

func UIF_ISO_ACT*(r: USBHD_USB_INT_FG_Fields): bool {.inline.} =
  r.uint8.bitsliced(6 .. 6).bool

func RB_U_IS_NAK*(r: USBHD_USB_INT_FG_Fields): bool {.inline.} =
  r.uint8.bitsliced(7 .. 7).bool

func MASK_UIS_H_RES_MASK_UIS_ENDP*(r: USBHD_USB_INT_ST_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 3)

func MASK_UIS_TOKEN*(r: USBHD_USB_INT_ST_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(4 .. 5)

func RB_UIS_TOG_OK*(r: USBHD_USB_INT_ST_Fields): bool {.inline.} =
  r.uint8.bitsliced(6 .. 6).bool

func RB_UIS_IS_NAK*(r: USBHD_USB_INT_ST_Fields): bool {.inline.} =
  r.uint8.bitsliced(7 .. 7).bool

func bUEP_R_EN_UH_EP_MOD*(r: USBHD_UEP_CONFIG_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(17 .. 31)

proc `bUEP_R_EN_UH_EP_MOD=`*(r: var USBHD_UEP_CONFIG_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 31)
  tmp.setMask((val shl 17).masked(17 .. 31))
  r = tmp.USBHD_UEP_CONFIG_Fields

func bUEP_T_EN_bUH_TX_EN*(r: USBHD_UEP_CONFIG_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(1 .. 15)

proc `bUEP_T_EN_bUH_TX_EN=`*(r: var USBHD_UEP_CONFIG_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 15)
  tmp.setMask((val shl 1).masked(1 .. 15))
  r = tmp.USBHD_UEP_CONFIG_Fields

func bUEP_R_TYPE*(r: USBHD_UEP_TYPE_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(17 .. 31)

proc `bUEP_R_TYPE=`*(r: var USBHD_UEP_TYPE_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 31)
  tmp.setMask((val shl 17).masked(17 .. 31))
  r = tmp.USBHD_UEP_TYPE_Fields

func bUEP_T_TYPE*(r: USBHD_UEP_TYPE_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(1 .. 15)

proc `bUEP_T_TYPE=`*(r: var USBHD_UEP_TYPE_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 15)
  tmp.setMask((val shl 1).masked(1 .. 15))
  r = tmp.USBHD_UEP_TYPE_Fields

func bUEP_ISO_BUF_MOD*(r: USBHD_UEP_BUF_MOD_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `bUEP_ISO_BUF_MOD=`*(r: var USBHD_UEP_BUF_MOD_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.USBHD_UEP_BUF_MOD_Fields

func bUEP_BUF_MOD*(r: USBHD_UEP_BUF_MOD_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `bUEP_BUF_MOD=`*(r: var USBHD_UEP_BUF_MOD_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.USBHD_UEP_BUF_MOD_Fields

func UEP0_MAX_LEN*(r: USBHD_UEP0_MAX_LEN_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 10)

proc `UEP0_MAX_LEN=`*(r: var USBHD_UEP0_MAX_LEN_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.USBHD_UEP0_MAX_LEN_Fields

func UEP1_MAX_LEN*(r: USBHD_UEP1_MAX_LEN_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 10)

proc `UEP1_MAX_LEN=`*(r: var USBHD_UEP1_MAX_LEN_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.USBHD_UEP1_MAX_LEN_Fields

func UEP2_MAX_LEN_UH_RX_MAX_LEN*(r: USBHD_UEP2_MAX_LEN_UH_RX_MAX_LEN_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 10)

proc `UEP2_MAX_LEN_UH_RX_MAX_LEN=`*(r: var USBHD_UEP2_MAX_LEN_UH_RX_MAX_LEN_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.USBHD_UEP2_MAX_LEN_UH_RX_MAX_LEN_Fields

func UEP3_MAX_LEN*(r: USBHD_UEP3_MAX_LEN_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 10)

proc `UEP3_MAX_LEN=`*(r: var USBHD_UEP3_MAX_LEN_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.USBHD_UEP3_MAX_LEN_Fields

func UEP4_MAX_LEN*(r: USBHD_UEP4_MAX_LEN_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 10)

proc `UEP4_MAX_LEN=`*(r: var USBHD_UEP4_MAX_LEN_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.USBHD_UEP4_MAX_LEN_Fields

func UEP5_MAX_LEN*(r: USBHD_UEP5_MAX_LEN_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 10)

proc `UEP5_MAX_LEN=`*(r: var USBHD_UEP5_MAX_LEN_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.USBHD_UEP5_MAX_LEN_Fields

func UEP6_MAX_LEN*(r: USBHD_UEP6_MAX_LEN_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 10)

proc `UEP6_MAX_LEN=`*(r: var USBHD_UEP6_MAX_LEN_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.USBHD_UEP6_MAX_LEN_Fields

func UEP7_MAX_LEN*(r: USBHD_UEP7_MAX_LEN_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 10)

proc `UEP7_MAX_LEN=`*(r: var USBHD_UEP7_MAX_LEN_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.USBHD_UEP7_MAX_LEN_Fields

func UEP8_MAX_LEN*(r: USBHD_UEP8_MAX_LEN_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 10)

proc `UEP8_MAX_LEN=`*(r: var USBHD_UEP8_MAX_LEN_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.USBHD_UEP8_MAX_LEN_Fields

func UEP9_MAX_LEN*(r: USBHD_UEP9_MAX_LEN_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 10)

proc `UEP9_MAX_LEN=`*(r: var USBHD_UEP9_MAX_LEN_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.USBHD_UEP9_MAX_LEN_Fields

func UEP10_MAX_LEN*(r: USBHD_UEP10_MAX_LEN_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 10)

proc `UEP10_MAX_LEN=`*(r: var USBHD_UEP10_MAX_LEN_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.USBHD_UEP10_MAX_LEN_Fields

func UEP11_MAX_LEN*(r: USBHD_UEP11_MAX_LEN_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 10)

proc `UEP11_MAX_LEN=`*(r: var USBHD_UEP11_MAX_LEN_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.USBHD_UEP11_MAX_LEN_Fields

func UEP12_MAX_LEN*(r: USBHD_UEP12_MAX_LEN_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 10)

proc `UEP12_MAX_LEN=`*(r: var USBHD_UEP12_MAX_LEN_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.USBHD_UEP12_MAX_LEN_Fields

func UEP13_MAX_LEN*(r: USBHD_UEP13_MAX_LEN_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 10)

proc `UEP13_MAX_LEN=`*(r: var USBHD_UEP13_MAX_LEN_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.USBHD_UEP13_MAX_LEN_Fields

func UEP14_MAX_LEN*(r: USBHD_UEP14_MAX_LEN_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 10)

proc `UEP14_MAX_LEN=`*(r: var USBHD_UEP14_MAX_LEN_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.USBHD_UEP14_MAX_LEN_Fields

func UEP15_MAX_LEN*(r: USBHD_UEP15_MAX_LEN_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 10)

proc `UEP15_MAX_LEN=`*(r: var USBHD_UEP15_MAX_LEN_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.USBHD_UEP15_MAX_LEN_Fields

func UEP0_T_LEN*(r: USBHD_UEP0_T_LEN_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 10)

proc `UEP0_T_LEN=`*(r: var USBHD_UEP0_T_LEN_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.USBHD_UEP0_T_LEN_Fields

func MASK_UEP_T_RES*(r: USBHD_UEP0_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_T_RES=`*(r: var USBHD_UEP0_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USBHD_UEP0_T_CTRL_Fields

func MASK_UEP_T_TOG*(r: USBHD_UEP0_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(3 .. 4)

proc `MASK_UEP_T_TOG=`*(r: var USBHD_UEP0_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.USBHD_UEP0_T_CTRL_Fields

func bUEP_T_TOG_AUTO*(r: USBHD_UEP0_T_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

proc `bUEP_T_TOG_AUTO=`*(r: var USBHD_UEP0_T_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint8 shl 5).masked(5 .. 5))
  r = tmp.USBHD_UEP0_T_CTRL_Fields

func MASK_UEP_R_RES*(r: USBHD_UEP0_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_R_RES=`*(r: var USBHD_UEP0_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USBHD_UEP0_R_CTRL_Fields

func MASK_UEP_R_TOG*(r: USBHD_UEP0_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(3 .. 4)

proc `MASK_UEP_R_TOG=`*(r: var USBHD_UEP0_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.USBHD_UEP0_R_CTRL_Fields

func bUEP_R_TOG_AUTO*(r: USBHD_UEP0_R_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

func UEP1_T_LEN*(r: USBHD_UEP1_T_LEN_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 10)

proc `UEP1_T_LEN=`*(r: var USBHD_UEP1_T_LEN_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.USBHD_UEP1_T_LEN_Fields

func MASK_UEP_T_RES*(r: USBHD_UEP1_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_T_RES=`*(r: var USBHD_UEP1_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USBHD_UEP1_T_CTRL_Fields

func MASK_UEP_T_TOG*(r: USBHD_UEP1_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(3 .. 4)

proc `MASK_UEP_T_TOG=`*(r: var USBHD_UEP1_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.USBHD_UEP1_T_CTRL_Fields

func bUEP_T_TOG_AUTO*(r: USBHD_UEP1_T_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

proc `bUEP_T_TOG_AUTO=`*(r: var USBHD_UEP1_T_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint8 shl 5).masked(5 .. 5))
  r = tmp.USBHD_UEP1_T_CTRL_Fields

func MASK_UEP_R_RES*(r: USBHD_UEP1_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_R_RES=`*(r: var USBHD_UEP1_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USBHD_UEP1_R_CTRL_Fields

func MASK_UEP_R_TOG*(r: USBHD_UEP1_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(3 .. 4)

proc `MASK_UEP_R_TOG=`*(r: var USBHD_UEP1_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.USBHD_UEP1_R_CTRL_Fields

func bUEP_R_TOG_AUTO*(r: USBHD_UEP1_R_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

func UEP2_T_LEN_MASK_UH_ENDP_MASK_UH_TOKEN*(r: USBHD_UEP2_T_LEN_UH_EP_PID_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 10)

proc `UEP2_T_LEN_MASK_UH_ENDP_MASK_UH_TOKEN=`*(r: var USBHD_UEP2_T_LEN_UH_EP_PID_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.USBHD_UEP2_T_LEN_UH_EP_PID_Fields

func MASK_UEP_T_RES*(r: USBHD_UEP2_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_T_RES=`*(r: var USBHD_UEP2_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USBHD_UEP2_T_CTRL_Fields

func MASK_UEP_T_TOG*(r: USBHD_UEP2_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(3 .. 4)

proc `MASK_UEP_T_TOG=`*(r: var USBHD_UEP2_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.USBHD_UEP2_T_CTRL_Fields

func bUEP_T_TOG_AUTO*(r: USBHD_UEP2_T_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

proc `bUEP_T_TOG_AUTO=`*(r: var USBHD_UEP2_T_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint8 shl 5).masked(5 .. 5))
  r = tmp.USBHD_UEP2_T_CTRL_Fields

func MASK_UEP_R_RES_MASK_UH_R_RES*(r: USBHD_UEP2_R_CTRL_UH_RX_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_R_RES_MASK_UH_R_RES=`*(r: var USBHD_UEP2_R_CTRL_UH_RX_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USBHD_UEP2_R_CTRL_UH_RX_CTRL_Fields

func bUH_R_RES_NO*(r: USBHD_UEP2_R_CTRL_UH_RX_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(2 .. 2).bool

proc `bUH_R_RES_NO=`*(r: var USBHD_UEP2_R_CTRL_UH_RX_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint8 shl 2).masked(2 .. 2))
  r = tmp.USBHD_UEP2_R_CTRL_UH_RX_CTRL_Fields

func MASK_UEP_R_TOG_MASK_UH_R_TOG*(r: USBHD_UEP2_R_CTRL_UH_RX_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(3 .. 4)

proc `MASK_UEP_R_TOG_MASK_UH_R_TOG=`*(r: var USBHD_UEP2_R_CTRL_UH_RX_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.USBHD_UEP2_R_CTRL_UH_RX_CTRL_Fields

func bUEP_R_TOG_AUTO_bUH_R_AUTO_TOG*(r: USBHD_UEP2_R_CTRL_UH_RX_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

func bUH_R_DATA_NO*(r: USBHD_UEP2_R_CTRL_UH_RX_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(6 .. 6).bool

proc `bUH_R_DATA_NO=`*(r: var USBHD_UEP2_R_CTRL_UH_RX_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint8 shl 6).masked(6 .. 6))
  r = tmp.USBHD_UEP2_R_CTRL_UH_RX_CTRL_Fields

func UEP3_T_LEN_UH_TX_LEN_H*(r: USBHD_UEP3_T_LEN_UH_TX_LEN_H_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 10)

proc `UEP3_T_LEN_UH_TX_LEN_H=`*(r: var USBHD_UEP3_T_LEN_UH_TX_LEN_H_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.USBHD_UEP3_T_LEN_UH_TX_LEN_H_Fields

func MASK_UEP_T_RES_MASK_UH_T_RES*(r: USBHD_UEP3_T_CTRL_UH_TX_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_T_RES_MASK_UH_T_RES=`*(r: var USBHD_UEP3_T_CTRL_UH_TX_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USBHD_UEP3_T_CTRL_UH_TX_CTRL_Fields

func bUH_T_RES_NO*(r: USBHD_UEP3_T_CTRL_UH_TX_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(2 .. 2).bool

proc `bUH_T_RES_NO=`*(r: var USBHD_UEP3_T_CTRL_UH_TX_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint8 shl 2).masked(2 .. 2))
  r = tmp.USBHD_UEP3_T_CTRL_UH_TX_CTRL_Fields

func MASK_UEP_T_TOG_MASK_UH_T_TOG*(r: USBHD_UEP3_T_CTRL_UH_TX_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(3 .. 4)

proc `MASK_UEP_T_TOG_MASK_UH_T_TOG=`*(r: var USBHD_UEP3_T_CTRL_UH_TX_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.USBHD_UEP3_T_CTRL_UH_TX_CTRL_Fields

func bUEP_T_TOG_AUTO_bUH_T_AUTO_TOG*(r: USBHD_UEP3_T_CTRL_UH_TX_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

proc `bUEP_T_TOG_AUTO_bUH_T_AUTO_TOG=`*(r: var USBHD_UEP3_T_CTRL_UH_TX_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint8 shl 5).masked(5 .. 5))
  r = tmp.USBHD_UEP3_T_CTRL_UH_TX_CTRL_Fields

func bUH_T_DATA_NO*(r: USBHD_UEP3_T_CTRL_UH_TX_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(6 .. 6).bool

proc `bUH_T_DATA_NO=`*(r: var USBHD_UEP3_T_CTRL_UH_TX_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint8 shl 6).masked(6 .. 6))
  r = tmp.USBHD_UEP3_T_CTRL_UH_TX_CTRL_Fields

func MASK_UEP_R_RES*(r: USBHD_UEP3_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_R_RES=`*(r: var USBHD_UEP3_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USBHD_UEP3_R_CTRL_Fields

func MASK_UEP_R_TOG*(r: USBHD_UEP3_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(3 .. 4)

proc `MASK_UEP_R_TOG=`*(r: var USBHD_UEP3_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.USBHD_UEP3_R_CTRL_Fields

func bUEP_R_TOG_AUTO*(r: USBHD_UEP3_R_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

func UEP4_T_LEN*(r: USBHD_UEP4_T_LEN_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 10)

proc `UEP4_T_LEN=`*(r: var USBHD_UEP4_T_LEN_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.USBHD_UEP4_T_LEN_Fields

func MASK_UEP_T_RES*(r: USBHD_UEP4_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_T_RES=`*(r: var USBHD_UEP4_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USBHD_UEP4_T_CTRL_Fields

func MASK_UEP_T_TOG*(r: USBHD_UEP4_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(3 .. 4)

proc `MASK_UEP_T_TOG=`*(r: var USBHD_UEP4_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.USBHD_UEP4_T_CTRL_Fields

func bUEP_T_TOG_AUTO*(r: USBHD_UEP4_T_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

proc `bUEP_T_TOG_AUTO=`*(r: var USBHD_UEP4_T_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint8 shl 5).masked(5 .. 5))
  r = tmp.USBHD_UEP4_T_CTRL_Fields

func MASK_UEP_R_RES*(r: USBHD_UEP4_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_R_RES=`*(r: var USBHD_UEP4_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USBHD_UEP4_R_CTRL_Fields

func MASK_UEP_R_TOG*(r: USBHD_UEP4_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(3 .. 4)

proc `MASK_UEP_R_TOG=`*(r: var USBHD_UEP4_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.USBHD_UEP4_R_CTRL_Fields

func bUEP_R_TOG_AUTO*(r: USBHD_UEP4_R_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

func UEP5_T_LEN*(r: USBHD_UEP5_T_LEN_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 10)

proc `UEP5_T_LEN=`*(r: var USBHD_UEP5_T_LEN_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.USBHD_UEP5_T_LEN_Fields

func MASK_UEP_T_RES*(r: USBHD_UEP5_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_T_RES=`*(r: var USBHD_UEP5_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USBHD_UEP5_T_CTRL_Fields

func MASK_UEP_T_TOG*(r: USBHD_UEP5_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(3 .. 4)

proc `MASK_UEP_T_TOG=`*(r: var USBHD_UEP5_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.USBHD_UEP5_T_CTRL_Fields

func bUEP_T_TOG_AUTO*(r: USBHD_UEP5_T_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

proc `bUEP_T_TOG_AUTO=`*(r: var USBHD_UEP5_T_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint8 shl 5).masked(5 .. 5))
  r = tmp.USBHD_UEP5_T_CTRL_Fields

func MASK_UEP_R_RES*(r: USBHD_UEP5_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_R_RES=`*(r: var USBHD_UEP5_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USBHD_UEP5_R_CTRL_Fields

func MASK_UEP_R_TOG*(r: USBHD_UEP5_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(3 .. 4)

proc `MASK_UEP_R_TOG=`*(r: var USBHD_UEP5_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.USBHD_UEP5_R_CTRL_Fields

func bUEP_R_TOG_AUTO*(r: USBHD_UEP5_R_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

func UEP6_T_LEN*(r: USBHD_UEP6_T_LEN_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 10)

proc `UEP6_T_LEN=`*(r: var USBHD_UEP6_T_LEN_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.USBHD_UEP6_T_LEN_Fields

func MASK_UEP_T_RES*(r: USBHD_UEP6_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_T_RES=`*(r: var USBHD_UEP6_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USBHD_UEP6_T_CTRL_Fields

func MASK_UEP_T_TOG*(r: USBHD_UEP6_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(3 .. 4)

proc `MASK_UEP_T_TOG=`*(r: var USBHD_UEP6_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.USBHD_UEP6_T_CTRL_Fields

func bUEP_T_TOG_AUTO*(r: USBHD_UEP6_T_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

proc `bUEP_T_TOG_AUTO=`*(r: var USBHD_UEP6_T_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint8 shl 5).masked(5 .. 5))
  r = tmp.USBHD_UEP6_T_CTRL_Fields

func MASK_UEP_R_RES*(r: USBHD_UEP6_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_R_RES=`*(r: var USBHD_UEP6_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USBHD_UEP6_R_CTRL_Fields

func MASK_UEP_R_TOG*(r: USBHD_UEP6_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(3 .. 4)

proc `MASK_UEP_R_TOG=`*(r: var USBHD_UEP6_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.USBHD_UEP6_R_CTRL_Fields

func bUEP_R_TOG_AUTO*(r: USBHD_UEP6_R_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

func UEP7_T_LEN*(r: USBHD_UEP7_T_LEN_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 10)

proc `UEP7_T_LEN=`*(r: var USBHD_UEP7_T_LEN_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.USBHD_UEP7_T_LEN_Fields

func MASK_UEP_T_RES*(r: USBHD_UEP7_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_T_RES=`*(r: var USBHD_UEP7_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USBHD_UEP7_T_CTRL_Fields

func MASK_UEP_T_TOG*(r: USBHD_UEP7_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(3 .. 4)

proc `MASK_UEP_T_TOG=`*(r: var USBHD_UEP7_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.USBHD_UEP7_T_CTRL_Fields

func bUEP_T_TOG_AUTO*(r: USBHD_UEP7_T_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

proc `bUEP_T_TOG_AUTO=`*(r: var USBHD_UEP7_T_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint8 shl 5).masked(5 .. 5))
  r = tmp.USBHD_UEP7_T_CTRL_Fields

func MASK_UEP_R_RES*(r: USBHD_UEP7_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_R_RES=`*(r: var USBHD_UEP7_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USBHD_UEP7_R_CTRL_Fields

func MASK_UEP_R_TOG*(r: USBHD_UEP7_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(3 .. 4)

proc `MASK_UEP_R_TOG=`*(r: var USBHD_UEP7_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.USBHD_UEP7_R_CTRL_Fields

func bUEP_R_TOG_AUTO*(r: USBHD_UEP7_R_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

func UEP8_T_LEN*(r: USBHD_UEP8_T_LEN_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 10)

proc `UEP8_T_LEN=`*(r: var USBHD_UEP8_T_LEN_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.USBHD_UEP8_T_LEN_Fields

func MASK_UEP_T_RES*(r: USBHD_UEP8_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_T_RES=`*(r: var USBHD_UEP8_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USBHD_UEP8_T_CTRL_Fields

func MASK_UEP_T_TOG*(r: USBHD_UEP8_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(3 .. 4)

proc `MASK_UEP_T_TOG=`*(r: var USBHD_UEP8_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.USBHD_UEP8_T_CTRL_Fields

func bUEP_T_TOG_AUTO*(r: USBHD_UEP8_T_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

proc `bUEP_T_TOG_AUTO=`*(r: var USBHD_UEP8_T_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint8 shl 5).masked(5 .. 5))
  r = tmp.USBHD_UEP8_T_CTRL_Fields

func MASK_UEP_R_RES*(r: USBHD_UEP8_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_R_RES=`*(r: var USBHD_UEP8_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USBHD_UEP8_R_CTRL_Fields

func MASK_UEP_R_TOG*(r: USBHD_UEP8_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(3 .. 4)

proc `MASK_UEP_R_TOG=`*(r: var USBHD_UEP8_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.USBHD_UEP8_R_CTRL_Fields

func bUEP_R_TOG_AUTO*(r: USBHD_UEP8_R_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

func UEP9_T_LEN*(r: USBHD_UEP9_T_LEN_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 10)

proc `UEP9_T_LEN=`*(r: var USBHD_UEP9_T_LEN_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.USBHD_UEP9_T_LEN_Fields

func MASK_UEP_T_RES*(r: USBHD_UEP9_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_T_RES=`*(r: var USBHD_UEP9_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USBHD_UEP9_T_CTRL_Fields

func MASK_UEP_T_TOG*(r: USBHD_UEP9_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(3 .. 4)

proc `MASK_UEP_T_TOG=`*(r: var USBHD_UEP9_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.USBHD_UEP9_T_CTRL_Fields

func bUEP_T_TOG_AUTO*(r: USBHD_UEP9_T_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

proc `bUEP_T_TOG_AUTO=`*(r: var USBHD_UEP9_T_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint8 shl 5).masked(5 .. 5))
  r = tmp.USBHD_UEP9_T_CTRL_Fields

func MASK_UEP_R_RES*(r: USBHD_UEP9_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_R_RES=`*(r: var USBHD_UEP9_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USBHD_UEP9_R_CTRL_Fields

func MASK_UEP_R_TOG*(r: USBHD_UEP9_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(3 .. 4)

proc `MASK_UEP_R_TOG=`*(r: var USBHD_UEP9_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.USBHD_UEP9_R_CTRL_Fields

func bUEP_R_TOG_AUTO*(r: USBHD_UEP9_R_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

func UEP10_T_LEN*(r: USBHD_UEP10_T_LEN_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 10)

proc `UEP10_T_LEN=`*(r: var USBHD_UEP10_T_LEN_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.USBHD_UEP10_T_LEN_Fields

func MASK_UEP_T_RES*(r: USBHD_UEP10_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_T_RES=`*(r: var USBHD_UEP10_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USBHD_UEP10_T_CTRL_Fields

func MASK_UEP_T_TOG*(r: USBHD_UEP10_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(3 .. 4)

proc `MASK_UEP_T_TOG=`*(r: var USBHD_UEP10_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.USBHD_UEP10_T_CTRL_Fields

func bUEP_T_TOG_AUTO*(r: USBHD_UEP10_T_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

proc `bUEP_T_TOG_AUTO=`*(r: var USBHD_UEP10_T_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint8 shl 5).masked(5 .. 5))
  r = tmp.USBHD_UEP10_T_CTRL_Fields

func MASK_UEP_R_RES*(r: USBHD_UEP10_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_R_RES=`*(r: var USBHD_UEP10_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USBHD_UEP10_R_CTRL_Fields

func MASK_UEP_R_TOG*(r: USBHD_UEP10_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(3 .. 4)

proc `MASK_UEP_R_TOG=`*(r: var USBHD_UEP10_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.USBHD_UEP10_R_CTRL_Fields

func bUEP_R_TOG_AUTO*(r: USBHD_UEP10_R_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

func UEP0_T_LEN*(r: USBHD_UEP11_T_LEN_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 10)

proc `UEP0_T_LEN=`*(r: var USBHD_UEP11_T_LEN_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.USBHD_UEP11_T_LEN_Fields

func MASK_UEP_T_RES*(r: USBHD_UEP11_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_T_RES=`*(r: var USBHD_UEP11_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USBHD_UEP11_T_CTRL_Fields

func MASK_UEP_T_TOG*(r: USBHD_UEP11_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(3 .. 4)

proc `MASK_UEP_T_TOG=`*(r: var USBHD_UEP11_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.USBHD_UEP11_T_CTRL_Fields

func bUEP_T_TOG_AUTO*(r: USBHD_UEP11_T_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

proc `bUEP_T_TOG_AUTO=`*(r: var USBHD_UEP11_T_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint8 shl 5).masked(5 .. 5))
  r = tmp.USBHD_UEP11_T_CTRL_Fields

func MASK_UEP_R_RES*(r: USBHD_UEP11_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_R_RES=`*(r: var USBHD_UEP11_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USBHD_UEP11_R_CTRL_Fields

func MASK_UEP_R_TOG*(r: USBHD_UEP11_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(3 .. 4)

proc `MASK_UEP_R_TOG=`*(r: var USBHD_UEP11_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.USBHD_UEP11_R_CTRL_Fields

func bUEP_R_TOG_AUTO*(r: USBHD_UEP11_R_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

func UEP0_T_LEN*(r: USBHD_UEP12_T_LEN_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 10)

proc `UEP0_T_LEN=`*(r: var USBHD_UEP12_T_LEN_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.USBHD_UEP12_T_LEN_Fields

func MASK_UEP_T_RES*(r: USBHD_UEP12_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_T_RES=`*(r: var USBHD_UEP12_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USBHD_UEP12_T_CTRL_Fields

func MASK_UEP_T_TOG*(r: USBHD_UEP12_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(3 .. 4)

proc `MASK_UEP_T_TOG=`*(r: var USBHD_UEP12_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.USBHD_UEP12_T_CTRL_Fields

func bUEP_T_TOG_AUTO*(r: USBHD_UEP12_T_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

proc `bUEP_T_TOG_AUTO=`*(r: var USBHD_UEP12_T_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint8 shl 5).masked(5 .. 5))
  r = tmp.USBHD_UEP12_T_CTRL_Fields

func MASK_UEP_R_RES*(r: USBHD_UEP12_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_R_RES=`*(r: var USBHD_UEP12_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USBHD_UEP12_R_CTRL_Fields

func MASK_UEP_R_TOG*(r: USBHD_UEP12_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(3 .. 4)

proc `MASK_UEP_R_TOG=`*(r: var USBHD_UEP12_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.USBHD_UEP12_R_CTRL_Fields

func bUEP_R_TOG_AUTO*(r: USBHD_UEP12_R_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

func UEP13_T_LEN*(r: USBHD_UEP13_T_LEN_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 10)

proc `UEP13_T_LEN=`*(r: var USBHD_UEP13_T_LEN_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.USBHD_UEP13_T_LEN_Fields

func MASK_UEP_T_RES*(r: USBHD_UEP13_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_T_RES=`*(r: var USBHD_UEP13_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USBHD_UEP13_T_CTRL_Fields

func MASK_UEP_T_TOG*(r: USBHD_UEP13_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(3 .. 4)

proc `MASK_UEP_T_TOG=`*(r: var USBHD_UEP13_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.USBHD_UEP13_T_CTRL_Fields

func bUEP_T_TOG_AUTO*(r: USBHD_UEP13_T_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

proc `bUEP_T_TOG_AUTO=`*(r: var USBHD_UEP13_T_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint8 shl 5).masked(5 .. 5))
  r = tmp.USBHD_UEP13_T_CTRL_Fields

func MASK_UEP_R_RES*(r: USBHD_UEP13_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_R_RES=`*(r: var USBHD_UEP13_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USBHD_UEP13_R_CTRL_Fields

func MASK_UEP_R_TOG*(r: USBHD_UEP13_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(3 .. 4)

proc `MASK_UEP_R_TOG=`*(r: var USBHD_UEP13_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.USBHD_UEP13_R_CTRL_Fields

func bUEP_R_TOG_AUTO*(r: USBHD_UEP13_R_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

func UEP14_T_LEN*(r: USBHD_UEP14_T_LEN_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 10)

proc `UEP14_T_LEN=`*(r: var USBHD_UEP14_T_LEN_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.USBHD_UEP14_T_LEN_Fields

func MASK_UEP_T_RES*(r: USBHD_UEP14_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_T_RES=`*(r: var USBHD_UEP14_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USBHD_UEP14_T_CTRL_Fields

func MASK_UEP_T_TOG*(r: USBHD_UEP14_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(3 .. 4)

proc `MASK_UEP_T_TOG=`*(r: var USBHD_UEP14_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.USBHD_UEP14_T_CTRL_Fields

func bUEP_T_TOG_AUTO*(r: USBHD_UEP14_T_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

proc `bUEP_T_TOG_AUTO=`*(r: var USBHD_UEP14_T_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint8 shl 5).masked(5 .. 5))
  r = tmp.USBHD_UEP14_T_CTRL_Fields

func MASK_UEP_R_RES*(r: USBHD_UEP14_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_R_RES=`*(r: var USBHD_UEP14_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USBHD_UEP14_R_CTRL_Fields

func MASK_UEP_R_TOG*(r: USBHD_UEP14_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(3 .. 4)

proc `MASK_UEP_R_TOG=`*(r: var USBHD_UEP14_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.USBHD_UEP14_R_CTRL_Fields

func bUEP_R_TOG_AUTO*(r: USBHD_UEP14_R_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

func UEP0_T_LEN*(r: USBHD_UEP15_T_LEN_Fields): uint16 {.inline.} =
  r.uint16.bitsliced(0 .. 10)

proc `UEP0_T_LEN=`*(r: var USBHD_UEP15_T_LEN_Fields, val: uint16) {.inline.} =
  var tmp = r.uint16
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.USBHD_UEP15_T_LEN_Fields

func MASK_UEP_T_RES*(r: USBHD_UEP15_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_T_RES=`*(r: var USBHD_UEP15_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USBHD_UEP15_T_CTRL_Fields

func MASK_UEP_T_TOG*(r: USBHD_UEP15_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(3 .. 4)

proc `MASK_UEP_T_TOG=`*(r: var USBHD_UEP15_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.USBHD_UEP15_T_CTRL_Fields

func bUEP_T_TOG_AUTO*(r: USBHD_UEP15_T_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

proc `bUEP_T_TOG_AUTO=`*(r: var USBHD_UEP15_T_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint8 shl 5).masked(5 .. 5))
  r = tmp.USBHD_UEP15_T_CTRL_Fields

func MASK_UEP_R_RES*(r: USBHD_UEP15_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_R_RES=`*(r: var USBHD_UEP15_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USBHD_UEP15_R_CTRL_Fields

func MASK_UEP_R_TOG*(r: USBHD_UEP15_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(3 .. 4)

proc `MASK_UEP_R_TOG=`*(r: var USBHD_UEP15_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 4)
  tmp.setMask((val shl 3).masked(3 .. 4))
  r = tmp.USBHD_UEP15_R_CTRL_Fields

func bUEP_R_TOG_AUTO*(r: USBHD_UEP15_R_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

type
  CRC_IDATAR_Fields* = distinct uint32
  CRC_CTLR_Fields* = distinct uint32

proc read*(reg: CRC_DATAR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static CRC_DATAR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: CRC_DATAR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: CRC_DATAR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CRC_IDATAR_Type): CRC_IDATAR_Fields {.inline.} =
  volatileLoad(cast[ptr CRC_IDATAR_Fields](reg.loc))

proc read*(reg: static CRC_IDATAR_Type): CRC_IDATAR_Fields {.inline.} =
  volatileLoad(cast[ptr CRC_IDATAR_Fields](reg.loc))

proc write*(reg: CRC_IDATAR_Type, val: CRC_IDATAR_Fields) {.inline.} =
  volatileStore(cast[ptr CRC_IDATAR_Fields](reg.loc), val)

proc write*(reg: CRC_IDATAR_Type, IDR: uint32 = 0) =
  var x: uint32
  x.setMask((IDR shl 0).masked(0 .. 7))
  reg.write x.CRC_IDATAR_Fields

template modifyIt*(reg: CRC_IDATAR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc write*(reg: CRC_CTLR_Type, val: CRC_CTLR_Fields) {.inline.} =
  volatileStore(cast[ptr CRC_CTLR_Fields](reg.loc), val)

proc write*(reg: CRC_CTLR_Type, RESET: bool = false) =
  var x: uint32
  x.setMask((RESET.uint32 shl 0).masked(0 .. 0))
  reg.write x.CRC_CTLR_Fields

func IDR*(r: CRC_IDATAR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `IDR=`*(r: var CRC_IDATAR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.CRC_IDATAR_Fields

proc `RESET=`*(r: var CRC_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CRC_CTLR_Fields

type
  FLASH_STATR_Fields* = distinct uint32
  FLASH_CTLR_Fields* = distinct uint32
  FLASH_OBR_Fields* = distinct uint32

proc write*(reg: FLASH_KEYR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

proc write*(reg: FLASH_OBKEYR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

proc read*(reg: FLASH_STATR_Type): FLASH_STATR_Fields {.inline.} =
  volatileLoad(cast[ptr FLASH_STATR_Fields](reg.loc))

proc read*(reg: static FLASH_STATR_Type): FLASH_STATR_Fields {.inline.} =
  volatileLoad(cast[ptr FLASH_STATR_Fields](reg.loc))

proc write*(reg: FLASH_STATR_Type, val: FLASH_STATR_Fields) {.inline.} =
  volatileStore(cast[ptr FLASH_STATR_Fields](reg.loc), val)

proc write*(reg: FLASH_STATR_Type, EOP: bool = false, WRPRTERR: bool = false) =
  var x: uint32
  x.setMask((EOP.uint32 shl 5).masked(5 .. 5))
  x.setMask((WRPRTERR.uint32 shl 4).masked(4 .. 4))
  reg.write x.FLASH_STATR_Fields

template modifyIt*(reg: FLASH_STATR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FLASH_CTLR_Type): FLASH_CTLR_Fields {.inline.} =
  volatileLoad(cast[ptr FLASH_CTLR_Fields](reg.loc))

proc read*(reg: static FLASH_CTLR_Type): FLASH_CTLR_Fields {.inline.} =
  volatileLoad(cast[ptr FLASH_CTLR_Fields](reg.loc))

proc write*(reg: FLASH_CTLR_Type, val: FLASH_CTLR_Fields) {.inline.} =
  volatileStore(cast[ptr FLASH_CTLR_Fields](reg.loc), val)

proc write*(reg: FLASH_CTLR_Type, PG: bool = false, PER: bool = false, MER: bool = false, OBPG: bool = false, OBER: bool = false, STRT: bool = false, LOCK: bool = true, OBWRE: bool = false, ERRIE: bool = false, EOPIE: bool = false, FLOCK: bool = false, PAGE_PG: bool = false, PAGE_ER: bool = false, BER32: bool = false, BER64: bool = false, PGSTART: bool = false, RSENACT: bool = false, ENHANCEMODE: bool = false, SCKMODE: bool = false) =
  var x: uint32
  x.setMask((PG.uint32 shl 0).masked(0 .. 0))
  x.setMask((PER.uint32 shl 1).masked(1 .. 1))
  x.setMask((MER.uint32 shl 2).masked(2 .. 2))
  x.setMask((OBPG.uint32 shl 4).masked(4 .. 4))
  x.setMask((OBER.uint32 shl 5).masked(5 .. 5))
  x.setMask((STRT.uint32 shl 6).masked(6 .. 6))
  x.setMask((LOCK.uint32 shl 7).masked(7 .. 7))
  x.setMask((OBWRE.uint32 shl 9).masked(9 .. 9))
  x.setMask((ERRIE.uint32 shl 10).masked(10 .. 10))
  x.setMask((EOPIE.uint32 shl 12).masked(12 .. 12))
  x.setMask((FLOCK.uint32 shl 15).masked(15 .. 15))
  x.setMask((PAGE_PG.uint32 shl 16).masked(16 .. 16))
  x.setMask((PAGE_ER.uint32 shl 17).masked(17 .. 17))
  x.setMask((BER32.uint32 shl 18).masked(18 .. 18))
  x.setMask((BER64.uint32 shl 19).masked(19 .. 19))
  x.setMask((PGSTART.uint32 shl 21).masked(21 .. 21))
  x.setMask((RSENACT.uint32 shl 22).masked(22 .. 22))
  x.setMask((ENHANCEMODE.uint32 shl 24).masked(24 .. 24))
  x.setMask((SCKMODE.uint32 shl 25).masked(25 .. 25))
  reg.write x.FLASH_CTLR_Fields

template modifyIt*(reg: FLASH_CTLR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc write*(reg: FLASH_ADDR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

proc read*(reg: FLASH_OBR_Type): FLASH_OBR_Fields {.inline.} =
  volatileLoad(cast[ptr FLASH_OBR_Fields](reg.loc))

proc read*(reg: static FLASH_OBR_Type): FLASH_OBR_Fields {.inline.} =
  volatileLoad(cast[ptr FLASH_OBR_Fields](reg.loc))

proc read*(reg: FLASH_WPR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static FLASH_WPR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: FLASH_MODEKEYR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

func ENHANCE_MOD_STA*(r: FLASH_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func EOP*(r: FLASH_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `EOP=`*(r: var FLASH_STATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.FLASH_STATR_Fields

func WRPRTERR*(r: FLASH_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `WRPRTERR=`*(r: var FLASH_STATR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.FLASH_STATR_Fields

func WR_BSY*(r: FLASH_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func BSY*(r: FLASH_STATR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func PG*(r: FLASH_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `PG=`*(r: var FLASH_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.FLASH_CTLR_Fields

func PER*(r: FLASH_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `PER=`*(r: var FLASH_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.FLASH_CTLR_Fields

func MER*(r: FLASH_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `MER=`*(r: var FLASH_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.FLASH_CTLR_Fields

func OBPG*(r: FLASH_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `OBPG=`*(r: var FLASH_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.FLASH_CTLR_Fields

func OBER*(r: FLASH_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `OBER=`*(r: var FLASH_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.FLASH_CTLR_Fields

func STRT*(r: FLASH_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `STRT=`*(r: var FLASH_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.FLASH_CTLR_Fields

func LOCK*(r: FLASH_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `LOCK=`*(r: var FLASH_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.FLASH_CTLR_Fields

func OBWRE*(r: FLASH_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `OBWRE=`*(r: var FLASH_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.FLASH_CTLR_Fields

func ERRIE*(r: FLASH_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `ERRIE=`*(r: var FLASH_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.FLASH_CTLR_Fields

func EOPIE*(r: FLASH_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `EOPIE=`*(r: var FLASH_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.FLASH_CTLR_Fields

func FLOCK*(r: FLASH_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FLOCK=`*(r: var FLASH_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.FLASH_CTLR_Fields

func PAGE_PG*(r: FLASH_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `PAGE_PG=`*(r: var FLASH_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.FLASH_CTLR_Fields

func PAGE_ER*(r: FLASH_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `PAGE_ER=`*(r: var FLASH_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.FLASH_CTLR_Fields

func BER32*(r: FLASH_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `BER32=`*(r: var FLASH_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.FLASH_CTLR_Fields

func BER64*(r: FLASH_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `BER64=`*(r: var FLASH_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.FLASH_CTLR_Fields

func PGSTART*(r: FLASH_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `PGSTART=`*(r: var FLASH_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.FLASH_CTLR_Fields

func RSENACT*(r: FLASH_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `RSENACT=`*(r: var FLASH_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.FLASH_CTLR_Fields

func ENHANCEMODE*(r: FLASH_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `ENHANCEMODE=`*(r: var FLASH_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.FLASH_CTLR_Fields

func SCKMODE*(r: FLASH_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `SCKMODE=`*(r: var FLASH_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.FLASH_CTLR_Fields

func OBERR*(r: FLASH_OBR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func RDPRT*(r: FLASH_OBR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func IWDG_SW*(r: FLASH_OBR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func STOP_RST*(r: FLASH_OBR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

func STANDY_RST*(r: FLASH_OBR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

func SRAM_CODE_MODE*(r: FLASH_OBR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

type
  USB_OTG_FS_USBHD_BASE_CTRL_Fields* = distinct uint8
  USB_OTG_FS_USBHD_UDEV_CTRL_USBHD_UHOST_CTRL_Fields* = distinct uint8
  USB_OTG_FS_R8_USB_INT_EN_Fields* = distinct uint8
  USB_OTG_FS_R8_USB_DEV_AD_Fields* = distinct uint8
  USB_OTG_FS_R8_USB_MIS_ST_Fields* = distinct uint8
  USB_OTG_FS_R8_USB_INT_FG_Fields* = distinct uint8
  USB_OTG_FS_R8_USB_INT_ST_Fields* = distinct uint8
  USB_OTG_FS_R8_UEP4_1_MOD_Fields* = distinct uint8
  USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Fields* = distinct uint8
  USB_OTG_FS_R8_UEP5_6_MOD_Fields* = distinct uint8
  USB_OTG_FS_R8_UEP7_MOD_Fields* = distinct uint8
  USB_OTG_FS_R8_UEP0_T_CTRL_Fields* = distinct uint8
  USB_OTG_FS_R8_UEP0_R_CTRL_Fields* = distinct uint8
  USB_OTG_FS_R8_UEP1_T_CTRL_USBHD_UH_SETUP_Fields* = distinct uint8
  USB_OTG_FS_R8_UEP1_R_CTRL_Fields* = distinct uint8
  USB_OTG_FS_R8_UEP2_T_LEN_USBHD_UH_EP_PID_Fields* = distinct uint8
  USB_OTG_FS_R8_UEP2_T_CTRL_Fields* = distinct uint8
  USB_OTG_FS_R8_UEP2_R_CTRL_USBHD_UH_RX_CTRL_Fields* = distinct uint8
  USB_OTG_FS_R8_UEP3_T_CTRL_USBHD_UH_TX_CTRL_Fields* = distinct uint8
  USB_OTG_FS_R8_UEP3_R_CTRL_Fields* = distinct uint8
  USB_OTG_FS_R8_UEP4_T_CTRL_Fields* = distinct uint8
  USB_OTG_FS_R8_UEP4_R_CTRL_Fields* = distinct uint8
  USB_OTG_FS_R8_UEP5_T_CTRL_Fields* = distinct uint8
  USB_OTG_FS_R8_UEP5_R_CTRL_Fields* = distinct uint8
  USB_OTG_FS_R8_UEP6_T_CTRL_Fields* = distinct uint8
  USB_OTG_FS_R8_UEP6_R_CTRL_Fields* = distinct uint8
  USB_OTG_FS_R8_UEP7_T_CTRL_Fields* = distinct uint8
  USB_OTG_FS_R8_UEP7_R_CTRL_Fields* = distinct uint8
  USB_OTG_FS_USB_OTG_CR_Fields* = distinct uint32
  USB_OTG_FS_USB_OTG_SR_Fields* = distinct uint32

proc read*(reg: USB_OTG_FS_USBHD_BASE_CTRL_Type): USB_OTG_FS_USBHD_BASE_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_USBHD_BASE_CTRL_Fields](reg.loc))

proc read*(reg: static USB_OTG_FS_USBHD_BASE_CTRL_Type): USB_OTG_FS_USBHD_BASE_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_USBHD_BASE_CTRL_Fields](reg.loc))

proc write*(reg: USB_OTG_FS_USBHD_BASE_CTRL_Type, val: USB_OTG_FS_USBHD_BASE_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USB_OTG_FS_USBHD_BASE_CTRL_Fields](reg.loc), val)

proc write*(reg: USB_OTG_FS_USBHD_BASE_CTRL_Type, USBHD_UC_DMA_EN: bool = false, USBHD_UC_CLR_ALL: bool = false, USBHD_UC_RESET_SIE: bool = false, USBHD_UC_INT_BUSY: bool = false, USBHD_UC_SYS_CTRL_MASK: uint8 = 0, USBHD_UC_LOW_SPEED: bool = false, RB_UC_HOST_MODE: bool = false) =
  var x: uint8
  x.setMask((USBHD_UC_DMA_EN.uint8 shl 0).masked(0 .. 0))
  x.setMask((USBHD_UC_CLR_ALL.uint8 shl 1).masked(1 .. 1))
  x.setMask((USBHD_UC_RESET_SIE.uint8 shl 2).masked(2 .. 2))
  x.setMask((USBHD_UC_INT_BUSY.uint8 shl 3).masked(3 .. 3))
  x.setMask((USBHD_UC_SYS_CTRL_MASK shl 4).masked(4 .. 5))
  x.setMask((USBHD_UC_LOW_SPEED.uint8 shl 6).masked(6 .. 6))
  x.setMask((RB_UC_HOST_MODE.uint8 shl 7).masked(7 .. 7))
  reg.write x.USB_OTG_FS_USBHD_BASE_CTRL_Fields

template modifyIt*(reg: USB_OTG_FS_USBHD_BASE_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_USBHD_UDEV_CTRL_USBHD_UHOST_CTRL_Type): USB_OTG_FS_USBHD_UDEV_CTRL_USBHD_UHOST_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_USBHD_UDEV_CTRL_USBHD_UHOST_CTRL_Fields](reg.loc))

proc read*(reg: static USB_OTG_FS_USBHD_UDEV_CTRL_USBHD_UHOST_CTRL_Type): USB_OTG_FS_USBHD_UDEV_CTRL_USBHD_UHOST_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_USBHD_UDEV_CTRL_USBHD_UHOST_CTRL_Fields](reg.loc))

proc write*(reg: USB_OTG_FS_USBHD_UDEV_CTRL_USBHD_UHOST_CTRL_Type, val: USB_OTG_FS_USBHD_UDEV_CTRL_USBHD_UHOST_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USB_OTG_FS_USBHD_UDEV_CTRL_USBHD_UHOST_CTRL_Fields](reg.loc), val)

proc write*(reg: USB_OTG_FS_USBHD_UDEV_CTRL_USBHD_UHOST_CTRL_Type, USBHD_UH_PORT_EN_USBHD_UD_PORT_EN: bool = false, USBHD_UH_BUS_RESET_USBHD_UD_GP_BIT: bool = false, USBHD_UH_LOW_SPEED_USBHD_UD_LOW_SPEED: bool = false, USBHD_UH_PD_DIS_USBHD_UD_PD_DIS: bool = false) =
  var x: uint8
  x.setMask((USBHD_UH_PORT_EN_USBHD_UD_PORT_EN.uint8 shl 0).masked(0 .. 0))
  x.setMask((USBHD_UH_BUS_RESET_USBHD_UD_GP_BIT.uint8 shl 1).masked(1 .. 1))
  x.setMask((USBHD_UH_LOW_SPEED_USBHD_UD_LOW_SPEED.uint8 shl 2).masked(2 .. 2))
  x.setMask((USBHD_UH_PD_DIS_USBHD_UD_PD_DIS.uint8 shl 7).masked(7 .. 7))
  reg.write x.USB_OTG_FS_USBHD_UDEV_CTRL_USBHD_UHOST_CTRL_Fields

template modifyIt*(reg: USB_OTG_FS_USBHD_UDEV_CTRL_USBHD_UHOST_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R8_USB_INT_EN_Type): USB_OTG_FS_R8_USB_INT_EN_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_USB_INT_EN_Fields](reg.loc))

proc read*(reg: static USB_OTG_FS_R8_USB_INT_EN_Type): USB_OTG_FS_R8_USB_INT_EN_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_USB_INT_EN_Fields](reg.loc))

proc write*(reg: USB_OTG_FS_R8_USB_INT_EN_Type, val: USB_OTG_FS_R8_USB_INT_EN_Fields) {.inline.} =
  volatileStore(cast[ptr USB_OTG_FS_R8_USB_INT_EN_Fields](reg.loc), val)

proc write*(reg: USB_OTG_FS_R8_USB_INT_EN_Type, USBHD_UIE_BUS_RST_USBHD_UIE_DETECT: bool = false, USBHD_UIE_TRANSFER: bool = false, USBHD_UIE_SUSPEND: bool = false, USBHD_UIE_HST_SOF: bool = false, USBHD_UIE_FIFO_OV: bool = false, USBHD_UIE_DEV_NAK: bool = false, USBHD_UIE_DEV_SOF: bool = false) =
  var x: uint8
  x.setMask((USBHD_UIE_BUS_RST_USBHD_UIE_DETECT.uint8 shl 0).masked(0 .. 0))
  x.setMask((USBHD_UIE_TRANSFER.uint8 shl 1).masked(1 .. 1))
  x.setMask((USBHD_UIE_SUSPEND.uint8 shl 2).masked(2 .. 2))
  x.setMask((USBHD_UIE_HST_SOF.uint8 shl 3).masked(3 .. 3))
  x.setMask((USBHD_UIE_FIFO_OV.uint8 shl 4).masked(4 .. 4))
  x.setMask((USBHD_UIE_DEV_NAK.uint8 shl 6).masked(6 .. 6))
  x.setMask((USBHD_UIE_DEV_SOF.uint8 shl 7).masked(7 .. 7))
  reg.write x.USB_OTG_FS_R8_USB_INT_EN_Fields

template modifyIt*(reg: USB_OTG_FS_R8_USB_INT_EN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R8_USB_DEV_AD_Type): USB_OTG_FS_R8_USB_DEV_AD_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_USB_DEV_AD_Fields](reg.loc))

proc read*(reg: static USB_OTG_FS_R8_USB_DEV_AD_Type): USB_OTG_FS_R8_USB_DEV_AD_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_USB_DEV_AD_Fields](reg.loc))

proc write*(reg: USB_OTG_FS_R8_USB_DEV_AD_Type, val: USB_OTG_FS_R8_USB_DEV_AD_Fields) {.inline.} =
  volatileStore(cast[ptr USB_OTG_FS_R8_USB_DEV_AD_Fields](reg.loc), val)

proc write*(reg: USB_OTG_FS_R8_USB_DEV_AD_Type, MASK_USB_ADDR: uint8 = 0, RB_UDA_GP_BIT: bool = false) =
  var x: uint8
  x.setMask((MASK_USB_ADDR shl 0).masked(0 .. 6))
  x.setMask((RB_UDA_GP_BIT.uint8 shl 7).masked(7 .. 7))
  reg.write x.USB_OTG_FS_R8_USB_DEV_AD_Fields

template modifyIt*(reg: USB_OTG_FS_R8_USB_DEV_AD_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R8_USB_MIS_ST_Type): USB_OTG_FS_R8_USB_MIS_ST_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_USB_MIS_ST_Fields](reg.loc))

proc read*(reg: static USB_OTG_FS_R8_USB_MIS_ST_Type): USB_OTG_FS_R8_USB_MIS_ST_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_USB_MIS_ST_Fields](reg.loc))

proc read*(reg: USB_OTG_FS_R8_USB_INT_FG_Type): USB_OTG_FS_R8_USB_INT_FG_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_USB_INT_FG_Fields](reg.loc))

proc read*(reg: static USB_OTG_FS_R8_USB_INT_FG_Type): USB_OTG_FS_R8_USB_INT_FG_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_USB_INT_FG_Fields](reg.loc))

proc write*(reg: USB_OTG_FS_R8_USB_INT_FG_Type, val: USB_OTG_FS_R8_USB_INT_FG_Fields) {.inline.} =
  volatileStore(cast[ptr USB_OTG_FS_R8_USB_INT_FG_Fields](reg.loc), val)

proc write*(reg: USB_OTG_FS_R8_USB_INT_FG_Type, RB_UIF_BUS_RST_RB_UIF_DETECT: bool = false, RB_UIF_TRANSFER: bool = false, RB_UIF_SUSPEND: bool = false, RB_UIF_HST_SOF: bool = false, RB_UIF_FIFO_OV: bool = false) =
  var x: uint8
  x.setMask((RB_UIF_BUS_RST_RB_UIF_DETECT.uint8 shl 0).masked(0 .. 0))
  x.setMask((RB_UIF_TRANSFER.uint8 shl 1).masked(1 .. 1))
  x.setMask((RB_UIF_SUSPEND.uint8 shl 2).masked(2 .. 2))
  x.setMask((RB_UIF_HST_SOF.uint8 shl 3).masked(3 .. 3))
  x.setMask((RB_UIF_FIFO_OV.uint8 shl 4).masked(4 .. 4))
  reg.write x.USB_OTG_FS_R8_USB_INT_FG_Fields

template modifyIt*(reg: USB_OTG_FS_R8_USB_INT_FG_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R8_USB_INT_ST_Type): USB_OTG_FS_R8_USB_INT_ST_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_USB_INT_ST_Fields](reg.loc))

proc read*(reg: static USB_OTG_FS_R8_USB_INT_ST_Type): USB_OTG_FS_R8_USB_INT_ST_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_USB_INT_ST_Fields](reg.loc))

proc read*(reg: USB_OTG_FS_R16_USB_RX_LEN_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: static USB_OTG_FS_R16_USB_RX_LEN_Type): uint16 {.inline.} =
  volatileLoad(cast[ptr uint16](reg.loc))

proc read*(reg: USB_OTG_FS_R8_UEP4_1_MOD_Type): USB_OTG_FS_R8_UEP4_1_MOD_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP4_1_MOD_Fields](reg.loc))

proc read*(reg: static USB_OTG_FS_R8_UEP4_1_MOD_Type): USB_OTG_FS_R8_UEP4_1_MOD_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP4_1_MOD_Fields](reg.loc))

proc write*(reg: USB_OTG_FS_R8_UEP4_1_MOD_Type, val: USB_OTG_FS_R8_UEP4_1_MOD_Fields) {.inline.} =
  volatileStore(cast[ptr USB_OTG_FS_R8_UEP4_1_MOD_Fields](reg.loc), val)

proc write*(reg: USB_OTG_FS_R8_UEP4_1_MOD_Type, RB_UEP4_TX_EN: bool = false, RB_UEP4_RX_EN: bool = false, RB_UEP1_BUF_MOD: bool = false, RB_UEP1_TX_EN: bool = false, RB_UEP1_RX_EN: bool = false) =
  var x: uint8
  x.setMask((RB_UEP4_TX_EN.uint8 shl 2).masked(2 .. 2))
  x.setMask((RB_UEP4_RX_EN.uint8 shl 3).masked(3 .. 3))
  x.setMask((RB_UEP1_BUF_MOD.uint8 shl 4).masked(4 .. 4))
  x.setMask((RB_UEP1_TX_EN.uint8 shl 6).masked(6 .. 6))
  x.setMask((RB_UEP1_RX_EN.uint8 shl 7).masked(7 .. 7))
  reg.write x.USB_OTG_FS_R8_UEP4_1_MOD_Fields

template modifyIt*(reg: USB_OTG_FS_R8_UEP4_1_MOD_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Type): USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Fields](reg.loc))

proc read*(reg: static USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Type): USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Fields](reg.loc))

proc write*(reg: USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Type, val: USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Fields) {.inline.} =
  volatileStore(cast[ptr USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Fields](reg.loc), val)

proc write*(reg: USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Type, RB_UEP2_BUF_MOD_RB_UH_EP_RBUF_MOD: bool = false, RB_UEP2_TX_EN: bool = false, RB_UEP2_RX_EN_RB_UH_EP_RX_EN: bool = false, RB_UEP3_BUF_MOD_RB_UH_EP_TBUF_MOD: bool = false, RB_UEP3_TX_EN_RB_UH_EP_TX_EN: bool = false, RB_UEP3_RX_EN: bool = false) =
  var x: uint8
  x.setMask((RB_UEP2_BUF_MOD_RB_UH_EP_RBUF_MOD.uint8 shl 0).masked(0 .. 0))
  x.setMask((RB_UEP2_TX_EN.uint8 shl 2).masked(2 .. 2))
  x.setMask((RB_UEP2_RX_EN_RB_UH_EP_RX_EN.uint8 shl 3).masked(3 .. 3))
  x.setMask((RB_UEP3_BUF_MOD_RB_UH_EP_TBUF_MOD.uint8 shl 4).masked(4 .. 4))
  x.setMask((RB_UEP3_TX_EN_RB_UH_EP_TX_EN.uint8 shl 6).masked(6 .. 6))
  x.setMask((RB_UEP3_RX_EN.uint8 shl 7).masked(7 .. 7))
  reg.write x.USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Fields

template modifyIt*(reg: USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R8_UEP5_6_MOD_Type): USB_OTG_FS_R8_UEP5_6_MOD_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP5_6_MOD_Fields](reg.loc))

proc read*(reg: static USB_OTG_FS_R8_UEP5_6_MOD_Type): USB_OTG_FS_R8_UEP5_6_MOD_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP5_6_MOD_Fields](reg.loc))

proc write*(reg: USB_OTG_FS_R8_UEP5_6_MOD_Type, val: USB_OTG_FS_R8_UEP5_6_MOD_Fields) {.inline.} =
  volatileStore(cast[ptr USB_OTG_FS_R8_UEP5_6_MOD_Fields](reg.loc), val)

proc write*(reg: USB_OTG_FS_R8_UEP5_6_MOD_Type, RB_UEP5_BUF_MOD: bool = false, RB_UEP5_TX_EN: bool = false, RB_UEP5_RX_EN: bool = false, RB_UEP6_BUF_MOD: bool = false, RB_UEP6_TX_EN: bool = false, RB_UEP3_RX_EN: bool = false) =
  var x: uint8
  x.setMask((RB_UEP5_BUF_MOD.uint8 shl 0).masked(0 .. 0))
  x.setMask((RB_UEP5_TX_EN.uint8 shl 2).masked(2 .. 2))
  x.setMask((RB_UEP5_RX_EN.uint8 shl 3).masked(3 .. 3))
  x.setMask((RB_UEP6_BUF_MOD.uint8 shl 4).masked(4 .. 4))
  x.setMask((RB_UEP6_TX_EN.uint8 shl 6).masked(6 .. 6))
  x.setMask((RB_UEP3_RX_EN.uint8 shl 7).masked(7 .. 7))
  reg.write x.USB_OTG_FS_R8_UEP5_6_MOD_Fields

template modifyIt*(reg: USB_OTG_FS_R8_UEP5_6_MOD_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R8_UEP7_MOD_Type): USB_OTG_FS_R8_UEP7_MOD_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP7_MOD_Fields](reg.loc))

proc read*(reg: static USB_OTG_FS_R8_UEP7_MOD_Type): USB_OTG_FS_R8_UEP7_MOD_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP7_MOD_Fields](reg.loc))

proc write*(reg: USB_OTG_FS_R8_UEP7_MOD_Type, val: USB_OTG_FS_R8_UEP7_MOD_Fields) {.inline.} =
  volatileStore(cast[ptr USB_OTG_FS_R8_UEP7_MOD_Fields](reg.loc), val)

proc write*(reg: USB_OTG_FS_R8_UEP7_MOD_Type, RB_UEP7_BUF_MOD: bool = false, RB_UEP7_TX_EN: bool = false, RB_UEP7_RX_EN: bool = false) =
  var x: uint8
  x.setMask((RB_UEP7_BUF_MOD.uint8 shl 0).masked(0 .. 0))
  x.setMask((RB_UEP7_TX_EN.uint8 shl 2).masked(2 .. 2))
  x.setMask((RB_UEP7_RX_EN.uint8 shl 3).masked(3 .. 3))
  reg.write x.USB_OTG_FS_R8_UEP7_MOD_Fields

template modifyIt*(reg: USB_OTG_FS_R8_UEP7_MOD_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R32_UEP0_DMA_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static USB_OTG_FS_R32_UEP0_DMA_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: USB_OTG_FS_R32_UEP0_DMA_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: USB_OTG_FS_R32_UEP0_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R32_UEP1_DMA_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static USB_OTG_FS_R32_UEP1_DMA_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: USB_OTG_FS_R32_UEP1_DMA_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: USB_OTG_FS_R32_UEP1_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R32_UEP2_DMA_R32_UH_RX_DMA_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static USB_OTG_FS_R32_UEP2_DMA_R32_UH_RX_DMA_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: USB_OTG_FS_R32_UEP2_DMA_R32_UH_RX_DMA_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: USB_OTG_FS_R32_UEP2_DMA_R32_UH_RX_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R32_UEP3_DMA_R32_UH_TX_DMA_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static USB_OTG_FS_R32_UEP3_DMA_R32_UH_TX_DMA_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: USB_OTG_FS_R32_UEP3_DMA_R32_UH_TX_DMA_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: USB_OTG_FS_R32_UEP3_DMA_R32_UH_TX_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R32_UEP4_DMA_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static USB_OTG_FS_R32_UEP4_DMA_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: USB_OTG_FS_R32_UEP4_DMA_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: USB_OTG_FS_R32_UEP4_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R32_UEP5_DMA_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static USB_OTG_FS_R32_UEP5_DMA_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: USB_OTG_FS_R32_UEP5_DMA_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: USB_OTG_FS_R32_UEP5_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R32_UEP6_DMA_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static USB_OTG_FS_R32_UEP6_DMA_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: USB_OTG_FS_R32_UEP6_DMA_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: USB_OTG_FS_R32_UEP6_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R32_UEP7_DMA_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static USB_OTG_FS_R32_UEP7_DMA_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: USB_OTG_FS_R32_UEP7_DMA_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: USB_OTG_FS_R32_UEP7_DMA_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R8_UEP0_T_LEN_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static USB_OTG_FS_R8_UEP0_T_LEN_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: USB_OTG_FS_R8_UEP0_T_LEN_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: USB_OTG_FS_R8_UEP0_T_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R8_UEP0_T_CTRL_Type): USB_OTG_FS_R8_UEP0_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP0_T_CTRL_Fields](reg.loc))

proc read*(reg: static USB_OTG_FS_R8_UEP0_T_CTRL_Type): USB_OTG_FS_R8_UEP0_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP0_T_CTRL_Fields](reg.loc))

proc write*(reg: USB_OTG_FS_R8_UEP0_T_CTRL_Type, val: USB_OTG_FS_R8_UEP0_T_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USB_OTG_FS_R8_UEP0_T_CTRL_Fields](reg.loc), val)

proc write*(reg: USB_OTG_FS_R8_UEP0_T_CTRL_Type, MASK_UEP_T_RES: uint8 = 0, USBHD_UEP_T_TOG: bool = false, USBHD_UEP_AUTO_TOG: bool = false) =
  var x: uint8
  x.setMask((MASK_UEP_T_RES shl 0).masked(0 .. 1))
  x.setMask((USBHD_UEP_T_TOG.uint8 shl 2).masked(2 .. 2))
  x.setMask((USBHD_UEP_AUTO_TOG.uint8 shl 3).masked(3 .. 3))
  reg.write x.USB_OTG_FS_R8_UEP0_T_CTRL_Fields

template modifyIt*(reg: USB_OTG_FS_R8_UEP0_T_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R8_UEP0_R_CTRL_Type): USB_OTG_FS_R8_UEP0_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP0_R_CTRL_Fields](reg.loc))

proc read*(reg: static USB_OTG_FS_R8_UEP0_R_CTRL_Type): USB_OTG_FS_R8_UEP0_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP0_R_CTRL_Fields](reg.loc))

proc write*(reg: USB_OTG_FS_R8_UEP0_R_CTRL_Type, val: USB_OTG_FS_R8_UEP0_R_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USB_OTG_FS_R8_UEP0_R_CTRL_Fields](reg.loc), val)

proc write*(reg: USB_OTG_FS_R8_UEP0_R_CTRL_Type, MASK_UEP_R_RES: uint8 = 0, USBHD_UEP_R_TOG: bool = false, USBHD_UEP_AUTO_TOG: bool = false) =
  var x: uint8
  x.setMask((MASK_UEP_R_RES shl 0).masked(0 .. 1))
  x.setMask((USBHD_UEP_R_TOG.uint8 shl 2).masked(2 .. 2))
  x.setMask((USBHD_UEP_AUTO_TOG.uint8 shl 3).masked(3 .. 3))
  reg.write x.USB_OTG_FS_R8_UEP0_R_CTRL_Fields

template modifyIt*(reg: USB_OTG_FS_R8_UEP0_R_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R8_UEP1_T_LEN_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static USB_OTG_FS_R8_UEP1_T_LEN_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: USB_OTG_FS_R8_UEP1_T_LEN_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: USB_OTG_FS_R8_UEP1_T_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R8_UEP1_T_CTRL_USBHD_UH_SETUP_Type): USB_OTG_FS_R8_UEP1_T_CTRL_USBHD_UH_SETUP_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP1_T_CTRL_USBHD_UH_SETUP_Fields](reg.loc))

proc read*(reg: static USB_OTG_FS_R8_UEP1_T_CTRL_USBHD_UH_SETUP_Type): USB_OTG_FS_R8_UEP1_T_CTRL_USBHD_UH_SETUP_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP1_T_CTRL_USBHD_UH_SETUP_Fields](reg.loc))

proc write*(reg: USB_OTG_FS_R8_UEP1_T_CTRL_USBHD_UH_SETUP_Type, val: USB_OTG_FS_R8_UEP1_T_CTRL_USBHD_UH_SETUP_Fields) {.inline.} =
  volatileStore(cast[ptr USB_OTG_FS_R8_UEP1_T_CTRL_USBHD_UH_SETUP_Fields](reg.loc), val)

proc write*(reg: USB_OTG_FS_R8_UEP1_T_CTRL_USBHD_UH_SETUP_Type, MASK_UEP_T_RES: uint8 = 0, USBHD_UEP_T_TOG: bool = false, USBHD_UEP_AUTO_TOG: bool = false, USBHD_UH_SOF_EN: bool = false, USBHD_UH_PRE_PID_EN: bool = false) =
  var x: uint8
  x.setMask((MASK_UEP_T_RES shl 0).masked(0 .. 1))
  x.setMask((USBHD_UEP_T_TOG.uint8 shl 2).masked(2 .. 2))
  x.setMask((USBHD_UEP_AUTO_TOG.uint8 shl 3).masked(3 .. 3))
  x.setMask((USBHD_UH_SOF_EN.uint8 shl 6).masked(6 .. 6))
  x.setMask((USBHD_UH_PRE_PID_EN.uint8 shl 7).masked(7 .. 7))
  reg.write x.USB_OTG_FS_R8_UEP1_T_CTRL_USBHD_UH_SETUP_Fields

template modifyIt*(reg: USB_OTG_FS_R8_UEP1_T_CTRL_USBHD_UH_SETUP_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R8_UEP1_R_CTRL_Type): USB_OTG_FS_R8_UEP1_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP1_R_CTRL_Fields](reg.loc))

proc read*(reg: static USB_OTG_FS_R8_UEP1_R_CTRL_Type): USB_OTG_FS_R8_UEP1_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP1_R_CTRL_Fields](reg.loc))

proc write*(reg: USB_OTG_FS_R8_UEP1_R_CTRL_Type, val: USB_OTG_FS_R8_UEP1_R_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USB_OTG_FS_R8_UEP1_R_CTRL_Fields](reg.loc), val)

proc write*(reg: USB_OTG_FS_R8_UEP1_R_CTRL_Type, MASK_UEP_R_RES: uint8 = 0, USBHD_UEP_R_TOG: bool = false, USBHD_UEP_AUTO_TOG: bool = false) =
  var x: uint8
  x.setMask((MASK_UEP_R_RES shl 0).masked(0 .. 1))
  x.setMask((USBHD_UEP_R_TOG.uint8 shl 2).masked(2 .. 2))
  x.setMask((USBHD_UEP_AUTO_TOG.uint8 shl 3).masked(3 .. 3))
  reg.write x.USB_OTG_FS_R8_UEP1_R_CTRL_Fields

template modifyIt*(reg: USB_OTG_FS_R8_UEP1_R_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R8_UEP2_T_LEN_USBHD_UH_EP_PID_Type): USB_OTG_FS_R8_UEP2_T_LEN_USBHD_UH_EP_PID_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP2_T_LEN_USBHD_UH_EP_PID_Fields](reg.loc))

proc read*(reg: static USB_OTG_FS_R8_UEP2_T_LEN_USBHD_UH_EP_PID_Type): USB_OTG_FS_R8_UEP2_T_LEN_USBHD_UH_EP_PID_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP2_T_LEN_USBHD_UH_EP_PID_Fields](reg.loc))

proc write*(reg: USB_OTG_FS_R8_UEP2_T_LEN_USBHD_UH_EP_PID_Type, val: USB_OTG_FS_R8_UEP2_T_LEN_USBHD_UH_EP_PID_Fields) {.inline.} =
  volatileStore(cast[ptr USB_OTG_FS_R8_UEP2_T_LEN_USBHD_UH_EP_PID_Fields](reg.loc), val)

proc write*(reg: USB_OTG_FS_R8_UEP2_T_LEN_USBHD_UH_EP_PID_Type, USBHD_UH_ENDP_MASK: uint8 = 0, USBHD_UH_TOKEN_MASK: uint8 = 0) =
  var x: uint8
  x.setMask((USBHD_UH_ENDP_MASK shl 0).masked(0 .. 3))
  x.setMask((USBHD_UH_TOKEN_MASK shl 4).masked(4 .. 7))
  reg.write x.USB_OTG_FS_R8_UEP2_T_LEN_USBHD_UH_EP_PID_Fields

template modifyIt*(reg: USB_OTG_FS_R8_UEP2_T_LEN_USBHD_UH_EP_PID_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R8_UEP2_T_CTRL_Type): USB_OTG_FS_R8_UEP2_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP2_T_CTRL_Fields](reg.loc))

proc read*(reg: static USB_OTG_FS_R8_UEP2_T_CTRL_Type): USB_OTG_FS_R8_UEP2_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP2_T_CTRL_Fields](reg.loc))

proc write*(reg: USB_OTG_FS_R8_UEP2_T_CTRL_Type, val: USB_OTG_FS_R8_UEP2_T_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USB_OTG_FS_R8_UEP2_T_CTRL_Fields](reg.loc), val)

proc write*(reg: USB_OTG_FS_R8_UEP2_T_CTRL_Type, MASK_UEP_T_RES: uint8 = 0, USBHD_UEP_T_TOG: bool = false, USBHD_UEP_AUTO_TOG: bool = false) =
  var x: uint8
  x.setMask((MASK_UEP_T_RES shl 0).masked(0 .. 1))
  x.setMask((USBHD_UEP_T_TOG.uint8 shl 2).masked(2 .. 2))
  x.setMask((USBHD_UEP_AUTO_TOG.uint8 shl 3).masked(3 .. 3))
  reg.write x.USB_OTG_FS_R8_UEP2_T_CTRL_Fields

template modifyIt*(reg: USB_OTG_FS_R8_UEP2_T_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R8_UEP2_R_CTRL_USBHD_UH_RX_CTRL_Type): USB_OTG_FS_R8_UEP2_R_CTRL_USBHD_UH_RX_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP2_R_CTRL_USBHD_UH_RX_CTRL_Fields](reg.loc))

proc read*(reg: static USB_OTG_FS_R8_UEP2_R_CTRL_USBHD_UH_RX_CTRL_Type): USB_OTG_FS_R8_UEP2_R_CTRL_USBHD_UH_RX_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP2_R_CTRL_USBHD_UH_RX_CTRL_Fields](reg.loc))

proc write*(reg: USB_OTG_FS_R8_UEP2_R_CTRL_USBHD_UH_RX_CTRL_Type, val: USB_OTG_FS_R8_UEP2_R_CTRL_USBHD_UH_RX_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USB_OTG_FS_R8_UEP2_R_CTRL_USBHD_UH_RX_CTRL_Fields](reg.loc), val)

proc write*(reg: USB_OTG_FS_R8_UEP2_R_CTRL_USBHD_UH_RX_CTRL_Type, MASK_UEP_R_RES_USBHD_UH_R_RES: uint8 = 0, USBHD_UEP_R_TOG_USBHD_UH_R_TOG: bool = false, USBHD_UEP_AUTO_TOG_USBHD_UH_R_AUTO_TOG: bool = false) =
  var x: uint8
  x.setMask((MASK_UEP_R_RES_USBHD_UH_R_RES shl 0).masked(0 .. 1))
  x.setMask((USBHD_UEP_R_TOG_USBHD_UH_R_TOG.uint8 shl 2).masked(2 .. 2))
  x.setMask((USBHD_UEP_AUTO_TOG_USBHD_UH_R_AUTO_TOG.uint8 shl 3).masked(3 .. 3))
  reg.write x.USB_OTG_FS_R8_UEP2_R_CTRL_USBHD_UH_RX_CTRL_Fields

template modifyIt*(reg: USB_OTG_FS_R8_UEP2_R_CTRL_USBHD_UH_RX_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R8_UEP3_T_LEN_USBHD_UH_TX_LEN_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static USB_OTG_FS_R8_UEP3_T_LEN_USBHD_UH_TX_LEN_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: USB_OTG_FS_R8_UEP3_T_LEN_USBHD_UH_TX_LEN_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: USB_OTG_FS_R8_UEP3_T_LEN_USBHD_UH_TX_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R8_UEP3_T_CTRL_USBHD_UH_TX_CTRL_Type): USB_OTG_FS_R8_UEP3_T_CTRL_USBHD_UH_TX_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP3_T_CTRL_USBHD_UH_TX_CTRL_Fields](reg.loc))

proc read*(reg: static USB_OTG_FS_R8_UEP3_T_CTRL_USBHD_UH_TX_CTRL_Type): USB_OTG_FS_R8_UEP3_T_CTRL_USBHD_UH_TX_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP3_T_CTRL_USBHD_UH_TX_CTRL_Fields](reg.loc))

proc write*(reg: USB_OTG_FS_R8_UEP3_T_CTRL_USBHD_UH_TX_CTRL_Type, val: USB_OTG_FS_R8_UEP3_T_CTRL_USBHD_UH_TX_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USB_OTG_FS_R8_UEP3_T_CTRL_USBHD_UH_TX_CTRL_Fields](reg.loc), val)

proc write*(reg: USB_OTG_FS_R8_UEP3_T_CTRL_USBHD_UH_TX_CTRL_Type, MASK_UEP_T_RES_USBHD_UH_T_RES: uint8 = 0, USBHD_UEP_T_TOG_USBHD_UH_T_TOG: bool = false, USBHD_UEP_AUTO_TOG_USBHD_UH_T_AUTO_TOG: bool = false) =
  var x: uint8
  x.setMask((MASK_UEP_T_RES_USBHD_UH_T_RES shl 0).masked(0 .. 1))
  x.setMask((USBHD_UEP_T_TOG_USBHD_UH_T_TOG.uint8 shl 2).masked(2 .. 2))
  x.setMask((USBHD_UEP_AUTO_TOG_USBHD_UH_T_AUTO_TOG.uint8 shl 3).masked(3 .. 3))
  reg.write x.USB_OTG_FS_R8_UEP3_T_CTRL_USBHD_UH_TX_CTRL_Fields

template modifyIt*(reg: USB_OTG_FS_R8_UEP3_T_CTRL_USBHD_UH_TX_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R8_UEP3_R_CTRL_Type): USB_OTG_FS_R8_UEP3_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP3_R_CTRL_Fields](reg.loc))

proc read*(reg: static USB_OTG_FS_R8_UEP3_R_CTRL_Type): USB_OTG_FS_R8_UEP3_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP3_R_CTRL_Fields](reg.loc))

proc write*(reg: USB_OTG_FS_R8_UEP3_R_CTRL_Type, val: USB_OTG_FS_R8_UEP3_R_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USB_OTG_FS_R8_UEP3_R_CTRL_Fields](reg.loc), val)

proc write*(reg: USB_OTG_FS_R8_UEP3_R_CTRL_Type, MASK_UEP_R_RES: uint8 = 0, USBHD_UEP_R_TOG: bool = false, USBHD_UEP_AUTO_TOG: bool = false) =
  var x: uint8
  x.setMask((MASK_UEP_R_RES shl 0).masked(0 .. 1))
  x.setMask((USBHD_UEP_R_TOG.uint8 shl 2).masked(2 .. 2))
  x.setMask((USBHD_UEP_AUTO_TOG.uint8 shl 3).masked(3 .. 3))
  reg.write x.USB_OTG_FS_R8_UEP3_R_CTRL_Fields

template modifyIt*(reg: USB_OTG_FS_R8_UEP3_R_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R8_UEP4_T_LEN_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static USB_OTG_FS_R8_UEP4_T_LEN_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: USB_OTG_FS_R8_UEP4_T_LEN_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: USB_OTG_FS_R8_UEP4_T_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R8_UEP4_T_CTRL_Type): USB_OTG_FS_R8_UEP4_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP4_T_CTRL_Fields](reg.loc))

proc read*(reg: static USB_OTG_FS_R8_UEP4_T_CTRL_Type): USB_OTG_FS_R8_UEP4_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP4_T_CTRL_Fields](reg.loc))

proc write*(reg: USB_OTG_FS_R8_UEP4_T_CTRL_Type, val: USB_OTG_FS_R8_UEP4_T_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USB_OTG_FS_R8_UEP4_T_CTRL_Fields](reg.loc), val)

proc write*(reg: USB_OTG_FS_R8_UEP4_T_CTRL_Type, MASK_UEP_T_RES: uint8 = 0, USBHD_UEP_T_TOG_USBHD_UH_T_TOG: bool = false, USBHD_UEP_AUTO_TOG_USBHD_UH_T_AUTO_TOG: bool = false) =
  var x: uint8
  x.setMask((MASK_UEP_T_RES shl 0).masked(0 .. 1))
  x.setMask((USBHD_UEP_T_TOG_USBHD_UH_T_TOG.uint8 shl 2).masked(2 .. 2))
  x.setMask((USBHD_UEP_AUTO_TOG_USBHD_UH_T_AUTO_TOG.uint8 shl 3).masked(3 .. 3))
  reg.write x.USB_OTG_FS_R8_UEP4_T_CTRL_Fields

template modifyIt*(reg: USB_OTG_FS_R8_UEP4_T_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R8_UEP4_R_CTRL_Type): USB_OTG_FS_R8_UEP4_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP4_R_CTRL_Fields](reg.loc))

proc read*(reg: static USB_OTG_FS_R8_UEP4_R_CTRL_Type): USB_OTG_FS_R8_UEP4_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP4_R_CTRL_Fields](reg.loc))

proc write*(reg: USB_OTG_FS_R8_UEP4_R_CTRL_Type, val: USB_OTG_FS_R8_UEP4_R_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USB_OTG_FS_R8_UEP4_R_CTRL_Fields](reg.loc), val)

proc write*(reg: USB_OTG_FS_R8_UEP4_R_CTRL_Type, MASK_UEP_R_RES: uint8 = 0, USBHD_UEP_R_TOG: bool = false, USBHD_UEP_AUTO_TOG: bool = false) =
  var x: uint8
  x.setMask((MASK_UEP_R_RES shl 0).masked(0 .. 1))
  x.setMask((USBHD_UEP_R_TOG.uint8 shl 2).masked(2 .. 2))
  x.setMask((USBHD_UEP_AUTO_TOG.uint8 shl 3).masked(3 .. 3))
  reg.write x.USB_OTG_FS_R8_UEP4_R_CTRL_Fields

template modifyIt*(reg: USB_OTG_FS_R8_UEP4_R_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R8_UEP5_T_LEN_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static USB_OTG_FS_R8_UEP5_T_LEN_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: USB_OTG_FS_R8_UEP5_T_LEN_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: USB_OTG_FS_R8_UEP5_T_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R8_UEP5_T_CTRL_Type): USB_OTG_FS_R8_UEP5_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP5_T_CTRL_Fields](reg.loc))

proc read*(reg: static USB_OTG_FS_R8_UEP5_T_CTRL_Type): USB_OTG_FS_R8_UEP5_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP5_T_CTRL_Fields](reg.loc))

proc write*(reg: USB_OTG_FS_R8_UEP5_T_CTRL_Type, val: USB_OTG_FS_R8_UEP5_T_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USB_OTG_FS_R8_UEP5_T_CTRL_Fields](reg.loc), val)

proc write*(reg: USB_OTG_FS_R8_UEP5_T_CTRL_Type, MASK_UEP_T_RES: uint8 = 0, USBHD_UEP_T_TOG_USBHD_UH_T_TOG: bool = false, USBHD_UEP_AUTO_TOG_USBHD_UH_T_AUTO_TOG: bool = false) =
  var x: uint8
  x.setMask((MASK_UEP_T_RES shl 0).masked(0 .. 1))
  x.setMask((USBHD_UEP_T_TOG_USBHD_UH_T_TOG.uint8 shl 2).masked(2 .. 2))
  x.setMask((USBHD_UEP_AUTO_TOG_USBHD_UH_T_AUTO_TOG.uint8 shl 3).masked(3 .. 3))
  reg.write x.USB_OTG_FS_R8_UEP5_T_CTRL_Fields

template modifyIt*(reg: USB_OTG_FS_R8_UEP5_T_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R8_UEP5_R_CTRL_Type): USB_OTG_FS_R8_UEP5_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP5_R_CTRL_Fields](reg.loc))

proc read*(reg: static USB_OTG_FS_R8_UEP5_R_CTRL_Type): USB_OTG_FS_R8_UEP5_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP5_R_CTRL_Fields](reg.loc))

proc write*(reg: USB_OTG_FS_R8_UEP5_R_CTRL_Type, val: USB_OTG_FS_R8_UEP5_R_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USB_OTG_FS_R8_UEP5_R_CTRL_Fields](reg.loc), val)

proc write*(reg: USB_OTG_FS_R8_UEP5_R_CTRL_Type, MASK_UEP_R_RES: uint8 = 0, USBHD_UEP_R_TOG: bool = false, USBHD_UEP_AUTO_TOG: bool = false) =
  var x: uint8
  x.setMask((MASK_UEP_R_RES shl 0).masked(0 .. 1))
  x.setMask((USBHD_UEP_R_TOG.uint8 shl 2).masked(2 .. 2))
  x.setMask((USBHD_UEP_AUTO_TOG.uint8 shl 3).masked(3 .. 3))
  reg.write x.USB_OTG_FS_R8_UEP5_R_CTRL_Fields

template modifyIt*(reg: USB_OTG_FS_R8_UEP5_R_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R8_UEP6_T_LEN_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static USB_OTG_FS_R8_UEP6_T_LEN_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: USB_OTG_FS_R8_UEP6_T_LEN_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: USB_OTG_FS_R8_UEP6_T_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R8_UEP6_T_CTRL_Type): USB_OTG_FS_R8_UEP6_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP6_T_CTRL_Fields](reg.loc))

proc read*(reg: static USB_OTG_FS_R8_UEP6_T_CTRL_Type): USB_OTG_FS_R8_UEP6_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP6_T_CTRL_Fields](reg.loc))

proc write*(reg: USB_OTG_FS_R8_UEP6_T_CTRL_Type, val: USB_OTG_FS_R8_UEP6_T_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USB_OTG_FS_R8_UEP6_T_CTRL_Fields](reg.loc), val)

proc write*(reg: USB_OTG_FS_R8_UEP6_T_CTRL_Type, MASK_UEP_T_RES: uint8 = 0, USBHD_UEP_T_TOG_USBHD_UH_T_TOG: bool = false, USBHD_UEP_AUTO_TOG_USBHD_UH_T_AUTO_TOG: bool = false) =
  var x: uint8
  x.setMask((MASK_UEP_T_RES shl 0).masked(0 .. 1))
  x.setMask((USBHD_UEP_T_TOG_USBHD_UH_T_TOG.uint8 shl 2).masked(2 .. 2))
  x.setMask((USBHD_UEP_AUTO_TOG_USBHD_UH_T_AUTO_TOG.uint8 shl 3).masked(3 .. 3))
  reg.write x.USB_OTG_FS_R8_UEP6_T_CTRL_Fields

template modifyIt*(reg: USB_OTG_FS_R8_UEP6_T_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R8_UEP6_R_CTRL_Type): USB_OTG_FS_R8_UEP6_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP6_R_CTRL_Fields](reg.loc))

proc read*(reg: static USB_OTG_FS_R8_UEP6_R_CTRL_Type): USB_OTG_FS_R8_UEP6_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP6_R_CTRL_Fields](reg.loc))

proc write*(reg: USB_OTG_FS_R8_UEP6_R_CTRL_Type, val: USB_OTG_FS_R8_UEP6_R_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USB_OTG_FS_R8_UEP6_R_CTRL_Fields](reg.loc), val)

proc write*(reg: USB_OTG_FS_R8_UEP6_R_CTRL_Type, MASK_UEP_R_RES: uint8 = 0, USBHD_UEP_R_TOG: bool = false, USBHD_UEP_AUTO_TOG: bool = false) =
  var x: uint8
  x.setMask((MASK_UEP_R_RES shl 0).masked(0 .. 1))
  x.setMask((USBHD_UEP_R_TOG.uint8 shl 2).masked(2 .. 2))
  x.setMask((USBHD_UEP_AUTO_TOG.uint8 shl 3).masked(3 .. 3))
  reg.write x.USB_OTG_FS_R8_UEP6_R_CTRL_Fields

template modifyIt*(reg: USB_OTG_FS_R8_UEP6_R_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R8_UEP7_T_LEN_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static USB_OTG_FS_R8_UEP7_T_LEN_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: USB_OTG_FS_R8_UEP7_T_LEN_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: USB_OTG_FS_R8_UEP7_T_LEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R8_UEP7_T_CTRL_Type): USB_OTG_FS_R8_UEP7_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP7_T_CTRL_Fields](reg.loc))

proc read*(reg: static USB_OTG_FS_R8_UEP7_T_CTRL_Type): USB_OTG_FS_R8_UEP7_T_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP7_T_CTRL_Fields](reg.loc))

proc write*(reg: USB_OTG_FS_R8_UEP7_T_CTRL_Type, val: USB_OTG_FS_R8_UEP7_T_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USB_OTG_FS_R8_UEP7_T_CTRL_Fields](reg.loc), val)

proc write*(reg: USB_OTG_FS_R8_UEP7_T_CTRL_Type, MASK_UEP_T_RES: uint8 = 0, USBHD_UEP_T_TOG_USBHD_UH_T_TOG: bool = false, USBHD_UEP_AUTO_TOG_USBHD_UH_T_AUTO_TOG: bool = false) =
  var x: uint8
  x.setMask((MASK_UEP_T_RES shl 0).masked(0 .. 1))
  x.setMask((USBHD_UEP_T_TOG_USBHD_UH_T_TOG.uint8 shl 2).masked(2 .. 2))
  x.setMask((USBHD_UEP_AUTO_TOG_USBHD_UH_T_AUTO_TOG.uint8 shl 3).masked(3 .. 3))
  reg.write x.USB_OTG_FS_R8_UEP7_T_CTRL_Fields

template modifyIt*(reg: USB_OTG_FS_R8_UEP7_T_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_R8_UEP7_R_CTRL_Type): USB_OTG_FS_R8_UEP7_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP7_R_CTRL_Fields](reg.loc))

proc read*(reg: static USB_OTG_FS_R8_UEP7_R_CTRL_Type): USB_OTG_FS_R8_UEP7_R_CTRL_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_R8_UEP7_R_CTRL_Fields](reg.loc))

proc write*(reg: USB_OTG_FS_R8_UEP7_R_CTRL_Type, val: USB_OTG_FS_R8_UEP7_R_CTRL_Fields) {.inline.} =
  volatileStore(cast[ptr USB_OTG_FS_R8_UEP7_R_CTRL_Fields](reg.loc), val)

proc write*(reg: USB_OTG_FS_R8_UEP7_R_CTRL_Type, MASK_UEP_R_RES: uint8 = 0, USBHD_UEP_R_TOG: bool = false, USBHD_UEP_AUTO_TOG: bool = false) =
  var x: uint8
  x.setMask((MASK_UEP_R_RES shl 0).masked(0 .. 1))
  x.setMask((USBHD_UEP_R_TOG.uint8 shl 2).masked(2 .. 2))
  x.setMask((USBHD_UEP_AUTO_TOG.uint8 shl 3).masked(3 .. 3))
  reg.write x.USB_OTG_FS_R8_UEP7_R_CTRL_Fields

template modifyIt*(reg: USB_OTG_FS_R8_UEP7_R_CTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_USB_OTG_CR_Type): USB_OTG_FS_USB_OTG_CR_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_USB_OTG_CR_Fields](reg.loc))

proc read*(reg: static USB_OTG_FS_USB_OTG_CR_Type): USB_OTG_FS_USB_OTG_CR_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_USB_OTG_CR_Fields](reg.loc))

proc write*(reg: USB_OTG_FS_USB_OTG_CR_Type, val: USB_OTG_FS_USB_OTG_CR_Fields) {.inline.} =
  volatileStore(cast[ptr USB_OTG_FS_USB_OTG_CR_Fields](reg.loc), val)

proc write*(reg: USB_OTG_FS_USB_OTG_CR_Type, USB_OTG_CR_DISCHARGEVBUS: bool = false, USB_OTG_CR_CHARGEVBUS: bool = false, USB_OTG_CR_IDPU: bool = false, USB_OTG_CR_OTG_EN: bool = false, USB_OTG_CR_VBUS: bool = false, USB_OTG_CR_SESS: bool = false) =
  var x: uint32
  x.setMask((USB_OTG_CR_DISCHARGEVBUS.uint32 shl 0).masked(0 .. 0))
  x.setMask((USB_OTG_CR_CHARGEVBUS.uint32 shl 1).masked(1 .. 1))
  x.setMask((USB_OTG_CR_IDPU.uint32 shl 2).masked(2 .. 2))
  x.setMask((USB_OTG_CR_OTG_EN.uint32 shl 3).masked(3 .. 3))
  x.setMask((USB_OTG_CR_VBUS.uint32 shl 4).masked(4 .. 4))
  x.setMask((USB_OTG_CR_SESS.uint32 shl 5).masked(5 .. 5))
  reg.write x.USB_OTG_FS_USB_OTG_CR_Fields

template modifyIt*(reg: USB_OTG_FS_USB_OTG_CR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USB_OTG_FS_USB_OTG_SR_Type): USB_OTG_FS_USB_OTG_SR_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_USB_OTG_SR_Fields](reg.loc))

proc read*(reg: static USB_OTG_FS_USB_OTG_SR_Type): USB_OTG_FS_USB_OTG_SR_Fields {.inline.} =
  volatileLoad(cast[ptr USB_OTG_FS_USB_OTG_SR_Fields](reg.loc))

proc write*(reg: USB_OTG_FS_USB_OTG_SR_Type, val: USB_OTG_FS_USB_OTG_SR_Fields) {.inline.} =
  volatileStore(cast[ptr USB_OTG_FS_USB_OTG_SR_Fields](reg.loc), val)

proc write*(reg: USB_OTG_FS_USB_OTG_SR_Type, USB_OTG_SR_VBUS_VLD: bool = false, USB_OTG_SR_SESS_VLD: bool = false, USB_OTG_SR_SESS_END: bool = false, USB_OTG_SR_ID_DIG: bool = false) =
  var x: uint32
  x.setMask((USB_OTG_SR_VBUS_VLD.uint32 shl 0).masked(0 .. 0))
  x.setMask((USB_OTG_SR_SESS_VLD.uint32 shl 1).masked(1 .. 1))
  x.setMask((USB_OTG_SR_SESS_END.uint32 shl 2).masked(2 .. 2))
  x.setMask((USB_OTG_SR_ID_DIG.uint32 shl 3).masked(3 .. 3))
  reg.write x.USB_OTG_FS_USB_OTG_SR_Fields

template modifyIt*(reg: USB_OTG_FS_USB_OTG_SR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func USBHD_UC_DMA_EN*(r: USB_OTG_FS_USBHD_BASE_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(0 .. 0).bool

proc `USBHD_UC_DMA_EN=`*(r: var USB_OTG_FS_USBHD_BASE_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint8 shl 0).masked(0 .. 0))
  r = tmp.USB_OTG_FS_USBHD_BASE_CTRL_Fields

func USBHD_UC_CLR_ALL*(r: USB_OTG_FS_USBHD_BASE_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(1 .. 1).bool

proc `USBHD_UC_CLR_ALL=`*(r: var USB_OTG_FS_USBHD_BASE_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint8 shl 1).masked(1 .. 1))
  r = tmp.USB_OTG_FS_USBHD_BASE_CTRL_Fields

func USBHD_UC_RESET_SIE*(r: USB_OTG_FS_USBHD_BASE_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(2 .. 2).bool

proc `USBHD_UC_RESET_SIE=`*(r: var USB_OTG_FS_USBHD_BASE_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint8 shl 2).masked(2 .. 2))
  r = tmp.USB_OTG_FS_USBHD_BASE_CTRL_Fields

func USBHD_UC_INT_BUSY*(r: USB_OTG_FS_USBHD_BASE_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(3 .. 3).bool

proc `USBHD_UC_INT_BUSY=`*(r: var USB_OTG_FS_USBHD_BASE_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint8 shl 3).masked(3 .. 3))
  r = tmp.USB_OTG_FS_USBHD_BASE_CTRL_Fields

func USBHD_UC_SYS_CTRL_MASK*(r: USB_OTG_FS_USBHD_BASE_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(4 .. 5)

proc `USBHD_UC_SYS_CTRL_MASK=`*(r: var USB_OTG_FS_USBHD_BASE_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.USB_OTG_FS_USBHD_BASE_CTRL_Fields

func USBHD_UC_LOW_SPEED*(r: USB_OTG_FS_USBHD_BASE_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(6 .. 6).bool

proc `USBHD_UC_LOW_SPEED=`*(r: var USB_OTG_FS_USBHD_BASE_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint8 shl 6).masked(6 .. 6))
  r = tmp.USB_OTG_FS_USBHD_BASE_CTRL_Fields

func RB_UC_HOST_MODE*(r: USB_OTG_FS_USBHD_BASE_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(7 .. 7).bool

proc `RB_UC_HOST_MODE=`*(r: var USB_OTG_FS_USBHD_BASE_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint8 shl 7).masked(7 .. 7))
  r = tmp.USB_OTG_FS_USBHD_BASE_CTRL_Fields

func USBHD_UH_PORT_EN_USBHD_UD_PORT_EN*(r: USB_OTG_FS_USBHD_UDEV_CTRL_USBHD_UHOST_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(0 .. 0).bool

proc `USBHD_UH_PORT_EN_USBHD_UD_PORT_EN=`*(r: var USB_OTG_FS_USBHD_UDEV_CTRL_USBHD_UHOST_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint8 shl 0).masked(0 .. 0))
  r = tmp.USB_OTG_FS_USBHD_UDEV_CTRL_USBHD_UHOST_CTRL_Fields

func USBHD_UH_BUS_RESET_USBHD_UD_GP_BIT*(r: USB_OTG_FS_USBHD_UDEV_CTRL_USBHD_UHOST_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(1 .. 1).bool

proc `USBHD_UH_BUS_RESET_USBHD_UD_GP_BIT=`*(r: var USB_OTG_FS_USBHD_UDEV_CTRL_USBHD_UHOST_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint8 shl 1).masked(1 .. 1))
  r = tmp.USB_OTG_FS_USBHD_UDEV_CTRL_USBHD_UHOST_CTRL_Fields

func USBHD_UH_LOW_SPEED_USBHD_UD_LOW_SPEED*(r: USB_OTG_FS_USBHD_UDEV_CTRL_USBHD_UHOST_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(2 .. 2).bool

proc `USBHD_UH_LOW_SPEED_USBHD_UD_LOW_SPEED=`*(r: var USB_OTG_FS_USBHD_UDEV_CTRL_USBHD_UHOST_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint8 shl 2).masked(2 .. 2))
  r = tmp.USB_OTG_FS_USBHD_UDEV_CTRL_USBHD_UHOST_CTRL_Fields

func USBHD_UH_DM_PIN_USBHD_UD_DM_PIN*(r: USB_OTG_FS_USBHD_UDEV_CTRL_USBHD_UHOST_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(4 .. 4).bool

func USBHD_UH_DP_PIN_USBHD_UD_DP_PIN*(r: USB_OTG_FS_USBHD_UDEV_CTRL_USBHD_UHOST_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

func USBHD_UH_PD_DIS_USBHD_UD_PD_DIS*(r: USB_OTG_FS_USBHD_UDEV_CTRL_USBHD_UHOST_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(7 .. 7).bool

proc `USBHD_UH_PD_DIS_USBHD_UD_PD_DIS=`*(r: var USB_OTG_FS_USBHD_UDEV_CTRL_USBHD_UHOST_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint8 shl 7).masked(7 .. 7))
  r = tmp.USB_OTG_FS_USBHD_UDEV_CTRL_USBHD_UHOST_CTRL_Fields

func USBHD_UIE_BUS_RST_USBHD_UIE_DETECT*(r: USB_OTG_FS_R8_USB_INT_EN_Fields): bool {.inline.} =
  r.uint8.bitsliced(0 .. 0).bool

proc `USBHD_UIE_BUS_RST_USBHD_UIE_DETECT=`*(r: var USB_OTG_FS_R8_USB_INT_EN_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint8 shl 0).masked(0 .. 0))
  r = tmp.USB_OTG_FS_R8_USB_INT_EN_Fields

func USBHD_UIE_TRANSFER*(r: USB_OTG_FS_R8_USB_INT_EN_Fields): bool {.inline.} =
  r.uint8.bitsliced(1 .. 1).bool

proc `USBHD_UIE_TRANSFER=`*(r: var USB_OTG_FS_R8_USB_INT_EN_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint8 shl 1).masked(1 .. 1))
  r = tmp.USB_OTG_FS_R8_USB_INT_EN_Fields

func USBHD_UIE_SUSPEND*(r: USB_OTG_FS_R8_USB_INT_EN_Fields): bool {.inline.} =
  r.uint8.bitsliced(2 .. 2).bool

proc `USBHD_UIE_SUSPEND=`*(r: var USB_OTG_FS_R8_USB_INT_EN_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint8 shl 2).masked(2 .. 2))
  r = tmp.USB_OTG_FS_R8_USB_INT_EN_Fields

func USBHD_UIE_HST_SOF*(r: USB_OTG_FS_R8_USB_INT_EN_Fields): bool {.inline.} =
  r.uint8.bitsliced(3 .. 3).bool

proc `USBHD_UIE_HST_SOF=`*(r: var USB_OTG_FS_R8_USB_INT_EN_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint8 shl 3).masked(3 .. 3))
  r = tmp.USB_OTG_FS_R8_USB_INT_EN_Fields

func USBHD_UIE_FIFO_OV*(r: USB_OTG_FS_R8_USB_INT_EN_Fields): bool {.inline.} =
  r.uint8.bitsliced(4 .. 4).bool

proc `USBHD_UIE_FIFO_OV=`*(r: var USB_OTG_FS_R8_USB_INT_EN_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint8 shl 4).masked(4 .. 4))
  r = tmp.USB_OTG_FS_R8_USB_INT_EN_Fields

func USBHD_UIE_DEV_NAK*(r: USB_OTG_FS_R8_USB_INT_EN_Fields): bool {.inline.} =
  r.uint8.bitsliced(6 .. 6).bool

proc `USBHD_UIE_DEV_NAK=`*(r: var USB_OTG_FS_R8_USB_INT_EN_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint8 shl 6).masked(6 .. 6))
  r = tmp.USB_OTG_FS_R8_USB_INT_EN_Fields

func USBHD_UIE_DEV_SOF*(r: USB_OTG_FS_R8_USB_INT_EN_Fields): bool {.inline.} =
  r.uint8.bitsliced(7 .. 7).bool

proc `USBHD_UIE_DEV_SOF=`*(r: var USB_OTG_FS_R8_USB_INT_EN_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint8 shl 7).masked(7 .. 7))
  r = tmp.USB_OTG_FS_R8_USB_INT_EN_Fields

func MASK_USB_ADDR*(r: USB_OTG_FS_R8_USB_DEV_AD_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 6)

proc `MASK_USB_ADDR=`*(r: var USB_OTG_FS_R8_USB_DEV_AD_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 6)
  tmp.setMask((val shl 0).masked(0 .. 6))
  r = tmp.USB_OTG_FS_R8_USB_DEV_AD_Fields

func RB_UDA_GP_BIT*(r: USB_OTG_FS_R8_USB_DEV_AD_Fields): bool {.inline.} =
  r.uint8.bitsliced(7 .. 7).bool

proc `RB_UDA_GP_BIT=`*(r: var USB_OTG_FS_R8_USB_DEV_AD_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint8 shl 7).masked(7 .. 7))
  r = tmp.USB_OTG_FS_R8_USB_DEV_AD_Fields

func RB_UMS_DEV_ATTACH*(r: USB_OTG_FS_R8_USB_MIS_ST_Fields): bool {.inline.} =
  r.uint8.bitsliced(0 .. 0).bool

func RB_UMS_DM_LEVEL*(r: USB_OTG_FS_R8_USB_MIS_ST_Fields): bool {.inline.} =
  r.uint8.bitsliced(1 .. 1).bool

func RB_UMS_SUSPEND*(r: USB_OTG_FS_R8_USB_MIS_ST_Fields): bool {.inline.} =
  r.uint8.bitsliced(2 .. 2).bool

func RB_UMS_BUS_RESET*(r: USB_OTG_FS_R8_USB_MIS_ST_Fields): bool {.inline.} =
  r.uint8.bitsliced(3 .. 3).bool

func RB_UMS_R_FIFO_RDY*(r: USB_OTG_FS_R8_USB_MIS_ST_Fields): bool {.inline.} =
  r.uint8.bitsliced(4 .. 4).bool

func RB_UMS_SIE_FREE*(r: USB_OTG_FS_R8_USB_MIS_ST_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

func RB_UMS_SOF_ACT*(r: USB_OTG_FS_R8_USB_MIS_ST_Fields): bool {.inline.} =
  r.uint8.bitsliced(6 .. 6).bool

func RB_UMS_SOF_PRES*(r: USB_OTG_FS_R8_USB_MIS_ST_Fields): bool {.inline.} =
  r.uint8.bitsliced(7 .. 7).bool

func RB_UIF_BUS_RST_RB_UIF_DETECT*(r: USB_OTG_FS_R8_USB_INT_FG_Fields): bool {.inline.} =
  r.uint8.bitsliced(0 .. 0).bool

proc `RB_UIF_BUS_RST_RB_UIF_DETECT=`*(r: var USB_OTG_FS_R8_USB_INT_FG_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint8 shl 0).masked(0 .. 0))
  r = tmp.USB_OTG_FS_R8_USB_INT_FG_Fields

func RB_UIF_TRANSFER*(r: USB_OTG_FS_R8_USB_INT_FG_Fields): bool {.inline.} =
  r.uint8.bitsliced(1 .. 1).bool

proc `RB_UIF_TRANSFER=`*(r: var USB_OTG_FS_R8_USB_INT_FG_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint8 shl 1).masked(1 .. 1))
  r = tmp.USB_OTG_FS_R8_USB_INT_FG_Fields

func RB_UIF_SUSPEND*(r: USB_OTG_FS_R8_USB_INT_FG_Fields): bool {.inline.} =
  r.uint8.bitsliced(2 .. 2).bool

proc `RB_UIF_SUSPEND=`*(r: var USB_OTG_FS_R8_USB_INT_FG_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint8 shl 2).masked(2 .. 2))
  r = tmp.USB_OTG_FS_R8_USB_INT_FG_Fields

func RB_UIF_HST_SOF*(r: USB_OTG_FS_R8_USB_INT_FG_Fields): bool {.inline.} =
  r.uint8.bitsliced(3 .. 3).bool

proc `RB_UIF_HST_SOF=`*(r: var USB_OTG_FS_R8_USB_INT_FG_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint8 shl 3).masked(3 .. 3))
  r = tmp.USB_OTG_FS_R8_USB_INT_FG_Fields

func RB_UIF_FIFO_OV*(r: USB_OTG_FS_R8_USB_INT_FG_Fields): bool {.inline.} =
  r.uint8.bitsliced(4 .. 4).bool

proc `RB_UIF_FIFO_OV=`*(r: var USB_OTG_FS_R8_USB_INT_FG_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint8 shl 4).masked(4 .. 4))
  r = tmp.USB_OTG_FS_R8_USB_INT_FG_Fields

func RB_U_SIE_FREE*(r: USB_OTG_FS_R8_USB_INT_FG_Fields): bool {.inline.} =
  r.uint8.bitsliced(5 .. 5).bool

func RB_U_TOG_OK*(r: USB_OTG_FS_R8_USB_INT_FG_Fields): bool {.inline.} =
  r.uint8.bitsliced(6 .. 6).bool

func RB_U_IS_NAK*(r: USB_OTG_FS_R8_USB_INT_FG_Fields): bool {.inline.} =
  r.uint8.bitsliced(7 .. 7).bool

func MASK_UIS_H_RES_MASK_UIS_ENDP*(r: USB_OTG_FS_R8_USB_INT_ST_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 3)

func MASK_UIS_TOKEN*(r: USB_OTG_FS_R8_USB_INT_ST_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(4 .. 5)

func RB_UIS_TOG_OK*(r: USB_OTG_FS_R8_USB_INT_ST_Fields): bool {.inline.} =
  r.uint8.bitsliced(6 .. 6).bool

func RB_UIS_IS_NAK*(r: USB_OTG_FS_R8_USB_INT_ST_Fields): bool {.inline.} =
  r.uint8.bitsliced(7 .. 7).bool

func RB_UEP4_TX_EN*(r: USB_OTG_FS_R8_UEP4_1_MOD_Fields): bool {.inline.} =
  r.uint8.bitsliced(2 .. 2).bool

proc `RB_UEP4_TX_EN=`*(r: var USB_OTG_FS_R8_UEP4_1_MOD_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint8 shl 2).masked(2 .. 2))
  r = tmp.USB_OTG_FS_R8_UEP4_1_MOD_Fields

func RB_UEP4_RX_EN*(r: USB_OTG_FS_R8_UEP4_1_MOD_Fields): bool {.inline.} =
  r.uint8.bitsliced(3 .. 3).bool

proc `RB_UEP4_RX_EN=`*(r: var USB_OTG_FS_R8_UEP4_1_MOD_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint8 shl 3).masked(3 .. 3))
  r = tmp.USB_OTG_FS_R8_UEP4_1_MOD_Fields

func RB_UEP1_BUF_MOD*(r: USB_OTG_FS_R8_UEP4_1_MOD_Fields): bool {.inline.} =
  r.uint8.bitsliced(4 .. 4).bool

proc `RB_UEP1_BUF_MOD=`*(r: var USB_OTG_FS_R8_UEP4_1_MOD_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint8 shl 4).masked(4 .. 4))
  r = tmp.USB_OTG_FS_R8_UEP4_1_MOD_Fields

func RB_UEP1_TX_EN*(r: USB_OTG_FS_R8_UEP4_1_MOD_Fields): bool {.inline.} =
  r.uint8.bitsliced(6 .. 6).bool

proc `RB_UEP1_TX_EN=`*(r: var USB_OTG_FS_R8_UEP4_1_MOD_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint8 shl 6).masked(6 .. 6))
  r = tmp.USB_OTG_FS_R8_UEP4_1_MOD_Fields

func RB_UEP1_RX_EN*(r: USB_OTG_FS_R8_UEP4_1_MOD_Fields): bool {.inline.} =
  r.uint8.bitsliced(7 .. 7).bool

proc `RB_UEP1_RX_EN=`*(r: var USB_OTG_FS_R8_UEP4_1_MOD_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint8 shl 7).masked(7 .. 7))
  r = tmp.USB_OTG_FS_R8_UEP4_1_MOD_Fields

func RB_UEP2_BUF_MOD_RB_UH_EP_RBUF_MOD*(r: USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Fields): bool {.inline.} =
  r.uint8.bitsliced(0 .. 0).bool

proc `RB_UEP2_BUF_MOD_RB_UH_EP_RBUF_MOD=`*(r: var USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint8 shl 0).masked(0 .. 0))
  r = tmp.USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Fields

func RB_UEP2_TX_EN*(r: USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Fields): bool {.inline.} =
  r.uint8.bitsliced(2 .. 2).bool

proc `RB_UEP2_TX_EN=`*(r: var USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint8 shl 2).masked(2 .. 2))
  r = tmp.USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Fields

func RB_UEP2_RX_EN_RB_UH_EP_RX_EN*(r: USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Fields): bool {.inline.} =
  r.uint8.bitsliced(3 .. 3).bool

proc `RB_UEP2_RX_EN_RB_UH_EP_RX_EN=`*(r: var USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint8 shl 3).masked(3 .. 3))
  r = tmp.USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Fields

func RB_UEP3_BUF_MOD_RB_UH_EP_TBUF_MOD*(r: USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Fields): bool {.inline.} =
  r.uint8.bitsliced(4 .. 4).bool

proc `RB_UEP3_BUF_MOD_RB_UH_EP_TBUF_MOD=`*(r: var USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint8 shl 4).masked(4 .. 4))
  r = tmp.USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Fields

func RB_UEP3_TX_EN_RB_UH_EP_TX_EN*(r: USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Fields): bool {.inline.} =
  r.uint8.bitsliced(6 .. 6).bool

proc `RB_UEP3_TX_EN_RB_UH_EP_TX_EN=`*(r: var USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint8 shl 6).masked(6 .. 6))
  r = tmp.USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Fields

func RB_UEP3_RX_EN*(r: USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Fields): bool {.inline.} =
  r.uint8.bitsliced(7 .. 7).bool

proc `RB_UEP3_RX_EN=`*(r: var USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint8 shl 7).masked(7 .. 7))
  r = tmp.USB_OTG_FS_R8_UEP2_3_MOD_R8_UH_EP_MOD_Fields

func RB_UEP5_BUF_MOD*(r: USB_OTG_FS_R8_UEP5_6_MOD_Fields): bool {.inline.} =
  r.uint8.bitsliced(0 .. 0).bool

proc `RB_UEP5_BUF_MOD=`*(r: var USB_OTG_FS_R8_UEP5_6_MOD_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint8 shl 0).masked(0 .. 0))
  r = tmp.USB_OTG_FS_R8_UEP5_6_MOD_Fields

func RB_UEP5_TX_EN*(r: USB_OTG_FS_R8_UEP5_6_MOD_Fields): bool {.inline.} =
  r.uint8.bitsliced(2 .. 2).bool

proc `RB_UEP5_TX_EN=`*(r: var USB_OTG_FS_R8_UEP5_6_MOD_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint8 shl 2).masked(2 .. 2))
  r = tmp.USB_OTG_FS_R8_UEP5_6_MOD_Fields

func RB_UEP5_RX_EN*(r: USB_OTG_FS_R8_UEP5_6_MOD_Fields): bool {.inline.} =
  r.uint8.bitsliced(3 .. 3).bool

proc `RB_UEP5_RX_EN=`*(r: var USB_OTG_FS_R8_UEP5_6_MOD_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint8 shl 3).masked(3 .. 3))
  r = tmp.USB_OTG_FS_R8_UEP5_6_MOD_Fields

func RB_UEP6_BUF_MOD*(r: USB_OTG_FS_R8_UEP5_6_MOD_Fields): bool {.inline.} =
  r.uint8.bitsliced(4 .. 4).bool

proc `RB_UEP6_BUF_MOD=`*(r: var USB_OTG_FS_R8_UEP5_6_MOD_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint8 shl 4).masked(4 .. 4))
  r = tmp.USB_OTG_FS_R8_UEP5_6_MOD_Fields

func RB_UEP6_TX_EN*(r: USB_OTG_FS_R8_UEP5_6_MOD_Fields): bool {.inline.} =
  r.uint8.bitsliced(6 .. 6).bool

proc `RB_UEP6_TX_EN=`*(r: var USB_OTG_FS_R8_UEP5_6_MOD_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint8 shl 6).masked(6 .. 6))
  r = tmp.USB_OTG_FS_R8_UEP5_6_MOD_Fields

func RB_UEP3_RX_EN*(r: USB_OTG_FS_R8_UEP5_6_MOD_Fields): bool {.inline.} =
  r.uint8.bitsliced(7 .. 7).bool

proc `RB_UEP3_RX_EN=`*(r: var USB_OTG_FS_R8_UEP5_6_MOD_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint8 shl 7).masked(7 .. 7))
  r = tmp.USB_OTG_FS_R8_UEP5_6_MOD_Fields

func RB_UEP7_BUF_MOD*(r: USB_OTG_FS_R8_UEP7_MOD_Fields): bool {.inline.} =
  r.uint8.bitsliced(0 .. 0).bool

proc `RB_UEP7_BUF_MOD=`*(r: var USB_OTG_FS_R8_UEP7_MOD_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint8 shl 0).masked(0 .. 0))
  r = tmp.USB_OTG_FS_R8_UEP7_MOD_Fields

func RB_UEP7_TX_EN*(r: USB_OTG_FS_R8_UEP7_MOD_Fields): bool {.inline.} =
  r.uint8.bitsliced(2 .. 2).bool

proc `RB_UEP7_TX_EN=`*(r: var USB_OTG_FS_R8_UEP7_MOD_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint8 shl 2).masked(2 .. 2))
  r = tmp.USB_OTG_FS_R8_UEP7_MOD_Fields

func RB_UEP7_RX_EN*(r: USB_OTG_FS_R8_UEP7_MOD_Fields): bool {.inline.} =
  r.uint8.bitsliced(3 .. 3).bool

proc `RB_UEP7_RX_EN=`*(r: var USB_OTG_FS_R8_UEP7_MOD_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint8 shl 3).masked(3 .. 3))
  r = tmp.USB_OTG_FS_R8_UEP7_MOD_Fields

func MASK_UEP_T_RES*(r: USB_OTG_FS_R8_UEP0_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_T_RES=`*(r: var USB_OTG_FS_R8_UEP0_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USB_OTG_FS_R8_UEP0_T_CTRL_Fields

func USBHD_UEP_T_TOG*(r: USB_OTG_FS_R8_UEP0_T_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(2 .. 2).bool

proc `USBHD_UEP_T_TOG=`*(r: var USB_OTG_FS_R8_UEP0_T_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint8 shl 2).masked(2 .. 2))
  r = tmp.USB_OTG_FS_R8_UEP0_T_CTRL_Fields

func USBHD_UEP_AUTO_TOG*(r: USB_OTG_FS_R8_UEP0_T_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(3 .. 3).bool

proc `USBHD_UEP_AUTO_TOG=`*(r: var USB_OTG_FS_R8_UEP0_T_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint8 shl 3).masked(3 .. 3))
  r = tmp.USB_OTG_FS_R8_UEP0_T_CTRL_Fields

func MASK_UEP_R_RES*(r: USB_OTG_FS_R8_UEP0_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_R_RES=`*(r: var USB_OTG_FS_R8_UEP0_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USB_OTG_FS_R8_UEP0_R_CTRL_Fields

func USBHD_UEP_R_TOG*(r: USB_OTG_FS_R8_UEP0_R_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(2 .. 2).bool

proc `USBHD_UEP_R_TOG=`*(r: var USB_OTG_FS_R8_UEP0_R_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint8 shl 2).masked(2 .. 2))
  r = tmp.USB_OTG_FS_R8_UEP0_R_CTRL_Fields

func USBHD_UEP_AUTO_TOG*(r: USB_OTG_FS_R8_UEP0_R_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(3 .. 3).bool

proc `USBHD_UEP_AUTO_TOG=`*(r: var USB_OTG_FS_R8_UEP0_R_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint8 shl 3).masked(3 .. 3))
  r = tmp.USB_OTG_FS_R8_UEP0_R_CTRL_Fields

func MASK_UEP_T_RES*(r: USB_OTG_FS_R8_UEP1_T_CTRL_USBHD_UH_SETUP_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_T_RES=`*(r: var USB_OTG_FS_R8_UEP1_T_CTRL_USBHD_UH_SETUP_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USB_OTG_FS_R8_UEP1_T_CTRL_USBHD_UH_SETUP_Fields

func USBHD_UEP_T_TOG*(r: USB_OTG_FS_R8_UEP1_T_CTRL_USBHD_UH_SETUP_Fields): bool {.inline.} =
  r.uint8.bitsliced(2 .. 2).bool

proc `USBHD_UEP_T_TOG=`*(r: var USB_OTG_FS_R8_UEP1_T_CTRL_USBHD_UH_SETUP_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint8 shl 2).masked(2 .. 2))
  r = tmp.USB_OTG_FS_R8_UEP1_T_CTRL_USBHD_UH_SETUP_Fields

func USBHD_UEP_AUTO_TOG*(r: USB_OTG_FS_R8_UEP1_T_CTRL_USBHD_UH_SETUP_Fields): bool {.inline.} =
  r.uint8.bitsliced(3 .. 3).bool

proc `USBHD_UEP_AUTO_TOG=`*(r: var USB_OTG_FS_R8_UEP1_T_CTRL_USBHD_UH_SETUP_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint8 shl 3).masked(3 .. 3))
  r = tmp.USB_OTG_FS_R8_UEP1_T_CTRL_USBHD_UH_SETUP_Fields

func USBHD_UH_SOF_EN*(r: USB_OTG_FS_R8_UEP1_T_CTRL_USBHD_UH_SETUP_Fields): bool {.inline.} =
  r.uint8.bitsliced(6 .. 6).bool

proc `USBHD_UH_SOF_EN=`*(r: var USB_OTG_FS_R8_UEP1_T_CTRL_USBHD_UH_SETUP_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint8 shl 6).masked(6 .. 6))
  r = tmp.USB_OTG_FS_R8_UEP1_T_CTRL_USBHD_UH_SETUP_Fields

func USBHD_UH_PRE_PID_EN*(r: USB_OTG_FS_R8_UEP1_T_CTRL_USBHD_UH_SETUP_Fields): bool {.inline.} =
  r.uint8.bitsliced(7 .. 7).bool

proc `USBHD_UH_PRE_PID_EN=`*(r: var USB_OTG_FS_R8_UEP1_T_CTRL_USBHD_UH_SETUP_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint8 shl 7).masked(7 .. 7))
  r = tmp.USB_OTG_FS_R8_UEP1_T_CTRL_USBHD_UH_SETUP_Fields

func MASK_UEP_R_RES*(r: USB_OTG_FS_R8_UEP1_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_R_RES=`*(r: var USB_OTG_FS_R8_UEP1_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USB_OTG_FS_R8_UEP1_R_CTRL_Fields

func USBHD_UEP_R_TOG*(r: USB_OTG_FS_R8_UEP1_R_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(2 .. 2).bool

proc `USBHD_UEP_R_TOG=`*(r: var USB_OTG_FS_R8_UEP1_R_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint8 shl 2).masked(2 .. 2))
  r = tmp.USB_OTG_FS_R8_UEP1_R_CTRL_Fields

func USBHD_UEP_AUTO_TOG*(r: USB_OTG_FS_R8_UEP1_R_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(3 .. 3).bool

proc `USBHD_UEP_AUTO_TOG=`*(r: var USB_OTG_FS_R8_UEP1_R_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint8 shl 3).masked(3 .. 3))
  r = tmp.USB_OTG_FS_R8_UEP1_R_CTRL_Fields

func USBHD_UH_ENDP_MASK*(r: USB_OTG_FS_R8_UEP2_T_LEN_USBHD_UH_EP_PID_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 3)

proc `USBHD_UH_ENDP_MASK=`*(r: var USB_OTG_FS_R8_UEP2_T_LEN_USBHD_UH_EP_PID_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.USB_OTG_FS_R8_UEP2_T_LEN_USBHD_UH_EP_PID_Fields

func USBHD_UH_TOKEN_MASK*(r: USB_OTG_FS_R8_UEP2_T_LEN_USBHD_UH_EP_PID_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(4 .. 7)

proc `USBHD_UH_TOKEN_MASK=`*(r: var USB_OTG_FS_R8_UEP2_T_LEN_USBHD_UH_EP_PID_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.USB_OTG_FS_R8_UEP2_T_LEN_USBHD_UH_EP_PID_Fields

func MASK_UEP_T_RES*(r: USB_OTG_FS_R8_UEP2_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_T_RES=`*(r: var USB_OTG_FS_R8_UEP2_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USB_OTG_FS_R8_UEP2_T_CTRL_Fields

func USBHD_UEP_T_TOG*(r: USB_OTG_FS_R8_UEP2_T_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(2 .. 2).bool

proc `USBHD_UEP_T_TOG=`*(r: var USB_OTG_FS_R8_UEP2_T_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint8 shl 2).masked(2 .. 2))
  r = tmp.USB_OTG_FS_R8_UEP2_T_CTRL_Fields

func USBHD_UEP_AUTO_TOG*(r: USB_OTG_FS_R8_UEP2_T_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(3 .. 3).bool

proc `USBHD_UEP_AUTO_TOG=`*(r: var USB_OTG_FS_R8_UEP2_T_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint8 shl 3).masked(3 .. 3))
  r = tmp.USB_OTG_FS_R8_UEP2_T_CTRL_Fields

func MASK_UEP_R_RES_USBHD_UH_R_RES*(r: USB_OTG_FS_R8_UEP2_R_CTRL_USBHD_UH_RX_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_R_RES_USBHD_UH_R_RES=`*(r: var USB_OTG_FS_R8_UEP2_R_CTRL_USBHD_UH_RX_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USB_OTG_FS_R8_UEP2_R_CTRL_USBHD_UH_RX_CTRL_Fields

func USBHD_UEP_R_TOG_USBHD_UH_R_TOG*(r: USB_OTG_FS_R8_UEP2_R_CTRL_USBHD_UH_RX_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(2 .. 2).bool

proc `USBHD_UEP_R_TOG_USBHD_UH_R_TOG=`*(r: var USB_OTG_FS_R8_UEP2_R_CTRL_USBHD_UH_RX_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint8 shl 2).masked(2 .. 2))
  r = tmp.USB_OTG_FS_R8_UEP2_R_CTRL_USBHD_UH_RX_CTRL_Fields

func USBHD_UEP_AUTO_TOG_USBHD_UH_R_AUTO_TOG*(r: USB_OTG_FS_R8_UEP2_R_CTRL_USBHD_UH_RX_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(3 .. 3).bool

proc `USBHD_UEP_AUTO_TOG_USBHD_UH_R_AUTO_TOG=`*(r: var USB_OTG_FS_R8_UEP2_R_CTRL_USBHD_UH_RX_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint8 shl 3).masked(3 .. 3))
  r = tmp.USB_OTG_FS_R8_UEP2_R_CTRL_USBHD_UH_RX_CTRL_Fields

func MASK_UEP_T_RES_USBHD_UH_T_RES*(r: USB_OTG_FS_R8_UEP3_T_CTRL_USBHD_UH_TX_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_T_RES_USBHD_UH_T_RES=`*(r: var USB_OTG_FS_R8_UEP3_T_CTRL_USBHD_UH_TX_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USB_OTG_FS_R8_UEP3_T_CTRL_USBHD_UH_TX_CTRL_Fields

func USBHD_UEP_T_TOG_USBHD_UH_T_TOG*(r: USB_OTG_FS_R8_UEP3_T_CTRL_USBHD_UH_TX_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(2 .. 2).bool

proc `USBHD_UEP_T_TOG_USBHD_UH_T_TOG=`*(r: var USB_OTG_FS_R8_UEP3_T_CTRL_USBHD_UH_TX_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint8 shl 2).masked(2 .. 2))
  r = tmp.USB_OTG_FS_R8_UEP3_T_CTRL_USBHD_UH_TX_CTRL_Fields

func USBHD_UEP_AUTO_TOG_USBHD_UH_T_AUTO_TOG*(r: USB_OTG_FS_R8_UEP3_T_CTRL_USBHD_UH_TX_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(3 .. 3).bool

proc `USBHD_UEP_AUTO_TOG_USBHD_UH_T_AUTO_TOG=`*(r: var USB_OTG_FS_R8_UEP3_T_CTRL_USBHD_UH_TX_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint8 shl 3).masked(3 .. 3))
  r = tmp.USB_OTG_FS_R8_UEP3_T_CTRL_USBHD_UH_TX_CTRL_Fields

func MASK_UEP_R_RES*(r: USB_OTG_FS_R8_UEP3_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_R_RES=`*(r: var USB_OTG_FS_R8_UEP3_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USB_OTG_FS_R8_UEP3_R_CTRL_Fields

func USBHD_UEP_R_TOG*(r: USB_OTG_FS_R8_UEP3_R_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(2 .. 2).bool

proc `USBHD_UEP_R_TOG=`*(r: var USB_OTG_FS_R8_UEP3_R_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint8 shl 2).masked(2 .. 2))
  r = tmp.USB_OTG_FS_R8_UEP3_R_CTRL_Fields

func USBHD_UEP_AUTO_TOG*(r: USB_OTG_FS_R8_UEP3_R_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(3 .. 3).bool

proc `USBHD_UEP_AUTO_TOG=`*(r: var USB_OTG_FS_R8_UEP3_R_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint8 shl 3).masked(3 .. 3))
  r = tmp.USB_OTG_FS_R8_UEP3_R_CTRL_Fields

func MASK_UEP_T_RES*(r: USB_OTG_FS_R8_UEP4_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_T_RES=`*(r: var USB_OTG_FS_R8_UEP4_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USB_OTG_FS_R8_UEP4_T_CTRL_Fields

func USBHD_UEP_T_TOG_USBHD_UH_T_TOG*(r: USB_OTG_FS_R8_UEP4_T_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(2 .. 2).bool

proc `USBHD_UEP_T_TOG_USBHD_UH_T_TOG=`*(r: var USB_OTG_FS_R8_UEP4_T_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint8 shl 2).masked(2 .. 2))
  r = tmp.USB_OTG_FS_R8_UEP4_T_CTRL_Fields

func USBHD_UEP_AUTO_TOG_USBHD_UH_T_AUTO_TOG*(r: USB_OTG_FS_R8_UEP4_T_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(3 .. 3).bool

proc `USBHD_UEP_AUTO_TOG_USBHD_UH_T_AUTO_TOG=`*(r: var USB_OTG_FS_R8_UEP4_T_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint8 shl 3).masked(3 .. 3))
  r = tmp.USB_OTG_FS_R8_UEP4_T_CTRL_Fields

func MASK_UEP_R_RES*(r: USB_OTG_FS_R8_UEP4_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_R_RES=`*(r: var USB_OTG_FS_R8_UEP4_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USB_OTG_FS_R8_UEP4_R_CTRL_Fields

func USBHD_UEP_R_TOG*(r: USB_OTG_FS_R8_UEP4_R_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(2 .. 2).bool

proc `USBHD_UEP_R_TOG=`*(r: var USB_OTG_FS_R8_UEP4_R_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint8 shl 2).masked(2 .. 2))
  r = tmp.USB_OTG_FS_R8_UEP4_R_CTRL_Fields

func USBHD_UEP_AUTO_TOG*(r: USB_OTG_FS_R8_UEP4_R_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(3 .. 3).bool

proc `USBHD_UEP_AUTO_TOG=`*(r: var USB_OTG_FS_R8_UEP4_R_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint8 shl 3).masked(3 .. 3))
  r = tmp.USB_OTG_FS_R8_UEP4_R_CTRL_Fields

func MASK_UEP_T_RES*(r: USB_OTG_FS_R8_UEP5_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_T_RES=`*(r: var USB_OTG_FS_R8_UEP5_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USB_OTG_FS_R8_UEP5_T_CTRL_Fields

func USBHD_UEP_T_TOG_USBHD_UH_T_TOG*(r: USB_OTG_FS_R8_UEP5_T_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(2 .. 2).bool

proc `USBHD_UEP_T_TOG_USBHD_UH_T_TOG=`*(r: var USB_OTG_FS_R8_UEP5_T_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint8 shl 2).masked(2 .. 2))
  r = tmp.USB_OTG_FS_R8_UEP5_T_CTRL_Fields

func USBHD_UEP_AUTO_TOG_USBHD_UH_T_AUTO_TOG*(r: USB_OTG_FS_R8_UEP5_T_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(3 .. 3).bool

proc `USBHD_UEP_AUTO_TOG_USBHD_UH_T_AUTO_TOG=`*(r: var USB_OTG_FS_R8_UEP5_T_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint8 shl 3).masked(3 .. 3))
  r = tmp.USB_OTG_FS_R8_UEP5_T_CTRL_Fields

func MASK_UEP_R_RES*(r: USB_OTG_FS_R8_UEP5_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_R_RES=`*(r: var USB_OTG_FS_R8_UEP5_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USB_OTG_FS_R8_UEP5_R_CTRL_Fields

func USBHD_UEP_R_TOG*(r: USB_OTG_FS_R8_UEP5_R_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(2 .. 2).bool

proc `USBHD_UEP_R_TOG=`*(r: var USB_OTG_FS_R8_UEP5_R_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint8 shl 2).masked(2 .. 2))
  r = tmp.USB_OTG_FS_R8_UEP5_R_CTRL_Fields

func USBHD_UEP_AUTO_TOG*(r: USB_OTG_FS_R8_UEP5_R_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(3 .. 3).bool

proc `USBHD_UEP_AUTO_TOG=`*(r: var USB_OTG_FS_R8_UEP5_R_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint8 shl 3).masked(3 .. 3))
  r = tmp.USB_OTG_FS_R8_UEP5_R_CTRL_Fields

func MASK_UEP_T_RES*(r: USB_OTG_FS_R8_UEP6_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_T_RES=`*(r: var USB_OTG_FS_R8_UEP6_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USB_OTG_FS_R8_UEP6_T_CTRL_Fields

func USBHD_UEP_T_TOG_USBHD_UH_T_TOG*(r: USB_OTG_FS_R8_UEP6_T_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(2 .. 2).bool

proc `USBHD_UEP_T_TOG_USBHD_UH_T_TOG=`*(r: var USB_OTG_FS_R8_UEP6_T_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint8 shl 2).masked(2 .. 2))
  r = tmp.USB_OTG_FS_R8_UEP6_T_CTRL_Fields

func USBHD_UEP_AUTO_TOG_USBHD_UH_T_AUTO_TOG*(r: USB_OTG_FS_R8_UEP6_T_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(3 .. 3).bool

proc `USBHD_UEP_AUTO_TOG_USBHD_UH_T_AUTO_TOG=`*(r: var USB_OTG_FS_R8_UEP6_T_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint8 shl 3).masked(3 .. 3))
  r = tmp.USB_OTG_FS_R8_UEP6_T_CTRL_Fields

func MASK_UEP_R_RES*(r: USB_OTG_FS_R8_UEP6_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_R_RES=`*(r: var USB_OTG_FS_R8_UEP6_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USB_OTG_FS_R8_UEP6_R_CTRL_Fields

func USBHD_UEP_R_TOG*(r: USB_OTG_FS_R8_UEP6_R_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(2 .. 2).bool

proc `USBHD_UEP_R_TOG=`*(r: var USB_OTG_FS_R8_UEP6_R_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint8 shl 2).masked(2 .. 2))
  r = tmp.USB_OTG_FS_R8_UEP6_R_CTRL_Fields

func USBHD_UEP_AUTO_TOG*(r: USB_OTG_FS_R8_UEP6_R_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(3 .. 3).bool

proc `USBHD_UEP_AUTO_TOG=`*(r: var USB_OTG_FS_R8_UEP6_R_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint8 shl 3).masked(3 .. 3))
  r = tmp.USB_OTG_FS_R8_UEP6_R_CTRL_Fields

func MASK_UEP_T_RES*(r: USB_OTG_FS_R8_UEP7_T_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_T_RES=`*(r: var USB_OTG_FS_R8_UEP7_T_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USB_OTG_FS_R8_UEP7_T_CTRL_Fields

func USBHD_UEP_T_TOG_USBHD_UH_T_TOG*(r: USB_OTG_FS_R8_UEP7_T_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(2 .. 2).bool

proc `USBHD_UEP_T_TOG_USBHD_UH_T_TOG=`*(r: var USB_OTG_FS_R8_UEP7_T_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint8 shl 2).masked(2 .. 2))
  r = tmp.USB_OTG_FS_R8_UEP7_T_CTRL_Fields

func USBHD_UEP_AUTO_TOG_USBHD_UH_T_AUTO_TOG*(r: USB_OTG_FS_R8_UEP7_T_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(3 .. 3).bool

proc `USBHD_UEP_AUTO_TOG_USBHD_UH_T_AUTO_TOG=`*(r: var USB_OTG_FS_R8_UEP7_T_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint8 shl 3).masked(3 .. 3))
  r = tmp.USB_OTG_FS_R8_UEP7_T_CTRL_Fields

func MASK_UEP_R_RES*(r: USB_OTG_FS_R8_UEP7_R_CTRL_Fields): uint8 {.inline.} =
  r.uint8.bitsliced(0 .. 1)

proc `MASK_UEP_R_RES=`*(r: var USB_OTG_FS_R8_UEP7_R_CTRL_Fields, val: uint8) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.USB_OTG_FS_R8_UEP7_R_CTRL_Fields

func USBHD_UEP_R_TOG*(r: USB_OTG_FS_R8_UEP7_R_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(2 .. 2).bool

proc `USBHD_UEP_R_TOG=`*(r: var USB_OTG_FS_R8_UEP7_R_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint8 shl 2).masked(2 .. 2))
  r = tmp.USB_OTG_FS_R8_UEP7_R_CTRL_Fields

func USBHD_UEP_AUTO_TOG*(r: USB_OTG_FS_R8_UEP7_R_CTRL_Fields): bool {.inline.} =
  r.uint8.bitsliced(3 .. 3).bool

proc `USBHD_UEP_AUTO_TOG=`*(r: var USB_OTG_FS_R8_UEP7_R_CTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint8
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint8 shl 3).masked(3 .. 3))
  r = tmp.USB_OTG_FS_R8_UEP7_R_CTRL_Fields

func USB_OTG_CR_DISCHARGEVBUS*(r: USB_OTG_FS_USB_OTG_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `USB_OTG_CR_DISCHARGEVBUS=`*(r: var USB_OTG_FS_USB_OTG_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.USB_OTG_FS_USB_OTG_CR_Fields

func USB_OTG_CR_CHARGEVBUS*(r: USB_OTG_FS_USB_OTG_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `USB_OTG_CR_CHARGEVBUS=`*(r: var USB_OTG_FS_USB_OTG_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.USB_OTG_FS_USB_OTG_CR_Fields

func USB_OTG_CR_IDPU*(r: USB_OTG_FS_USB_OTG_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `USB_OTG_CR_IDPU=`*(r: var USB_OTG_FS_USB_OTG_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.USB_OTG_FS_USB_OTG_CR_Fields

func USB_OTG_CR_OTG_EN*(r: USB_OTG_FS_USB_OTG_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `USB_OTG_CR_OTG_EN=`*(r: var USB_OTG_FS_USB_OTG_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.USB_OTG_FS_USB_OTG_CR_Fields

func USB_OTG_CR_VBUS*(r: USB_OTG_FS_USB_OTG_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `USB_OTG_CR_VBUS=`*(r: var USB_OTG_FS_USB_OTG_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.USB_OTG_FS_USB_OTG_CR_Fields

func USB_OTG_CR_SESS*(r: USB_OTG_FS_USB_OTG_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `USB_OTG_CR_SESS=`*(r: var USB_OTG_FS_USB_OTG_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.USB_OTG_FS_USB_OTG_CR_Fields

func USB_OTG_SR_VBUS_VLD*(r: USB_OTG_FS_USB_OTG_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `USB_OTG_SR_VBUS_VLD=`*(r: var USB_OTG_FS_USB_OTG_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.USB_OTG_FS_USB_OTG_SR_Fields

func USB_OTG_SR_SESS_VLD*(r: USB_OTG_FS_USB_OTG_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `USB_OTG_SR_SESS_VLD=`*(r: var USB_OTG_FS_USB_OTG_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.USB_OTG_FS_USB_OTG_SR_Fields

func USB_OTG_SR_SESS_END*(r: USB_OTG_FS_USB_OTG_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `USB_OTG_SR_SESS_END=`*(r: var USB_OTG_FS_USB_OTG_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.USB_OTG_FS_USB_OTG_SR_Fields

func USB_OTG_SR_ID_DIG*(r: USB_OTG_FS_USB_OTG_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `USB_OTG_SR_ID_DIG=`*(r: var USB_OTG_FS_USB_OTG_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.USB_OTG_FS_USB_OTG_SR_Fields

type
  PFIC_ISR1_Fields* = distinct uint32
  PFIC_ISR4_Fields* = distinct uint32
  PFIC_IPR1_Fields* = distinct uint32
  PFIC_IPR4_Fields* = distinct uint32
  PFIC_ITHRESDR_Fields* = distinct uint32
  PFIC_CFGR_Fields* = distinct uint32
  PFIC_GISR_Fields* = distinct uint32
  PFIC_VTFIDR_Fields* = distinct uint32
  PFIC_VTFADDRR0_Fields* = distinct uint32
  PFIC_VTFADDRR1_Fields* = distinct uint32
  PFIC_VTFADDRR2_Fields* = distinct uint32
  PFIC_VTFADDRR3_Fields* = distinct uint32
  PFIC_IENR1_Fields* = distinct uint32
  PFIC_IENR4_Fields* = distinct uint32
  PFIC_IRER1_Fields* = distinct uint32
  PFIC_IRER4_Fields* = distinct uint32
  PFIC_IPSR1_Fields* = distinct uint32
  PFIC_IPSR4_Fields* = distinct uint32
  PFIC_IPRR1_Fields* = distinct uint32
  PFIC_IPRR4_Fields* = distinct uint32
  PFIC_IACTR1_Fields* = distinct uint32
  PFIC_IACTR4_Fields* = distinct uint32
  PFIC_SCTLR_Fields* = distinct uint32
  PFIC_STK_CTLR_Fields* = distinct uint32
  PFIC_STK_SR_Fields* = distinct uint32

proc read*(reg: PFIC_ISR1_Type): PFIC_ISR1_Fields {.inline.} =
  volatileLoad(cast[ptr PFIC_ISR1_Fields](reg.loc))

proc read*(reg: static PFIC_ISR1_Type): PFIC_ISR1_Fields {.inline.} =
  volatileLoad(cast[ptr PFIC_ISR1_Fields](reg.loc))

proc read*(reg: PFIC_ISR2_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static PFIC_ISR2_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: PFIC_ISR3_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static PFIC_ISR3_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: PFIC_ISR4_Type): PFIC_ISR4_Fields {.inline.} =
  volatileLoad(cast[ptr PFIC_ISR4_Fields](reg.loc))

proc read*(reg: static PFIC_ISR4_Type): PFIC_ISR4_Fields {.inline.} =
  volatileLoad(cast[ptr PFIC_ISR4_Fields](reg.loc))

proc read*(reg: PFIC_IPR1_Type): PFIC_IPR1_Fields {.inline.} =
  volatileLoad(cast[ptr PFIC_IPR1_Fields](reg.loc))

proc read*(reg: static PFIC_IPR1_Type): PFIC_IPR1_Fields {.inline.} =
  volatileLoad(cast[ptr PFIC_IPR1_Fields](reg.loc))

proc read*(reg: PFIC_IPR2_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static PFIC_IPR2_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: PFIC_IPR3_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static PFIC_IPR3_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: PFIC_IPR4_Type): PFIC_IPR4_Fields {.inline.} =
  volatileLoad(cast[ptr PFIC_IPR4_Fields](reg.loc))

proc read*(reg: static PFIC_IPR4_Type): PFIC_IPR4_Fields {.inline.} =
  volatileLoad(cast[ptr PFIC_IPR4_Fields](reg.loc))

proc read*(reg: PFIC_ITHRESDR_Type): PFIC_ITHRESDR_Fields {.inline.} =
  volatileLoad(cast[ptr PFIC_ITHRESDR_Fields](reg.loc))

proc read*(reg: static PFIC_ITHRESDR_Type): PFIC_ITHRESDR_Fields {.inline.} =
  volatileLoad(cast[ptr PFIC_ITHRESDR_Fields](reg.loc))

proc write*(reg: PFIC_ITHRESDR_Type, val: PFIC_ITHRESDR_Fields) {.inline.} =
  volatileStore(cast[ptr PFIC_ITHRESDR_Fields](reg.loc), val)

proc write*(reg: PFIC_ITHRESDR_Type, THRESHOLD: uint32 = 0) =
  var x: uint32
  x.setMask((THRESHOLD shl 0).masked(0 .. 7))
  reg.write x.PFIC_ITHRESDR_Fields

template modifyIt*(reg: PFIC_ITHRESDR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_CFGR_Type): PFIC_CFGR_Fields {.inline.} =
  volatileLoad(cast[ptr PFIC_CFGR_Fields](reg.loc))

proc read*(reg: static PFIC_CFGR_Type): PFIC_CFGR_Fields {.inline.} =
  volatileLoad(cast[ptr PFIC_CFGR_Fields](reg.loc))

proc write*(reg: PFIC_CFGR_Type, val: PFIC_CFGR_Fields) {.inline.} =
  volatileStore(cast[ptr PFIC_CFGR_Fields](reg.loc), val)

proc write*(reg: PFIC_CFGR_Type, RESETSYS: bool = false, KEYCODE: uint32 = 0) =
  var x: uint32
  x.setMask((RESETSYS.uint32 shl 7).masked(7 .. 7))
  x.setMask((KEYCODE shl 16).masked(16 .. 31))
  reg.write x.PFIC_CFGR_Fields

template modifyIt*(reg: PFIC_CFGR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_GISR_Type): PFIC_GISR_Fields {.inline.} =
  volatileLoad(cast[ptr PFIC_GISR_Fields](reg.loc))

proc read*(reg: static PFIC_GISR_Type): PFIC_GISR_Fields {.inline.} =
  volatileLoad(cast[ptr PFIC_GISR_Fields](reg.loc))

proc read*(reg: PFIC_VTFIDR_Type): PFIC_VTFIDR_Fields {.inline.} =
  volatileLoad(cast[ptr PFIC_VTFIDR_Fields](reg.loc))

proc read*(reg: static PFIC_VTFIDR_Type): PFIC_VTFIDR_Fields {.inline.} =
  volatileLoad(cast[ptr PFIC_VTFIDR_Fields](reg.loc))

proc write*(reg: PFIC_VTFIDR_Type, val: PFIC_VTFIDR_Fields) {.inline.} =
  volatileStore(cast[ptr PFIC_VTFIDR_Fields](reg.loc), val)

proc write*(reg: PFIC_VTFIDR_Type, VTFID0: uint32 = 0, VTFID1: uint32 = 0, VTFID2: uint32 = 0, VTFID3: uint32 = 0) =
  var x: uint32
  x.setMask((VTFID0 shl 0).masked(0 .. 7))
  x.setMask((VTFID1 shl 8).masked(8 .. 15))
  x.setMask((VTFID2 shl 16).masked(16 .. 23))
  x.setMask((VTFID3 shl 24).masked(24 .. 31))
  reg.write x.PFIC_VTFIDR_Fields

template modifyIt*(reg: PFIC_VTFIDR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_VTFADDRR0_Type): PFIC_VTFADDRR0_Fields {.inline.} =
  volatileLoad(cast[ptr PFIC_VTFADDRR0_Fields](reg.loc))

proc read*(reg: static PFIC_VTFADDRR0_Type): PFIC_VTFADDRR0_Fields {.inline.} =
  volatileLoad(cast[ptr PFIC_VTFADDRR0_Fields](reg.loc))

proc write*(reg: PFIC_VTFADDRR0_Type, val: PFIC_VTFADDRR0_Fields) {.inline.} =
  volatileStore(cast[ptr PFIC_VTFADDRR0_Fields](reg.loc), val)

proc write*(reg: PFIC_VTFADDRR0_Type, VTF0EN: bool = false, ADDR0: uint32 = 0) =
  var x: uint32
  x.setMask((VTF0EN.uint32 shl 0).masked(0 .. 0))
  x.setMask((ADDR0 shl 1).masked(1 .. 31))
  reg.write x.PFIC_VTFADDRR0_Fields

template modifyIt*(reg: PFIC_VTFADDRR0_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_VTFADDRR1_Type): PFIC_VTFADDRR1_Fields {.inline.} =
  volatileLoad(cast[ptr PFIC_VTFADDRR1_Fields](reg.loc))

proc read*(reg: static PFIC_VTFADDRR1_Type): PFIC_VTFADDRR1_Fields {.inline.} =
  volatileLoad(cast[ptr PFIC_VTFADDRR1_Fields](reg.loc))

proc write*(reg: PFIC_VTFADDRR1_Type, val: PFIC_VTFADDRR1_Fields) {.inline.} =
  volatileStore(cast[ptr PFIC_VTFADDRR1_Fields](reg.loc), val)

proc write*(reg: PFIC_VTFADDRR1_Type, VTF1EN: bool = false, ADDR1: uint32 = 0) =
  var x: uint32
  x.setMask((VTF1EN.uint32 shl 0).masked(0 .. 0))
  x.setMask((ADDR1 shl 1).masked(1 .. 31))
  reg.write x.PFIC_VTFADDRR1_Fields

template modifyIt*(reg: PFIC_VTFADDRR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_VTFADDRR2_Type): PFIC_VTFADDRR2_Fields {.inline.} =
  volatileLoad(cast[ptr PFIC_VTFADDRR2_Fields](reg.loc))

proc read*(reg: static PFIC_VTFADDRR2_Type): PFIC_VTFADDRR2_Fields {.inline.} =
  volatileLoad(cast[ptr PFIC_VTFADDRR2_Fields](reg.loc))

proc write*(reg: PFIC_VTFADDRR2_Type, val: PFIC_VTFADDRR2_Fields) {.inline.} =
  volatileStore(cast[ptr PFIC_VTFADDRR2_Fields](reg.loc), val)

proc write*(reg: PFIC_VTFADDRR2_Type, VTF2EN: bool = false, ADDR2: uint32 = 0) =
  var x: uint32
  x.setMask((VTF2EN.uint32 shl 0).masked(0 .. 0))
  x.setMask((ADDR2 shl 1).masked(1 .. 31))
  reg.write x.PFIC_VTFADDRR2_Fields

template modifyIt*(reg: PFIC_VTFADDRR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_VTFADDRR3_Type): PFIC_VTFADDRR3_Fields {.inline.} =
  volatileLoad(cast[ptr PFIC_VTFADDRR3_Fields](reg.loc))

proc read*(reg: static PFIC_VTFADDRR3_Type): PFIC_VTFADDRR3_Fields {.inline.} =
  volatileLoad(cast[ptr PFIC_VTFADDRR3_Fields](reg.loc))

proc write*(reg: PFIC_VTFADDRR3_Type, val: PFIC_VTFADDRR3_Fields) {.inline.} =
  volatileStore(cast[ptr PFIC_VTFADDRR3_Fields](reg.loc), val)

proc write*(reg: PFIC_VTFADDRR3_Type, VTF3EN: bool = false, ADDR3: uint32 = 0) =
  var x: uint32
  x.setMask((VTF3EN.uint32 shl 0).masked(0 .. 0))
  x.setMask((ADDR3 shl 1).masked(1 .. 31))
  reg.write x.PFIC_VTFADDRR3_Fields

template modifyIt*(reg: PFIC_VTFADDRR3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc write*(reg: PFIC_IENR1_Type, val: PFIC_IENR1_Fields) {.inline.} =
  volatileStore(cast[ptr PFIC_IENR1_Fields](reg.loc), val)

proc write*(reg: PFIC_IENR1_Type, INTEN: uint32 = 0) =
  var x: uint32
  x.setMask((INTEN shl 12).masked(12 .. 31))
  reg.write x.PFIC_IENR1_Fields

proc write*(reg: PFIC_IENR2_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

proc write*(reg: PFIC_IENR3_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

proc write*(reg: PFIC_IENR4_Type, val: PFIC_IENR4_Fields) {.inline.} =
  volatileStore(cast[ptr PFIC_IENR4_Fields](reg.loc), val)

proc write*(reg: PFIC_IENR4_Type, INTEN: uint32 = 0) =
  var x: uint32
  x.setMask((INTEN shl 0).masked(0 .. 7))
  reg.write x.PFIC_IENR4_Fields

proc write*(reg: PFIC_IRER1_Type, val: PFIC_IRER1_Fields) {.inline.} =
  volatileStore(cast[ptr PFIC_IRER1_Fields](reg.loc), val)

proc write*(reg: PFIC_IRER1_Type, INTRSET: uint32 = 0) =
  var x: uint32
  x.setMask((INTRSET shl 12).masked(12 .. 31))
  reg.write x.PFIC_IRER1_Fields

proc write*(reg: PFIC_IRER2_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

proc write*(reg: PFIC_IRER3_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

proc write*(reg: PFIC_IRER4_Type, val: PFIC_IRER4_Fields) {.inline.} =
  volatileStore(cast[ptr PFIC_IRER4_Fields](reg.loc), val)

proc write*(reg: PFIC_IRER4_Type, INTRSET: uint32 = 0) =
  var x: uint32
  x.setMask((INTRSET shl 0).masked(0 .. 7))
  reg.write x.PFIC_IRER4_Fields

proc write*(reg: PFIC_IPSR1_Type, val: PFIC_IPSR1_Fields) {.inline.} =
  volatileStore(cast[ptr PFIC_IPSR1_Fields](reg.loc), val)

proc write*(reg: PFIC_IPSR1_Type, PENDSET2_3: uint32 = 0, PENDSET12_31: uint32 = 0) =
  var x: uint32
  x.setMask((PENDSET2_3 shl 2).masked(2 .. 3))
  x.setMask((PENDSET12_31 shl 12).masked(12 .. 31))
  reg.write x.PFIC_IPSR1_Fields

proc write*(reg: PFIC_IPSR2_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

proc write*(reg: PFIC_IPSR3_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

proc write*(reg: PFIC_IPSR4_Type, val: PFIC_IPSR4_Fields) {.inline.} =
  volatileStore(cast[ptr PFIC_IPSR4_Fields](reg.loc), val)

proc write*(reg: PFIC_IPSR4_Type, PENDSET: uint32 = 0) =
  var x: uint32
  x.setMask((PENDSET shl 0).masked(0 .. 7))
  reg.write x.PFIC_IPSR4_Fields

proc write*(reg: PFIC_IPRR1_Type, val: PFIC_IPRR1_Fields) {.inline.} =
  volatileStore(cast[ptr PFIC_IPRR1_Fields](reg.loc), val)

proc write*(reg: PFIC_IPRR1_Type, PENDRESET2_3: uint32 = 0, PENDRESET12_31: uint32 = 0) =
  var x: uint32
  x.setMask((PENDRESET2_3 shl 2).masked(2 .. 3))
  x.setMask((PENDRESET12_31 shl 12).masked(12 .. 31))
  reg.write x.PFIC_IPRR1_Fields

proc write*(reg: PFIC_IPRR2_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

proc write*(reg: PFIC_IPRR3_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

proc write*(reg: PFIC_IPRR4_Type, val: PFIC_IPRR4_Fields) {.inline.} =
  volatileStore(cast[ptr PFIC_IPRR4_Fields](reg.loc), val)

proc write*(reg: PFIC_IPRR4_Type, PENDRESET: uint32 = 0) =
  var x: uint32
  x.setMask((PENDRESET shl 0).masked(0 .. 7))
  reg.write x.PFIC_IPRR4_Fields

proc write*(reg: PFIC_IACTR1_Type, val: PFIC_IACTR1_Fields) {.inline.} =
  volatileStore(cast[ptr PFIC_IACTR1_Fields](reg.loc), val)

proc write*(reg: PFIC_IACTR1_Type, IACTS2_3: uint32 = 0, IACTS12_31: uint32 = 0) =
  var x: uint32
  x.setMask((IACTS2_3 shl 2).masked(2 .. 3))
  x.setMask((IACTS12_31 shl 12).masked(12 .. 31))
  reg.write x.PFIC_IACTR1_Fields

proc write*(reg: PFIC_IACTR2_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

proc write*(reg: PFIC_IACTR3_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

proc write*(reg: PFIC_IACTR4_Type, val: PFIC_IACTR4_Fields) {.inline.} =
  volatileStore(cast[ptr PFIC_IACTR4_Fields](reg.loc), val)

proc write*(reg: PFIC_IACTR4_Type, IACTS: uint32 = 0) =
  var x: uint32
  x.setMask((IACTS shl 0).masked(0 .. 7))
  reg.write x.PFIC_IACTR4_Fields

proc read*(reg: PFIC_IPRIOR0_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR0_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR0_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR0_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR1_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR1_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR1_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR2_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR2_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR2_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR3_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR3_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR3_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR4_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR4_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR4_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR5_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR5_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR5_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR5_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR6_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR6_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR6_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR6_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR7_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR7_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR7_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR7_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR8_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR8_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR8_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR8_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR9_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR9_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR9_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR9_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR10_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR10_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR10_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR10_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR11_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR11_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR11_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR11_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR12_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR12_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR12_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR12_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR13_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR13_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR13_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR13_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR14_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR14_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR14_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR14_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR15_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR15_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR15_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR15_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR16_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR16_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR16_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR16_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR17_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR17_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR17_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR17_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR18_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR18_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR18_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR18_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR19_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR19_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR19_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR19_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR20_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR20_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR20_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR20_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR21_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR21_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR21_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR21_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR22_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR22_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR22_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR22_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR23_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR23_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR23_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR23_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR24_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR24_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR24_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR24_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR25_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR25_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR25_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR25_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR26_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR26_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR26_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR26_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR27_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR27_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR27_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR27_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR28_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR28_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR28_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR28_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR29_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR29_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR29_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR29_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR30_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR30_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR30_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR30_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR31_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR31_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR31_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR31_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR32_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR32_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR32_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR32_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR33_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR33_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR33_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR33_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR34_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR34_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR34_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR34_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR35_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR35_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR35_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR35_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR36_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR36_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR36_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR36_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR37_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR37_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR37_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR37_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR38_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR38_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR38_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR38_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR39_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR39_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR39_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR39_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR40_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR40_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR40_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR40_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR41_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR41_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR41_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR41_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR42_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR42_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR42_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR42_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR43_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR43_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR43_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR43_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR44_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR44_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR44_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR44_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR45_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR45_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR45_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR45_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR46_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR46_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR46_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR46_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR47_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR47_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR47_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR47_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR48_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR48_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR48_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR48_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR49_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR49_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR49_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR49_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR50_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR50_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR50_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR50_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR51_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR51_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR51_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR51_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR52_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR52_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR52_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR52_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR53_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR53_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR53_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR53_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR54_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR54_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR54_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR54_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR55_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR55_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR55_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR55_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR56_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR56_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR56_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR56_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR57_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR57_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR57_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR57_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR58_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR58_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR58_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR58_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR59_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR59_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR59_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR59_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR60_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR60_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR60_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR60_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR61_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR61_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR61_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR61_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR62_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR62_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR62_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR62_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR63_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR63_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR63_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR63_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR64_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR64_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR64_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR64_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR65_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR65_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR65_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR65_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR66_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR66_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR66_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR66_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR67_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR67_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR67_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR67_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR68_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR68_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR68_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR68_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR69_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR69_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR69_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR69_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR70_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR70_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR70_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR70_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR71_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR71_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR71_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR71_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR72_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR72_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR72_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR72_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR73_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR73_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR73_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR73_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR74_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR74_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR74_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR74_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR75_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR75_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR75_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR75_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR76_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR76_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR76_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR76_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR77_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR77_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR77_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR77_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR78_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR78_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR78_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR78_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR79_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR79_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR79_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR79_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR80_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR80_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR80_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR80_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR81_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR81_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR81_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR81_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR82_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR82_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR82_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR82_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR83_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR83_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR83_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR83_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR84_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR84_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR84_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR84_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR85_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR85_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR85_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR85_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR86_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR86_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR86_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR86_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR87_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR87_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR87_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR87_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR88_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR88_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR88_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR88_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR89_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR89_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR89_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR89_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR90_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR90_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR90_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR90_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR91_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR91_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR91_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR91_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR92_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR92_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR92_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR92_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR93_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR93_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR93_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR93_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR94_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR94_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR94_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR94_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR95_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR95_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR95_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR95_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR96_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR96_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR96_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR96_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR97_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR97_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR97_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR97_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR98_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR98_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR98_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR98_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR99_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR99_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR99_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR99_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR100_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR100_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR100_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR100_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR101_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR101_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR101_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR101_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR102_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR102_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR102_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR102_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR103_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR103_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR103_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR103_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR104_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR104_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR104_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR104_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR105_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR105_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR105_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR105_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR106_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR106_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR106_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR106_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR107_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR107_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR107_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR107_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR108_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR108_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR108_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR108_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR109_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR109_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR109_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR109_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR110_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR110_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR110_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR110_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR111_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR111_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR111_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR111_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR112_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR112_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR112_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR112_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR113_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR113_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR113_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR113_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR114_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR114_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR114_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR114_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR115_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR115_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR115_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR115_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR116_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR116_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR116_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR116_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR117_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR117_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR117_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR117_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR118_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR118_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR118_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR118_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR119_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR119_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR119_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR119_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR120_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR120_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR120_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR120_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR121_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR121_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR121_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR121_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR122_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR122_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR122_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR122_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR123_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR123_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR123_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR123_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR124_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR124_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR124_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR124_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR125_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR125_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR125_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR125_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR126_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR126_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR126_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR126_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR127_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR127_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR127_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR127_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR128_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR128_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR128_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR128_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR129_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR129_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR129_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR129_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR130_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR130_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR130_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR130_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR131_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR131_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR131_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR131_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR132_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR132_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR132_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR132_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR133_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR133_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR133_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR133_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR134_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR134_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR134_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR134_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR135_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR135_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR135_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR135_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR136_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR136_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR136_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR136_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR137_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR137_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR137_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR137_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR138_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR138_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR138_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR138_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR139_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR139_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR139_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR139_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR140_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR140_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR140_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR140_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR141_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR141_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR141_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR141_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR142_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR142_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR142_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR142_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR143_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR143_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR143_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR143_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR144_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR144_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR144_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR144_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR145_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR145_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR145_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR145_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR146_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR146_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR146_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR146_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR147_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR147_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR147_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR147_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR148_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR148_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR148_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR148_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR149_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR149_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR149_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR149_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR150_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR150_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR150_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR150_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR151_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR151_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR151_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR151_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR152_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR152_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR152_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR152_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR153_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR153_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR153_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR153_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR154_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR154_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR154_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR154_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR155_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR155_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR155_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR155_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR156_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR156_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR156_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR156_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR157_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR157_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR157_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR157_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR158_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR158_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR158_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR158_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR159_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR159_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR159_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR159_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR160_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR160_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR160_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR160_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR161_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR161_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR161_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR161_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR162_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR162_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR162_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR162_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR163_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR163_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR163_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR163_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR164_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR164_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR164_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR164_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR165_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR165_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR165_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR165_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR166_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR166_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR166_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR166_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR167_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR167_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR167_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR167_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR168_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR168_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR168_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR168_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR169_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR169_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR169_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR169_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR170_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR170_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR170_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR170_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR171_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR171_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR171_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR171_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR172_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR172_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR172_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR172_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR173_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR173_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR173_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR173_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR174_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR174_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR174_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR174_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR175_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR175_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR175_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR175_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR176_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR176_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR176_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR176_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR177_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR177_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR177_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR177_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR178_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR178_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR178_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR178_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR179_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR179_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR179_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR179_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR180_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR180_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR180_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR180_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR181_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR181_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR181_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR181_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR182_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR182_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR182_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR182_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR183_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR183_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR183_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR183_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR184_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR184_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR184_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR184_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR185_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR185_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR185_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR185_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR186_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR186_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR186_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR186_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR187_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR187_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR187_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR187_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR188_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR188_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR188_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR188_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR189_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR189_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR189_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR189_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR190_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR190_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR190_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR190_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR191_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR191_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR191_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR191_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR192_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR192_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR192_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR192_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR193_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR193_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR193_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR193_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR194_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR194_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR194_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR194_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR195_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR195_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR195_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR195_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR196_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR196_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR196_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR196_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR197_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR197_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR197_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR197_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR198_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR198_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR198_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR198_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR199_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR199_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR199_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR199_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR200_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR200_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR200_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR200_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR201_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR201_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR201_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR201_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR202_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR202_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR202_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR202_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR203_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR203_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR203_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR203_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR204_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR204_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR204_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR204_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR205_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR205_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR205_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR205_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR206_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR206_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR206_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR206_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR207_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR207_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR207_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR207_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR208_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR208_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR208_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR208_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR209_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR209_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR209_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR209_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR210_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR210_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR210_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR210_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR211_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR211_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR211_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR211_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR212_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR212_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR212_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR212_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR213_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR213_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR213_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR213_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR214_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR214_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR214_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR214_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR215_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR215_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR215_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR215_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR216_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR216_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR216_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR216_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR217_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR217_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR217_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR217_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR218_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR218_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR218_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR218_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR219_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR219_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR219_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR219_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR220_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR220_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR220_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR220_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR221_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR221_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR221_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR221_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR222_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR222_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR222_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR222_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR223_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR223_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR223_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR223_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR224_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR224_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR224_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR224_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR225_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR225_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR225_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR225_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR226_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR226_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR226_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR226_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR227_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR227_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR227_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR227_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR228_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR228_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR228_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR228_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR229_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR229_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR229_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR229_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR230_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR230_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR230_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR230_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR231_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR231_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR231_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR231_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR232_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR232_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR232_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR232_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR233_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR233_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR233_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR233_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR234_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR234_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR234_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR234_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR235_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR235_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR235_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR235_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR236_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR236_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR236_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR236_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR237_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR237_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR237_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR237_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR238_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR238_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR238_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR238_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR239_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR239_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR239_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR239_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR240_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR240_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR240_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR240_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR241_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR241_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR241_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR241_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR242_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR242_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR242_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR242_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR243_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR243_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR243_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR243_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR244_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR244_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR244_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR244_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR245_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR245_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR245_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR245_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR246_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR246_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR246_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR246_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR247_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR247_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR247_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR247_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR248_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR248_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR248_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR248_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR249_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR249_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR249_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR249_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR250_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR250_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR250_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR250_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR251_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR251_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR251_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR251_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR252_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR252_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR252_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR252_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR253_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR253_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR253_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR253_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR254_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR254_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR254_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR254_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_IPRIOR255_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc read*(reg: static PFIC_IPRIOR255_Type): uint8 {.inline.} =
  volatileLoad(cast[ptr uint8](reg.loc))

proc write*(reg: PFIC_IPRIOR255_Type, val: uint8) {.inline.} =
  volatileStore(cast[ptr uint8](reg.loc), val)

template modifyIt*(reg: PFIC_IPRIOR255_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_SCTLR_Type): PFIC_SCTLR_Fields {.inline.} =
  volatileLoad(cast[ptr PFIC_SCTLR_Fields](reg.loc))

proc read*(reg: static PFIC_SCTLR_Type): PFIC_SCTLR_Fields {.inline.} =
  volatileLoad(cast[ptr PFIC_SCTLR_Fields](reg.loc))

proc write*(reg: PFIC_SCTLR_Type, val: PFIC_SCTLR_Fields) {.inline.} =
  volatileStore(cast[ptr PFIC_SCTLR_Fields](reg.loc), val)

proc write*(reg: PFIC_SCTLR_Type, SLEEPONEXIT: bool = false, SLEEPDEEP: bool = false, WFITOWFE: bool = false, SEVONPEND: bool = false, SETEVENT: bool = false, SYSRESET: bool = false) =
  var x: uint32
  x.setMask((SLEEPONEXIT.uint32 shl 1).masked(1 .. 1))
  x.setMask((SLEEPDEEP.uint32 shl 2).masked(2 .. 2))
  x.setMask((WFITOWFE.uint32 shl 3).masked(3 .. 3))
  x.setMask((SEVONPEND.uint32 shl 4).masked(4 .. 4))
  x.setMask((SETEVENT.uint32 shl 5).masked(5 .. 5))
  x.setMask((SYSRESET.uint32 shl 31).masked(31 .. 31))
  reg.write x.PFIC_SCTLR_Fields

template modifyIt*(reg: PFIC_SCTLR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_STK_CTLR_Type): PFIC_STK_CTLR_Fields {.inline.} =
  volatileLoad(cast[ptr PFIC_STK_CTLR_Fields](reg.loc))

proc read*(reg: static PFIC_STK_CTLR_Type): PFIC_STK_CTLR_Fields {.inline.} =
  volatileLoad(cast[ptr PFIC_STK_CTLR_Fields](reg.loc))

proc write*(reg: PFIC_STK_CTLR_Type, val: PFIC_STK_CTLR_Fields) {.inline.} =
  volatileStore(cast[ptr PFIC_STK_CTLR_Fields](reg.loc), val)

proc write*(reg: PFIC_STK_CTLR_Type, STE: bool = false, STIE: bool = false, STCLK: bool = false, STRE: bool = false, MODE: bool = false, INIT: bool = false, SWIE: bool = false) =
  var x: uint32
  x.setMask((STE.uint32 shl 0).masked(0 .. 0))
  x.setMask((STIE.uint32 shl 1).masked(1 .. 1))
  x.setMask((STCLK.uint32 shl 2).masked(2 .. 2))
  x.setMask((STRE.uint32 shl 3).masked(3 .. 3))
  x.setMask((MODE.uint32 shl 4).masked(4 .. 4))
  x.setMask((INIT.uint32 shl 5).masked(5 .. 5))
  x.setMask((SWIE.uint32 shl 31).masked(31 .. 31))
  reg.write x.PFIC_STK_CTLR_Fields

template modifyIt*(reg: PFIC_STK_CTLR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_STK_SR_Type): PFIC_STK_SR_Fields {.inline.} =
  volatileLoad(cast[ptr PFIC_STK_SR_Fields](reg.loc))

proc read*(reg: static PFIC_STK_SR_Type): PFIC_STK_SR_Fields {.inline.} =
  volatileLoad(cast[ptr PFIC_STK_SR_Fields](reg.loc))

proc write*(reg: PFIC_STK_SR_Type, val: PFIC_STK_SR_Fields) {.inline.} =
  volatileStore(cast[ptr PFIC_STK_SR_Fields](reg.loc), val)

proc write*(reg: PFIC_STK_SR_Type, CNTIF: bool = false) =
  var x: uint32
  x.setMask((CNTIF.uint32 shl 0).masked(0 .. 0))
  reg.write x.PFIC_STK_SR_Fields

template modifyIt*(reg: PFIC_STK_SR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_STK_CNTL_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static PFIC_STK_CNTL_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: PFIC_STK_CNTL_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: PFIC_STK_CNTL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_STK_CNTH_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static PFIC_STK_CNTH_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: PFIC_STK_CNTH_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: PFIC_STK_CNTH_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_STK_CMPLR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static PFIC_STK_CMPLR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: PFIC_STK_CMPLR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: PFIC_STK_CMPLR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PFIC_STK_CMPHR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: static PFIC_STK_CMPHR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: PFIC_STK_CMPHR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: PFIC_STK_CMPHR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func INTENSTA2_3*(r: PFIC_ISR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

func INTENSTA12_31*(r: PFIC_ISR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 31)

func INTENSTA*(r: PFIC_ISR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

func PENDSTA2_3*(r: PFIC_IPR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

func PENDSTA12_31*(r: PFIC_IPR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 31)

func PENDSTA*(r: PFIC_IPR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

func THRESHOLD*(r: PFIC_ITHRESDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `THRESHOLD=`*(r: var PFIC_ITHRESDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.PFIC_ITHRESDR_Fields

proc `RESETSYS=`*(r: var PFIC_CFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.PFIC_CFGR_Fields

proc `KEYCODE=`*(r: var PFIC_CFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.PFIC_CFGR_Fields

func NESTSTA*(r: PFIC_GISR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

func GACTSTA*(r: PFIC_GISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

func GPENDSTA*(r: PFIC_GISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

func VTFID0*(r: PFIC_VTFIDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `VTFID0=`*(r: var PFIC_VTFIDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.PFIC_VTFIDR_Fields

func VTFID1*(r: PFIC_VTFIDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `VTFID1=`*(r: var PFIC_VTFIDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.PFIC_VTFIDR_Fields

func VTFID2*(r: PFIC_VTFIDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

proc `VTFID2=`*(r: var PFIC_VTFIDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 23)
  tmp.setMask((val shl 16).masked(16 .. 23))
  r = tmp.PFIC_VTFIDR_Fields

func VTFID3*(r: PFIC_VTFIDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

proc `VTFID3=`*(r: var PFIC_VTFIDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 31)
  tmp.setMask((val shl 24).masked(24 .. 31))
  r = tmp.PFIC_VTFIDR_Fields

func VTF0EN*(r: PFIC_VTFADDRR0_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `VTF0EN=`*(r: var PFIC_VTFADDRR0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.PFIC_VTFADDRR0_Fields

func ADDR0*(r: PFIC_VTFADDRR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(1 .. 31)

proc `ADDR0=`*(r: var PFIC_VTFADDRR0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 31)
  tmp.setMask((val shl 1).masked(1 .. 31))
  r = tmp.PFIC_VTFADDRR0_Fields

func VTF1EN*(r: PFIC_VTFADDRR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `VTF1EN=`*(r: var PFIC_VTFADDRR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.PFIC_VTFADDRR1_Fields

func ADDR1*(r: PFIC_VTFADDRR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(1 .. 31)

proc `ADDR1=`*(r: var PFIC_VTFADDRR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 31)
  tmp.setMask((val shl 1).masked(1 .. 31))
  r = tmp.PFIC_VTFADDRR1_Fields

func VTF2EN*(r: PFIC_VTFADDRR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `VTF2EN=`*(r: var PFIC_VTFADDRR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.PFIC_VTFADDRR2_Fields

func ADDR2*(r: PFIC_VTFADDRR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(1 .. 31)

proc `ADDR2=`*(r: var PFIC_VTFADDRR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 31)
  tmp.setMask((val shl 1).masked(1 .. 31))
  r = tmp.PFIC_VTFADDRR2_Fields

func VTF3EN*(r: PFIC_VTFADDRR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `VTF3EN=`*(r: var PFIC_VTFADDRR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.PFIC_VTFADDRR3_Fields

func ADDR3*(r: PFIC_VTFADDRR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(1 .. 31)

proc `ADDR3=`*(r: var PFIC_VTFADDRR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 31)
  tmp.setMask((val shl 1).masked(1 .. 31))
  r = tmp.PFIC_VTFADDRR3_Fields

proc `INTEN=`*(r: var PFIC_IENR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 31)
  tmp.setMask((val shl 12).masked(12 .. 31))
  r = tmp.PFIC_IENR1_Fields

proc `INTEN=`*(r: var PFIC_IENR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.PFIC_IENR4_Fields

proc `INTRSET=`*(r: var PFIC_IRER1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 31)
  tmp.setMask((val shl 12).masked(12 .. 31))
  r = tmp.PFIC_IRER1_Fields

proc `INTRSET=`*(r: var PFIC_IRER4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.PFIC_IRER4_Fields

proc `PENDSET2_3=`*(r: var PFIC_IPSR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.PFIC_IPSR1_Fields

proc `PENDSET12_31=`*(r: var PFIC_IPSR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 31)
  tmp.setMask((val shl 12).masked(12 .. 31))
  r = tmp.PFIC_IPSR1_Fields

proc `PENDSET=`*(r: var PFIC_IPSR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.PFIC_IPSR4_Fields

proc `PENDRESET2_3=`*(r: var PFIC_IPRR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.PFIC_IPRR1_Fields

proc `PENDRESET12_31=`*(r: var PFIC_IPRR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 31)
  tmp.setMask((val shl 12).masked(12 .. 31))
  r = tmp.PFIC_IPRR1_Fields

proc `PENDRESET=`*(r: var PFIC_IPRR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.PFIC_IPRR4_Fields

proc `IACTS2_3=`*(r: var PFIC_IACTR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.PFIC_IACTR1_Fields

proc `IACTS12_31=`*(r: var PFIC_IACTR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 31)
  tmp.setMask((val shl 12).masked(12 .. 31))
  r = tmp.PFIC_IACTR1_Fields

proc `IACTS=`*(r: var PFIC_IACTR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.PFIC_IACTR4_Fields

func SLEEPONEXIT*(r: PFIC_SCTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `SLEEPONEXIT=`*(r: var PFIC_SCTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.PFIC_SCTLR_Fields

func SLEEPDEEP*(r: PFIC_SCTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `SLEEPDEEP=`*(r: var PFIC_SCTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.PFIC_SCTLR_Fields

func WFITOWFE*(r: PFIC_SCTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `WFITOWFE=`*(r: var PFIC_SCTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.PFIC_SCTLR_Fields

func SEVONPEND*(r: PFIC_SCTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `SEVONPEND=`*(r: var PFIC_SCTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.PFIC_SCTLR_Fields

func SETEVENT*(r: PFIC_SCTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `SETEVENT=`*(r: var PFIC_SCTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.PFIC_SCTLR_Fields

func SYSRESET*(r: PFIC_SCTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `SYSRESET=`*(r: var PFIC_SCTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.PFIC_SCTLR_Fields

func STE*(r: PFIC_STK_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `STE=`*(r: var PFIC_STK_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.PFIC_STK_CTLR_Fields

func STIE*(r: PFIC_STK_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `STIE=`*(r: var PFIC_STK_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.PFIC_STK_CTLR_Fields

func STCLK*(r: PFIC_STK_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `STCLK=`*(r: var PFIC_STK_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.PFIC_STK_CTLR_Fields

func STRE*(r: PFIC_STK_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STRE=`*(r: var PFIC_STK_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.PFIC_STK_CTLR_Fields

func MODE*(r: PFIC_STK_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `MODE=`*(r: var PFIC_STK_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.PFIC_STK_CTLR_Fields

func INIT*(r: PFIC_STK_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `INIT=`*(r: var PFIC_STK_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.PFIC_STK_CTLR_Fields

func SWIE*(r: PFIC_STK_CTLR_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `SWIE=`*(r: var PFIC_STK_CTLR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.PFIC_STK_CTLR_Fields

func CNTIF*(r: PFIC_STK_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CNTIF=`*(r: var PFIC_STK_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.PFIC_STK_SR_Fields

